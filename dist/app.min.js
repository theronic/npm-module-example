/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var x = __webpack_require__(2);

	console.log(x.hello("JS"));

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(5);
	__webpack_require__(6);
	__webpack_require__(17);
	var cljs=CLJS_ENV.cljs;
	var shadow=CLJS_ENV.shadow;
	var goog=CLJS_ENV.goog;
	var demo=CLJS_ENV.demo || (CLJS_ENV.demo = {});
	goog.provide('demo.foo');
	goog.require('cljs.core');
	goog.require('cljs.core.constants');
	demo.foo.x = __webpack_require__(18);
	demo.foo.react = __webpack_require__(19);
	demo.foo.hello = (function demo$foo$hello(who){
	var G__4855_4859 = "hello from CLJS!";
	var G__4856_4860 = demo.foo.x;
	var G__4857_4861 = demo.foo.react.createElement("h1",null,"hello world");
	var G__4858_4862 = cljs.core.cst$kw$foo;
	console.log(G__4855_4859,G__4856_4860,G__4857_4861,G__4858_4862);

	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("Hello, "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(who),cljs.core.str.cljs$core$IFn$_invoke$arity$1("!")].join('');
	});

	module.exports = demo.foo;

	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVtby5mb28uanMiLCJzb3VyY2VzIjpbImRlbW9cL2Zvby5jbGpzIl0sImxpbmVDb3VudCI6MTQsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7O0FBR0EsQUFBS0EsYUFBRSxBQUFBQyxRQUFBO0FBRVAsQUFBS0MsaUJBQU0sQUFBQUQsUUFBQTtBQUVYLGlCQUFBLGpCQUFNRSwwQ0FBT0M7QUFBYixBQUNFLElBQUFDLGVBQUE7SUFBQUMsZUFBbUNOO0lBQW5DTyxlQUFxQyw2QkFBQSxLQUFBLEtBQUEsdkNBQUlMO0lBQXpDTSxlQUFBO0FBQUEsQUFBQSxZQUFBSCxhQUFBQyxhQUFBQyxhQUFBQyxuREFBQ0M7O0FBQ0Qsb0RBQUEsd0dBQUEsakRBQWVMIiwibmFtZXMiOlsiZGVtby5mb29cL3giLCJqc1wvcmVxdWlyZSIsImRlbW8uZm9vXC9yZWFjdCIsImRlbW8uZm9vXC9oZWxsbyIsIndobyIsIkdfXzQ4NTUiLCJHX180ODU2IiwiR19fNDg1NyIsIkdfXzQ4NTgiLCJqc1wvY29uc29sZS5sb2ciXSwic291cmNlc0NvbnRlbnQiOlsiKG5zIGRlbW8uZm9vXG4gICg6cmVxdWlyZSBbc2hhZG93Lm5wbSA6YXMgbnBtXSkpXG5cbihkZWYgeCAobnBtXC9yZXF1aXJlLWZpbGUgXCJsaWJcL2JhclwiKSlcblxuKGRlZiByZWFjdCAobnBtXC9yZXF1aXJlIFwicmVhY3RcIikpXG5cbihkZWZuIGhlbGxvIFt3aG9dXG4gIChqc1wvY29uc29sZS5sb2cgXCJoZWxsbyBmcm9tIENMSlMhXCIgeCAoLi4gcmVhY3QgKGNyZWF0ZUVsZW1lbnQgXCJoMVwiIG5pbCBcImhlbGxvIHdvcmxkXCIpKSA6Zm9vKVxuICAoc3RyIFwiSGVsbG8sIFwiIHdobyBcIiFcIikpXG4iXX0=


/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {var CLJS_ENV = {};
	var CLJS_GLOBAL = process.browser ? window : global;
	CLJS_GLOBAL.CLOSURE_DEFINES = {"goog.DEBUG":true,"goog.LOCALE":"en","goog.TRANSPILE":"never"};
	CLJS_GLOBAL.CLOSURE_NO_DEPS = true;
	var goog = CLJS_ENV.goog = {};
	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Bootstrap for the Google JS Library (Closure).
	 *
	 * In uncompiled mode base.js will write out Closure's deps file, unless the
	 * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to
	 * include their own deps file(s) from different locations.
	 *
	 * @author arv@google.com (Erik Arvidsson)
	 *
	 * @provideGoog
	 */


	/**
	 * @define {boolean} Overridden to true by the compiler when
	 *     --process_closure_primitives is specified.
	 */
	var COMPILED = false;


	/**
	 * Base namespace for the Closure library.  Checks to see goog is already
	 * defined in the current scope before assigning to prevent clobbering if
	 * base.js is loaded more than once.
	 *
	 * @const
	 */
	var goog = goog || {};


	/**
	 * Reference to the global context.  In most cases this will be 'window'.
	 */
	goog.global = this;


	/**
	 * A hook for overriding the define values in uncompiled mode.
	 *
	 * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before
	 * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},
	 * {@code goog.define} will use the value instead of the default value.  This
	 * allows flags to be overwritten without compilation (this is normally
	 * accomplished with the compiler's "define" flag).
	 *
	 * Example:
	 * <pre>
	 *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};
	 * </pre>
	 *
	 * @type {Object<string, (string|number|boolean)>|undefined}
	 */
	goog.global.CLOSURE_UNCOMPILED_DEFINES;


	/**
	 * A hook for overriding the define values in uncompiled or compiled mode,
	 * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In
	 * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.
	 *
	 * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or
	 * string literals or the compiler will emit an error.
	 *
	 * While any @define value may be set, only those set with goog.define will be
	 * effective for uncompiled code.
	 *
	 * Example:
	 * <pre>
	 *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;
	 * </pre>
	 *
	 * @type {Object<string, (string|number|boolean)>|undefined}
	 */
	goog.global.CLOSURE_DEFINES;


	/**
	 * Returns true if the specified value is not undefined.
	 * WARNING: Do not use this to test if an object has a property. Use the in
	 * operator instead.
	 *
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is defined.
	 */
	goog.isDef = function(val) {
	  // void 0 always evaluates to undefined and hence we do not need to depend on
	  // the definition of the global variable named 'undefined'.
	  return val !== void 0;
	};


	/**
	 * Builds an object structure for the provided namespace path, ensuring that
	 * names that already exist are not overwritten. For example:
	 * "a.b.c" -> a = {};a.b={};a.b.c={};
	 * Used by goog.provide and goog.exportSymbol.
	 * @param {string} name name of the object that this file defines.
	 * @param {*=} opt_object the object to expose at the end of the path.
	 * @param {Object=} opt_objectToExportTo The object to add the path to; default
	 *     is |goog.global|.
	 * @private
	 */
	goog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {
	  var parts = name.split('.');
	  var cur = opt_objectToExportTo || goog.global;

	  // Internet Explorer exhibits strange behavior when throwing errors from
	  // methods externed in this manner.  See the testExportSymbolExceptions in
	  // base_test.html for an example.
	  if (!(parts[0] in cur) && cur.execScript) {
	    cur.execScript('var ' + parts[0]);
	  }

	  // Certain browsers cannot parse code in the form for((a in b); c;);
	  // This pattern is produced by the JSCompiler when it collapses the
	  // statement above into the conditional loop below. To prevent this from
	  // happening, use a for-loop and reserve the init logic as below.

	  // Parentheses added to eliminate strict JS warning in Firefox.
	  for (var part; parts.length && (part = parts.shift());) {
	    if (!parts.length && goog.isDef(opt_object)) {
	      // last part and we have an object; use it
	      cur[part] = opt_object;
	    } else if (cur[part]) {
	      cur = cur[part];
	    } else {
	      cur = cur[part] = {};
	    }
	  }
	};


	/**
	 * Defines a named value. In uncompiled mode, the value is retrieved from
	 * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and
	 * has the property specified, and otherwise used the defined defaultValue.
	 * When compiled the default can be overridden using the compiler
	 * options or the value set in the CLOSURE_DEFINES object.
	 *
	 * @param {string} name The distinguished name to provide.
	 * @param {string|number|boolean} defaultValue
	 */
	goog.define = function(name, defaultValue) {
	  var value = defaultValue;
	  if (!COMPILED) {
	    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&
	        Object.prototype.hasOwnProperty.call(
	            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {
	      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];
	    } else if (
	        goog.global.CLOSURE_DEFINES &&
	        Object.prototype.hasOwnProperty.call(
	            goog.global.CLOSURE_DEFINES, name)) {
	      value = goog.global.CLOSURE_DEFINES[name];
	    }
	  }
	  goog.exportPath_(name, value);
	};


	/**
	 * @define {boolean} DEBUG is provided as a convenience so that debugging code
	 * that should not be included in a production js_binary can be easily stripped
	 * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most
	 * toString() methods should be declared inside an "if (goog.DEBUG)" conditional
	 * because they are generally used for debugging purposes and it is difficult
	 * for the JSCompiler to statically determine whether they are used.
	 */
	goog.define('goog.DEBUG', true);


	/**
	 * @define {string} LOCALE defines the locale being used for compilation. It is
	 * used to select locale specific data to be compiled in js binary. BUILD rule
	 * can specify this value by "--define goog.LOCALE=<locale_name>" as JSCompiler
	 * option.
	 *
	 * Take into account that the locale code format is important. You should use
	 * the canonical Unicode format with hyphen as a delimiter. Language must be
	 * lowercase, Language Script - Capitalized, Region - UPPERCASE.
	 * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.
	 *
	 * See more info about locale codes here:
	 * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers
	 *
	 * For language codes you should use values defined by ISO 693-1. See it here
	 * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from
	 * this rule: the Hebrew language. For legacy reasons the old code (iw) should
	 * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.
	 */
	goog.define('goog.LOCALE', 'en');  // default to en


	/**
	 * @define {boolean} Whether this code is running on trusted sites.
	 *
	 * On untrusted sites, several native functions can be defined or overridden by
	 * external libraries like Prototype, Datejs, and JQuery and setting this flag
	 * to false forces closure to use its own implementations when possible.
	 *
	 * If your JavaScript can be loaded by a third party site and you are wary about
	 * relying on non-standard implementations, specify
	 * "--define goog.TRUSTED_SITE=false" to the JSCompiler.
	 */
	goog.define('goog.TRUSTED_SITE', true);


	/**
	 * @define {boolean} Whether a project is expected to be running in strict mode.
	 *
	 * This define can be used to trigger alternate implementations compatible with
	 * running in EcmaScript Strict mode or warn about unavailable functionality.
	 * @see https://goo.gl/PudQ4y
	 *
	 */
	goog.define('goog.STRICT_MODE_COMPATIBLE', false);


	/**
	 * @define {boolean} Whether code that calls {@link goog.setTestOnly} should
	 *     be disallowed in the compilation unit.
	 */
	goog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);


	/**
	 * @define {boolean} Whether to use a Chrome app CSP-compliant method for
	 *     loading scripts via goog.require. @see appendScriptSrcNode_.
	 */
	goog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);


	/**
	 * Defines a namespace in Closure.
	 *
	 * A namespace may only be defined once in a codebase. It may be defined using
	 * goog.provide() or goog.module().
	 *
	 * The presence of one or more goog.provide() calls in a file indicates
	 * that the file defines the given objects/namespaces.
	 * Provided symbols must not be null or undefined.
	 *
	 * In addition, goog.provide() creates the object stubs for a namespace
	 * (for example, goog.provide("goog.foo.bar") will create the object
	 * goog.foo.bar if it does not already exist).
	 *
	 * Build tools also scan for provide/require/module statements
	 * to discern dependencies, build dependency files (see deps.js), etc.
	 *
	 * @see goog.require
	 * @see goog.module
	 * @param {string} name Namespace provided by this file in the form
	 *     "goog.package.part".
	 */
	goog.provide = function(name) {
	  if (goog.isInModuleLoader_()) {
	    throw Error('goog.provide can not be used within a goog.module.');
	  }
	  if (!COMPILED) {
	    // Ensure that the same namespace isn't provided twice.
	    // A goog.module/goog.provide maps a goog.require to a specific file
	    if (goog.isProvided_(name)) {
	      throw Error('Namespace "' + name + '" already declared.');
	    }
	  }

	  goog.constructNamespace_(name);
	};


	/**
	 * @param {string} name Namespace provided by this file in the form
	 *     "goog.package.part".
	 * @param {Object=} opt_obj The object to embed in the namespace.
	 * @private
	 */
	goog.constructNamespace_ = function(name, opt_obj) {
	  if (!COMPILED) {
	    delete goog.implicitNamespaces_[name];

	    var namespace = name;
	    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {
	      if (goog.getObjectByName(namespace)) {
	        break;
	      }
	      goog.implicitNamespaces_[namespace] = true;
	    }
	  }

	  goog.exportPath_(name, opt_obj);
	};


	/**
	 * Module identifier validation regexp.
	 * Note: This is a conservative check, it is very possible to be more lenient,
	 *   the primary exclusion here is "/" and "\" and a leading ".", these
	 *   restrictions are intended to leave the door open for using goog.require
	 *   with relative file paths rather than module identifiers.
	 * @private
	 */
	goog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;


	/**
	 * Defines a module in Closure.
	 *
	 * Marks that this file must be loaded as a module and claims the namespace.
	 *
	 * A namespace may only be defined once in a codebase. It may be defined using
	 * goog.provide() or goog.module().
	 *
	 * goog.module() has three requirements:
	 * - goog.module may not be used in the same file as goog.provide.
	 * - goog.module must be the first statement in the file.
	 * - only one goog.module is allowed per file.
	 *
	 * When a goog.module annotated file is loaded, it is enclosed in
	 * a strict function closure. This means that:
	 * - any variables declared in a goog.module file are private to the file
	 * (not global), though the compiler is expected to inline the module.
	 * - The code must obey all the rules of "strict" JavaScript.
	 * - the file will be marked as "use strict"
	 *
	 * NOTE: unlike goog.provide, goog.module does not declare any symbols by
	 * itself. If declared symbols are desired, use
	 * goog.module.declareLegacyNamespace().
	 *
	 *
	 * See the public goog.module proposal: http://goo.gl/Va1hin
	 *
	 * @param {string} name Namespace provided by this file in the form
	 *     "goog.package.part", is expected but not required.
	 */
	goog.module = function(name) {
	  if (!goog.isString(name) || !name ||
	      name.search(goog.VALID_MODULE_RE_) == -1) {
	    throw Error('Invalid module identifier');
	  }
	  if (!goog.isInModuleLoader_()) {
	    throw Error('Module ' + name + ' has been loaded incorrectly.');
	  }
	  if (goog.moduleLoaderState_.moduleName) {
	    throw Error('goog.module may only be called once per module.');
	  }

	  // Store the module name for the loader.
	  goog.moduleLoaderState_.moduleName = name;
	  if (!COMPILED) {
	    // Ensure that the same namespace isn't provided twice.
	    // A goog.module/goog.provide maps a goog.require to a specific file
	    if (goog.isProvided_(name)) {
	      throw Error('Namespace "' + name + '" already declared.');
	    }
	    delete goog.implicitNamespaces_[name];
	  }
	};


	/**
	 * @param {string} name The module identifier.
	 * @return {?} The module exports for an already loaded module or null.
	 *
	 * Note: This is not an alternative to goog.require, it does not
	 * indicate a hard dependency, instead it is used to indicate
	 * an optional dependency or to access the exports of a module
	 * that has already been loaded.
	 * @suppress {missingProvide}
	 */
	goog.module.get = function(name) {
	  return goog.module.getInternal_(name);
	};


	/**
	 * @param {string} name The module identifier.
	 * @return {?} The module exports for an already loaded module or null.
	 * @private
	 */
	goog.module.getInternal_ = function(name) {
	  if (!COMPILED) {
	    if (goog.isProvided_(name)) {
	      // goog.require only return a value with-in goog.module files.
	      return name in goog.loadedModules_ ? goog.loadedModules_[name] :
	                                           goog.getObjectByName(name);
	    } else {
	      return null;
	    }
	  }
	};


	/**
	 * @private {?{moduleName: (string|undefined), declareLegacyNamespace:boolean}}
	 */
	goog.moduleLoaderState_ = null;


	/**
	 * @private
	 * @return {boolean} Whether a goog.module is currently being initialized.
	 */
	goog.isInModuleLoader_ = function() {
	  return goog.moduleLoaderState_ != null;
	};


	/**
	 * Provide the module's exports as a globally accessible object under the
	 * module's declared name.  This is intended to ease migration to goog.module
	 * for files that have existing usages.
	 * @suppress {missingProvide}
	 */
	goog.module.declareLegacyNamespace = function() {
	  if (!COMPILED && !goog.isInModuleLoader_()) {
	    throw new Error(
	        'goog.module.declareLegacyNamespace must be called from ' +
	        'within a goog.module');
	  }
	  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {
	    throw Error(
	        'goog.module must be called prior to ' +
	        'goog.module.declareLegacyNamespace.');
	  }
	  goog.moduleLoaderState_.declareLegacyNamespace = true;
	};


	/**
	 * Marks that the current file should only be used for testing, and never for
	 * live code in production.
	 *
	 * In the case of unit tests, the message may optionally be an exact namespace
	 * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra
	 * provide (if not explicitly defined in the code).
	 *
	 * @param {string=} opt_message Optional message to add to the error that's
	 *     raised when used in production code.
	 */
	goog.setTestOnly = function(opt_message) {
	  if (goog.DISALLOW_TEST_ONLY_CODE) {
	    opt_message = opt_message || '';
	    throw Error(
	        'Importing test-only code into non-debug environment' +
	        (opt_message ? ': ' + opt_message : '.'));
	  }
	};


	/**
	 * Forward declares a symbol. This is an indication to the compiler that the
	 * symbol may be used in the source yet is not required and may not be provided
	 * in compilation.
	 *
	 * The most common usage of forward declaration is code that takes a type as a
	 * function parameter but does not need to require it. By forward declaring
	 * instead of requiring, no hard dependency is made, and (if not required
	 * elsewhere) the namespace may never be required and thus, not be pulled
	 * into the JavaScript binary. If it is required elsewhere, it will be type
	 * checked as normal.
	 *
	 *
	 * @param {string} name The namespace to forward declare in the form of
	 *     "goog.package.part".
	 */
	goog.forwardDeclare = function(name) {};


	/**
	 * Forward declare type information. Used to assign types to goog.global
	 * referenced object that would otherwise result in unknown type references
	 * and thus block property disambiguation.
	 */
	goog.forwardDeclare('Document');
	goog.forwardDeclare('HTMLScriptElement');
	goog.forwardDeclare('XMLHttpRequest');


	if (!COMPILED) {
	  /**
	   * Check if the given name has been goog.provided. This will return false for
	   * names that are available only as implicit namespaces.
	   * @param {string} name name of the object to look for.
	   * @return {boolean} Whether the name has been provided.
	   * @private
	   */
	  goog.isProvided_ = function(name) {
	    return (name in goog.loadedModules_) ||
	        (!goog.implicitNamespaces_[name] &&
	         goog.isDefAndNotNull(goog.getObjectByName(name)));
	  };

	  /**
	   * Namespaces implicitly defined by goog.provide. For example,
	   * goog.provide('goog.events.Event') implicitly declares that 'goog' and
	   * 'goog.events' must be namespaces.
	   *
	   * @type {!Object<string, (boolean|undefined)>}
	   * @private
	   */
	  goog.implicitNamespaces_ = {'goog.module': true};

	  // NOTE: We add goog.module as an implicit namespace as goog.module is defined
	  // here and because the existing module package has not been moved yet out of
	  // the goog.module namespace. This satisifies both the debug loader and
	  // ahead-of-time dependency management.
	}


	/**
	 * Returns an object based on its fully qualified external name.  The object
	 * is not found if null or undefined.  If you are using a compilation pass that
	 * renames property names beware that using this function will not find renamed
	 * properties.
	 *
	 * @param {string} name The fully qualified name.
	 * @param {Object=} opt_obj The object within which to look; default is
	 *     |goog.global|.
	 * @return {?} The value (object or primitive) or, if not found, null.
	 */
	goog.getObjectByName = function(name, opt_obj) {
	  var parts = name.split('.');
	  var cur = opt_obj || goog.global;
	  for (var part; part = parts.shift();) {
	    if (goog.isDefAndNotNull(cur[part])) {
	      cur = cur[part];
	    } else {
	      return null;
	    }
	  }
	  return cur;
	};


	/**
	 * Globalizes a whole namespace, such as goog or goog.lang.
	 *
	 * @param {!Object} obj The namespace to globalize.
	 * @param {Object=} opt_global The object to add the properties to.
	 * @deprecated Properties may be explicitly exported to the global scope, but
	 *     this should no longer be done in bulk.
	 */
	goog.globalize = function(obj, opt_global) {
	  var global = opt_global || goog.global;
	  for (var x in obj) {
	    global[x] = obj[x];
	  }
	};


	/**
	 * Adds a dependency from a file to the files it requires.
	 * @param {string} relPath The path to the js file.
	 * @param {!Array<string>} provides An array of strings with
	 *     the names of the objects this file provides.
	 * @param {!Array<string>} requires An array of strings with
	 *     the names of the objects this file requires.
	 * @param {boolean|!Object<string>=} opt_loadFlags Parameters indicating
	 *     how the file must be loaded.  The boolean 'true' is equivalent
	 *     to {'module': 'goog'} for backwards-compatibility.  Valid properties
	 *     and values include {'module': 'goog'} and {'lang': 'es6'}.
	 */
	goog.addDependency = function(relPath, provides, requires, opt_loadFlags) {
	  if (goog.DEPENDENCIES_ENABLED) {
	    var provide, require;
	    var path = relPath.replace(/\\/g, '/');
	    var deps = goog.dependencies_;
	    if (!opt_loadFlags || typeof opt_loadFlags === 'boolean') {
	      opt_loadFlags = opt_loadFlags ? {'module': 'goog'} : {};
	    }
	    for (var i = 0; provide = provides[i]; i++) {
	      deps.nameToPath[provide] = path;
	      deps.loadFlags[path] = opt_loadFlags;
	    }
	    for (var j = 0; require = requires[j]; j++) {
	      if (!(path in deps.requires)) {
	        deps.requires[path] = {};
	      }
	      deps.requires[path][require] = true;
	    }
	  }
	};




	// NOTE(nnaze): The debug DOM loader was included in base.js as an original way
	// to do "debug-mode" development.  The dependency system can sometimes be
	// confusing, as can the debug DOM loader's asynchronous nature.
	//
	// With the DOM loader, a call to goog.require() is not blocking -- the script
	// will not load until some point after the current script.  If a namespace is
	// needed at runtime, it needs to be defined in a previous script, or loaded via
	// require() with its registered dependencies.
	//
	// User-defined namespaces may need their own deps file. For a reference on
	// creating a deps file, see:
	// Externally: https://developers.google.com/closure/library/docs/depswriter
	//
	// Because of legacy clients, the DOM loader can't be easily removed from
	// base.js.  Work is being done to make it disableable or replaceable for
	// different environments (DOM-less JavaScript interpreters like Rhino or V8,
	// for example). See bootstrap/ for more information.


	/**
	 * @define {boolean} Whether to enable the debug loader.
	 *
	 * If enabled, a call to goog.require() will attempt to load the namespace by
	 * appending a script tag to the DOM (if the namespace has been registered).
	 *
	 * If disabled, goog.require() will simply assert that the namespace has been
	 * provided (and depend on the fact that some outside tool correctly ordered
	 * the script).
	 */
	goog.define('goog.ENABLE_DEBUG_LOADER', true);


	/**
	 * @param {string} msg
	 * @private
	 */
	goog.logToConsole_ = function(msg) {
	  if (goog.global.console) {
	    goog.global.console['error'](msg);
	  }
	};


	/**
	 * Implements a system for the dynamic resolution of dependencies that works in
	 * parallel with the BUILD system. Note that all calls to goog.require will be
	 * stripped by the JSCompiler when the --process_closure_primitives option is
	 * used.
	 * @see goog.provide
	 * @param {string} name Namespace to include (as was given in goog.provide()) in
	 *     the form "goog.package.part".
	 * @return {?} If called within a goog.module file, the associated namespace or
	 *     module otherwise null.
	 */
	goog.require = function(name) {
	  // If the object already exists we do not need do do anything.
	  if (!COMPILED) {
	    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {
	      goog.maybeProcessDeferredDep_(name);
	    }

	    if (goog.isProvided_(name)) {
	      if (goog.isInModuleLoader_()) {
	        return goog.module.getInternal_(name);
	      } else {
	        return null;
	      }
	    }

	    if (goog.ENABLE_DEBUG_LOADER) {
	      var path = goog.getPathFromDeps_(name);
	      if (path) {
	        goog.writeScripts_(path);
	        return null;
	      }
	    }

	    var errorMessage = 'goog.require could not find: ' + name;
	    goog.logToConsole_(errorMessage);

	    throw Error(errorMessage);
	  }
	};


	/**
	 * Path for included scripts.
	 * @type {string}
	 */
	goog.basePath = '';


	/**
	 * A hook for overriding the base path.
	 * @type {string|undefined}
	 */
	goog.global.CLOSURE_BASE_PATH;


	/**
	 * Whether to write out Closure's deps file. By default, the deps are written.
	 * @type {boolean|undefined}
	 */
	goog.global.CLOSURE_NO_DEPS;


	/**
	 * A function to import a single script. This is meant to be overridden when
	 * Closure is being run in non-HTML contexts, such as web workers. It's defined
	 * in the global scope so that it can be set before base.js is loaded, which
	 * allows deps.js to be imported properly.
	 *
	 * The function is passed the script source, which is a relative URI. It should
	 * return true if the script was imported, false otherwise.
	 * @type {(function(string): boolean)|undefined}
	 */
	goog.global.CLOSURE_IMPORT_SCRIPT;


	/**
	 * Null function used for default values of callbacks, etc.
	 * @return {void} Nothing.
	 */
	goog.nullFunction = function() {};


	/**
	 * When defining a class Foo with an abstract method bar(), you can do:
	 * Foo.prototype.bar = goog.abstractMethod
	 *
	 * Now if a subclass of Foo fails to override bar(), an error will be thrown
	 * when bar() is invoked.
	 *
	 * Note: This does not take the name of the function to override as an argument
	 * because that would make it more difficult to obfuscate our JavaScript code.
	 *
	 * @type {!Function}
	 * @throws {Error} when invoked to indicate the method should be overridden.
	 */
	goog.abstractMethod = function() {
	  throw Error('unimplemented abstract method');
	};


	/**
	 * Adds a {@code getInstance} static method that always returns the same
	 * instance object.
	 * @param {!Function} ctor The constructor for the class to add the static
	 *     method to.
	 */
	goog.addSingletonGetter = function(ctor) {
	  ctor.getInstance = function() {
	    if (ctor.instance_) {
	      return ctor.instance_;
	    }
	    if (goog.DEBUG) {
	      // NOTE: JSCompiler can't optimize away Array#push.
	      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;
	    }
	    return ctor.instance_ = new ctor;
	  };
	};


	/**
	 * All singleton classes that have been instantiated, for testing. Don't read
	 * it directly, use the {@code goog.testing.singleton} module. The compiler
	 * removes this variable if unused.
	 * @type {!Array<!Function>}
	 * @private
	 */
	goog.instantiatedSingletons_ = [];


	/**
	 * @define {boolean} Whether to load goog.modules using {@code eval} when using
	 * the debug loader.  This provides a better debugging experience as the
	 * source is unmodified and can be edited using Chrome Workspaces or similar.
	 * However in some environments the use of {@code eval} is banned
	 * so we provide an alternative.
	 */
	goog.define('goog.LOAD_MODULE_USING_EVAL', true);


	/**
	 * @define {boolean} Whether the exports of goog.modules should be sealed when
	 * possible.
	 */
	goog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);


	/**
	 * The registry of initialized modules:
	 * the module identifier to module exports map.
	 * @private @const {!Object<string, ?>}
	 */
	goog.loadedModules_ = {};


	/**
	 * True if goog.dependencies_ is available.
	 * @const {boolean}
	 */
	goog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;


	/**
	 * @define {string} How to decide whether to transpile.  Valid values
	 * are 'always', 'never', and 'detect'.  The default ('detect') is to
	 * use feature detection to determine which language levels need
	 * transpilation.
	 */
	// NOTE(user): we could expand this to accept a language level to bypass
	// detection: e.g. goog.TRANSPILE == 'es5' would transpile ES6 files but
	// would leave ES3 and ES5 files alone.
	goog.define('goog.TRANSPILE', 'detect');


	/**
	 * @define {string} Path to the transpiler.  Executing the script at this
	 * path (relative to base.js) should define a function $jscomp.transpile.
	 */
	goog.define('goog.TRANSPILER', 'transpile.js');


	if (goog.DEPENDENCIES_ENABLED) {
	  /**
	   * This object is used to keep track of dependencies and other data that is
	   * used for loading scripts.
	   * @private
	   * @type {{
	   *   loadFlags: !Object<string, !Object<string, string>>,
	   *   nameToPath: !Object<string, string>,
	   *   requires: !Object<string, !Object<string, boolean>>,
	   *   visited: !Object<string, boolean>,
	   *   written: !Object<string, boolean>,
	   *   deferred: !Object<string, string>
	   * }}
	   */
	  goog.dependencies_ = {
	    loadFlags: {},  // 1 to 1

	    nameToPath: {},  // 1 to 1

	    requires: {},  // 1 to many

	    // Used when resolving dependencies to prevent us from visiting file twice.
	    visited: {},

	    written: {},  // Used to keep track of script files we have written.

	    deferred: {}  // Used to track deferred module evaluations in old IEs
	  };


	  /**
	   * Tries to detect whether is in the context of an HTML document.
	   * @return {boolean} True if it looks like HTML document.
	   * @private
	   */
	  goog.inHtmlDocument_ = function() {
	    /** @type {Document} */
	    var doc = goog.global.document;
	    return doc != null && 'write' in doc;  // XULDocument misses write.
	  };


	  /**
	   * Tries to detect the base path of base.js script that bootstraps Closure.
	   * @private
	   */
	  goog.findBasePath_ = function() {
	    if (goog.isDef(goog.global.CLOSURE_BASE_PATH)) {
	      goog.basePath = goog.global.CLOSURE_BASE_PATH;
	      return;
	    } else if (!goog.inHtmlDocument_()) {
	      return;
	    }
	    /** @type {Document} */
	    var doc = goog.global.document;
	    var scripts = doc.getElementsByTagName('SCRIPT');
	    // Search backwards since the current script is in almost all cases the one
	    // that has base.js.
	    for (var i = scripts.length - 1; i >= 0; --i) {
	      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);
	      var src = script.src;
	      var qmark = src.lastIndexOf('?');
	      var l = qmark == -1 ? src.length : qmark;
	      if (src.substr(l - 7, 7) == 'base.js') {
	        goog.basePath = src.substr(0, l - 7);
	        return;
	      }
	    }
	  };


	  /**
	   * Imports a script if, and only if, that script hasn't already been imported.
	   * (Must be called at execution time)
	   * @param {string} src Script source.
	   * @param {string=} opt_sourceText The optionally source text to evaluate
	   * @private
	   */
	  goog.importScript_ = function(src, opt_sourceText) {
	    var importScript =
	        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;
	    if (importScript(src, opt_sourceText)) {
	      goog.dependencies_.written[src] = true;
	    }
	  };


	  /**
	   * Whether the browser is IE9 or earlier, which needs special handling
	   * for deferred modules.
	   * @const @private {boolean}
	   */
	  goog.IS_OLD_IE_ =
	      !!(!goog.global.atob && goog.global.document && goog.global.document.all);


	  /**
	   * Given a URL initiate retrieval and execution of a script that needs
	   * pre-processing.
	   * @param {string} src Script source URL.
	   * @param {boolean} isModule Whether this is a goog.module.
	   * @param {boolean} needsTranspile Whether this source needs transpilation.
	   * @private
	   */
	  goog.importProcessedScript_ = function(src, isModule, needsTranspile) {
	    // In an attempt to keep browsers from timing out loading scripts using
	    // synchronous XHRs, put each load in its own script block.
	    var bootstrap = 'goog.retrieveAndExec_("' + src + '", ' + isModule + ', ' +
	        needsTranspile + ');';

	    goog.importScript_('', bootstrap);
	  };


	  /** @private {!Array<string>} */
	  goog.queuedModules_ = [];


	  /**
	   * Return an appropriate module text. Suitable to insert into
	   * a script tag (that is unescaped).
	   * @param {string} srcUrl
	   * @param {string} scriptText
	   * @return {string}
	   * @private
	   */
	  goog.wrapModule_ = function(srcUrl, scriptText) {
	    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {
	      return '' +
	          'goog.loadModule(function(exports) {' +
	          '"use strict";' + scriptText +
	          '\n' +  // terminate any trailing single line comment.
	          ';return exports' +
	          '});' +
	          '\n//# sourceURL=' + srcUrl + '\n';
	    } else {
	      return '' +
	          'goog.loadModule(' +
	          goog.global.JSON.stringify(
	              scriptText + '\n//# sourceURL=' + srcUrl + '\n') +
	          ');';
	    }
	  };

	  // On IE9 and earlier, it is necessary to handle
	  // deferred module loads. In later browsers, the
	  // code to be evaluated is simply inserted as a script
	  // block in the correct order. To eval deferred
	  // code at the right time, we piggy back on goog.require to call
	  // goog.maybeProcessDeferredDep_.
	  //
	  // The goog.requires are used both to bootstrap
	  // the loading process (when no deps are available) and
	  // declare that they should be available.
	  //
	  // Here we eval the sources, if all the deps are available
	  // either already eval'd or goog.require'd.  This will
	  // be the case when all the dependencies have already
	  // been loaded, and the dependent module is loaded.
	  //
	  // But this alone isn't sufficient because it is also
	  // necessary to handle the case where there is no root
	  // that is not deferred.  For that there we register for an event
	  // and trigger goog.loadQueuedModules_ handle any remaining deferred
	  // evaluations.

	  /**
	   * Handle any remaining deferred goog.module evals.
	   * @private
	   */
	  goog.loadQueuedModules_ = function() {
	    var count = goog.queuedModules_.length;
	    if (count > 0) {
	      var queue = goog.queuedModules_;
	      goog.queuedModules_ = [];
	      for (var i = 0; i < count; i++) {
	        var path = queue[i];
	        goog.maybeProcessDeferredPath_(path);
	      }
	    }
	  };


	  /**
	   * Eval the named module if its dependencies are
	   * available.
	   * @param {string} name The module to load.
	   * @private
	   */
	  goog.maybeProcessDeferredDep_ = function(name) {
	    if (goog.isDeferredModule_(name) && goog.allDepsAreAvailable_(name)) {
	      var path = goog.getPathFromDeps_(name);
	      goog.maybeProcessDeferredPath_(goog.basePath + path);
	    }
	  };

	  /**
	   * @param {string} name The module to check.
	   * @return {boolean} Whether the name represents a
	   *     module whose evaluation has been deferred.
	   * @private
	   */
	  goog.isDeferredModule_ = function(name) {
	    var path = goog.getPathFromDeps_(name);
	    var loadFlags = path && goog.dependencies_.loadFlags[path] || {};
	    if (path && (loadFlags['module'] == 'goog' ||
	                 goog.needsTranspile_(loadFlags['lang']))) {
	      var abspath = goog.basePath + path;
	      return (abspath) in goog.dependencies_.deferred;
	    }
	    return false;
	  };

	  /**
	   * @param {string} name The module to check.
	   * @return {boolean} Whether the name represents a
	   *     module whose declared dependencies have all been loaded
	   *     (eval'd or a deferred module load)
	   * @private
	   */
	  goog.allDepsAreAvailable_ = function(name) {
	    var path = goog.getPathFromDeps_(name);
	    if (path && (path in goog.dependencies_.requires)) {
	      for (var requireName in goog.dependencies_.requires[path]) {
	        if (!goog.isProvided_(requireName) &&
	            !goog.isDeferredModule_(requireName)) {
	          return false;
	        }
	      }
	    }
	    return true;
	  };


	  /**
	   * @param {string} abspath
	   * @private
	   */
	  goog.maybeProcessDeferredPath_ = function(abspath) {
	    if (abspath in goog.dependencies_.deferred) {
	      var src = goog.dependencies_.deferred[abspath];
	      delete goog.dependencies_.deferred[abspath];
	      goog.globalEval(src);
	    }
	  };


	  /**
	   * Load a goog.module from the provided URL.  This is not a general purpose
	   * code loader and does not support late loading code, that is it should only
	   * be used during page load. This method exists to support unit tests and
	   * "debug" loaders that would otherwise have inserted script tags. Under the
	   * hood this needs to use a synchronous XHR and is not recommeneded for
	   * production code.
	   *
	   * The module's goog.requires must have already been satisified; an exception
	   * will be thrown if this is not the case. This assumption is that no
	   * "deps.js" file exists, so there is no way to discover and locate the
	   * module-to-be-loaded's dependencies and no attempt is made to do so.
	   *
	   * There should only be one attempt to load a module.  If
	   * "goog.loadModuleFromUrl" is called for an already loaded module, an
	   * exception will be throw.
	   *
	   * @param {string} url The URL from which to attempt to load the goog.module.
	   */
	  goog.loadModuleFromUrl = function(url) {
	    // Because this executes synchronously, we don't need to do any additional
	    // bookkeeping. When "goog.loadModule" the namespace will be marked as
	    // having been provided which is sufficient.
	    goog.retrieveAndExec_(url, true, false);
	  };


	  /**
	   * @param {function(?):?|string} moduleDef The module definition.
	   */
	  goog.loadModule = function(moduleDef) {
	    // NOTE: we allow function definitions to be either in the from
	    // of a string to eval (which keeps the original source intact) or
	    // in a eval forbidden environment (CSP) we allow a function definition
	    // which in its body must call {@code goog.module}, and return the exports
	    // of the module.
	    var previousState = goog.moduleLoaderState_;
	    try {
	      goog.moduleLoaderState_ = {
	        moduleName: undefined,
	        declareLegacyNamespace: false
	      };
	      var exports;
	      if (goog.isFunction(moduleDef)) {
	        exports = moduleDef.call(goog.global, {});
	      } else if (goog.isString(moduleDef)) {
	        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);
	      } else {
	        throw Error('Invalid module definition');
	      }

	      var moduleName = goog.moduleLoaderState_.moduleName;
	      if (!goog.isString(moduleName) || !moduleName) {
	        throw Error('Invalid module name \"' + moduleName + '\"');
	      }

	      // Don't seal legacy namespaces as they may be uses as a parent of
	      // another namespace
	      if (goog.moduleLoaderState_.declareLegacyNamespace) {
	        goog.constructNamespace_(moduleName, exports);
	      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {
	        Object.seal(exports);
	      }

	      goog.loadedModules_[moduleName] = exports;
	    } finally {
	      goog.moduleLoaderState_ = previousState;
	    }
	  };


	  /**
	   * @private @const {function(string):?}
	   *
	   * The new type inference warns because this function has no formal
	   * parameters, but its jsdoc says that it takes one argument.
	   * (The argument is used via arguments[0], but NTI does not detect this.)
	   * @suppress {newCheckTypes}
	   */
	  goog.loadModuleFromSource_ = function() {
	    // NOTE: we avoid declaring parameters or local variables here to avoid
	    // masking globals or leaking values into the module definition.
	    'use strict';
	    var exports = {};
	    eval(arguments[0]);
	    return exports;
	  };


	  /**
	   * Writes a new script pointing to {@code src} directly into the DOM.
	   *
	   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for
	   * the fallback mechanism.
	   *
	   * @param {string} src The script URL.
	   * @private
	   */
	  goog.writeScriptSrcNode_ = function(src) {
	    goog.global.document.write(
	        '<script type="text/javascript" src="' + src + '"></' +
	        'script>');
	  };


	  /**
	   * Appends a new script node to the DOM using a CSP-compliant mechanism. This
	   * method exists as a fallback for document.write (which is not allowed in a
	   * strict CSP context, e.g., Chrome apps).
	   *
	   * NOTE: This method is not analogous to using document.write to insert a
	   * <script> tag; specifically, the user agent will execute a script added by
	   * document.write immediately after the current script block finishes
	   * executing, whereas the DOM-appended script node will not be executed until
	   * the entire document is parsed and executed. That is to say, this script is
	   * added to the end of the script execution queue.
	   *
	   * The page must not attempt to call goog.required entities until after the
	   * document has loaded, e.g., in or after the window.onload callback.
	   *
	   * @param {string} src The script URL.
	   * @private
	   */
	  goog.appendScriptSrcNode_ = function(src) {
	    /** @type {Document} */
	    var doc = goog.global.document;
	    var scriptEl =
	        /** @type {HTMLScriptElement} */ (doc.createElement('script'));
	    scriptEl.type = 'text/javascript';
	    scriptEl.src = src;
	    scriptEl.defer = false;
	    scriptEl.async = false;
	    doc.head.appendChild(scriptEl);
	  };


	  /**
	   * The default implementation of the import function. Writes a script tag to
	   * import the script.
	   *
	   * @param {string} src The script url.
	   * @param {string=} opt_sourceText The optionally source text to evaluate
	   * @return {boolean} True if the script was imported, false otherwise.
	   * @private
	   */
	  goog.writeScriptTag_ = function(src, opt_sourceText) {
	    if (goog.inHtmlDocument_()) {
	      /** @type {!HTMLDocument} */
	      var doc = goog.global.document;

	      // If the user tries to require a new symbol after document load,
	      // something has gone terribly wrong. Doing a document.write would
	      // wipe out the page. This does not apply to the CSP-compliant method
	      // of writing script tags.
	      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&
	          doc.readyState == 'complete') {
	        // Certain test frameworks load base.js multiple times, which tries
	        // to write deps.js each time. If that happens, just fail silently.
	        // These frameworks wipe the page between each load of base.js, so this
	        // is OK.
	        var isDeps = /\bdeps.js$/.test(src);
	        if (isDeps) {
	          return false;
	        } else {
	          throw Error('Cannot write "' + src + '" after document load');
	        }
	      }

	      if (opt_sourceText === undefined) {
	        if (!goog.IS_OLD_IE_) {
	          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {
	            goog.appendScriptSrcNode_(src);
	          } else {
	            goog.writeScriptSrcNode_(src);
	          }
	        } else {
	          var state = " onreadystatechange='goog.onScriptLoad_(this, " +
	              ++goog.lastNonModuleScriptIndex_ + ")' ";
	          doc.write(
	              '<script type="text/javascript" src="' + src + '"' + state +
	              '></' +
	              'script>');
	        }
	      } else {
	        doc.write(
	            '<script type="text/javascript">' + opt_sourceText + '</' +
	            'script>');
	      }
	      return true;
	    } else {
	      return false;
	    }
	  };


	  /**
	   * Determines whether the given language needs to be transpiled.
	   * @param {string} lang
	   * @return {boolean}
	   * @private
	   */
	  goog.needsTranspile_ = function(lang) {
	    if (goog.TRANSPILE == 'always') {
	      return true;
	    } else if (goog.TRANSPILE == 'never') {
	      return false;
	    } else if (!goog.transpiledLanguages_) {
	      goog.transpiledLanguages_ = {'es5': true, 'es6': true, 'es6-impl': true};
	      /** @preserveTry */
	      try {
	        // Perform some quick conformance checks, to distinguish
	        // between browsers that support es5, es6-impl, or es6.

	        // Identify ES3-only browsers by their incorrect treatment of commas.
	        goog.transpiledLanguages_['es5'] = eval('[1,].length!=1');

	        // As browsers mature, features will be moved from the full test
	        // into the impl test.  This must happen before the corresponding
	        // features are changed in the Closure Compiler's FeatureSet object.

	        // Test 1: es6-impl [FF49, Edge 13, Chrome 49]
	        //   (a) let/const keyword, (b) class expressions, (c) Map object,
	        //   (d) iterable arguments, (e) spread operator
	        var es6implTest =
	            'let a={};const X=class{constructor(){}x(z){return new Map([' +
	            '...arguments]).get(z[0])==3}};return new X().x([a,3])';

	        // Test 2: es6 [FF50 (?), Edge 14 (?), Chrome 50]
	        //   (a) default params (specifically shadowing locals),
	        //   (b) destructuring, (c) block-scoped functions,
	        //   (d) for-of (const), (e) new.target/Reflect.construct
	        var es6fullTest =
	            'class X{constructor(){if(new.target!=String)throw 1;this.x=42}}' +
	            'let q=Reflect.construct(X,[],String);if(q.x!=42||!(q instanceof ' +
	            'String))throw 1;for(const a of[2,3]){if(a==2)continue;function ' +
	            'f(z={a}){let a=0;return z.a}{function f(){return 0;}}return f()' +
	            '==3}';

	        if (eval('(()=>{"use strict";' + es6implTest + '})()')) {
	          goog.transpiledLanguages_['es6-impl'] = false;
	        }
	        if (eval('(()=>{"use strict";' + es6fullTest + '})()')) {
	          goog.transpiledLanguages_['es6'] = false;
	        }
	      } catch (err) {
	      }
	    }
	    return !!goog.transpiledLanguages_[lang];
	  };


	  /** @private {?Object<string, boolean>} */
	  goog.transpiledLanguages_ = null;


	  /** @private {number} */
	  goog.lastNonModuleScriptIndex_ = 0;


	  /**
	   * A readystatechange handler for legacy IE
	   * @param {!HTMLScriptElement} script
	   * @param {number} scriptIndex
	   * @return {boolean}
	   * @private
	   */
	  goog.onScriptLoad_ = function(script, scriptIndex) {
	    // for now load the modules when we reach the last script,
	    // later allow more inter-mingling.
	    if (script.readyState == 'complete' &&
	        goog.lastNonModuleScriptIndex_ == scriptIndex) {
	      goog.loadQueuedModules_();
	    }
	    return true;
	  };

	  /**
	   * Resolves dependencies based on the dependencies added using addDependency
	   * and calls importScript_ in the correct order.
	   * @param {string} pathToLoad The path from which to start discovering
	   *     dependencies.
	   * @private
	   */
	  goog.writeScripts_ = function(pathToLoad) {
	    /** @type {!Array<string>} The scripts we need to write this time. */
	    var scripts = [];
	    var seenScript = {};
	    var deps = goog.dependencies_;

	    /** @param {string} path */
	    function visitNode(path) {
	      if (path in deps.written) {
	        return;
	      }

	      // We have already visited this one. We can get here if we have cyclic
	      // dependencies.
	      if (path in deps.visited) {
	        return;
	      }

	      deps.visited[path] = true;

	      if (path in deps.requires) {
	        for (var requireName in deps.requires[path]) {
	          // If the required name is defined, we assume that it was already
	          // bootstrapped by other means.
	          if (!goog.isProvided_(requireName)) {
	            if (requireName in deps.nameToPath) {
	              visitNode(deps.nameToPath[requireName]);
	            } else {
	              throw Error('Undefined nameToPath for ' + requireName);
	            }
	          }
	        }
	      }

	      if (!(path in seenScript)) {
	        seenScript[path] = true;
	        scripts.push(path);
	      }
	    }

	    visitNode(pathToLoad);

	    // record that we are going to load all these scripts.
	    for (var i = 0; i < scripts.length; i++) {
	      var path = scripts[i];
	      goog.dependencies_.written[path] = true;
	    }

	    // If a module is loaded synchronously then we need to
	    // clear the current inModuleLoader value, and restore it when we are
	    // done loading the current "requires".
	    var moduleState = goog.moduleLoaderState_;
	    goog.moduleLoaderState_ = null;

	    for (var i = 0; i < scripts.length; i++) {
	      var path = scripts[i];
	      if (path) {
	        var loadFlags = deps.loadFlags[path] || {};
	        var needsTranspile = goog.needsTranspile_(loadFlags['lang']);
	        if (loadFlags['module'] == 'goog' || needsTranspile) {
	          goog.importProcessedScript_(
	              goog.basePath + path, loadFlags['module'] == 'goog',
	              needsTranspile);
	        } else {
	          goog.importScript_(goog.basePath + path);
	        }
	      } else {
	        goog.moduleLoaderState_ = moduleState;
	        throw Error('Undefined script input');
	      }
	    }

	    // restore the current "module loading state"
	    goog.moduleLoaderState_ = moduleState;
	  };


	  /**
	   * Looks at the dependency rules and tries to determine the script file that
	   * fulfills a particular rule.
	   * @param {string} rule In the form goog.namespace.Class or project.script.
	   * @return {?string} Url corresponding to the rule, or null.
	   * @private
	   */
	  goog.getPathFromDeps_ = function(rule) {
	    if (rule in goog.dependencies_.nameToPath) {
	      return goog.dependencies_.nameToPath[rule];
	    } else {
	      return null;
	    }
	  };

	  goog.findBasePath_();

	  // Allow projects to manage the deps files themselves.
	  if (!goog.global.CLOSURE_NO_DEPS) {
	    goog.importScript_(goog.basePath + 'deps.js');
	  }
	}


	/**
	 * Normalize a file path by removing redundant ".." and extraneous "." file
	 * path components.
	 * @param {string} path
	 * @return {string}
	 * @private
	 */
	goog.normalizePath_ = function(path) {
	  var components = path.split('/');
	  var i = 0;
	  while (i < components.length) {
	    if (components[i] == '.') {
	      components.splice(i, 1);
	    } else if (
	        i && components[i] == '..' && components[i - 1] &&
	        components[i - 1] != '..') {
	      components.splice(--i, 2);
	    } else {
	      i++;
	    }
	  }
	  return components.join('/');
	};


	/**
	 * Loads file by synchronous XHR. Should not be used in production environments.
	 * @param {string} src Source URL.
	 * @return {?string} File contents, or null if load failed.
	 * @private
	 */
	goog.loadFileSync_ = function(src) {
	  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {
	    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);
	  } else {
	    try {
	      /** @type {XMLHttpRequest} */
	      var xhr = new goog.global['XMLHttpRequest']();
	      xhr.open('get', src, false);
	      xhr.send();
	      // NOTE: Successful http: requests have a status of 200, but successful
	      // file: requests may have a status of zero.  Any other status, or a
	      // thrown exception (particularly in case of file: requests) indicates
	      // some sort of error, which we treat as a missing or unavailable file.
	      return xhr.status == 0 || xhr.status == 200 ? xhr.responseText : null;
	    } catch (err) {
	      // No need to rethrow or log, since errors should show up on their own.
	      return null;
	    }
	  }
	};


	/**
	 * Retrieve and execute a script that needs some sort of wrapping.
	 * @param {string} src Script source URL.
	 * @param {boolean} isModule Whether to load as a module.
	 * @param {boolean} needsTranspile Whether to transpile down to ES3.
	 * @private
	 */
	goog.retrieveAndExec_ = function(src, isModule, needsTranspile) {
	  if (!COMPILED) {
	    // The full but non-canonicalized URL for later use.
	    var originalPath = src;
	    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging
	    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.
	    src = goog.normalizePath_(src);

	    var importScript =
	        goog.global.CLOSURE_IMPORT_SCRIPT || goog.writeScriptTag_;

	    var scriptText = goog.loadFileSync_(src);
	    if (scriptText == null) {
	      throw new Error('Load of "' + src + '" failed');
	    }

	    if (needsTranspile) {
	      scriptText = goog.transpile_.call(goog.global, scriptText, src);
	    }

	    if (isModule) {
	      scriptText = goog.wrapModule_(src, scriptText);
	    } else {
	      scriptText += '\n//# sourceURL=' + src;
	    }
	    var isOldIE = goog.IS_OLD_IE_;
	    if (isOldIE) {
	      goog.dependencies_.deferred[originalPath] = scriptText;
	      goog.queuedModules_.push(originalPath);
	    } else {
	      importScript(src, scriptText);
	    }
	  }
	};


	/**
	 * Lazily retrieves the transpiler and applies it to the source.
	 * @param {string} code JS code.
	 * @param {string} path Path to the code.
	 * @return {string} The transpiled code.
	 * @private
	 */
	goog.transpile_ = function(code, path) {
	  var jscomp = goog.global['$jscomp'];
	  if (!jscomp) {
	    goog.global['$jscomp'] = jscomp = {};
	  }
	  var transpile = jscomp.transpile;
	  if (!transpile) {
	    var transpilerPath = goog.basePath + goog.TRANSPILER;
	    var transpilerCode = goog.loadFileSync_(transpilerPath);
	    if (transpilerCode) {
	      // This must be executed synchronously, since by the time we know we
	      // need it, we're about to load and write the ES6 code synchronously,
	      // so a normal script-tag load will be too slow.
	      eval(transpilerCode + '\n//# sourceURL=' + transpilerPath);
	      // Note: transpile.js reassigns goog.global['$jscomp'] so pull it again.
	      jscomp = goog.global['$jscomp'];
	      transpile = jscomp.transpile;
	    }
	  }
	  if (!transpile) {
	    // The transpiler is an optional component.  If it's not available then
	    // replace it with a pass-through function that simply logs.
	    var suffix = ' requires transpilation but no transpiler was found.';
	    transpile = jscomp.transpile = function(code, path) {
	      // TODO(user): figure out some way to get this error to show up
	      // in test results, noting that the failure may occur in many
	      // different ways, including in loadModule() before the test
	      // runner even comes up.
	      goog.logToConsole_(path + suffix);
	      return code;
	    };
	  }
	  // Note: any transpilation errors/warnings will be logged to the console.
	  return transpile(code, path);
	};


	//==============================================================================
	// Language Enhancements
	//==============================================================================


	/**
	 * This is a "fixed" version of the typeof operator.  It differs from the typeof
	 * operator in such a way that null returns 'null' and arrays return 'array'.
	 * @param {?} value The value to get the type of.
	 * @return {string} The name of the type.
	 */
	goog.typeOf = function(value) {
	  var s = typeof value;
	  if (s == 'object') {
	    if (value) {
	      // Check these first, so we can avoid calling Object.prototype.toString if
	      // possible.
	      //
	      // IE improperly marshals typeof across execution contexts, but a
	      // cross-context object will still return false for "instanceof Object".
	      if (value instanceof Array) {
	        return 'array';
	      } else if (value instanceof Object) {
	        return s;
	      }

	      // HACK: In order to use an Object prototype method on the arbitrary
	      //   value, the compiler requires the value be cast to type Object,
	      //   even though the ECMA spec explicitly allows it.
	      var className = Object.prototype.toString.call(
	          /** @type {!Object} */ (value));
	      // In Firefox 3.6, attempting to access iframe window objects' length
	      // property throws an NS_ERROR_FAILURE, so we need to special-case it
	      // here.
	      if (className == '[object Window]') {
	        return 'object';
	      }

	      // We cannot always use constructor == Array or instanceof Array because
	      // different frames have different Array objects. In IE6, if the iframe
	      // where the array was created is destroyed, the array loses its
	      // prototype. Then dereferencing val.splice here throws an exception, so
	      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'
	      // so that will work. In this case, this function will return false and
	      // most array functions will still work because the array is still
	      // array-like (supports length and []) even though it has lost its
	      // prototype.
	      // Mark Miller noticed that Object.prototype.toString
	      // allows access to the unforgeable [[Class]] property.
	      //  15.2.4.2 Object.prototype.toString ( )
	      //  When the toString method is called, the following steps are taken:
	      //      1. Get the [[Class]] property of this object.
	      //      2. Compute a string value by concatenating the three strings
	      //         "[object ", Result(1), and "]".
	      //      3. Return Result(2).
	      // and this behavior survives the destruction of the execution context.
	      if ((className == '[object Array]' ||
	           // In IE all non value types are wrapped as objects across window
	           // boundaries (not iframe though) so we have to do object detection
	           // for this edge case.
	           typeof value.length == 'number' &&
	               typeof value.splice != 'undefined' &&
	               typeof value.propertyIsEnumerable != 'undefined' &&
	               !value.propertyIsEnumerable('splice')

	               )) {
	        return 'array';
	      }
	      // HACK: There is still an array case that fails.
	      //     function ArrayImpostor() {}
	      //     ArrayImpostor.prototype = [];
	      //     var impostor = new ArrayImpostor;
	      // this can be fixed by getting rid of the fast path
	      // (value instanceof Array) and solely relying on
	      // (value && Object.prototype.toString.vall(value) === '[object Array]')
	      // but that would require many more function calls and is not warranted
	      // unless closure code is receiving objects from untrusted sources.

	      // IE in cross-window calls does not correctly marshal the function type
	      // (it appears just as an object) so we cannot use just typeof val ==
	      // 'function'. However, if the object has a call property, it is a
	      // function.
	      if ((className == '[object Function]' ||
	           typeof value.call != 'undefined' &&
	               typeof value.propertyIsEnumerable != 'undefined' &&
	               !value.propertyIsEnumerable('call'))) {
	        return 'function';
	      }

	    } else {
	      return 'null';
	    }

	  } else if (s == 'function' && typeof value.call == 'undefined') {
	    // In Safari typeof nodeList returns 'function', and on Firefox typeof
	    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We
	    // would like to return object for those and we can detect an invalid
	    // function by making sure that the function object has a call method.
	    return 'object';
	  }
	  return s;
	};


	/**
	 * Returns true if the specified value is null.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is null.
	 */
	goog.isNull = function(val) {
	  return val === null;
	};


	/**
	 * Returns true if the specified value is defined and not null.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is defined and not null.
	 */
	goog.isDefAndNotNull = function(val) {
	  // Note that undefined == null.
	  return val != null;
	};


	/**
	 * Returns true if the specified value is an array.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is an array.
	 */
	goog.isArray = function(val) {
	  return goog.typeOf(val) == 'array';
	};


	/**
	 * Returns true if the object looks like an array. To qualify as array like
	 * the value needs to be either a NodeList or an object with a Number length
	 * property. As a special case, a function value is not array like, because its
	 * length property is fixed to correspond to the number of expected arguments.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is an array.
	 */
	goog.isArrayLike = function(val) {
	  var type = goog.typeOf(val);
	  // We do not use goog.isObject here in order to exclude function values.
	  return type == 'array' || type == 'object' && typeof val.length == 'number';
	};


	/**
	 * Returns true if the object looks like a Date. To qualify as Date-like the
	 * value needs to be an object and have a getFullYear() function.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is a like a Date.
	 */
	goog.isDateLike = function(val) {
	  return goog.isObject(val) && typeof val.getFullYear == 'function';
	};


	/**
	 * Returns true if the specified value is a string.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is a string.
	 */
	goog.isString = function(val) {
	  return typeof val == 'string';
	};


	/**
	 * Returns true if the specified value is a boolean.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is boolean.
	 */
	goog.isBoolean = function(val) {
	  return typeof val == 'boolean';
	};


	/**
	 * Returns true if the specified value is a number.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is a number.
	 */
	goog.isNumber = function(val) {
	  return typeof val == 'number';
	};


	/**
	 * Returns true if the specified value is a function.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is a function.
	 */
	goog.isFunction = function(val) {
	  return goog.typeOf(val) == 'function';
	};


	/**
	 * Returns true if the specified value is an object.  This includes arrays and
	 * functions.
	 * @param {?} val Variable to test.
	 * @return {boolean} Whether variable is an object.
	 */
	goog.isObject = function(val) {
	  var type = typeof val;
	  return type == 'object' && val != null || type == 'function';
	  // return Object(val) === val also works, but is slower, especially if val is
	  // not an object.
	};


	/**
	 * Gets a unique ID for an object. This mutates the object so that further calls
	 * with the same object as a parameter returns the same value. The unique ID is
	 * guaranteed to be unique across the current session amongst objects that are
	 * passed into {@code getUid}. There is no guarantee that the ID is unique or
	 * consistent across sessions. It is unsafe to generate unique ID for function
	 * prototypes.
	 *
	 * @param {Object} obj The object to get the unique ID for.
	 * @return {number} The unique ID for the object.
	 */
	goog.getUid = function(obj) {
	  // TODO(arv): Make the type stricter, do not accept null.

	  // In Opera window.hasOwnProperty exists but always returns false so we avoid
	  // using it. As a consequence the unique ID generated for BaseClass.prototype
	  // and SubClass.prototype will be the same.
	  return obj[goog.UID_PROPERTY_] ||
	      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);
	};


	/**
	 * Whether the given object is already assigned a unique ID.
	 *
	 * This does not modify the object.
	 *
	 * @param {!Object} obj The object to check.
	 * @return {boolean} Whether there is an assigned unique id for the object.
	 */
	goog.hasUid = function(obj) {
	  return !!obj[goog.UID_PROPERTY_];
	};


	/**
	 * Removes the unique ID from an object. This is useful if the object was
	 * previously mutated using {@code goog.getUid} in which case the mutation is
	 * undone.
	 * @param {Object} obj The object to remove the unique ID field from.
	 */
	goog.removeUid = function(obj) {
	  // TODO(arv): Make the type stricter, do not accept null.

	  // In IE, DOM nodes are not instances of Object and throw an exception if we
	  // try to delete.  Instead we try to use removeAttribute.
	  if (obj !== null && 'removeAttribute' in obj) {
	    obj.removeAttribute(goog.UID_PROPERTY_);
	  }
	  /** @preserveTry */
	  try {
	    delete obj[goog.UID_PROPERTY_];
	  } catch (ex) {
	  }
	};


	/**
	 * Name for unique ID property. Initialized in a way to help avoid collisions
	 * with other closure JavaScript on the same page.
	 * @type {string}
	 * @private
	 */
	goog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);


	/**
	 * Counter for UID.
	 * @type {number}
	 * @private
	 */
	goog.uidCounter_ = 0;


	/**
	 * Adds a hash code field to an object. The hash code is unique for the
	 * given object.
	 * @param {Object} obj The object to get the hash code for.
	 * @return {number} The hash code for the object.
	 * @deprecated Use goog.getUid instead.
	 */
	goog.getHashCode = goog.getUid;


	/**
	 * Removes the hash code field from an object.
	 * @param {Object} obj The object to remove the field from.
	 * @deprecated Use goog.removeUid instead.
	 */
	goog.removeHashCode = goog.removeUid;


	/**
	 * Clones a value. The input may be an Object, Array, or basic type. Objects and
	 * arrays will be cloned recursively.
	 *
	 * WARNINGS:
	 * <code>goog.cloneObject</code> does not detect reference loops. Objects that
	 * refer to themselves will cause infinite recursion.
	 *
	 * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies
	 * UIDs created by <code>getUid</code> into cloned results.
	 *
	 * @param {*} obj The value to clone.
	 * @return {*} A clone of the input value.
	 * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.
	 */
	goog.cloneObject = function(obj) {
	  var type = goog.typeOf(obj);
	  if (type == 'object' || type == 'array') {
	    if (obj.clone) {
	      return obj.clone();
	    }
	    var clone = type == 'array' ? [] : {};
	    for (var key in obj) {
	      clone[key] = goog.cloneObject(obj[key]);
	    }
	    return clone;
	  }

	  return obj;
	};


	/**
	 * A native implementation of goog.bind.
	 * @param {Function} fn A function to partially apply.
	 * @param {Object|undefined} selfObj Specifies the object which this should
	 *     point to when the function is run.
	 * @param {...*} var_args Additional arguments that are partially applied to the
	 *     function.
	 * @return {!Function} A partially-applied form of the function bind() was
	 *     invoked as a method of.
	 * @private
	 * @suppress {deprecated} The compiler thinks that Function.prototype.bind is
	 *     deprecated because some people have declared a pure-JS version.
	 *     Only the pure-JS version is truly deprecated.
	 */
	goog.bindNative_ = function(fn, selfObj, var_args) {
	  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));
	};


	/**
	 * A pure-JS implementation of goog.bind.
	 * @param {Function} fn A function to partially apply.
	 * @param {Object|undefined} selfObj Specifies the object which this should
	 *     point to when the function is run.
	 * @param {...*} var_args Additional arguments that are partially applied to the
	 *     function.
	 * @return {!Function} A partially-applied form of the function bind() was
	 *     invoked as a method of.
	 * @private
	 */
	goog.bindJs_ = function(fn, selfObj, var_args) {
	  if (!fn) {
	    throw new Error();
	  }

	  if (arguments.length > 2) {
	    var boundArgs = Array.prototype.slice.call(arguments, 2);
	    return function() {
	      // Prepend the bound arguments to the current arguments.
	      var newArgs = Array.prototype.slice.call(arguments);
	      Array.prototype.unshift.apply(newArgs, boundArgs);
	      return fn.apply(selfObj, newArgs);
	    };

	  } else {
	    return function() { return fn.apply(selfObj, arguments); };
	  }
	};


	/**
	 * Partially applies this function to a particular 'this object' and zero or
	 * more arguments. The result is a new function with some arguments of the first
	 * function pre-filled and the value of this 'pre-specified'.
	 *
	 * Remaining arguments specified at call-time are appended to the pre-specified
	 * ones.
	 *
	 * Also see: {@link #partial}.
	 *
	 * Usage:
	 * <pre>var barMethBound = goog.bind(myFunction, myObj, 'arg1', 'arg2');
	 * barMethBound('arg3', 'arg4');</pre>
	 *
	 * @param {?function(this:T, ...)} fn A function to partially apply.
	 * @param {T} selfObj Specifies the object which this should point to when the
	 *     function is run.
	 * @param {...*} var_args Additional arguments that are partially applied to the
	 *     function.
	 * @return {!Function} A partially-applied form of the function goog.bind() was
	 *     invoked as a method of.
	 * @template T
	 * @suppress {deprecated} See above.
	 */
	goog.bind = function(fn, selfObj, var_args) {
	  // TODO(nicksantos): narrow the type signature.
	  if (Function.prototype.bind &&
	      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome
	      // extension environment. This means that for Chrome extensions, they get
	      // the implementation of Function.prototype.bind that calls goog.bind
	      // instead of the native one. Even worse, we don't want to introduce a
	      // circular dependency between goog.bind and Function.prototype.bind, so
	      // we have to hack this to make sure it works correctly.
	      Function.prototype.bind.toString().indexOf('native code') != -1) {
	    goog.bind = goog.bindNative_;
	  } else {
	    goog.bind = goog.bindJs_;
	  }
	  return goog.bind.apply(null, arguments);
	};


	/**
	 * Like goog.bind(), except that a 'this object' is not required. Useful when
	 * the target function is already bound.
	 *
	 * Usage:
	 * var g = goog.partial(f, arg1, arg2);
	 * g(arg3, arg4);
	 *
	 * @param {Function} fn A function to partially apply.
	 * @param {...*} var_args Additional arguments that are partially applied to fn.
	 * @return {!Function} A partially-applied form of the function goog.partial()
	 *     was invoked as a method of.
	 */
	goog.partial = function(fn, var_args) {
	  var args = Array.prototype.slice.call(arguments, 1);
	  return function() {
	    // Clone the array (with slice()) and append additional arguments
	    // to the existing arguments.
	    var newArgs = args.slice();
	    newArgs.push.apply(newArgs, arguments);
	    return fn.apply(this, newArgs);
	  };
	};


	/**
	 * Copies all the members of a source object to a target object. This method
	 * does not work on all browsers for all objects that contain keys such as
	 * toString or hasOwnProperty. Use goog.object.extend for this purpose.
	 * @param {Object} target Target.
	 * @param {Object} source Source.
	 */
	goog.mixin = function(target, source) {
	  for (var x in source) {
	    target[x] = source[x];
	  }

	  // For IE7 or lower, the for-in-loop does not contain any properties that are
	  // not enumerable on the prototype object (for example, isPrototypeOf from
	  // Object.prototype) but also it will not include 'replace' on objects that
	  // extend String and change 'replace' (not that it is common for anyone to
	  // extend anything except Object).
	};


	/**
	 * @return {number} An integer value representing the number of milliseconds
	 *     between midnight, January 1, 1970 and the current time.
	 */
	goog.now = (goog.TRUSTED_SITE && Date.now) || (function() {
	             // Unary plus operator converts its operand to a number which in
	             // the case of
	             // a date is done by calling getTime().
	             return +new Date();
	           });


	/**
	 * Evals JavaScript in the global scope.  In IE this uses execScript, other
	 * browsers use goog.global.eval. If goog.global.eval does not evaluate in the
	 * global scope (for example, in Safari), appends a script tag instead.
	 * Throws an exception if neither execScript or eval is defined.
	 * @param {string} script JavaScript string.
	 */
	goog.globalEval = function(script) {
	  if (goog.global.execScript) {
	    goog.global.execScript(script, 'JavaScript');
	  } else if (goog.global.eval) {
	    // Test to see if eval works
	    if (goog.evalWorksForGlobals_ == null) {
	      goog.global.eval('var _evalTest_ = 1;');
	      if (typeof goog.global['_evalTest_'] != 'undefined') {
	        try {
	          delete goog.global['_evalTest_'];
	        } catch (ignore) {
	          // Microsoft edge fails the deletion above in strict mode.
	        }
	        goog.evalWorksForGlobals_ = true;
	      } else {
	        goog.evalWorksForGlobals_ = false;
	      }
	    }

	    if (goog.evalWorksForGlobals_) {
	      goog.global.eval(script);
	    } else {
	      /** @type {Document} */
	      var doc = goog.global.document;
	      var scriptElt =
	          /** @type {!HTMLScriptElement} */ (doc.createElement('SCRIPT'));
	      scriptElt.type = 'text/javascript';
	      scriptElt.defer = false;
	      // Note(user): can't use .innerHTML since "t('<test>')" will fail and
	      // .text doesn't work in Safari 2.  Therefore we append a text node.
	      scriptElt.appendChild(doc.createTextNode(script));
	      doc.body.appendChild(scriptElt);
	      doc.body.removeChild(scriptElt);
	    }
	  } else {
	    throw Error('goog.globalEval not available');
	  }
	};


	/**
	 * Indicates whether or not we can call 'eval' directly to eval code in the
	 * global scope. Set to a Boolean by the first call to goog.globalEval (which
	 * empirically tests whether eval works for globals). @see goog.globalEval
	 * @type {?boolean}
	 * @private
	 */
	goog.evalWorksForGlobals_ = null;


	/**
	 * Optional map of CSS class names to obfuscated names used with
	 * goog.getCssName().
	 * @private {!Object<string, string>|undefined}
	 * @see goog.setCssNameMapping
	 */
	goog.cssNameMapping_;


	/**
	 * Optional obfuscation style for CSS class names. Should be set to either
	 * 'BY_WHOLE' or 'BY_PART' if defined.
	 * @type {string|undefined}
	 * @private
	 * @see goog.setCssNameMapping
	 */
	goog.cssNameMappingStyle_;


	/**
	 * Handles strings that are intended to be used as CSS class names.
	 *
	 * This function works in tandem with @see goog.setCssNameMapping.
	 *
	 * Without any mapping set, the arguments are simple joined with a hyphen and
	 * passed through unaltered.
	 *
	 * When there is a mapping, there are two possible styles in which these
	 * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)
	 * of the passed in css name is rewritten according to the map. In the BY_WHOLE
	 * style, the full css name is looked up in the map directly. If a rewrite is
	 * not specified by the map, the compiler will output a warning.
	 *
	 * When the mapping is passed to the compiler, it will replace calls to
	 * goog.getCssName with the strings from the mapping, e.g.
	 *     var x = goog.getCssName('foo');
	 *     var y = goog.getCssName(this.baseClass, 'active');
	 *  becomes:
	 *     var x = 'foo';
	 *     var y = this.baseClass + '-active';
	 *
	 * If one argument is passed it will be processed, if two are passed only the
	 * modifier will be processed, as it is assumed the first argument was generated
	 * as a result of calling goog.getCssName.
	 *
	 * @param {string} className The class name.
	 * @param {string=} opt_modifier A modifier to be appended to the class name.
	 * @return {string} The class name or the concatenation of the class name and
	 *     the modifier.
	 */
	goog.getCssName = function(className, opt_modifier) {
	  var getMapping = function(cssName) {
	    return goog.cssNameMapping_[cssName] || cssName;
	  };

	  var renameByParts = function(cssName) {
	    // Remap all the parts individually.
	    var parts = cssName.split('-');
	    var mapped = [];
	    for (var i = 0; i < parts.length; i++) {
	      mapped.push(getMapping(parts[i]));
	    }
	    return mapped.join('-');
	  };

	  var rename;
	  if (goog.cssNameMapping_) {
	    rename =
	        goog.cssNameMappingStyle_ == 'BY_WHOLE' ? getMapping : renameByParts;
	  } else {
	    rename = function(a) { return a; };
	  }

	  if (opt_modifier) {
	    return className + '-' + rename(opt_modifier);
	  } else {
	    return rename(className);
	  }
	};


	/**
	 * Sets the map to check when returning a value from goog.getCssName(). Example:
	 * <pre>
	 * goog.setCssNameMapping({
	 *   "goog": "a",
	 *   "disabled": "b",
	 * });
	 *
	 * var x = goog.getCssName('goog');
	 * // The following evaluates to: "a a-b".
	 * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')
	 * </pre>
	 * When declared as a map of string literals to string literals, the JSCompiler
	 * will replace all calls to goog.getCssName() using the supplied map if the
	 * --process_closure_primitives flag is set.
	 *
	 * @param {!Object} mapping A map of strings to strings where keys are possible
	 *     arguments to goog.getCssName() and values are the corresponding values
	 *     that should be returned.
	 * @param {string=} opt_style The style of css name mapping. There are two valid
	 *     options: 'BY_PART', and 'BY_WHOLE'.
	 * @see goog.getCssName for a description.
	 */
	goog.setCssNameMapping = function(mapping, opt_style) {
	  goog.cssNameMapping_ = mapping;
	  goog.cssNameMappingStyle_ = opt_style;
	};


	/**
	 * To use CSS renaming in compiled mode, one of the input files should have a
	 * call to goog.setCssNameMapping() with an object literal that the JSCompiler
	 * can extract and use to replace all calls to goog.getCssName(). In uncompiled
	 * mode, JavaScript code should be loaded before this base.js file that declares
	 * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is
	 * to ensure that the mapping is loaded before any calls to goog.getCssName()
	 * are made in uncompiled mode.
	 *
	 * A hook for overriding the CSS name mapping.
	 * @type {!Object<string, string>|undefined}
	 */
	goog.global.CLOSURE_CSS_NAME_MAPPING;


	if (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {
	  // This does not call goog.setCssNameMapping() because the JSCompiler
	  // requires that goog.setCssNameMapping() be called with an object literal.
	  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;
	}


	/**
	 * Gets a localized message.
	 *
	 * This function is a compiler primitive. If you give the compiler a localized
	 * message bundle, it will replace the string at compile-time with a localized
	 * version, and expand goog.getMsg call to a concatenated string.
	 *
	 * Messages must be initialized in the form:
	 * <code>
	 * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});
	 * </code>
	 *
	 * This function produces a string which should be treated as plain text. Use
	 * {@link goog.html.SafeHtmlFormatter} in conjunction with goog.getMsg to
	 * produce SafeHtml.
	 *
	 * @param {string} str Translatable string, places holders in the form {$foo}.
	 * @param {Object<string, string>=} opt_values Maps place holder name to value.
	 * @return {string} message with placeholders filled.
	 */
	goog.getMsg = function(str, opt_values) {
	  if (opt_values) {
	    str = str.replace(/\{\$([^}]+)}/g, function(match, key) {
	      return (opt_values != null && key in opt_values) ? opt_values[key] :
	                                                         match;
	    });
	  }
	  return str;
	};


	/**
	 * Gets a localized message. If the message does not have a translation, gives a
	 * fallback message.
	 *
	 * This is useful when introducing a new message that has not yet been
	 * translated into all languages.
	 *
	 * This function is a compiler primitive. Must be used in the form:
	 * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>
	 * where MSG_A and MSG_B were initialized with goog.getMsg.
	 *
	 * @param {string} a The preferred message.
	 * @param {string} b The fallback message.
	 * @return {string} The best translated message.
	 */
	goog.getMsgWithFallback = function(a, b) {
	  return a;
	};


	/**
	 * Exposes an unobfuscated global namespace path for the given object.
	 * Note that fields of the exported object *will* be obfuscated, unless they are
	 * exported in turn via this function or goog.exportProperty.
	 *
	 * Also handy for making public items that are defined in anonymous closures.
	 *
	 * ex. goog.exportSymbol('public.path.Foo', Foo);
	 *
	 * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);
	 *     public.path.Foo.staticFunction();
	 *
	 * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',
	 *                       Foo.prototype.myMethod);
	 *     new public.path.Foo().myMethod();
	 *
	 * @param {string} publicPath Unobfuscated name to export.
	 * @param {*} object Object the name should point to.
	 * @param {Object=} opt_objectToExportTo The object to add the path to; default
	 *     is goog.global.
	 */
	goog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {
	  goog.exportPath_(publicPath, object, opt_objectToExportTo);
	};


	/**
	 * Exports a property unobfuscated into the object's namespace.
	 * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);
	 * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);
	 * @param {Object} object Object whose static property is being exported.
	 * @param {string} publicName Unobfuscated name to export.
	 * @param {*} symbol Object the name should point to.
	 */
	goog.exportProperty = function(object, publicName, symbol) {
	  object[publicName] = symbol;
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * Usage:
	 * <pre>
	 * function ParentClass(a, b) { }
	 * ParentClass.prototype.foo = function(a) { };
	 *
	 * function ChildClass(a, b, c) {
	 *   ChildClass.base(this, 'constructor', a, b);
	 * }
	 * goog.inherits(ChildClass, ParentClass);
	 *
	 * var child = new ChildClass('a', 'b', 'see');
	 * child.foo(); // This works.
	 * </pre>
	 *
	 * @param {!Function} childCtor Child class.
	 * @param {!Function} parentCtor Parent class.
	 */
	goog.inherits = function(childCtor, parentCtor) {
	  /** @constructor */
	  function tempCtor() {}
	  tempCtor.prototype = parentCtor.prototype;
	  childCtor.superClass_ = parentCtor.prototype;
	  childCtor.prototype = new tempCtor();
	  /** @override */
	  childCtor.prototype.constructor = childCtor;

	  /**
	   * Calls superclass constructor/method.
	   *
	   * This function is only available if you use goog.inherits to
	   * express inheritance relationships between classes.
	   *
	   * NOTE: This is a replacement for goog.base and for superClass_
	   * property defined in childCtor.
	   *
	   * @param {!Object} me Should always be "this".
	   * @param {string} methodName The method name to call. Calling
	   *     superclass constructor can be done with the special string
	   *     'constructor'.
	   * @param {...*} var_args The arguments to pass to superclass
	   *     method/constructor.
	   * @return {*} The return value of the superclass method/constructor.
	   */
	  childCtor.base = function(me, methodName, var_args) {
	    // Copying using loop to avoid deop due to passing arguments object to
	    // function. This is faster in many JS engines as of late 2014.
	    var args = new Array(arguments.length - 2);
	    for (var i = 2; i < arguments.length; i++) {
	      args[i - 2] = arguments[i];
	    }
	    return parentCtor.prototype[methodName].apply(me, args);
	  };
	};


	/**
	 * Call up to the superclass.
	 *
	 * If this is called from a constructor, then this calls the superclass
	 * constructor with arguments 1-N.
	 *
	 * If this is called from a prototype method, then you must pass the name of the
	 * method as the second argument to this function. If you do not, you will get a
	 * runtime error. This calls the superclass' method with arguments 2-N.
	 *
	 * This function only works if you use goog.inherits to express inheritance
	 * relationships between your classes.
	 *
	 * This function is a compiler primitive. At compile-time, the compiler will do
	 * macro expansion to remove a lot of the extra overhead that this function
	 * introduces. The compiler will also enforce a lot of the assumptions that this
	 * function makes, and treat it as a compiler error if you break them.
	 *
	 * @param {!Object} me Should always be "this".
	 * @param {*=} opt_methodName The method name if calling a super method.
	 * @param {...*} var_args The rest of the arguments.
	 * @return {*} The return value of the superclass method.
	 * @suppress {es5Strict} This method can not be used in strict mode, but
	 *     all Closure Library consumers must depend on this file.
	 */
	goog.base = function(me, opt_methodName, var_args) {
	  var caller = arguments.callee.caller;

	  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {
	    throw Error(
	        'arguments.caller not defined.  goog.base() cannot be used ' +
	        'with strict mode code. See ' +
	        'http://www.ecma-international.org/ecma-262/5.1/#sec-C');
	  }

	  if (caller.superClass_) {
	    // Copying using loop to avoid deop due to passing arguments object to
	    // function. This is faster in many JS engines as of late 2014.
	    var ctorArgs = new Array(arguments.length - 1);
	    for (var i = 1; i < arguments.length; i++) {
	      ctorArgs[i - 1] = arguments[i];
	    }
	    // This is a constructor. Call the superclass constructor.
	    return caller.superClass_.constructor.apply(me, ctorArgs);
	  }

	  // Copying using loop to avoid deop due to passing arguments object to
	  // function. This is faster in many JS engines as of late 2014.
	  var args = new Array(arguments.length - 2);
	  for (var i = 2; i < arguments.length; i++) {
	    args[i - 2] = arguments[i];
	  }
	  var foundCaller = false;
	  for (var ctor = me.constructor; ctor;
	       ctor = ctor.superClass_ && ctor.superClass_.constructor) {
	    if (ctor.prototype[opt_methodName] === caller) {
	      foundCaller = true;
	    } else if (foundCaller) {
	      return ctor.prototype[opt_methodName].apply(me, args);
	    }
	  }

	  // If we did not find the caller in the prototype chain, then one of two
	  // things happened:
	  // 1) The caller is an instance method.
	  // 2) This method was not called by the right caller.
	  if (me[opt_methodName] === caller) {
	    return me.constructor.prototype[opt_methodName].apply(me, args);
	  } else {
	    throw Error(
	        'goog.base called from a method of one name ' +
	        'to a method of a different name');
	  }
	};


	/**
	 * Allow for aliasing within scope functions.  This function exists for
	 * uncompiled code - in compiled code the calls will be inlined and the aliases
	 * applied.  In uncompiled code the function is simply run since the aliases as
	 * written are valid JavaScript.
	 *
	 *
	 * @param {function()} fn Function to call.  This function can contain aliases
	 *     to namespaces (e.g. "var dom = goog.dom") or classes
	 *     (e.g. "var Timer = goog.Timer").
	 */
	goog.scope = function(fn) {
	  if (goog.isInModuleLoader_()) {
	    throw Error('goog.scope is not supported within a goog.module.');
	  }
	  fn.call(goog.global);
	};


	/*
	 * To support uncompiled, strict mode bundles that use eval to divide source
	 * like so:
	 *    eval('someSource;//# sourceUrl sourcefile.js');
	 * We need to export the globally defined symbols "goog" and "COMPILED".
	 * Exporting "goog" breaks the compiler optimizations, so we required that
	 * be defined externally.
	 * NOTE: We don't use goog.exportSymbol here because we don't want to trigger
	 * extern generation when that compiler option is enabled.
	 */
	if (!COMPILED) {
	  goog.global['COMPILED'] = COMPILED;
	}


	//==============================================================================
	// goog.defineClass implementation
	//==============================================================================


	/**
	 * Creates a restricted form of a Closure "class":
	 *   - from the compiler's perspective, the instance returned from the
	 *     constructor is sealed (no new properties may be added).  This enables
	 *     better checks.
	 *   - the compiler will rewrite this definition to a form that is optimal
	 *     for type checking and optimization (initially this will be a more
	 *     traditional form).
	 *
	 * @param {Function} superClass The superclass, Object or null.
	 * @param {goog.defineClass.ClassDescriptor} def
	 *     An object literal describing
	 *     the class.  It may have the following properties:
	 *     "constructor": the constructor function
	 *     "statics": an object literal containing methods to add to the constructor
	 *        as "static" methods or a function that will receive the constructor
	 *        function as its only parameter to which static properties can
	 *        be added.
	 *     all other properties are added to the prototype.
	 * @return {!Function} The class constructor.
	 */
	goog.defineClass = function(superClass, def) {
	  // TODO(johnlenz): consider making the superClass an optional parameter.
	  var constructor = def.constructor;
	  var statics = def.statics;
	  // Wrap the constructor prior to setting up the prototype and static methods.
	  if (!constructor || constructor == Object.prototype.constructor) {
	    constructor = function() {
	      throw Error('cannot instantiate an interface (no constructor defined).');
	    };
	  }

	  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);
	  if (superClass) {
	    goog.inherits(cls, superClass);
	  }

	  // Remove all the properties that should not be copied to the prototype.
	  delete def.constructor;
	  delete def.statics;

	  goog.defineClass.applyProperties_(cls.prototype, def);
	  if (statics != null) {
	    if (statics instanceof Function) {
	      statics(cls);
	    } else {
	      goog.defineClass.applyProperties_(cls, statics);
	    }
	  }

	  return cls;
	};


	/**
	 * @typedef {{
	 *   constructor: (!Function|undefined),
	 *   statics: (Object|undefined|function(Function):void)
	 * }}
	 * @suppress {missingProvide}
	 */
	goog.defineClass.ClassDescriptor;


	/**
	 * @define {boolean} Whether the instances returned by goog.defineClass should
	 *     be sealed when possible.
	 *
	 * When sealing is disabled the constructor function will not be wrapped by
	 * goog.defineClass, making it incompatible with ES6 class methods.
	 */
	goog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);


	/**
	 * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is
	 * defined, this function will wrap the constructor in a function that seals the
	 * results of the provided constructor function.
	 *
	 * @param {!Function} ctr The constructor whose results maybe be sealed.
	 * @param {Function} superClass The superclass constructor.
	 * @return {!Function} The replacement constructor.
	 * @private
	 */
	goog.defineClass.createSealingConstructor_ = function(ctr, superClass) {
	  if (!goog.defineClass.SEAL_CLASS_INSTANCES) {
	    // Do now wrap the constructor when sealing is disabled. Angular code
	    // depends on this for injection to work properly.
	    return ctr;
	  }

	  // Compute whether the constructor is sealable at definition time, rather
	  // than when the instance is being constructed.
	  var superclassSealable = !goog.defineClass.isUnsealable_(superClass);

	  /**
	   * @this {Object}
	   * @return {?}
	   */
	  var wrappedCtr = function() {
	    // Don't seal an instance of a subclass when it calls the constructor of
	    // its super class as there is most likely still setup to do.
	    var instance = ctr.apply(this, arguments) || this;
	    instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];

	    if (this.constructor === wrappedCtr && superclassSealable &&
	        Object.seal instanceof Function) {
	      Object.seal(instance);
	    }
	    return instance;
	  };

	  return wrappedCtr;
	};


	/**
	 * @param {Function} ctr The constructor to test.
	 * @returns {boolean} Whether the constructor has been tagged as unsealable
	 *     using goog.tagUnsealableClass.
	 * @private
	 */
	goog.defineClass.isUnsealable_ = function(ctr) {
	  return ctr && ctr.prototype &&
	      ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_];
	};


	// TODO(johnlenz): share these values with the goog.object
	/**
	 * The names of the fields that are defined on Object.prototype.
	 * @type {!Array<string>}
	 * @private
	 * @const
	 */
	goog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];


	// TODO(johnlenz): share this function with the goog.object
	/**
	 * @param {!Object} target The object to add properties to.
	 * @param {!Object} source The object to copy properties from.
	 * @private
	 */
	goog.defineClass.applyProperties_ = function(target, source) {
	  // TODO(johnlenz): update this to support ES5 getters/setters

	  var key;
	  for (key in source) {
	    if (Object.prototype.hasOwnProperty.call(source, key)) {
	      target[key] = source[key];
	    }
	  }

	  // For IE the for-in-loop does not contain any properties that are not
	  // enumerable on the prototype object (for example isPrototypeOf from
	  // Object.prototype) and it will also not include 'replace' on objects that
	  // extend String and change 'replace' (not that it is common for anyone to
	  // extend anything except Object).
	  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {
	    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];
	    if (Object.prototype.hasOwnProperty.call(source, key)) {
	      target[key] = source[key];
	    }
	  }
	};


	/**
	 * Sealing classes breaks the older idiom of assigning properties on the
	 * prototype rather than in the constructor. As such, goog.defineClass
	 * must not seal subclasses of these old-style classes until they are fixed.
	 * Until then, this marks a class as "broken", instructing defineClass
	 * not to seal subclasses.
	 * @param {!Function} ctr The legacy constructor to tag as unsealable.
	 */
	goog.tagUnsealableClass = function(ctr) {
	  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {
	    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;
	  }
	};


	/**
	 * Name for unsealable tag property.
	 * @const @private {string}
	 */
	goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';
	goog.global = CLJS_GLOBAL;
	goog.provide = function(name) { return goog.exportPath_(name, undefined, CLJS_ENV); };
	goog.require = function(name) { return true; };
	module.exports = CLJS_ENV;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), (function() { return this; }())))

/***/ },
/* 4 */
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};

	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.

	var cachedSetTimeout;
	var cachedClearTimeout;

	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }


	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }



	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(6);
	var cljs=CLJS_ENV.cljs;
	var goog=CLJS_ENV.goog;
	var shadow=CLJS_ENV.shadow || (CLJS_ENV.shadow = {});
	goog.provide('shadow.runtime_setup');
	goog.require('cljs.core');
	cljs.core.enable_console_print_BANG_();
	module.exports = shadow.runtime_setup;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process, global) {var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(7);
	__webpack_require__(8);
	__webpack_require__(9);
	__webpack_require__(10);
	__webpack_require__(11);
	__webpack_require__(15);
	var goog=CLJS_ENV.goog;
	var cljs=CLJS_ENV.cljs || (CLJS_ENV.cljs = {});
	goog.provide('cljs.core');
	cljs.core._STAR_clojurescript_version_STAR_ = "1.9.542";
	cljs.core._STAR_unchecked_if_STAR_ = false;
	cljs.core._STAR_warn_on_infer_STAR_ = false;
	if(typeof cljs.core.PROTOCOL_SENTINEL !== 'undefined'){
	} else {
	cljs.core.PROTOCOL_SENTINEL = ({});
	}

	/** @define {string} */
	goog.define("cljs.core._STAR_target_STAR_","default");
	/**
	 * Var bound to the current namespace. Only used for bootstrapping.
	 * @type {*}
	 */
	cljs.core._STAR_ns_STAR_ = null;
	/**
	 * @type {*}
	 */
	cljs.core._STAR_out_STAR_ = null;
	cljs.core._STAR_assert_STAR_ = true;
	if(typeof cljs.core._STAR_print_fn_STAR_ !== 'undefined'){
	} else {
	/**
	 * Each runtime environment provides a different way to print output.
	 *   Whatever function *print-fn* is bound to will be passed any
	 *   Strings which should be printed.
	 */
	cljs.core._STAR_print_fn_STAR_ = (function cljs$core$_STAR_print_fn_STAR_(_){
	throw (new Error("No *print-fn* fn set for evaluation environment"));
	});
	}
	if(typeof cljs.core._STAR_print_err_fn_STAR_ !== 'undefined'){
	} else {
	/**
	 * Each runtime environment provides a different way to print error output.
	 *   Whatever function *print-err-fn* is bound to will be passed any
	 *   Strings which should be printed.
	 */
	cljs.core._STAR_print_err_fn_STAR_ = (function cljs$core$_STAR_print_err_fn_STAR_(_){
	throw (new Error("No *print-err-fn* fn set for evaluation environment"));
	});
	}
	/**
	 * Set *print-fn* to f.
	 */
	cljs.core.set_print_fn_BANG_ = (function cljs$core$set_print_fn_BANG_(f){
	return cljs.core._STAR_print_fn_STAR_ = f;
	});
	/**
	 * Set *print-err-fn* to f.
	 */
	cljs.core.set_print_err_fn_BANG_ = (function cljs$core$set_print_err_fn_BANG_(f){
	return cljs.core._STAR_print_err_fn_STAR_ = f;
	});
	/**
	 * When set to true, output will be flushed whenever a newline is printed.
	 * 
	 *   Defaults to true.
	 */
	cljs.core._STAR_flush_on_newline_STAR_ = true;
	/**
	 * When set to logical false will drop newlines from printing calls.
	 *   This is to work around the implicit newlines emitted by standard JavaScript
	 *   console objects.
	 */
	cljs.core._STAR_print_newline_STAR_ = true;
	/**
	 * When set to logical false, strings and characters will be printed with
	 *   non-alphanumeric characters converted to the appropriate escape sequences.
	 * 
	 *   Defaults to true
	 */
	cljs.core._STAR_print_readably_STAR_ = true;
	/**
	 * If set to logical true, when printing an object, its metadata will also
	 *   be printed in a form that can be read back by the reader.
	 * 
	 *   Defaults to false.
	 */
	cljs.core._STAR_print_meta_STAR_ = false;
	/**
	 * When set to logical true, objects will be printed in a way that preserves
	 *   their type when read in later.
	 * 
	 *   Defaults to false.
	 */
	cljs.core._STAR_print_dup_STAR_ = false;
	/**
	 * *print-namespace-maps* controls whether the printer will print
	 *   namespace map literal syntax.
	 * 
	 *   Defaults to false, but the REPL binds it to true.
	 */
	cljs.core._STAR_print_namespace_maps_STAR_ = false;
	/**
	 * *print-length* controls how many items of each collection the
	 *   printer will print. If it is bound to logical false, there is no
	 *   limit. Otherwise, it must be bound to an integer indicating the maximum
	 *   number of items of each collection to print. If a collection contains
	 *   more items, the printer will print items up to the limit followed by
	 *   '...' to represent the remaining items. The root binding is nil
	 *   indicating no limit.
	 * @type {null|number}
	 */
	cljs.core._STAR_print_length_STAR_ = null;
	/**
	 * *print-level* controls how many levels deep the printer will
	 *   print nested objects. If it is bound to logical false, there is no
	 *   limit. Otherwise, it must be bound to an integer indicating the maximum
	 *   level to print. Each argument to print is at level 0; if an argument is a
	 *   collection, its items are at level 1; and so on. If an object is a
	 *   collection and is at a level greater than or equal to the value bound to
	 *   *print-level*, the printer prints '#' to represent it. The root binding
	 *   is nil indicating no limit.
	 * @type {null|number}
	 */
	cljs.core._STAR_print_level_STAR_ = null;
	if(typeof cljs.core._STAR_loaded_libs_STAR_ !== 'undefined'){
	} else {
	/**
	 * @type {*}
	 */
	cljs.core._STAR_loaded_libs_STAR_ = null;
	}
	cljs.core.pr_opts = (function cljs$core$pr_opts(){
	return new cljs.core.PersistentArrayMap(null, 5, [cljs.core.cst$kw$flush_DASH_on_DASH_newline,cljs.core._STAR_flush_on_newline_STAR_,cljs.core.cst$kw$readably,cljs.core._STAR_print_readably_STAR_,cljs.core.cst$kw$meta,cljs.core._STAR_print_meta_STAR_,cljs.core.cst$kw$dup,cljs.core._STAR_print_dup_STAR_,cljs.core.cst$kw$print_DASH_length,cljs.core._STAR_print_length_STAR_], null);
	});
	/**
	 * Set *print-fn* to console.log
	 */
	cljs.core.enable_console_print_BANG_ = (function cljs$core$enable_console_print_BANG_(){
	cljs.core._STAR_print_newline_STAR_ = false;

	cljs.core._STAR_print_fn_STAR_ = (function() { 
	var G__1634__delegate = function (args){
	return console.log.apply(console,(cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null,args)));
	};
	var G__1634 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__1635__i = 0, G__1635__a = new Array(arguments.length -  0);
	while (G__1635__i < G__1635__a.length) {G__1635__a[G__1635__i] = arguments[G__1635__i + 0]; ++G__1635__i;}
	  args = new cljs.core.IndexedSeq(G__1635__a,0,null);
	} 
	return G__1634__delegate.call(this,args);};
	G__1634.cljs$lang$maxFixedArity = 0;
	G__1634.cljs$lang$applyTo = (function (arglist__1636){
	var args = cljs.core.seq(arglist__1636);
	return G__1634__delegate(args);
	});
	G__1634.cljs$core$IFn$_invoke$arity$variadic = G__1634__delegate;
	return G__1634;
	})()
	;

	cljs.core._STAR_print_err_fn_STAR_ = (function() { 
	var G__1637__delegate = function (args){
	return console.error.apply(console,(cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args) : cljs.core.into_array.call(null,args)));
	};
	var G__1637 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__1638__i = 0, G__1638__a = new Array(arguments.length -  0);
	while (G__1638__i < G__1638__a.length) {G__1638__a[G__1638__i] = arguments[G__1638__i + 0]; ++G__1638__i;}
	  args = new cljs.core.IndexedSeq(G__1638__a,0,null);
	} 
	return G__1637__delegate.call(this,args);};
	G__1637.cljs$lang$maxFixedArity = 0;
	G__1637.cljs$lang$applyTo = (function (arglist__1639){
	var args = cljs.core.seq(arglist__1639);
	return G__1637__delegate(args);
	});
	G__1637.cljs$core$IFn$_invoke$arity$variadic = G__1637__delegate;
	return G__1637;
	})()
	;

	return null;
	});
	/**
	 * Internal - do not use!
	 */
	cljs.core.truth_ = (function cljs$core$truth_(x){
	return (x != null && x !== false);
	});
	cljs.core.not_native = null;

	/**
	 * Tests if 2 arguments are the same object
	 */
	cljs.core.identical_QMARK_ = (function cljs$core$identical_QMARK_(x,y){
	return (x === y);
	});
	/**
	 * Returns true if x is nil, false otherwise.
	 */
	cljs.core.nil_QMARK_ = (function cljs$core$nil_QMARK_(x){
	return (x == null);
	});
	/**
	 * Returns true if x is a JavaScript array.
	 */
	cljs.core.array_QMARK_ = (function cljs$core$array_QMARK_(x){
	if((cljs.core._STAR_target_STAR_ === "nodejs")){
	return Array.isArray(x);
	} else {
	return (x instanceof Array);
	}
	});
	/**
	 * Returns true if x is a JavaScript number.
	 */
	cljs.core.number_QMARK_ = (function cljs$core$number_QMARK_(x){
	return typeof x === 'number';
	});
	/**
	 * Returns true if x is logical false, false otherwise.
	 */
	cljs.core.not = (function cljs$core$not(x){
	if((x == null)){
	return true;
	} else {
	if(x === false){
	return true;
	} else {
	return false;

	}
	}
	});
	/**
	 * Returns true if x is not nil, false otherwise.
	 */
	cljs.core.some_QMARK_ = (function cljs$core$some_QMARK_(x){
	return !((x == null));
	});
	/**
	 * Returns true if x's constructor is Object
	 */
	cljs.core.object_QMARK_ = (function cljs$core$object_QMARK_(x){
	if(!((x == null))){
	return (x.constructor === Object);
	} else {
	return false;
	}
	});
	/**
	 * Returns true if x is a JavaScript string.
	 */
	cljs.core.string_QMARK_ = (function cljs$core$string_QMARK_(x){
	return goog.isString(x);
	});
	/**
	 * Returns true if x is a JavaScript string of length one.
	 */
	cljs.core.char_QMARK_ = (function cljs$core$char_QMARK_(x){
	return (typeof x === 'string') && (((1) === x.length));
	});
	/**
	 * Returns true if given any argument.
	 */
	cljs.core.any_QMARK_ = (function cljs$core$any_QMARK_(x){
	return true;
	});
	/**
	 * Internal - do not use!
	 */
	cljs.core.native_satisfies_QMARK_ = (function cljs$core$native_satisfies_QMARK_(p,x){
	var x__$1 = (((x == null))?null:x);
	if((p[goog.typeOf(x__$1)])){
	return true;
	} else {
	if((p["_"])){
	return true;
	} else {
	return false;

	}
	}
	});
	cljs.core.is_proto_ = (function cljs$core$is_proto_(x){
	return (x.constructor.prototype === x);
	});
	/**
	 * When compiled for a command-line target, whatever function
	 *   *main-cli-fn* is set to will be called with the command-line
	 *   argv as arguments
	 */
	cljs.core._STAR_main_cli_fn_STAR_ = null;
	/**
	 * Return x's constructor.
	 */
	cljs.core.type = (function cljs$core$type(x){
	if((x == null)){
	return null;
	} else {
	return x.constructor;
	}
	});
	cljs.core.missing_protocol = (function cljs$core$missing_protocol(proto,obj){
	var ty = cljs.core.type(obj);
	var ty__$1 = (cljs.core.truth_((function (){var and__5442__auto__ = ty;
	if(cljs.core.truth_(and__5442__auto__)){
	return ty.cljs$lang$type;
	} else {
	return and__5442__auto__;
	}
	})())?ty.cljs$lang$ctorStr:goog.typeOf(obj));
	return (new Error(["No protocol method ",proto," defined for type ",ty__$1,": ",obj].join("")));
	});
	cljs.core.type__GT_str = (function cljs$core$type__GT_str(ty){
	var temp__6736__auto__ = ty.cljs$lang$ctorStr;
	if(cljs.core.truth_(temp__6736__auto__)){
	var s = temp__6736__auto__;
	return s;
	} else {
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ty)].join('');
	}
	});
	cljs.core.load_file = (function cljs$core$load_file(file){
	if(cljs.core.truth_(COMPILED)){
	return null;
	} else {
	return goog.nodeGlobalRequire(file);
	}
	});
	if((typeof Symbol !== 'undefined') && ((goog.typeOf(Symbol) === "function"))){
	cljs.core.ITER_SYMBOL = Symbol.iterator;
	} else {
	cljs.core.ITER_SYMBOL = "@@iterator";
	}
	/**
	 * @enum {string}
	 */
	cljs.core.CHAR_MAP = ({"]": "_RBRACK_", "'": "_SINGLEQUOTE_", "=": "_EQ_", "\"": "_DOUBLEQUOTE_", "!": "_BANG_", "*": "_STAR_", "%": "_PERCENT_", "|": "_BAR_", "~": "_TILDE_", "/": "_SLASH_", "\\": "_BSLASH_", "-": "_", "?": "_QMARK_", "&": "_AMPERSAND_", ":": "_COLON_", "<": "_LT_", "{": "_LBRACE_", "}": "_RBRACE_", "[": "_LBRACK_", "#": "_SHARP_", "^": "_CARET_", "+": "_PLUS_", "@": "_CIRCA_", ">": "_GT_"});
	/**
	 * @enum {string}
	 */
	cljs.core.DEMUNGE_MAP = ({"_RBRACE_": "}", "_COLON_": ":", "_BANG_": "!", "_QMARK_": "?", "_BSLASH_": "\\\\", "_SLASH_": "/", "_PERCENT_": "%", "_PLUS_": "+", "_SHARP_": "#", "_LBRACE_": "{", "_BAR_": "|", "_LBRACK_": "[", "_EQ_": "=", "_": "-", "_TILDE_": "~", "_RBRACK_": "]", "_GT_": ">", "_SINGLEQUOTE_": "'", "_CIRCA_": "@", "_AMPERSAND_": "&", "_DOUBLEQUOTE_": "\\\"", "_CARET_": "^", "_LT_": "<", "_STAR_": "*"});
	cljs.core.DEMUNGE_PATTERN = null;
	/**
	 * Returns highest resolution time offered by host in milliseconds.
	 */
	cljs.core.system_time = (function cljs$core$system_time(){
	if((typeof performance !== 'undefined') && (!((performance.now == null)))){
	return performance.now();
	} else {
	if((typeof process !== 'undefined') && (!((process.hrtime == null)))){
	var t = process.hrtime();
	return ((((t[(0)]) * 1.0E9) + (t[(1)])) / 1000000.0);
	} else {
	return (new Date()).getTime();

	}
	}
	});
	/**
	 * Construct a JavaScript array of the specified dimensions. Accepts ignored
	 *   type argument for compatibility with Clojure. Note that there is no efficient
	 *   way to allocate multi-dimensional arrays in JavaScript; as such, this function
	 *   will run in polynomial time when called with 3 or more arguments.
	 */
	cljs.core.make_array = (function cljs$core$make_array(var_args){
	var args1640 = [];
	var len__6099__auto___1646 = arguments.length;
	var i__6100__auto___1647 = (0);
	while(true){
	if((i__6100__auto___1647 < len__6099__auto___1646)){
	args1640.push((arguments[i__6100__auto___1647]));

	var G__1648 = (i__6100__auto___1647 + (1));
	i__6100__auto___1647 = G__1648;
	continue;
	} else {
	}
	break;
	}

	var G__1645 = args1640.length;
	switch (G__1645) {
	case 1:
	return cljs.core.make_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.make_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1640.slice((2)),(0),null));
	return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.make_array.cljs$core$IFn$_invoke$arity$1 = (function (size){
	return (new Array(size));
	});

	cljs.core.make_array.cljs$core$IFn$_invoke$arity$2 = (function (type,size){
	return (new Array(size));
	});

	cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic = (function (type,size,more_sizes){
	var dims = more_sizes;
	var dimarray = (new Array(size));
	var n__5991__auto___1650 = dimarray.length;
	var i_1651 = (0);
	while(true){
	if((i_1651 < n__5991__auto___1650)){
	(dimarray[i_1651] = (cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.make_array,null,dims) : cljs.core.apply.call(null,cljs.core.make_array,null,dims)));

	var G__1652 = (i_1651 + (1));
	i_1651 = G__1652;
	continue;
	} else {
	}
	break;
	}

	return dimarray;
	});

	cljs.core.make_array.cljs$lang$applyTo = (function (seq1641){
	var G__1642 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1641) : cljs.core.first.call(null,seq1641));
	var seq1641__$1 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1641) : cljs.core.next.call(null,seq1641));
	var G__1643 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1641__$1) : cljs.core.first.call(null,seq1641__$1));
	var seq1641__$2 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1641__$1) : cljs.core.next.call(null,seq1641__$1));
	return cljs.core.make_array.cljs$core$IFn$_invoke$arity$variadic(G__1642,G__1643,seq1641__$2);
	});

	cljs.core.make_array.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns a javascript array, cloned from the passed in array
	 */
	cljs.core.aclone = (function cljs$core$aclone(arr){
	var len = arr.length;
	var new_arr = (new Array(len));
	var n__5991__auto___1653 = len;
	var i_1654 = (0);
	while(true){
	if((i_1654 < n__5991__auto___1653)){
	(new_arr[i_1654] = (arr[i_1654]));

	var G__1655 = (i_1654 + (1));
	i_1654 = G__1655;
	continue;
	} else {
	}
	break;
	}

	return new_arr;
	});
	/**
	 * Creates a new javascript array.
	 * @param {...*} var_args
	 */
	cljs.core.array = (function cljs$core$array(var_args){
	var a = (new Array(arguments.length));
	var i = (0);
	while(true){
	if((i < a.length)){
	(a[i] = (arguments[i]));

	var G__1656 = (i + (1));
	i = G__1656;
	continue;
	} else {
	return a;
	}
	break;
	}
	});
	/**
	 * Returns the value at the index.
	 */
	cljs.core.aget = (function cljs$core$aget(var_args){
	var args1657 = [];
	var len__6099__auto___1666 = arguments.length;
	var i__6100__auto___1667 = (0);
	while(true){
	if((i__6100__auto___1667 < len__6099__auto___1666)){
	args1657.push((arguments[i__6100__auto___1667]));

	var G__1668 = (i__6100__auto___1667 + (1));
	i__6100__auto___1667 = G__1668;
	continue;
	} else {
	}
	break;
	}

	var G__1662 = args1657.length;
	switch (G__1662) {
	case 2:
	return cljs.core.aget.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1657.slice((2)),(0),null));
	return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.aget.cljs$core$IFn$_invoke$arity$2 = (function (array,i){
	return (array[i]);
	});

	cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic = (function (array,i,idxs){
	var G__1663 = cljs.core.aget;
	var G__1664 = (array[i]);
	var G__1665 = idxs;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$3 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$3(G__1663,G__1664,G__1665) : cljs.core.apply.call(null,G__1663,G__1664,G__1665));
	});

	cljs.core.aget.cljs$lang$applyTo = (function (seq1658){
	var G__1659 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1658) : cljs.core.first.call(null,seq1658));
	var seq1658__$1 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1658) : cljs.core.next.call(null,seq1658));
	var G__1660 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1658__$1) : cljs.core.first.call(null,seq1658__$1));
	var seq1658__$2 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1658__$1) : cljs.core.next.call(null,seq1658__$1));
	return cljs.core.aget.cljs$core$IFn$_invoke$arity$variadic(G__1659,G__1660,seq1658__$2);
	});

	cljs.core.aget.cljs$lang$maxFixedArity = (2);

	/**
	 * Sets the value at the index.
	 */
	cljs.core.aset = (function cljs$core$aset(var_args){
	var args1670 = [];
	var len__6099__auto___1681 = arguments.length;
	var i__6100__auto___1682 = (0);
	while(true){
	if((i__6100__auto___1682 < len__6099__auto___1681)){
	args1670.push((arguments[i__6100__auto___1682]));

	var G__1683 = (i__6100__auto___1682 + (1));
	i__6100__auto___1682 = G__1683;
	continue;
	} else {
	}
	break;
	}

	var G__1676 = args1670.length;
	switch (G__1676) {
	case 3:
	return cljs.core.aset.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1670.slice((3)),(0),null));
	return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.aset.cljs$core$IFn$_invoke$arity$3 = (function (array,i,val){
	return (array[i] = val);
	});

	cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic = (function (array,idx,idx2,idxv){
	var G__1677 = cljs.core.aset;
	var G__1678 = (array[idx]);
	var G__1679 = idx2;
	var G__1680 = idxv;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$4 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$4(G__1677,G__1678,G__1679,G__1680) : cljs.core.apply.call(null,G__1677,G__1678,G__1679,G__1680));
	});

	cljs.core.aset.cljs$lang$applyTo = (function (seq1671){
	var G__1672 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1671) : cljs.core.first.call(null,seq1671));
	var seq1671__$1 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1671) : cljs.core.next.call(null,seq1671));
	var G__1673 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1671__$1) : cljs.core.first.call(null,seq1671__$1));
	var seq1671__$2 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1671__$1) : cljs.core.next.call(null,seq1671__$1));
	var G__1674 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1671__$2) : cljs.core.first.call(null,seq1671__$2));
	var seq1671__$3 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1671__$2) : cljs.core.next.call(null,seq1671__$2));
	return cljs.core.aset.cljs$core$IFn$_invoke$arity$variadic(G__1672,G__1673,G__1674,seq1671__$3);
	});

	cljs.core.aset.cljs$lang$maxFixedArity = (3);

	/**
	 * Returns the length of the array. Works on arrays of all types.
	 */
	cljs.core.alength = (function cljs$core$alength(array){
	return array.length;
	});
	/**
	 * Returns an array with components set to the values in aseq. Optional type
	 *   argument accepted for compatibility with Clojure.
	 */
	cljs.core.into_array = (function cljs$core$into_array(var_args){
	var args1685 = [];
	var len__6099__auto___1691 = arguments.length;
	var i__6100__auto___1692 = (0);
	while(true){
	if((i__6100__auto___1692 < len__6099__auto___1691)){
	args1685.push((arguments[i__6100__auto___1692]));

	var G__1693 = (i__6100__auto___1692 + (1));
	i__6100__auto___1692 = G__1693;
	continue;
	} else {
	}
	break;
	}

	var G__1687 = args1685.length;
	switch (G__1687) {
	case 1:
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1685.length)].join('')));

	}
	});

	cljs.core.into_array.cljs$core$IFn$_invoke$arity$1 = (function (aseq){
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$2(null,aseq);
	});

	cljs.core.into_array.cljs$core$IFn$_invoke$arity$2 = (function (type,aseq){
	var G__1688 = (function (a,x){
	a.push(x);

	return a;
	});
	var G__1689 = [];
	var G__1690 = aseq;
	return (cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__1688,G__1689,G__1690) : cljs.core.reduce.call(null,G__1688,G__1689,G__1690));
	});

	cljs.core.into_array.cljs$lang$maxFixedArity = 2;

	/**
	 * Invoke JavaScript object method via string. Needed when the
	 *   string is not a valid unquoted property name.
	 */
	cljs.core.js_invoke = (function cljs$core$js_invoke(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___1698 = arguments.length;
	var i__6100__auto___1699 = (0);
	while(true){
	if((i__6100__auto___1699 < len__6099__auto___1698)){
	args__6102__auto__.push((arguments[i__6100__auto___1699]));

	var G__1700 = (i__6100__auto___1699 + (1));
	i__6100__auto___1699 = G__1700;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((2) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((2)),(0),null)):null);
	return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6103__auto__);
	});

	cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic = (function (obj,s,args){
	return (obj[s]).apply(obj,cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(args));
	});

	cljs.core.js_invoke.cljs$lang$maxFixedArity = (2);

	cljs.core.js_invoke.cljs$lang$applyTo = (function (seq1695){
	var G__1696 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1695) : cljs.core.first.call(null,seq1695));
	var seq1695__$1 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1695) : cljs.core.next.call(null,seq1695));
	var G__1697 = (cljs.core.first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.first.cljs$core$IFn$_invoke$arity$1(seq1695__$1) : cljs.core.first.call(null,seq1695__$1));
	var seq1695__$2 = (cljs.core.next.cljs$core$IFn$_invoke$arity$1 ? cljs.core.next.cljs$core$IFn$_invoke$arity$1(seq1695__$1) : cljs.core.next.call(null,seq1695__$1));
	return cljs.core.js_invoke.cljs$core$IFn$_invoke$arity$variadic(G__1696,G__1697,seq1695__$2);
	});


	/**
	 * Marker protocol
	 * @interface
	 */
	cljs.core.Fn = function(){};


	/**
	 * Protocol for adding the ability to invoke an object as a function.
	 *   For example, a vector can also be used to look up a value:
	 *   ([1 2 3 4] 1) => 2
	 * @interface
	 */
	cljs.core.IFn = function(){};

	cljs.core._invoke = (function cljs$core$_invoke(var_args){
	var args1701 = [];
	var len__6099__auto___1704 = arguments.length;
	var i__6100__auto___1705 = (0);
	while(true){
	if((i__6100__auto___1705 < len__6099__auto___1704)){
	args1701.push((arguments[i__6100__auto___1705]));

	var G__1706 = (i__6100__auto___1705 + (1));
	i__6100__auto___1705 = G__1706;
	continue;
	} else {
	}
	break;
	}

	var G__1703 = args1701.length;
	switch (G__1703) {
	case 1:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	case 6:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	case 7:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));

	break;
	case 8:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$8((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]));

	break;
	case 9:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$9((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]));

	break;
	case 10:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$10((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]));

	break;
	case 11:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$11((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]));

	break;
	case 12:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$12((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]));

	break;
	case 13:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$13((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]));

	break;
	case 14:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$14((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]));

	break;
	case 15:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$15((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]));

	break;
	case 16:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$16((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]));

	break;
	case 17:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$17((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]));

	break;
	case 18:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$18((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]),(arguments[(17)]));

	break;
	case 19:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$19((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]),(arguments[(17)]),(arguments[(18)]));

	break;
	case 20:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$20((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]),(arguments[(17)]),(arguments[(18)]),(arguments[(19)]));

	break;
	case 21:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$21((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]),(arguments[(17)]),(arguments[(18)]),(arguments[(19)]),(arguments[(20)]));

	break;
	case 22:
	return cljs.core._invoke.cljs$core$IFn$_invoke$arity$22((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]),(arguments[(7)]),(arguments[(8)]),(arguments[(9)]),(arguments[(10)]),(arguments[(11)]),(arguments[(12)]),(arguments[(13)]),(arguments[(14)]),(arguments[(15)]),(arguments[(16)]),(arguments[(17)]),(arguments[(18)]),(arguments[(19)]),(arguments[(20)]),(arguments[(21)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1701.length)].join('')));

	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$1 = (function (this$){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$1 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$1(this$);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(this$) : m__5781__auto__.call(null,this$));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(this$) : m__5781__auto____$1.call(null,this$));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$2 = (function (this$,a){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$2 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$2(this$,a);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(this$,a) : m__5781__auto__.call(null,this$,a));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(this$,a) : m__5781__auto____$1.call(null,this$,a));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$3 = (function (this$,a,b){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$3 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$3(this$,a,b);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(this$,a,b) : m__5781__auto__.call(null,this$,a,b));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(this$,a,b) : m__5781__auto____$1.call(null,this$,a,b));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$4 = (function (this$,a,b,c){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$4 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$4(this$,a,b,c);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$4(this$,a,b,c) : m__5781__auto__.call(null,this$,a,b,c));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$4(this$,a,b,c) : m__5781__auto____$1.call(null,this$,a,b,c));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$5 = (function (this$,a,b,c,d){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$5 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$5(this$,a,b,c,d);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$5(this$,a,b,c,d) : m__5781__auto__.call(null,this$,a,b,c,d));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$5(this$,a,b,c,d) : m__5781__auto____$1.call(null,this$,a,b,c,d));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$6 = (function (this$,a,b,c,d,e){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$6 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$6(this$,a,b,c,d,e);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$6 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$6(this$,a,b,c,d,e) : m__5781__auto__.call(null,this$,a,b,c,d,e));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$6 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$6(this$,a,b,c,d,e) : m__5781__auto____$1.call(null,this$,a,b,c,d,e));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$7 = (function (this$,a,b,c,d,e,f){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$7 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$7(this$,a,b,c,d,e,f);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$7 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$7(this$,a,b,c,d,e,f) : m__5781__auto__.call(null,this$,a,b,c,d,e,f));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$7 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$7(this$,a,b,c,d,e,f) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$8 = (function (this$,a,b,c,d,e,f,g){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$8 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$8(this$,a,b,c,d,e,f,g);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$8 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$8(this$,a,b,c,d,e,f,g) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$8 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$8(this$,a,b,c,d,e,f,g) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$9 = (function (this$,a,b,c,d,e,f,g,h){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$9 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$9(this$,a,b,c,d,e,f,g,h);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$9 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$9(this$,a,b,c,d,e,f,g,h) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$9 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$9(this$,a,b,c,d,e,f,g,h) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$10 = (function (this$,a,b,c,d,e,f,g,h,i){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$10 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$10(this$,a,b,c,d,e,f,g,h,i);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$10 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$10(this$,a,b,c,d,e,f,g,h,i) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$10 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$10(this$,a,b,c,d,e,f,g,h,i) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$11 = (function (this$,a,b,c,d,e,f,g,h,i,j){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$11 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$11(this$,a,b,c,d,e,f,g,h,i,j);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$11 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$11(this$,a,b,c,d,e,f,g,h,i,j) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$11 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$11(this$,a,b,c,d,e,f,g,h,i,j) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$12 = (function (this$,a,b,c,d,e,f,g,h,i,j,k){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$12 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$12(this$,a,b,c,d,e,f,g,h,i,j,k);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$12 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$12(this$,a,b,c,d,e,f,g,h,i,j,k) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$12 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$12(this$,a,b,c,d,e,f,g,h,i,j,k) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$13 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$13 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$13(this$,a,b,c,d,e,f,g,h,i,j,k,l);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$13 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$13(this$,a,b,c,d,e,f,g,h,i,j,k,l) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$13 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$13(this$,a,b,c,d,e,f,g,h,i,j,k,l) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$14 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$14 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$14(this$,a,b,c,d,e,f,g,h,i,j,k,l,m);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$14 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$14(this$,a,b,c,d,e,f,g,h,i,j,k,l,m) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$14 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$14(this$,a,b,c,d,e,f,g,h,i,j,k,l,m) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$15 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$15 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$15(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$15 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$15(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$15 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$15(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$16 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$16 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$16(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$16 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$16(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$16 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$16(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$17 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$17 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$17(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$17 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$17(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$17 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$17(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$18 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$18 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$18(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$18 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$18(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$18 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$18(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$19 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$19 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$19(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$19 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$19(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$19 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$19(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$20 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$20 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$20(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$20 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$20(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$20 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$20(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$21 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$21 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$21(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$21 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$21(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$21 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$21(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$core$IFn$_invoke$arity$22 = (function (this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	if((!((this$ == null))) && (!((this$.cljs$core$IFn$_invoke$arity$22 == null)))){
	return this$.cljs$core$IFn$_invoke$arity$22(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._invoke[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$22 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$22(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest) : m__5781__auto__.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest));
	} else {
	var m__5781__auto____$1 = (cljs.core._invoke["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$22 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$22(this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest) : m__5781__auto____$1.call(null,this$,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest));
	} else {
	throw cljs.core.missing_protocol("IFn.-invoke",this$);
	}
	}
	}
	});

	cljs.core._invoke.cljs$lang$maxFixedArity = 22;



	/**
	 * Protocol for cloning a value.
	 * @interface
	 */
	cljs.core.ICloneable = function(){};

	/**
	 * Creates a clone of value.
	 */
	cljs.core._clone = (function cljs$core$_clone(value){
	if((!((value == null))) && (!((value.cljs$core$ICloneable$_clone$arity$1 == null)))){
	return value.cljs$core$ICloneable$_clone$arity$1(value);
	} else {
	var x__5780__auto__ = (((value == null))?null:value);
	var m__5781__auto__ = (cljs.core._clone[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(value) : m__5781__auto__.call(null,value));
	} else {
	var m__5781__auto____$1 = (cljs.core._clone["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(value) : m__5781__auto____$1.call(null,value));
	} else {
	throw cljs.core.missing_protocol("ICloneable.-clone",value);
	}
	}
	}
	});


	/**
	 * Protocol for adding the ability to count a collection in constant time.
	 * @interface
	 */
	cljs.core.ICounted = function(){};

	/**
	 * Calculates the count of coll in constant time. Used by cljs.core/count.
	 */
	cljs.core._count = (function cljs$core$_count(coll){
	if((!((coll == null))) && (!((coll.cljs$core$ICounted$_count$arity$1 == null)))){
	return coll.cljs$core$ICounted$_count$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._count[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._count["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("ICounted.-count",coll);
	}
	}
	}
	});


	/**
	 * Protocol for creating an empty collection.
	 * @interface
	 */
	cljs.core.IEmptyableCollection = function(){};

	/**
	 * Returns an empty collection of the same category as coll. Used
	 *   by cljs.core/empty.
	 */
	cljs.core._empty = (function cljs$core$_empty(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IEmptyableCollection$_empty$arity$1 == null)))){
	return coll.cljs$core$IEmptyableCollection$_empty$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._empty[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._empty["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IEmptyableCollection.-empty",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding to a collection.
	 * @interface
	 */
	cljs.core.ICollection = function(){};

	/**
	 * Returns a new collection of coll with o added to it. The new item
	 *   should be added to the most efficient place, e.g.
	 *   (conj [1 2 3 4] 5) => [1 2 3 4 5]
	 *   (conj '(2 3 4 5) 1) => '(1 2 3 4 5)
	 */
	cljs.core._conj = (function cljs$core$_conj(coll,o){
	if((!((coll == null))) && (!((coll.cljs$core$ICollection$_conj$arity$2 == null)))){
	return coll.cljs$core$ICollection$_conj$arity$2(coll,o);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._conj[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,o) : m__5781__auto__.call(null,coll,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._conj["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,o) : m__5781__auto____$1.call(null,coll,o));
	} else {
	throw cljs.core.missing_protocol("ICollection.-conj",coll);
	}
	}
	}
	});


	/**
	 * Protocol for collections to provide indexed-based access to their items.
	 * @interface
	 */
	cljs.core.IIndexed = function(){};

	/**
	 * Returns the value at the index n in the collection coll.
	 *   Returns not-found if index n is out of bounds and not-found is supplied.
	 */
	cljs.core._nth = (function cljs$core$_nth(var_args){
	var args1708 = [];
	var len__6099__auto___1711 = arguments.length;
	var i__6100__auto___1712 = (0);
	while(true){
	if((i__6100__auto___1712 < len__6099__auto___1711)){
	args1708.push((arguments[i__6100__auto___1712]));

	var G__1713 = (i__6100__auto___1712 + (1));
	i__6100__auto___1712 = G__1713;
	continue;
	} else {
	}
	break;
	}

	var G__1710 = args1708.length;
	switch (G__1710) {
	case 2:
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1708.length)].join('')));

	}
	});

	cljs.core._nth.cljs$core$IFn$_invoke$arity$2 = (function (coll,n){
	if((!((coll == null))) && (!((coll.cljs$core$IIndexed$_nth$arity$2 == null)))){
	return coll.cljs$core$IIndexed$_nth$arity$2(coll,n);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._nth[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,n) : m__5781__auto__.call(null,coll,n));
	} else {
	var m__5781__auto____$1 = (cljs.core._nth["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,n) : m__5781__auto____$1.call(null,coll,n));
	} else {
	throw cljs.core.missing_protocol("IIndexed.-nth",coll);
	}
	}
	}
	});

	cljs.core._nth.cljs$core$IFn$_invoke$arity$3 = (function (coll,n,not_found){
	if((!((coll == null))) && (!((coll.cljs$core$IIndexed$_nth$arity$3 == null)))){
	return coll.cljs$core$IIndexed$_nth$arity$3(coll,n,not_found);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._nth[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,n,not_found) : m__5781__auto__.call(null,coll,n,not_found));
	} else {
	var m__5781__auto____$1 = (cljs.core._nth["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,n,not_found) : m__5781__auto____$1.call(null,coll,n,not_found));
	} else {
	throw cljs.core.missing_protocol("IIndexed.-nth",coll);
	}
	}
	}
	});

	cljs.core._nth.cljs$lang$maxFixedArity = 3;



	/**
	 * Marker protocol indicating an array sequence.
	 * @interface
	 */
	cljs.core.ASeq = function(){};


	/**
	 * Protocol for collections to provide access to their items as sequences.
	 * @interface
	 */
	cljs.core.ISeq = function(){};

	/**
	 * Returns the first item in the collection coll. Used by cljs.core/first.
	 */
	cljs.core._first = (function cljs$core$_first(coll){
	if((!((coll == null))) && (!((coll.cljs$core$ISeq$_first$arity$1 == null)))){
	return coll.cljs$core$ISeq$_first$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._first[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._first["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("ISeq.-first",coll);
	}
	}
	}
	});

	/**
	 * Returns a new collection of coll without the first item. It should
	 *   always return a seq, e.g.
	 *   (rest []) => ()
	 *   (rest nil) => ()
	 */
	cljs.core._rest = (function cljs$core$_rest(coll){
	if((!((coll == null))) && (!((coll.cljs$core$ISeq$_rest$arity$1 == null)))){
	return coll.cljs$core$ISeq$_rest$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._rest[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._rest["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("ISeq.-rest",coll);
	}
	}
	}
	});


	/**
	 * Protocol for accessing the next items of a collection.
	 * @interface
	 */
	cljs.core.INext = function(){};

	/**
	 * Returns a new collection of coll without the first item. In contrast to
	 *   rest, it should return nil if there are no more items, e.g.
	 *   (next []) => nil
	 *   (next nil) => nil
	 */
	cljs.core._next = (function cljs$core$_next(coll){
	if((!((coll == null))) && (!((coll.cljs$core$INext$_next$arity$1 == null)))){
	return coll.cljs$core$INext$_next$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._next[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._next["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("INext.-next",coll);
	}
	}
	}
	});


	/**
	 * Protocol for looking up a value in a data structure.
	 * @interface
	 */
	cljs.core.ILookup = function(){};

	/**
	 * Use k to look up a value in o. If not-found is supplied and k is not
	 *   a valid value that can be used for look up, not-found is returned.
	 */
	cljs.core._lookup = (function cljs$core$_lookup(var_args){
	var args1715 = [];
	var len__6099__auto___1718 = arguments.length;
	var i__6100__auto___1719 = (0);
	while(true){
	if((i__6100__auto___1719 < len__6099__auto___1718)){
	args1715.push((arguments[i__6100__auto___1719]));

	var G__1720 = (i__6100__auto___1719 + (1));
	i__6100__auto___1719 = G__1720;
	continue;
	} else {
	}
	break;
	}

	var G__1717 = args1715.length;
	switch (G__1717) {
	case 2:
	return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1715.length)].join('')));

	}
	});

	cljs.core._lookup.cljs$core$IFn$_invoke$arity$2 = (function (o,k){
	if((!((o == null))) && (!((o.cljs$core$ILookup$_lookup$arity$2 == null)))){
	return o.cljs$core$ILookup$_lookup$arity$2(o,k);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._lookup[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,k) : m__5781__auto__.call(null,o,k));
	} else {
	var m__5781__auto____$1 = (cljs.core._lookup["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,k) : m__5781__auto____$1.call(null,o,k));
	} else {
	throw cljs.core.missing_protocol("ILookup.-lookup",o);
	}
	}
	}
	});

	cljs.core._lookup.cljs$core$IFn$_invoke$arity$3 = (function (o,k,not_found){
	if((!((o == null))) && (!((o.cljs$core$ILookup$_lookup$arity$3 == null)))){
	return o.cljs$core$ILookup$_lookup$arity$3(o,k,not_found);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._lookup[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(o,k,not_found) : m__5781__auto__.call(null,o,k,not_found));
	} else {
	var m__5781__auto____$1 = (cljs.core._lookup["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(o,k,not_found) : m__5781__auto____$1.call(null,o,k,not_found));
	} else {
	throw cljs.core.missing_protocol("ILookup.-lookup",o);
	}
	}
	}
	});

	cljs.core._lookup.cljs$lang$maxFixedArity = 3;



	/**
	 * Protocol for adding associativity to collections.
	 * @interface
	 */
	cljs.core.IAssociative = function(){};

	/**
	 * Returns true if k is a key in coll.
	 */
	cljs.core._contains_key_QMARK_ = (function cljs$core$_contains_key_QMARK_(coll,k){
	if((!((coll == null))) && (!((coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 == null)))){
	return coll.cljs$core$IAssociative$_contains_key_QMARK_$arity$2(coll,k);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._contains_key_QMARK_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto__.call(null,coll,k));
	} else {
	var m__5781__auto____$1 = (cljs.core._contains_key_QMARK_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto____$1.call(null,coll,k));
	} else {
	throw cljs.core.missing_protocol("IAssociative.-contains-key?",coll);
	}
	}
	}
	});

	/**
	 * Returns a new collection of coll with a mapping from key k to
	 *   value v added to it.
	 */
	cljs.core._assoc = (function cljs$core$_assoc(coll,k,v){
	if((!((coll == null))) && (!((coll.cljs$core$IAssociative$_assoc$arity$3 == null)))){
	return coll.cljs$core$IAssociative$_assoc$arity$3(coll,k,v);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._assoc[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,k,v) : m__5781__auto__.call(null,coll,k,v));
	} else {
	var m__5781__auto____$1 = (cljs.core._assoc["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,k,v) : m__5781__auto____$1.call(null,coll,k,v));
	} else {
	throw cljs.core.missing_protocol("IAssociative.-assoc",coll);
	}
	}
	}
	});


	/**
	 * Protocol for implementing entry finding in collections.
	 * @interface
	 */
	cljs.core.IFind = function(){};

	cljs.core._find = (function cljs$core$_find(coll,k){
	if((!((coll == null))) && (!((coll.cljs$core$IFind$_find$arity$2 == null)))){
	return coll.cljs$core$IFind$_find$arity$2(coll,k);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._find[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto__.call(null,coll,k));
	} else {
	var m__5781__auto____$1 = (cljs.core._find["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto____$1.call(null,coll,k));
	} else {
	throw cljs.core.missing_protocol("IFind.-find",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding mapping functionality to collections.
	 * @interface
	 */
	cljs.core.IMap = function(){};

	/**
	 * Returns a new collection of coll without the mapping for key k.
	 */
	cljs.core._dissoc = (function cljs$core$_dissoc(coll,k){
	if((!((coll == null))) && (!((coll.cljs$core$IMap$_dissoc$arity$2 == null)))){
	return coll.cljs$core$IMap$_dissoc$arity$2(coll,k);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._dissoc[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto__.call(null,coll,k));
	} else {
	var m__5781__auto____$1 = (cljs.core._dissoc["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,k) : m__5781__auto____$1.call(null,coll,k));
	} else {
	throw cljs.core.missing_protocol("IMap.-dissoc",coll);
	}
	}
	}
	});


	/**
	 * Protocol for examining a map entry.
	 * @interface
	 */
	cljs.core.IMapEntry = function(){};

	/**
	 * Returns the key of the map entry.
	 */
	cljs.core._key = (function cljs$core$_key(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IMapEntry$_key$arity$1 == null)))){
	return coll.cljs$core$IMapEntry$_key$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._key[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._key["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IMapEntry.-key",coll);
	}
	}
	}
	});

	/**
	 * Returns the value of the map entry.
	 */
	cljs.core._val = (function cljs$core$_val(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IMapEntry$_val$arity$1 == null)))){
	return coll.cljs$core$IMapEntry$_val$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._val[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._val["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IMapEntry.-val",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding set functionality to a collection.
	 * @interface
	 */
	cljs.core.ISet = function(){};

	/**
	 * Returns a new collection of coll that does not contain v.
	 */
	cljs.core._disjoin = (function cljs$core$_disjoin(coll,v){
	if((!((coll == null))) && (!((coll.cljs$core$ISet$_disjoin$arity$2 == null)))){
	return coll.cljs$core$ISet$_disjoin$arity$2(coll,v);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._disjoin[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,v) : m__5781__auto__.call(null,coll,v));
	} else {
	var m__5781__auto____$1 = (cljs.core._disjoin["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,v) : m__5781__auto____$1.call(null,coll,v));
	} else {
	throw cljs.core.missing_protocol("ISet.-disjoin",coll);
	}
	}
	}
	});


	/**
	 * Protocol for collections to provide access to their items as stacks. The top
	 *   of the stack should be accessed in the most efficient way for the different
	 *   data structures.
	 * @interface
	 */
	cljs.core.IStack = function(){};

	/**
	 * Returns the item from the top of the stack. Is used by cljs.core/peek.
	 */
	cljs.core._peek = (function cljs$core$_peek(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IStack$_peek$arity$1 == null)))){
	return coll.cljs$core$IStack$_peek$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._peek[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._peek["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IStack.-peek",coll);
	}
	}
	}
	});

	/**
	 * Returns a new stack without the item on top of the stack. Is used
	 *   by cljs.core/pop.
	 */
	cljs.core._pop = (function cljs$core$_pop(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IStack$_pop$arity$1 == null)))){
	return coll.cljs$core$IStack$_pop$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._pop[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._pop["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IStack.-pop",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding vector functionality to collections.
	 * @interface
	 */
	cljs.core.IVector = function(){};

	/**
	 * Returns a new vector with value val added at position n.
	 */
	cljs.core._assoc_n = (function cljs$core$_assoc_n(coll,n,val){
	if((!((coll == null))) && (!((coll.cljs$core$IVector$_assoc_n$arity$3 == null)))){
	return coll.cljs$core$IVector$_assoc_n$arity$3(coll,n,val);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._assoc_n[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,n,val) : m__5781__auto__.call(null,coll,n,val));
	} else {
	var m__5781__auto____$1 = (cljs.core._assoc_n["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,n,val) : m__5781__auto____$1.call(null,coll,n,val));
	} else {
	throw cljs.core.missing_protocol("IVector.-assoc-n",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding dereference functionality to a reference.
	 * @interface
	 */
	cljs.core.IDeref = function(){};

	/**
	 * Returns the value of the reference o.
	 */
	cljs.core._deref = (function cljs$core$_deref(o){
	if((!((o == null))) && (!((o.cljs$core$IDeref$_deref$arity$1 == null)))){
	return o.cljs$core$IDeref$_deref$arity$1(o);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._deref[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto__.call(null,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._deref["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto____$1.call(null,o));
	} else {
	throw cljs.core.missing_protocol("IDeref.-deref",o);
	}
	}
	}
	});


	/**
	 * @interface
	 */
	cljs.core.IDerefWithTimeout = function(){};

	cljs.core._deref_with_timeout = (function cljs$core$_deref_with_timeout(o,msec,timeout_val){
	if((!((o == null))) && (!((o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3 == null)))){
	return o.cljs$core$IDerefWithTimeout$_deref_with_timeout$arity$3(o,msec,timeout_val);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._deref_with_timeout[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(o,msec,timeout_val) : m__5781__auto__.call(null,o,msec,timeout_val));
	} else {
	var m__5781__auto____$1 = (cljs.core._deref_with_timeout["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(o,msec,timeout_val) : m__5781__auto____$1.call(null,o,msec,timeout_val));
	} else {
	throw cljs.core.missing_protocol("IDerefWithTimeout.-deref-with-timeout",o);
	}
	}
	}
	});


	/**
	 * Protocol for accessing the metadata of an object.
	 * @interface
	 */
	cljs.core.IMeta = function(){};

	/**
	 * Returns the metadata of object o.
	 */
	cljs.core._meta = (function cljs$core$_meta(o){
	if((!((o == null))) && (!((o.cljs$core$IMeta$_meta$arity$1 == null)))){
	return o.cljs$core$IMeta$_meta$arity$1(o);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._meta[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto__.call(null,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._meta["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto____$1.call(null,o));
	} else {
	throw cljs.core.missing_protocol("IMeta.-meta",o);
	}
	}
	}
	});


	/**
	 * Protocol for adding metadata to an object.
	 * @interface
	 */
	cljs.core.IWithMeta = function(){};

	/**
	 * Returns a new object with value of o and metadata meta added to it.
	 */
	cljs.core._with_meta = (function cljs$core$_with_meta(o,meta){
	if((!((o == null))) && (!((o.cljs$core$IWithMeta$_with_meta$arity$2 == null)))){
	return o.cljs$core$IWithMeta$_with_meta$arity$2(o,meta);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._with_meta[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,meta) : m__5781__auto__.call(null,o,meta));
	} else {
	var m__5781__auto____$1 = (cljs.core._with_meta["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,meta) : m__5781__auto____$1.call(null,o,meta));
	} else {
	throw cljs.core.missing_protocol("IWithMeta.-with-meta",o);
	}
	}
	}
	});


	/**
	 * Protocol for seq types that can reduce themselves.
	 *   Called by cljs.core/reduce.
	 * @interface
	 */
	cljs.core.IReduce = function(){};

	/**
	 * f should be a function of 2 arguments. If start is not supplied,
	 *   returns the result of applying f to the first 2 items in coll, then
	 *   applying f to that result and the 3rd item, etc.
	 */
	cljs.core._reduce = (function cljs$core$_reduce(var_args){
	var args1722 = [];
	var len__6099__auto___1725 = arguments.length;
	var i__6100__auto___1726 = (0);
	while(true){
	if((i__6100__auto___1726 < len__6099__auto___1725)){
	args1722.push((arguments[i__6100__auto___1726]));

	var G__1727 = (i__6100__auto___1726 + (1));
	i__6100__auto___1726 = G__1727;
	continue;
	} else {
	}
	break;
	}

	var G__1724 = args1722.length;
	switch (G__1724) {
	case 2:
	return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1722.length)].join('')));

	}
	});

	cljs.core._reduce.cljs$core$IFn$_invoke$arity$2 = (function (coll,f){
	if((!((coll == null))) && (!((coll.cljs$core$IReduce$_reduce$arity$2 == null)))){
	return coll.cljs$core$IReduce$_reduce$arity$2(coll,f);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._reduce[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,f) : m__5781__auto__.call(null,coll,f));
	} else {
	var m__5781__auto____$1 = (cljs.core._reduce["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,f) : m__5781__auto____$1.call(null,coll,f));
	} else {
	throw cljs.core.missing_protocol("IReduce.-reduce",coll);
	}
	}
	}
	});

	cljs.core._reduce.cljs$core$IFn$_invoke$arity$3 = (function (coll,f,start){
	if((!((coll == null))) && (!((coll.cljs$core$IReduce$_reduce$arity$3 == null)))){
	return coll.cljs$core$IReduce$_reduce$arity$3(coll,f,start);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._reduce[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,f,start) : m__5781__auto__.call(null,coll,f,start));
	} else {
	var m__5781__auto____$1 = (cljs.core._reduce["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,f,start) : m__5781__auto____$1.call(null,coll,f,start));
	} else {
	throw cljs.core.missing_protocol("IReduce.-reduce",coll);
	}
	}
	}
	});

	cljs.core._reduce.cljs$lang$maxFixedArity = 3;



	/**
	 * Protocol for associative types that can reduce themselves
	 *   via a function of key and val. Called by cljs.core/reduce-kv.
	 * @interface
	 */
	cljs.core.IKVReduce = function(){};

	/**
	 * Reduces an associative collection and returns the result. f should be
	 *   a function that takes three arguments.
	 */
	cljs.core._kv_reduce = (function cljs$core$_kv_reduce(coll,f,init){
	if((!((coll == null))) && (!((coll.cljs$core$IKVReduce$_kv_reduce$arity$3 == null)))){
	return coll.cljs$core$IKVReduce$_kv_reduce$arity$3(coll,f,init);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._kv_reduce[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,f,init) : m__5781__auto__.call(null,coll,f,init));
	} else {
	var m__5781__auto____$1 = (cljs.core._kv_reduce["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,f,init) : m__5781__auto____$1.call(null,coll,f,init));
	} else {
	throw cljs.core.missing_protocol("IKVReduce.-kv-reduce",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding value comparison functionality to a type.
	 * @interface
	 */
	cljs.core.IEquiv = function(){};

	/**
	 * Returns true if o and other are equal, false otherwise.
	 */
	cljs.core._equiv = (function cljs$core$_equiv(o,other){
	if((!((o == null))) && (!((o.cljs$core$IEquiv$_equiv$arity$2 == null)))){
	return o.cljs$core$IEquiv$_equiv$arity$2(o,other);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._equiv[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,other) : m__5781__auto__.call(null,o,other));
	} else {
	var m__5781__auto____$1 = (cljs.core._equiv["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,other) : m__5781__auto____$1.call(null,o,other));
	} else {
	throw cljs.core.missing_protocol("IEquiv.-equiv",o);
	}
	}
	}
	});


	/**
	 * Protocol for adding hashing functionality to a type.
	 * @interface
	 */
	cljs.core.IHash = function(){};

	/**
	 * Returns the hash code of o.
	 */
	cljs.core._hash = (function cljs$core$_hash(o){
	if((!((o == null))) && (!((o.cljs$core$IHash$_hash$arity$1 == null)))){
	return o.cljs$core$IHash$_hash$arity$1(o);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._hash[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto__.call(null,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._hash["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto____$1.call(null,o));
	} else {
	throw cljs.core.missing_protocol("IHash.-hash",o);
	}
	}
	}
	});


	/**
	 * Protocol for adding the ability to a type to be transformed into a sequence.
	 * @interface
	 */
	cljs.core.ISeqable = function(){};

	/**
	 * Returns a seq of o, or nil if o is empty.
	 */
	cljs.core._seq = (function cljs$core$_seq(o){
	if((!((o == null))) && (!((o.cljs$core$ISeqable$_seq$arity$1 == null)))){
	return o.cljs$core$ISeqable$_seq$arity$1(o);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._seq[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto__.call(null,o));
	} else {
	var m__5781__auto____$1 = (cljs.core._seq["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(o) : m__5781__auto____$1.call(null,o));
	} else {
	throw cljs.core.missing_protocol("ISeqable.-seq",o);
	}
	}
	}
	});


	/**
	 * Marker interface indicating a persistent collection of sequential items
	 * @interface
	 */
	cljs.core.ISequential = function(){};


	/**
	 * Marker interface indicating a persistent list
	 * @interface
	 */
	cljs.core.IList = function(){};


	/**
	 * Marker interface indicating a record object
	 * @interface
	 */
	cljs.core.IRecord = function(){};


	/**
	 * Protocol for reversing a seq.
	 * @interface
	 */
	cljs.core.IReversible = function(){};

	/**
	 * Returns a seq of the items in coll in reversed order.
	 */
	cljs.core._rseq = (function cljs$core$_rseq(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IReversible$_rseq$arity$1 == null)))){
	return coll.cljs$core$IReversible$_rseq$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._rseq[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._rseq["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IReversible.-rseq",coll);
	}
	}
	}
	});


	/**
	 * Protocol for a collection which can represent their items
	 *   in a sorted manner. 
	 * @interface
	 */
	cljs.core.ISorted = function(){};

	/**
	 * Returns a sorted seq from coll in either ascending or descending order.
	 */
	cljs.core._sorted_seq = (function cljs$core$_sorted_seq(coll,ascending_QMARK_){
	if((!((coll == null))) && (!((coll.cljs$core$ISorted$_sorted_seq$arity$2 == null)))){
	return coll.cljs$core$ISorted$_sorted_seq$arity$2(coll,ascending_QMARK_);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._sorted_seq[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,ascending_QMARK_) : m__5781__auto__.call(null,coll,ascending_QMARK_));
	} else {
	var m__5781__auto____$1 = (cljs.core._sorted_seq["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,ascending_QMARK_) : m__5781__auto____$1.call(null,coll,ascending_QMARK_));
	} else {
	throw cljs.core.missing_protocol("ISorted.-sorted-seq",coll);
	}
	}
	}
	});

	/**
	 * Returns a sorted seq from coll in either ascending or descending order.
	 *   If ascending is true, the result should contain all items which are > or >=
	 *   than k. If ascending is false, the result should contain all items which
	 *   are < or <= than k, e.g.
	 *   (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 true) => (3 4 5)
	 *   (-sorted-seq-from (sorted-set 1 2 3 4 5) 3 false) => (3 2 1)
	 */
	cljs.core._sorted_seq_from = (function cljs$core$_sorted_seq_from(coll,k,ascending_QMARK_){
	if((!((coll == null))) && (!((coll.cljs$core$ISorted$_sorted_seq_from$arity$3 == null)))){
	return coll.cljs$core$ISorted$_sorted_seq_from$arity$3(coll,k,ascending_QMARK_);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._sorted_seq_from[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(coll,k,ascending_QMARK_) : m__5781__auto__.call(null,coll,k,ascending_QMARK_));
	} else {
	var m__5781__auto____$1 = (cljs.core._sorted_seq_from["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(coll,k,ascending_QMARK_) : m__5781__auto____$1.call(null,coll,k,ascending_QMARK_));
	} else {
	throw cljs.core.missing_protocol("ISorted.-sorted-seq-from",coll);
	}
	}
	}
	});

	/**
	 * Returns the key for entry.
	 */
	cljs.core._entry_key = (function cljs$core$_entry_key(coll,entry){
	if((!((coll == null))) && (!((coll.cljs$core$ISorted$_entry_key$arity$2 == null)))){
	return coll.cljs$core$ISorted$_entry_key$arity$2(coll,entry);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._entry_key[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(coll,entry) : m__5781__auto__.call(null,coll,entry));
	} else {
	var m__5781__auto____$1 = (cljs.core._entry_key["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(coll,entry) : m__5781__auto____$1.call(null,coll,entry));
	} else {
	throw cljs.core.missing_protocol("ISorted.-entry-key",coll);
	}
	}
	}
	});

	/**
	 * Returns the comparator for coll.
	 */
	cljs.core._comparator = (function cljs$core$_comparator(coll){
	if((!((coll == null))) && (!((coll.cljs$core$ISorted$_comparator$arity$1 == null)))){
	return coll.cljs$core$ISorted$_comparator$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._comparator[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._comparator["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("ISorted.-comparator",coll);
	}
	}
	}
	});


	/**
	 * Protocol for writing. Currently only implemented by StringBufferWriter.
	 * @interface
	 */
	cljs.core.IWriter = function(){};

	/**
	 * Writes s with writer and returns the result.
	 */
	cljs.core._write = (function cljs$core$_write(writer,s){
	if((!((writer == null))) && (!((writer.cljs$core$IWriter$_write$arity$2 == null)))){
	return writer.cljs$core$IWriter$_write$arity$2(writer,s);
	} else {
	var x__5780__auto__ = (((writer == null))?null:writer);
	var m__5781__auto__ = (cljs.core._write[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(writer,s) : m__5781__auto__.call(null,writer,s));
	} else {
	var m__5781__auto____$1 = (cljs.core._write["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(writer,s) : m__5781__auto____$1.call(null,writer,s));
	} else {
	throw cljs.core.missing_protocol("IWriter.-write",writer);
	}
	}
	}
	});

	/**
	 * Flush writer.
	 */
	cljs.core._flush = (function cljs$core$_flush(writer){
	if((!((writer == null))) && (!((writer.cljs$core$IWriter$_flush$arity$1 == null)))){
	return writer.cljs$core$IWriter$_flush$arity$1(writer);
	} else {
	var x__5780__auto__ = (((writer == null))?null:writer);
	var m__5781__auto__ = (cljs.core._flush[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(writer) : m__5781__auto__.call(null,writer));
	} else {
	var m__5781__auto____$1 = (cljs.core._flush["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(writer) : m__5781__auto____$1.call(null,writer));
	} else {
	throw cljs.core.missing_protocol("IWriter.-flush",writer);
	}
	}
	}
	});


	/**
	 * The old IPrintable protocol's implementation consisted of building a giant
	 * list of strings to concatenate.  This involved lots of concat calls,
	 * intermediate vectors, and lazy-seqs, and was very slow in some older JS
	 * engines.  IPrintWithWriter implements printing via the IWriter protocol, so it
	 * be implemented efficiently in terms of e.g. a StringBuffer append.
	 * @interface
	 */
	cljs.core.IPrintWithWriter = function(){};

	cljs.core._pr_writer = (function cljs$core$_pr_writer(o,writer,opts){
	if((!((o == null))) && (!((o.cljs$core$IPrintWithWriter$_pr_writer$arity$3 == null)))){
	return o.cljs$core$IPrintWithWriter$_pr_writer$arity$3(o,writer,opts);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._pr_writer[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(o,writer,opts) : m__5781__auto__.call(null,o,writer,opts));
	} else {
	var m__5781__auto____$1 = (cljs.core._pr_writer["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(o,writer,opts) : m__5781__auto____$1.call(null,o,writer,opts));
	} else {
	throw cljs.core.missing_protocol("IPrintWithWriter.-pr-writer",o);
	}
	}
	}
	});


	/**
	 * Protocol for types which can have a deferred realization. Currently only
	 *   implemented by Delay and LazySeq.
	 * @interface
	 */
	cljs.core.IPending = function(){};

	/**
	 * Returns true if a value for x has been produced, false otherwise.
	 */
	cljs.core._realized_QMARK_ = (function cljs$core$_realized_QMARK_(x){
	if((!((x == null))) && (!((x.cljs$core$IPending$_realized_QMARK_$arity$1 == null)))){
	return x.cljs$core$IPending$_realized_QMARK_$arity$1(x);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._realized_QMARK_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto__.call(null,x));
	} else {
	var m__5781__auto____$1 = (cljs.core._realized_QMARK_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto____$1.call(null,x));
	} else {
	throw cljs.core.missing_protocol("IPending.-realized?",x);
	}
	}
	}
	});


	/**
	 * Protocol for types that can be watched. Currently only implemented by Atom.
	 * @interface
	 */
	cljs.core.IWatchable = function(){};

	/**
	 * Calls all watchers with this, oldval and newval.
	 */
	cljs.core._notify_watches = (function cljs$core$_notify_watches(this$,oldval,newval){
	if((!((this$ == null))) && (!((this$.cljs$core$IWatchable$_notify_watches$arity$3 == null)))){
	return this$.cljs$core$IWatchable$_notify_watches$arity$3(this$,oldval,newval);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._notify_watches[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(this$,oldval,newval) : m__5781__auto__.call(null,this$,oldval,newval));
	} else {
	var m__5781__auto____$1 = (cljs.core._notify_watches["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(this$,oldval,newval) : m__5781__auto____$1.call(null,this$,oldval,newval));
	} else {
	throw cljs.core.missing_protocol("IWatchable.-notify-watches",this$);
	}
	}
	}
	});

	/**
	 * Adds a watcher function f to this. Keys must be unique per reference,
	 *   and can be used to remove the watch with -remove-watch.
	 */
	cljs.core._add_watch = (function cljs$core$_add_watch(this$,key,f){
	if((!((this$ == null))) && (!((this$.cljs$core$IWatchable$_add_watch$arity$3 == null)))){
	return this$.cljs$core$IWatchable$_add_watch$arity$3(this$,key,f);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._add_watch[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(this$,key,f) : m__5781__auto__.call(null,this$,key,f));
	} else {
	var m__5781__auto____$1 = (cljs.core._add_watch["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(this$,key,f) : m__5781__auto____$1.call(null,this$,key,f));
	} else {
	throw cljs.core.missing_protocol("IWatchable.-add-watch",this$);
	}
	}
	}
	});

	/**
	 * Removes watcher that corresponds to key from this.
	 */
	cljs.core._remove_watch = (function cljs$core$_remove_watch(this$,key){
	if((!((this$ == null))) && (!((this$.cljs$core$IWatchable$_remove_watch$arity$2 == null)))){
	return this$.cljs$core$IWatchable$_remove_watch$arity$2(this$,key);
	} else {
	var x__5780__auto__ = (((this$ == null))?null:this$);
	var m__5781__auto__ = (cljs.core._remove_watch[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(this$,key) : m__5781__auto__.call(null,this$,key));
	} else {
	var m__5781__auto____$1 = (cljs.core._remove_watch["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(this$,key) : m__5781__auto____$1.call(null,this$,key));
	} else {
	throw cljs.core.missing_protocol("IWatchable.-remove-watch",this$);
	}
	}
	}
	});


	/**
	 * Protocol for collections which can transformed to transients.
	 * @interface
	 */
	cljs.core.IEditableCollection = function(){};

	/**
	 * Returns a new, transient version of the collection, in constant time.
	 */
	cljs.core._as_transient = (function cljs$core$_as_transient(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IEditableCollection$_as_transient$arity$1 == null)))){
	return coll.cljs$core$IEditableCollection$_as_transient$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._as_transient[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._as_transient["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IEditableCollection.-as-transient",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding basic functionality to transient collections.
	 * @interface
	 */
	cljs.core.ITransientCollection = function(){};

	/**
	 * Adds value val to tcoll and returns tcoll.
	 */
	cljs.core._conj_BANG_ = (function cljs$core$_conj_BANG_(tcoll,val){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2 == null)))){
	return tcoll.cljs$core$ITransientCollection$_conj_BANG_$arity$2(tcoll,val);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._conj_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(tcoll,val) : m__5781__auto__.call(null,tcoll,val));
	} else {
	var m__5781__auto____$1 = (cljs.core._conj_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll,val) : m__5781__auto____$1.call(null,tcoll,val));
	} else {
	throw cljs.core.missing_protocol("ITransientCollection.-conj!",tcoll);
	}
	}
	}
	});

	/**
	 * Creates a persistent data structure from tcoll and returns it.
	 */
	cljs.core._persistent_BANG_ = (function cljs$core$_persistent_BANG_(tcoll){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 == null)))){
	return tcoll.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(tcoll);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._persistent_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5781__auto__.call(null,tcoll));
	} else {
	var m__5781__auto____$1 = (cljs.core._persistent_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5781__auto____$1.call(null,tcoll));
	} else {
	throw cljs.core.missing_protocol("ITransientCollection.-persistent!",tcoll);
	}
	}
	}
	});


	/**
	 * Protocol for adding associativity to transient collections.
	 * @interface
	 */
	cljs.core.ITransientAssociative = function(){};

	/**
	 * Returns a new transient collection of tcoll with a mapping from key to
	 *   val added to it.
	 */
	cljs.core._assoc_BANG_ = (function cljs$core$_assoc_BANG_(tcoll,key,val){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 == null)))){
	return tcoll.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(tcoll,key,val);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._assoc_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(tcoll,key,val) : m__5781__auto__.call(null,tcoll,key,val));
	} else {
	var m__5781__auto____$1 = (cljs.core._assoc_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll,key,val) : m__5781__auto____$1.call(null,tcoll,key,val));
	} else {
	throw cljs.core.missing_protocol("ITransientAssociative.-assoc!",tcoll);
	}
	}
	}
	});


	/**
	 * Protocol for adding mapping functionality to transient collections.
	 * @interface
	 */
	cljs.core.ITransientMap = function(){};

	/**
	 * Returns a new transient collection of tcoll without the mapping for key.
	 */
	cljs.core._dissoc_BANG_ = (function cljs$core$_dissoc_BANG_(tcoll,key){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 == null)))){
	return tcoll.cljs$core$ITransientMap$_dissoc_BANG_$arity$2(tcoll,key);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._dissoc_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(tcoll,key) : m__5781__auto__.call(null,tcoll,key));
	} else {
	var m__5781__auto____$1 = (cljs.core._dissoc_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll,key) : m__5781__auto____$1.call(null,tcoll,key));
	} else {
	throw cljs.core.missing_protocol("ITransientMap.-dissoc!",tcoll);
	}
	}
	}
	});


	/**
	 * Protocol for adding vector functionality to transient collections.
	 * @interface
	 */
	cljs.core.ITransientVector = function(){};

	/**
	 * Returns tcoll with value val added at position n.
	 */
	cljs.core._assoc_n_BANG_ = (function cljs$core$_assoc_n_BANG_(tcoll,n,val){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 == null)))){
	return tcoll.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(tcoll,n,val);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._assoc_n_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(tcoll,n,val) : m__5781__auto__.call(null,tcoll,n,val));
	} else {
	var m__5781__auto____$1 = (cljs.core._assoc_n_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(tcoll,n,val) : m__5781__auto____$1.call(null,tcoll,n,val));
	} else {
	throw cljs.core.missing_protocol("ITransientVector.-assoc-n!",tcoll);
	}
	}
	}
	});

	/**
	 * Returns tcoll with the last item removed from it.
	 */
	cljs.core._pop_BANG_ = (function cljs$core$_pop_BANG_(tcoll){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1 == null)))){
	return tcoll.cljs$core$ITransientVector$_pop_BANG_$arity$1(tcoll);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._pop_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5781__auto__.call(null,tcoll));
	} else {
	var m__5781__auto____$1 = (cljs.core._pop_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(tcoll) : m__5781__auto____$1.call(null,tcoll));
	} else {
	throw cljs.core.missing_protocol("ITransientVector.-pop!",tcoll);
	}
	}
	}
	});


	/**
	 * Protocol for adding set functionality to a transient collection.
	 * @interface
	 */
	cljs.core.ITransientSet = function(){};

	/**
	 * Returns tcoll without v.
	 */
	cljs.core._disjoin_BANG_ = (function cljs$core$_disjoin_BANG_(tcoll,v){
	if((!((tcoll == null))) && (!((tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 == null)))){
	return tcoll.cljs$core$ITransientSet$_disjoin_BANG_$arity$2(tcoll,v);
	} else {
	var x__5780__auto__ = (((tcoll == null))?null:tcoll);
	var m__5781__auto__ = (cljs.core._disjoin_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(tcoll,v) : m__5781__auto__.call(null,tcoll,v));
	} else {
	var m__5781__auto____$1 = (cljs.core._disjoin_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(tcoll,v) : m__5781__auto____$1.call(null,tcoll,v));
	} else {
	throw cljs.core.missing_protocol("ITransientSet.-disjoin!",tcoll);
	}
	}
	}
	});


	/**
	 * Protocol for values that can be compared.
	 * @interface
	 */
	cljs.core.IComparable = function(){};

	/**
	 * Returns a negative number, zero, or a positive number when x is logically
	 *   'less than', 'equal to', or 'greater than' y.
	 */
	cljs.core._compare = (function cljs$core$_compare(x,y){
	if((!((x == null))) && (!((x.cljs$core$IComparable$_compare$arity$2 == null)))){
	return x.cljs$core$IComparable$_compare$arity$2(x,y);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._compare[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(x,y) : m__5781__auto__.call(null,x,y));
	} else {
	var m__5781__auto____$1 = (cljs.core._compare["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(x,y) : m__5781__auto____$1.call(null,x,y));
	} else {
	throw cljs.core.missing_protocol("IComparable.-compare",x);
	}
	}
	}
	});


	/**
	 * Protocol for accessing the items of a chunk.
	 * @interface
	 */
	cljs.core.IChunk = function(){};

	/**
	 * Return a new chunk of coll with the first item removed.
	 */
	cljs.core._drop_first = (function cljs$core$_drop_first(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IChunk$_drop_first$arity$1 == null)))){
	return coll.cljs$core$IChunk$_drop_first$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._drop_first[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._drop_first["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IChunk.-drop-first",coll);
	}
	}
	}
	});


	/**
	 * Protocol for accessing a collection as sequential chunks.
	 * @interface
	 */
	cljs.core.IChunkedSeq = function(){};

	/**
	 * Returns the first chunk in coll.
	 */
	cljs.core._chunked_first = (function cljs$core$_chunked_first(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IChunkedSeq$_chunked_first$arity$1 == null)))){
	return coll.cljs$core$IChunkedSeq$_chunked_first$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._chunked_first[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._chunked_first["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IChunkedSeq.-chunked-first",coll);
	}
	}
	}
	});

	/**
	 * Return a new collection of coll with the first chunk removed.
	 */
	cljs.core._chunked_rest = (function cljs$core$_chunked_rest(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1 == null)))){
	return coll.cljs$core$IChunkedSeq$_chunked_rest$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._chunked_rest[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._chunked_rest["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IChunkedSeq.-chunked-rest",coll);
	}
	}
	}
	});


	/**
	 * Protocol for accessing the chunks of a collection.
	 * @interface
	 */
	cljs.core.IChunkedNext = function(){};

	/**
	 * Returns a new collection of coll without the first chunk.
	 */
	cljs.core._chunked_next = (function cljs$core$_chunked_next(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IChunkedNext$_chunked_next$arity$1 == null)))){
	return coll.cljs$core$IChunkedNext$_chunked_next$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._chunked_next[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._chunked_next["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IChunkedNext.-chunked-next",coll);
	}
	}
	}
	});


	/**
	 * Protocol for adding a name.
	 * @interface
	 */
	cljs.core.INamed = function(){};

	/**
	 * Returns the name String of x.
	 */
	cljs.core._name = (function cljs$core$_name(x){
	if((!((x == null))) && (!((x.cljs$core$INamed$_name$arity$1 == null)))){
	return x.cljs$core$INamed$_name$arity$1(x);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._name[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto__.call(null,x));
	} else {
	var m__5781__auto____$1 = (cljs.core._name["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto____$1.call(null,x));
	} else {
	throw cljs.core.missing_protocol("INamed.-name",x);
	}
	}
	}
	});

	/**
	 * Returns the namespace String of x.
	 */
	cljs.core._namespace = (function cljs$core$_namespace(x){
	if((!((x == null))) && (!((x.cljs$core$INamed$_namespace$arity$1 == null)))){
	return x.cljs$core$INamed$_namespace$arity$1(x);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._namespace[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto__.call(null,x));
	} else {
	var m__5781__auto____$1 = (cljs.core._namespace["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto____$1.call(null,x));
	} else {
	throw cljs.core.missing_protocol("INamed.-namespace",x);
	}
	}
	}
	});


	/**
	 * Marker protocol indicating an atom.
	 * @interface
	 */
	cljs.core.IAtom = function(){};


	/**
	 * Protocol for adding resetting functionality.
	 * @interface
	 */
	cljs.core.IReset = function(){};

	/**
	 * Sets the value of o to new-value.
	 */
	cljs.core._reset_BANG_ = (function cljs$core$_reset_BANG_(o,new_value){
	if((!((o == null))) && (!((o.cljs$core$IReset$_reset_BANG_$arity$2 == null)))){
	return o.cljs$core$IReset$_reset_BANG_$arity$2(o,new_value);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._reset_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,new_value) : m__5781__auto__.call(null,o,new_value));
	} else {
	var m__5781__auto____$1 = (cljs.core._reset_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,new_value) : m__5781__auto____$1.call(null,o,new_value));
	} else {
	throw cljs.core.missing_protocol("IReset.-reset!",o);
	}
	}
	}
	});


	/**
	 * Protocol for adding swapping functionality.
	 * @interface
	 */
	cljs.core.ISwap = function(){};

	/**
	 * Swaps the value of o to be (apply f current-value-of-atom args).
	 */
	cljs.core._swap_BANG_ = (function cljs$core$_swap_BANG_(var_args){
	var args1729 = [];
	var len__6099__auto___1732 = arguments.length;
	var i__6100__auto___1733 = (0);
	while(true){
	if((i__6100__auto___1733 < len__6099__auto___1732)){
	args1729.push((arguments[i__6100__auto___1733]));

	var G__1734 = (i__6100__auto___1733 + (1));
	i__6100__auto___1733 = G__1734;
	continue;
	} else {
	}
	break;
	}

	var G__1731 = args1729.length;
	switch (G__1731) {
	case 2:
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1729.length)].join('')));

	}
	});

	cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (o,f){
	if((!((o == null))) && (!((o.cljs$core$ISwap$_swap_BANG_$arity$2 == null)))){
	return o.cljs$core$ISwap$_swap_BANG_$arity$2(o,f);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._swap_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,f) : m__5781__auto__.call(null,o,f));
	} else {
	var m__5781__auto____$1 = (cljs.core._swap_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,f) : m__5781__auto____$1.call(null,o,f));
	} else {
	throw cljs.core.missing_protocol("ISwap.-swap!",o);
	}
	}
	}
	});

	cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (o,f,a){
	if((!((o == null))) && (!((o.cljs$core$ISwap$_swap_BANG_$arity$3 == null)))){
	return o.cljs$core$ISwap$_swap_BANG_$arity$3(o,f,a);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._swap_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(o,f,a) : m__5781__auto__.call(null,o,f,a));
	} else {
	var m__5781__auto____$1 = (cljs.core._swap_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(o,f,a) : m__5781__auto____$1.call(null,o,f,a));
	} else {
	throw cljs.core.missing_protocol("ISwap.-swap!",o);
	}
	}
	}
	});

	cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (o,f,a,b){
	if((!((o == null))) && (!((o.cljs$core$ISwap$_swap_BANG_$arity$4 == null)))){
	return o.cljs$core$ISwap$_swap_BANG_$arity$4(o,f,a,b);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._swap_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$4 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$4(o,f,a,b) : m__5781__auto__.call(null,o,f,a,b));
	} else {
	var m__5781__auto____$1 = (cljs.core._swap_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$4 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$4(o,f,a,b) : m__5781__auto____$1.call(null,o,f,a,b));
	} else {
	throw cljs.core.missing_protocol("ISwap.-swap!",o);
	}
	}
	}
	});

	cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5 = (function (o,f,a,b,xs){
	if((!((o == null))) && (!((o.cljs$core$ISwap$_swap_BANG_$arity$5 == null)))){
	return o.cljs$core$ISwap$_swap_BANG_$arity$5(o,f,a,b,xs);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._swap_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$5 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$5(o,f,a,b,xs) : m__5781__auto__.call(null,o,f,a,b,xs));
	} else {
	var m__5781__auto____$1 = (cljs.core._swap_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$5 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$5(o,f,a,b,xs) : m__5781__auto____$1.call(null,o,f,a,b,xs));
	} else {
	throw cljs.core.missing_protocol("ISwap.-swap!",o);
	}
	}
	}
	});

	cljs.core._swap_BANG_.cljs$lang$maxFixedArity = 5;



	/**
	 * Protocol for adding volatile functionality.
	 * @interface
	 */
	cljs.core.IVolatile = function(){};

	/**
	 * Sets the value of volatile o to new-value without regard for the
	 *   current value. Returns new-value.
	 */
	cljs.core._vreset_BANG_ = (function cljs$core$_vreset_BANG_(o,new_value){
	if((!((o == null))) && (!((o.cljs$core$IVolatile$_vreset_BANG_$arity$2 == null)))){
	return o.cljs$core$IVolatile$_vreset_BANG_$arity$2(o,new_value);
	} else {
	var x__5780__auto__ = (((o == null))?null:o);
	var m__5781__auto__ = (cljs.core._vreset_BANG_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(o,new_value) : m__5781__auto__.call(null,o,new_value));
	} else {
	var m__5781__auto____$1 = (cljs.core._vreset_BANG_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(o,new_value) : m__5781__auto____$1.call(null,o,new_value));
	} else {
	throw cljs.core.missing_protocol("IVolatile.-vreset!",o);
	}
	}
	}
	});


	/**
	 * Protocol for iterating over a collection.
	 * @interface
	 */
	cljs.core.IIterable = function(){};

	/**
	 * Returns an iterator for coll.
	 */
	cljs.core._iterator = (function cljs$core$_iterator(coll){
	if((!((coll == null))) && (!((coll.cljs$core$IIterable$_iterator$arity$1 == null)))){
	return coll.cljs$core$IIterable$_iterator$arity$1(coll);
	} else {
	var x__5780__auto__ = (((coll == null))?null:coll);
	var m__5781__auto__ = (cljs.core._iterator[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto__.call(null,coll));
	} else {
	var m__5781__auto____$1 = (cljs.core._iterator["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(coll) : m__5781__auto____$1.call(null,coll));
	} else {
	throw cljs.core.missing_protocol("IIterable.-iterator",coll);
	}
	}
	}
	});


	/**
	* @constructor
	 * @implements {cljs.core.IWriter}
	*/
	cljs.core.StringBufferWriter = (function (sb){
	this.sb = sb;
	this.cljs$lang$protocol_mask$partition0$ = 1073741824;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_write$arity$2 = (function (_,s){
	var self__ = this;
	var ___$1 = this;
	return self__.sb.append(s);
	});

	cljs.core.StringBufferWriter.prototype.cljs$core$IWriter$_flush$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return null;
	});

	cljs.core.StringBufferWriter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$sb], null);
	});

	cljs.core.StringBufferWriter.cljs$lang$type = true;

	cljs.core.StringBufferWriter.cljs$lang$ctorStr = "cljs.core/StringBufferWriter";

	cljs.core.StringBufferWriter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/StringBufferWriter");
	});

	cljs.core.__GT_StringBufferWriter = (function cljs$core$__GT_StringBufferWriter(sb){
	return (new cljs.core.StringBufferWriter(sb));
	});

	/**
	 * Support so that collections can implement toString without
	 * loading all the printing machinery.
	 */
	cljs.core.pr_str_STAR_ = (function cljs$core$pr_str_STAR_(obj){
	var sb = (new goog.string.StringBuffer());
	var writer = (new cljs.core.StringBufferWriter(sb));
	obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null,writer,cljs.core.pr_opts());

	writer.cljs$core$IWriter$_flush$arity$1(null);

	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join('');
	});
	cljs.core.int_rotate_left = (function cljs$core$int_rotate_left(x,n){
	return ((x << n) | (x >>> (- n)));
	});
	if((typeof Math.imul !== 'undefined') && (!((Math.imul((4294967295),(5)) === (0))))){
	cljs.core.imul = (function cljs$core$imul(a,b){
	return Math.imul(a,b);
	});
	} else {
	cljs.core.imul = (function cljs$core$imul(a,b){
	var ah = ((a >>> (16)) & (65535));
	var al = (a & (65535));
	var bh = ((b >>> (16)) & (65535));
	var bl = (b & (65535));
	return (((al * bl) + ((((ah * bl) + (al * bh)) << (16)) >>> (0))) | (0));
	});
	}
	cljs.core.m3_seed = (0);
	cljs.core.m3_C1 = ((3432918353) | (0));
	cljs.core.m3_C2 = ((461845907) | (0));
	cljs.core.m3_mix_K1 = (function cljs$core$m3_mix_K1(k1){
	return cljs.core.imul(cljs.core.int_rotate_left(cljs.core.imul((k1 | (0)),cljs.core.m3_C1),(15)),cljs.core.m3_C2);
	});
	cljs.core.m3_mix_H1 = (function cljs$core$m3_mix_H1(h1,k1){
	return ((cljs.core.imul(cljs.core.int_rotate_left(((h1 | (0)) ^ (k1 | (0))),(13)),(5)) + ((3864292196) | (0))) | (0));
	});
	cljs.core.m3_fmix = (function cljs$core$m3_fmix(h1,len){
	var h1__$1 = (h1 | (0));
	var h1__$2 = (h1__$1 ^ len);
	var h1__$3 = (h1__$2 ^ (h1__$2 >>> (16)));
	var h1__$4 = cljs.core.imul(h1__$3,((2246822507) | (0)));
	var h1__$5 = (h1__$4 ^ (h1__$4 >>> (13)));
	var h1__$6 = cljs.core.imul(h1__$5,((3266489909) | (0)));
	return (h1__$6 ^ (h1__$6 >>> (16)));
	});
	cljs.core.m3_hash_int = (function cljs$core$m3_hash_int(in$){
	if((in$ === (0))){
	return in$;
	} else {
	var k1 = cljs.core.m3_mix_K1(in$);
	var h1 = cljs.core.m3_mix_H1(cljs.core.m3_seed,k1);
	return cljs.core.m3_fmix(h1,(4));
	}
	});
	cljs.core.m3_hash_unencoded_chars = (function cljs$core$m3_hash_unencoded_chars(in$){
	var h1 = (function (){var i = (1);
	var h1 = cljs.core.m3_seed;
	while(true){
	if((i < in$.length)){
	var G__1736 = (i + (2));
	var G__1737 = cljs.core.m3_mix_H1(h1,cljs.core.m3_mix_K1((in$.charCodeAt((i - (1))) | (in$.charCodeAt(i) << (16)))));
	i = G__1736;
	h1 = G__1737;
	continue;
	} else {
	return h1;
	}
	break;
	}
	})();
	var h1__$1 = ((((in$.length & (1)) === (1)))?(h1 ^ cljs.core.m3_mix_K1(in$.charCodeAt((in$.length - (1))))):h1);
	return cljs.core.m3_fmix(h1__$1,cljs.core.imul((2),in$.length));
	});



	cljs.core.string_hash_cache = {};
	cljs.core.string_hash_cache_count = (0);
	cljs.core.hash_string_STAR_ = (function cljs$core$hash_string_STAR_(s){
	if(!((s == null))){
	var len = s.length;
	if((len > (0))){
	var i = (0);
	var hash = (0);
	while(true){
	if((i < len)){
	var G__1740 = (i + (1));
	var G__1741 = (cljs.core.imul((31),hash) + s.charCodeAt(i));
	i = G__1740;
	hash = G__1741;
	continue;
	} else {
	return hash;
	}
	break;
	}
	} else {
	return (0);
	}
	} else {
	return (0);
	}
	});
	cljs.core.add_to_string_hash_cache = (function cljs$core$add_to_string_hash_cache(k){
	var h = cljs.core.hash_string_STAR_(k);
	(cljs.core.string_hash_cache[k] = h);

	cljs.core.string_hash_cache_count = (cljs.core.string_hash_cache_count + (1));

	return h;
	});
	cljs.core.hash_string = (function cljs$core$hash_string(k){
	if((cljs.core.string_hash_cache_count > (255))){
	cljs.core.string_hash_cache = {};

	cljs.core.string_hash_cache_count = (0);
	} else {
	}

	if((k == null)){
	return (0);
	} else {
	var h = (cljs.core.string_hash_cache[k]);
	if(typeof h === 'number'){
	return h;
	} else {
	return cljs.core.add_to_string_hash_cache(k);
	}
	}
	});
	/**
	 * Returns the hash code of its argument. Note this is the hash code
	 * consistent with =.
	 */
	cljs.core.hash = (function cljs$core$hash(o){
	if(((!((o == null)))?((((o.cljs$lang$protocol_mask$partition0$ & (4194304))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IHash$)))?true:false):false)){
	return (o.cljs$core$IHash$_hash$arity$1(null) ^ (0));
	} else {
	if(typeof o === 'number'){
	if(cljs.core.truth_(isFinite(o))){
	return (Math.floor(o) % (2147483647));
	} else {
	var G__1749 = o;
	switch (G__1749) {
	case Infinity:
	return (2146435072);

	break;
	case -Infinity:
	return (-1048576);

	break;
	default:
	return (2146959360);

	}
	}
	} else {
	if(o === true){
	return (1231);
	} else {
	if(o === false){
	return (1237);
	} else {
	if(typeof o === 'string'){
	return cljs.core.m3_hash_int(cljs.core.hash_string(o));
	} else {
	if((o instanceof Date)){
	return (o.valueOf() ^ (0));
	} else {
	if((o == null)){
	return (0);
	} else {
	return (cljs.core._hash(o) ^ (0));

	}
	}
	}
	}
	}
	}
	}
	});
	cljs.core.hash_combine = (function cljs$core$hash_combine(seed,hash){
	return (seed ^ (((hash + (2654435769)) + (seed << (6))) + (seed >> (2))));
	});
	/**
	 * Evaluates x and tests if it is an instance of the type
	 *   c. Returns true or false
	 */
	cljs.core.instance_QMARK_ = (function cljs$core$instance_QMARK_(c,x){
	return (x instanceof c);
	});
	/**
	 * Return true if x is a Symbol
	 */
	cljs.core.symbol_QMARK_ = (function cljs$core$symbol_QMARK_(x){
	return (x instanceof cljs.core.Symbol);
	});
	cljs.core.hash_symbol = (function cljs$core$hash_symbol(sym){
	return cljs.core.hash_combine(cljs.core.m3_hash_unencoded_chars(sym.name),cljs.core.hash_string(sym.ns));
	});
	cljs.core.compare_symbols = (function cljs$core$compare_symbols(a,b){
	if((a.str === b.str)){
	return (0);
	} else {
	if(cljs.core.truth_((function (){var and__5442__auto__ = cljs.core.not(a.ns);
	if(and__5442__auto__){
	return b.ns;
	} else {
	return and__5442__auto__;
	}
	})())){
	return (-1);
	} else {
	if(cljs.core.truth_(a.ns)){
	if(cljs.core.not(b.ns)){
	return (1);
	} else {
	var nsc = (function (){var G__1757 = a.ns;
	var G__1758 = b.ns;
	return goog.array.defaultCompare(G__1757,G__1758);
	})();
	if(((0) === nsc)){
	var G__1759 = a.name;
	var G__1760 = b.name;
	return goog.array.defaultCompare(G__1759,G__1760);
	} else {
	return nsc;
	}
	}
	} else {
	var G__1761 = a.name;
	var G__1762 = b.name;
	return goog.array.defaultCompare(G__1761,G__1762);

	}
	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.INamed}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IPrintWithWriter}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.Symbol = (function (ns,name,str,_hash,_meta){
	this.ns = ns;
	this.name = name;
	this.str = str;
	this._hash = _hash;
	this._meta = _meta;
	this.cljs$lang$protocol_mask$partition0$ = 2154168321;
	this.cljs$lang$protocol_mask$partition1$ = 4096;
	})
	cljs.core.Symbol.prototype.toString = (function (){
	var self__ = this;
	var _ = this;
	return self__.str;
	});

	cljs.core.Symbol.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Symbol.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (_,other){
	var self__ = this;
	var ___$1 = this;
	if((other instanceof cljs.core.Symbol)){
	return (self__.str === other.str);
	} else {
	return false;
	}
	});

	cljs.core.Symbol.prototype.call = (function() {
	var G__1764 = null;
	var G__1764__2 = (function (self__,coll){
	var self__ = this;
	var self____$1 = this;
	var sym = self____$1;
	return (cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll,sym) : cljs.core.get.call(null,coll,sym));
	});
	var G__1764__3 = (function (self__,coll,not_found){
	var self__ = this;
	var self____$1 = this;
	var sym = self____$1;
	return (cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll,sym,not_found) : cljs.core.get.call(null,coll,sym,not_found));
	});
	G__1764 = function(self__,coll,not_found){
	switch(arguments.length){
	case 2:
	return G__1764__2.call(this,self__,coll);
	case 3:
	return G__1764__3.call(this,self__,coll,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1764.cljs$core$IFn$_invoke$arity$2 = G__1764__2;
	G__1764.cljs$core$IFn$_invoke$arity$3 = G__1764__3;
	return G__1764;
	})()
	;

	cljs.core.Symbol.prototype.apply = (function (self__,args1763){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args1763)));
	});

	cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	var self__ = this;
	var sym = this;
	return (cljs.core.get.cljs$core$IFn$_invoke$arity$2 ? cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll,sym) : cljs.core.get.call(null,coll,sym));
	});

	cljs.core.Symbol.prototype.cljs$core$IFn$_invoke$arity$2 = (function (coll,not_found){
	var self__ = this;
	var sym = this;
	return (cljs.core.get.cljs$core$IFn$_invoke$arity$3 ? cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll,sym,not_found) : cljs.core.get.call(null,coll,sym,not_found));
	});

	cljs.core.Symbol.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__._meta;
	});

	cljs.core.Symbol.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_,new_meta){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.Symbol(self__.ns,self__.name,self__.str,self__._hash,new_meta));
	});

	cljs.core.Symbol.prototype.cljs$core$IHash$_hash$arity$1 = (function (sym){
	var self__ = this;
	var sym__$1 = this;
	var h__5552__auto__ = self__._hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_symbol(sym__$1);
	self__._hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.Symbol.prototype.cljs$core$INamed$_name$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.name;
	});

	cljs.core.Symbol.prototype.cljs$core$INamed$_namespace$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.ns;
	});

	cljs.core.Symbol.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (o,writer,_){
	var self__ = this;
	var o__$1 = this;
	return cljs.core._write(writer,self__.str);
	});

	cljs.core.Symbol.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$str,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$_meta], null);
	});

	cljs.core.Symbol.cljs$lang$type = true;

	cljs.core.Symbol.cljs$lang$ctorStr = "cljs.core/Symbol";

	cljs.core.Symbol.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Symbol");
	});

	cljs.core.__GT_Symbol = (function cljs$core$__GT_Symbol(ns,name,str,_hash,_meta){
	return (new cljs.core.Symbol(ns,name,str,_hash,_meta));
	});

	/**
	 * Returns a Symbol with the given namespace and name.
	 */
	cljs.core.symbol = (function cljs$core$symbol(var_args){
	var args1765 = [];
	var len__6099__auto___1768 = arguments.length;
	var i__6100__auto___1769 = (0);
	while(true){
	if((i__6100__auto___1769 < len__6099__auto___1768)){
	args1765.push((arguments[i__6100__auto___1769]));

	var G__1770 = (i__6100__auto___1769 + (1));
	i__6100__auto___1769 = G__1770;
	continue;
	} else {
	}
	break;
	}

	var G__1767 = args1765.length;
	switch (G__1767) {
	case 1:
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1765.length)].join('')));

	}
	});

	cljs.core.symbol.cljs$core$IFn$_invoke$arity$1 = (function (name){
	if((name instanceof cljs.core.Symbol)){
	return name;
	} else {
	var idx = name.indexOf("/");
	if((idx < (1))){
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null,name);
	} else {
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(name.substring((0),idx),name.substring((idx + (1)),name.length));
	}
	}
	});

	cljs.core.symbol.cljs$core$IFn$_invoke$arity$2 = (function (ns,name){
	var sym_str = ((!((ns == null)))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns),cljs.core.str.cljs$core$IFn$_invoke$arity$1("/"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''):name);
	return (new cljs.core.Symbol(ns,name,sym_str,null,null));
	});

	cljs.core.symbol.cljs$lang$maxFixedArity = 2;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.Fn}
	 * @implements {cljs.core.IDeref}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.Var = (function (val,sym,_meta){
	this.val = val;
	this.sym = sym;
	this._meta = _meta;
	this.cljs$lang$protocol_mask$partition0$ = 6717441;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.Var.prototype.isMacro = (function (){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).cljs$lang$macro;
	});

	cljs.core.Var.prototype.toString = (function (){
	var self__ = this;
	var _ = this;
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("#'"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.sym)].join('');
	});

	cljs.core.Var.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null));
	});

	cljs.core.Var.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__._meta;
	});

	cljs.core.Var.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_,new_meta){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.Var(self__.val,self__.sym,new_meta));
	});

	cljs.core.Var.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){
	var self__ = this;
	var this$__$1 = this;
	if((other instanceof cljs.core.Var)){
	var G__1773 = this$__$1.sym;
	var G__1774 = other.sym;
	return (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 ? cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(G__1773,G__1774) : cljs.core._EQ_.call(null,G__1773,G__1774));
	} else {
	return false;
	}
	});

	cljs.core.Var.prototype.cljs$core$IHash$_hash$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return cljs.core.hash_symbol(self__.sym);
	});

	cljs.core.Var.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Var.prototype.call = (function() {
	var G__1819 = null;
	var G__1819__1 = (function (self__){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
	});
	var G__1819__2 = (function (self__,a){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a);
	});
	var G__1819__3 = (function (self__,a,b){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b);
	});
	var G__1819__4 = (function (self__,a,b,c){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c);
	});
	var G__1819__5 = (function (self__,a,b,c,d){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d);
	});
	var G__1819__6 = (function (self__,a,b,c,d,e){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e);
	});
	var G__1819__7 = (function (self__,a,b,c,d,e,f){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f);
	});
	var G__1819__8 = (function (self__,a,b,c,d,e,f,g){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g);
	});
	var G__1819__9 = (function (self__,a,b,c,d,e,f,g,h){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h);
	});
	var G__1819__10 = (function (self__,a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i);
	});
	var G__1819__11 = (function (self__,a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j);
	});
	var G__1819__12 = (function (self__,a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k);
	});
	var G__1819__13 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l);
	});
	var G__1819__14 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m);
	});
	var G__1819__15 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	});
	var G__1819__16 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	});
	var G__1819__17 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	});
	var G__1819__18 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	});
	var G__1819__19 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	});
	var G__1819__20 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	});
	var G__1819__21 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	});
	var G__1819__22 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	var G__1775 = (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null));
	var G__1776 = a;
	var G__1777 = b;
	var G__1778 = c;
	var G__1779 = d;
	var G__1780 = e;
	var G__1781 = f;
	var G__1782 = g;
	var G__1783 = h;
	var G__1784 = i;
	var G__1785 = j;
	var G__1786 = k;
	var G__1787 = l;
	var G__1788 = m;
	var G__1789 = n;
	var G__1790 = o;
	var G__1791 = p;
	var G__1792 = q;
	var G__1793 = r;
	var G__1794 = s;
	var G__1795 = t;
	var G__1796 = rest;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__1775,G__1776,G__1777,G__1778,G__1779,G__1780,G__1781,G__1782,G__1783,G__1784,G__1785,G__1786,G__1787,G__1788,G__1789,G__1790,G__1791,G__1792,G__1793,G__1794,G__1795,G__1796) : cljs.core.apply.call(null,G__1775,G__1776,G__1777,G__1778,G__1779,G__1780,G__1781,G__1782,G__1783,G__1784,G__1785,G__1786,G__1787,G__1788,G__1789,G__1790,G__1791,G__1792,G__1793,G__1794,G__1795,G__1796));
	});
	G__1819 = function(self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	switch(arguments.length){
	case 1:
	return G__1819__1.call(this,self__);
	case 2:
	return G__1819__2.call(this,self__,a);
	case 3:
	return G__1819__3.call(this,self__,a,b);
	case 4:
	return G__1819__4.call(this,self__,a,b,c);
	case 5:
	return G__1819__5.call(this,self__,a,b,c,d);
	case 6:
	return G__1819__6.call(this,self__,a,b,c,d,e);
	case 7:
	return G__1819__7.call(this,self__,a,b,c,d,e,f);
	case 8:
	return G__1819__8.call(this,self__,a,b,c,d,e,f,g);
	case 9:
	return G__1819__9.call(this,self__,a,b,c,d,e,f,g,h);
	case 10:
	return G__1819__10.call(this,self__,a,b,c,d,e,f,g,h,i);
	case 11:
	return G__1819__11.call(this,self__,a,b,c,d,e,f,g,h,i,j);
	case 12:
	return G__1819__12.call(this,self__,a,b,c,d,e,f,g,h,i,j,k);
	case 13:
	return G__1819__13.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l);
	case 14:
	return G__1819__14.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m);
	case 15:
	return G__1819__15.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	case 16:
	return G__1819__16.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	case 17:
	return G__1819__17.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	case 18:
	return G__1819__18.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	case 19:
	return G__1819__19.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	case 20:
	return G__1819__20.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	case 21:
	return G__1819__21.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	case 22:
	return G__1819__22.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1819.cljs$core$IFn$_invoke$arity$1 = G__1819__1;
	G__1819.cljs$core$IFn$_invoke$arity$2 = G__1819__2;
	G__1819.cljs$core$IFn$_invoke$arity$3 = G__1819__3;
	G__1819.cljs$core$IFn$_invoke$arity$4 = G__1819__4;
	G__1819.cljs$core$IFn$_invoke$arity$5 = G__1819__5;
	G__1819.cljs$core$IFn$_invoke$arity$6 = G__1819__6;
	G__1819.cljs$core$IFn$_invoke$arity$7 = G__1819__7;
	G__1819.cljs$core$IFn$_invoke$arity$8 = G__1819__8;
	G__1819.cljs$core$IFn$_invoke$arity$9 = G__1819__9;
	G__1819.cljs$core$IFn$_invoke$arity$10 = G__1819__10;
	G__1819.cljs$core$IFn$_invoke$arity$11 = G__1819__11;
	G__1819.cljs$core$IFn$_invoke$arity$12 = G__1819__12;
	G__1819.cljs$core$IFn$_invoke$arity$13 = G__1819__13;
	G__1819.cljs$core$IFn$_invoke$arity$14 = G__1819__14;
	G__1819.cljs$core$IFn$_invoke$arity$15 = G__1819__15;
	G__1819.cljs$core$IFn$_invoke$arity$16 = G__1819__16;
	G__1819.cljs$core$IFn$_invoke$arity$17 = G__1819__17;
	G__1819.cljs$core$IFn$_invoke$arity$18 = G__1819__18;
	G__1819.cljs$core$IFn$_invoke$arity$19 = G__1819__19;
	G__1819.cljs$core$IFn$_invoke$arity$20 = G__1819__20;
	G__1819.cljs$core$IFn$_invoke$arity$21 = G__1819__21;
	G__1819.cljs$core$IFn$_invoke$arity$22 = G__1819__22;
	return G__1819;
	})()
	;

	cljs.core.Var.prototype.apply = (function (self__,args1772){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args1772)));
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$1 = (function (a){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$2 = (function (a,b){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$3 = (function (a,b,c){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$4 = (function (a,b,c,d){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$5 = (function (a,b,c,d,e){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$6 = (function (a,b,c,d,e,f){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$7 = (function (a,b,c,d,e,f,g){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$8 = (function (a,b,c,d,e,f,g,h){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$9 = (function (a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$10 = (function (a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$11 = (function (a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$12 = (function (a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$13 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$14 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$15 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$16 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$17 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$18 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$19 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$20 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var _ = this;
	return (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null)).call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	});

	cljs.core.Var.prototype.cljs$core$IFn$_invoke$arity$21 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var _ = this;
	var G__1797 = (self__.val.cljs$core$IFn$_invoke$arity$0 ? self__.val.cljs$core$IFn$_invoke$arity$0() : self__.val.call(null));
	var G__1798 = a;
	var G__1799 = b;
	var G__1800 = c;
	var G__1801 = d;
	var G__1802 = e;
	var G__1803 = f;
	var G__1804 = g;
	var G__1805 = h;
	var G__1806 = i;
	var G__1807 = j;
	var G__1808 = k;
	var G__1809 = l;
	var G__1810 = m;
	var G__1811 = n;
	var G__1812 = o;
	var G__1813 = p;
	var G__1814 = q;
	var G__1815 = r;
	var G__1816 = s;
	var G__1817 = t;
	var G__1818 = rest;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(G__1797,G__1798,G__1799,G__1800,G__1801,G__1802,G__1803,G__1804,G__1805,G__1806,G__1807,G__1808,G__1809,G__1810,G__1811,G__1812,G__1813,G__1814,G__1815,G__1816,G__1817,G__1818) : cljs.core.apply.call(null,G__1797,G__1798,G__1799,G__1800,G__1801,G__1802,G__1803,G__1804,G__1805,G__1806,G__1807,G__1808,G__1809,G__1810,G__1811,G__1812,G__1813,G__1814,G__1815,G__1816,G__1817,G__1818));
	});

	cljs.core.Var.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val,cljs.core.cst$sym$sym,cljs.core.cst$sym$_meta], null);
	});

	cljs.core.Var.cljs$lang$type = true;

	cljs.core.Var.cljs$lang$ctorStr = "cljs.core/Var";

	cljs.core.Var.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Var");
	});

	cljs.core.__GT_Var = (function cljs$core$__GT_Var(val,sym,_meta){
	return (new cljs.core.Var(val,sym,_meta));
	});

	/**
	 * Returns true if v is of type cljs.core.Var
	 */
	cljs.core.var_QMARK_ = (function cljs$core$var_QMARK_(v){
	return (v instanceof cljs.core.Var);
	});


	/**
	 * Return true if x implements IIterable protocol.
	 */
	cljs.core.iterable_QMARK_ = (function cljs$core$iterable_QMARK_(x){
	if(!((x == null))){
	if((false) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIterable$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IIterable,x);
	}
	});
	/**
	 * Clone the supplied value which must implement ICloneable.
	 */
	cljs.core.clone = (function cljs$core$clone(value){
	return cljs.core._clone(value);
	});
	/**
	 * Return true if x implements ICloneable protocol.
	 */
	cljs.core.cloneable_QMARK_ = (function cljs$core$cloneable_QMARK_(value){
	if(!((value == null))){
	if(((value.cljs$lang$protocol_mask$partition1$ & (8192))) || ((cljs.core.PROTOCOL_SENTINEL === value.cljs$core$ICloneable$))){
	return true;
	} else {
	if((!value.cljs$lang$protocol_mask$partition1$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable,value);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICloneable,value);
	}
	});
	/**
	 * Returns a seq on the collection. If the collection is
	 *   empty, returns nil.  (seq nil) returns nil. seq also works on
	 *   Strings.
	 */
	cljs.core.seq = (function cljs$core$seq(coll){
	if((coll == null)){
	return null;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (8388608))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$)))?true:false):false)){
	return coll.cljs$core$ISeqable$_seq$arity$1(null);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	if((coll.length === (0))){
	return null;
	} else {
	return (new cljs.core.IndexedSeq(coll,(0),null));
	}
	} else {
	if(typeof coll === 'string'){
	if((coll.length === (0))){
	return null;
	} else {
	return (new cljs.core.IndexedSeq(coll,(0),null));
	}
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable,coll)){
	return cljs.core._seq(coll);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is not ISeqable")].join('')));

	}
	}
	}
	}
	}
	});
	/**
	 * Returns the first item in the collection. Calls seq on its
	 *   argument. If coll is nil, returns nil.
	 */
	cljs.core.first = (function cljs$core$first(coll){
	if((coll == null)){
	return null;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$)))?true:false):false)){
	return coll.cljs$core$ISeq$_first$arity$1(null);
	} else {
	var s = cljs.core.seq(coll);
	if((s == null)){
	return null;
	} else {
	return cljs.core._first(s);
	}
	}
	}
	});
	/**
	 * Returns a possibly empty seq of the items after the first. Calls seq on its
	 *   argument.
	 */
	cljs.core.rest = (function cljs$core$rest(coll){
	if(!((coll == null))){
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$)))?true:false):false)){
	return coll.cljs$core$ISeq$_rest$arity$1(null);
	} else {
	var s = cljs.core.seq(coll);
	if(s){
	return cljs.core._rest(s);
	} else {
	return cljs.core.List.EMPTY;
	}
	}
	} else {
	return cljs.core.List.EMPTY;
	}
	});
	/**
	 * Returns a seq of the items after the first. Calls seq on its
	 *   argument.  If there are no more items, returns nil
	 */
	cljs.core.next = (function cljs$core$next(coll){
	if((coll == null)){
	return null;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (128))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$INext$)))?true:false):false)){
	return coll.cljs$core$INext$_next$arity$1(null);
	} else {
	return cljs.core.seq(cljs.core.rest(coll));
	}
	}
	});
	/**
	 * Equality. Returns true if x equals y, false if not. Compares
	 *   numbers and collections in a type-independent manner.  Clojure's immutable data
	 *   structures define -equiv (and thus =) as a value, not an identity,
	 *   comparison.
	 */
	cljs.core._EQ_ = (function cljs$core$_EQ_(var_args){
	var args1832 = [];
	var len__6099__auto___1838 = arguments.length;
	var i__6100__auto___1839 = (0);
	while(true){
	if((i__6100__auto___1839 < len__6099__auto___1838)){
	args1832.push((arguments[i__6100__auto___1839]));

	var G__1840 = (i__6100__auto___1839 + (1));
	i__6100__auto___1839 = G__1840;
	continue;
	} else {
	}
	break;
	}

	var G__1837 = args1832.length;
	switch (G__1837) {
	case 1:
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1832.slice((2)),(0),null));
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	if((x == null)){
	return (y == null);
	} else {
	return ((x === y)) || (cljs.core._equiv(x,y));
	}
	});

	cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y)){
	if(cljs.core.next(more)){
	var G__1842 = y;
	var G__1843 = cljs.core.first(more);
	var G__1844 = cljs.core.next(more);
	x = G__1842;
	y = G__1843;
	more = G__1844;
	continue;
	} else {
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(y,cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._EQ_.cljs$lang$applyTo = (function (seq1833){
	var G__1834 = cljs.core.first(seq1833);
	var seq1833__$1 = cljs.core.next(seq1833);
	var G__1835 = cljs.core.first(seq1833__$1);
	var seq1833__$2 = cljs.core.next(seq1833__$1);
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$variadic(G__1834,G__1835,seq1833__$2);
	});

	cljs.core._EQ_.cljs$lang$maxFixedArity = (2);


	/**
	* @constructor
	*/
	cljs.core.ES6Iterator = (function (s){
	this.s = s;
	})
	cljs.core.ES6Iterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(!((self__.s == null))){
	var x = cljs.core.first(self__.s);
	self__.s = cljs.core.next(self__.s);

	return ({"value": x, "done": false});
	} else {
	return ({"value": null, "done": true});
	}
	});

	cljs.core.ES6Iterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ES6Iterator.cljs$lang$type = true;

	cljs.core.ES6Iterator.cljs$lang$ctorStr = "cljs.core/ES6Iterator";

	cljs.core.ES6Iterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ES6Iterator");
	});

	cljs.core.__GT_ES6Iterator = (function cljs$core$__GT_ES6Iterator(s){
	return (new cljs.core.ES6Iterator(s));
	});

	/**
	 * EXPERIMENTAL: Return a ES2015 compatible iterator for coll.
	 */
	cljs.core.es6_iterator = (function cljs$core$es6_iterator(coll){
	return (new cljs.core.ES6Iterator(cljs.core.seq(coll)));
	});

	/**
	* @constructor
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	*/
	cljs.core.ES6IteratorSeq = (function (value,iter,_rest){
	this.value = value;
	this.iter = iter;
	this._rest = _rest;
	this.cljs$lang$protocol_mask$partition0$ = 8388672;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1;
	});

	cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.value;
	});

	cljs.core.ES6IteratorSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	if((self__._rest == null)){
	self__._rest = (cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.es6_iterator_seq.cljs$core$IFn$_invoke$arity$1(self__.iter) : cljs.core.es6_iterator_seq.call(null,self__.iter));
	} else {
	}

	return self__._rest;
	});

	cljs.core.ES6IteratorSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$value,cljs.core.cst$sym$iter,cljs.core.with_meta(cljs.core.cst$sym$_rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ES6IteratorSeq.cljs$lang$type = true;

	cljs.core.ES6IteratorSeq.cljs$lang$ctorStr = "cljs.core/ES6IteratorSeq";

	cljs.core.ES6IteratorSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ES6IteratorSeq");
	});

	cljs.core.__GT_ES6IteratorSeq = (function cljs$core$__GT_ES6IteratorSeq(value,iter,_rest){
	return (new cljs.core.ES6IteratorSeq(value,iter,_rest));
	});

	/**
	 * EXPERIMENTAL: Given an ES2015 compatible iterator return a seq.
	 */
	cljs.core.es6_iterator_seq = (function cljs$core$es6_iterator_seq(iter){
	var v = iter.next();
	if(cljs.core.truth_(v.done)){
	return cljs.core.List.EMPTY;
	} else {
	return (new cljs.core.ES6IteratorSeq(v.value,iter,null));
	}
	});
	/**
	 * Mix final collection hash for ordered or unordered collections.
	 * hash-basis is the combined collection hash, count is the number
	 * of elements included in the basis. Note this is the hash code
	 * consistent with =, different from .hashCode.
	 * See http://clojure.org/data_structures#hash for full algorithms.
	 */
	cljs.core.mix_collection_hash = (function cljs$core$mix_collection_hash(hash_basis,count){
	var h1 = cljs.core.m3_seed;
	var k1 = cljs.core.m3_mix_K1(hash_basis);
	var h1__$1 = cljs.core.m3_mix_H1(h1,k1);
	return cljs.core.m3_fmix(h1__$1,count);
	});
	/**
	 * Returns the hash code, consistent with =, for an external ordered
	 * collection implementing Iterable.
	 * See http://clojure.org/data_structures#hash for full algorithms.
	 */
	cljs.core.hash_ordered_coll = (function cljs$core$hash_ordered_coll(coll){
	var n = (0);
	var hash_code = (1);
	var coll__$1 = cljs.core.seq(coll);
	while(true){
	if(!((coll__$1 == null))){
	var G__1845 = (n + (1));
	var G__1846 = ((cljs.core.imul((31),hash_code) + cljs.core.hash(cljs.core.first(coll__$1))) | (0));
	var G__1847 = cljs.core.next(coll__$1);
	n = G__1845;
	hash_code = G__1846;
	coll__$1 = G__1847;
	continue;
	} else {
	return cljs.core.mix_collection_hash(hash_code,n);
	}
	break;
	}
	});
	cljs.core.empty_ordered_hash = cljs.core.mix_collection_hash((1),(0));
	/**
	 * Returns the hash code, consistent with =, for an external unordered
	 * collection implementing Iterable. For maps, the iterator should
	 * return map entries whose hash is computed as
	 *   (hash-ordered-coll [k v]).
	 * See http://clojure.org/data_structures#hash for full algorithms.
	 */
	cljs.core.hash_unordered_coll = (function cljs$core$hash_unordered_coll(coll){
	var n = (0);
	var hash_code = (0);
	var coll__$1 = cljs.core.seq(coll);
	while(true){
	if(!((coll__$1 == null))){
	var G__1848 = (n + (1));
	var G__1849 = ((hash_code + cljs.core.hash(cljs.core.first(coll__$1))) | (0));
	var G__1850 = cljs.core.next(coll__$1);
	n = G__1848;
	hash_code = G__1849;
	coll__$1 = G__1850;
	continue;
	} else {
	return cljs.core.mix_collection_hash(hash_code,n);
	}
	break;
	}
	});
	cljs.core.empty_unordered_hash = cljs.core.mix_collection_hash((0),(0));


	(cljs.core.ICounted["null"] = true);

	(cljs.core._count["null"] = (function (_){
	return (0);
	}));
	Date.prototype.cljs$core$IEquiv$ = cljs.core.PROTOCOL_SENTINEL;

	Date.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
	var o__$1 = this;
	return ((other instanceof Date)) && ((o__$1.valueOf() === other.valueOf()));
	});

	Date.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;

	Date.prototype.cljs$core$IComparable$_compare$arity$2 = (function (this$,other){
	var this$__$1 = this;
	if((other instanceof Date)){
	var G__1851 = this$__$1.valueOf();
	var G__1852 = other.valueOf();
	return goog.array.defaultCompare(G__1851,G__1852);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(this$__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(other)].join('')));
	}
	});

	/**
	 * @interface
	 */
	cljs.core.Inst = function(){};

	cljs.core.inst_ms_STAR_ = (function cljs$core$inst_ms_STAR_(inst){
	if((!((inst == null))) && (!((inst.cljs$core$Inst$inst_ms_STAR_$arity$1 == null)))){
	return inst.cljs$core$Inst$inst_ms_STAR_$arity$1(inst);
	} else {
	var x__5780__auto__ = (((inst == null))?null:inst);
	var m__5781__auto__ = (cljs.core.inst_ms_STAR_[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(inst) : m__5781__auto__.call(null,inst));
	} else {
	var m__5781__auto____$1 = (cljs.core.inst_ms_STAR_["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(inst) : m__5781__auto____$1.call(null,inst));
	} else {
	throw cljs.core.missing_protocol("Inst.inst-ms*",inst);
	}
	}
	}
	});

	Date.prototype.cljs$core$Inst$ = cljs.core.PROTOCOL_SENTINEL;

	Date.prototype.cljs$core$Inst$inst_ms_STAR_$arity$1 = (function (inst){
	var inst__$1 = this;
	return inst__$1.getTime();
	});
	/**
	 * Return the number of milliseconds since January 1, 1970, 00:00:00 GMT
	 */
	cljs.core.inst_ms = (function cljs$core$inst_ms(inst){
	return cljs.core.inst_ms_STAR_(inst);
	});
	/**
	 * Return true if x satisfies Inst
	 */
	cljs.core.inst_QMARK_ = (function cljs$core$inst_QMARK_(x){
	if(!((x == null))){
	if((false) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$Inst$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.Inst,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.Inst,x);
	}
	});
	(cljs.core.IEquiv["number"] = true);

	(cljs.core._equiv["number"] = (function (x,o){
	return (x === o);
	}));
	(cljs.core.Fn["function"] = true);

	(cljs.core.IMeta["function"] = true);

	(cljs.core._meta["function"] = (function (_){
	return null;
	}));
	(cljs.core.IHash["_"] = true);

	(cljs.core._hash["_"] = (function (o){
	return goog.getUid(o);
	}));
	/**
	 * Returns a number one greater than num.
	 */
	cljs.core.inc = (function cljs$core$inc(x){
	return (x + (1));
	});

	/**
	* @constructor
	 * @implements {cljs.core.IDeref}
	*/
	cljs.core.Reduced = (function (val){
	this.val = val;
	this.cljs$lang$protocol_mask$partition0$ = 32768;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.Reduced.prototype.cljs$core$IDeref$_deref$arity$1 = (function (o){
	var self__ = this;
	var o__$1 = this;
	return self__.val;
	});

	cljs.core.Reduced.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$val], null);
	});

	cljs.core.Reduced.cljs$lang$type = true;

	cljs.core.Reduced.cljs$lang$ctorStr = "cljs.core/Reduced";

	cljs.core.Reduced.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Reduced");
	});

	cljs.core.__GT_Reduced = (function cljs$core$__GT_Reduced(val){
	return (new cljs.core.Reduced(val));
	});

	/**
	 * Wraps x in a way such that a reduce will terminate with the value x
	 */
	cljs.core.reduced = (function cljs$core$reduced(x){
	return (new cljs.core.Reduced(x));
	});
	/**
	 * Returns true if x is the result of a call to reduced
	 */
	cljs.core.reduced_QMARK_ = (function cljs$core$reduced_QMARK_(r){
	return (r instanceof cljs.core.Reduced);
	});
	/**
	 * If x is already reduced?, returns it, else returns (reduced x)
	 */
	cljs.core.ensure_reduced = (function cljs$core$ensure_reduced(x){
	if(cljs.core.reduced_QMARK_(x)){
	return x;
	} else {
	return cljs.core.reduced(x);
	}
	});
	/**
	 * If x is reduced?, returns (deref x), else returns x
	 */
	cljs.core.unreduced = (function cljs$core$unreduced(x){
	if(cljs.core.reduced_QMARK_(x)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null,x));
	} else {
	return x;
	}
	});
	/**
	 * Also reader macro: @var/@atom/@delay. Returns the
	 * most-recently-committed value of ref. When applied to a var
	 * or atom, returns its current state. When applied to a delay, forces
	 * it if not already forced. See also - realized?.
	 */
	cljs.core.deref = (function cljs$core$deref(o){
	return cljs.core._deref(o);
	});
	/**
	 * Accepts any collection which satisfies the ICount and IIndexed protocols and
	 * reduces them without incurring seq initialization
	 */
	cljs.core.ci_reduce = (function cljs$core$ci_reduce(var_args){
	var args1855 = [];
	var len__6099__auto___1864 = arguments.length;
	var i__6100__auto___1865 = (0);
	while(true){
	if((i__6100__auto___1865 < len__6099__auto___1864)){
	args1855.push((arguments[i__6100__auto___1865]));

	var G__1866 = (i__6100__auto___1865 + (1));
	i__6100__auto___1865 = G__1866;
	continue;
	} else {
	}
	break;
	}

	var G__1857 = args1855.length;
	switch (G__1857) {
	case 2:
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1855.length)].join('')));

	}
	});

	cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2 = (function (cicoll,f){
	var cnt = cljs.core._count(cicoll);
	if((cnt === (0))){
	return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	} else {
	var val = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll,(0));
	var n = (1);
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1858 = val;
	var G__1859 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll,n);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1858,G__1859) : f.call(null,G__1858,G__1859));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1868 = nval;
	var G__1869 = (n + (1));
	val = G__1868;
	n = G__1869;
	continue;
	}
	} else {
	return val;
	}
	break;
	}
	}
	});

	cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3 = (function (cicoll,f,val){
	var cnt = cljs.core._count(cicoll);
	var val__$1 = val;
	var n = (0);
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1860 = val__$1;
	var G__1861 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll,n);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1860,G__1861) : f.call(null,G__1860,G__1861));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1870 = nval;
	var G__1871 = (n + (1));
	val__$1 = G__1870;
	n = G__1871;
	continue;
	}
	} else {
	return val__$1;
	}
	break;
	}
	});

	cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$4 = (function (cicoll,f,val,idx){
	var cnt = cljs.core._count(cicoll);
	var val__$1 = val;
	var n = idx;
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1862 = val__$1;
	var G__1863 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(cicoll,n);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1862,G__1863) : f.call(null,G__1862,G__1863));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1872 = nval;
	var G__1873 = (n + (1));
	val__$1 = G__1872;
	n = G__1873;
	continue;
	}
	} else {
	return val__$1;
	}
	break;
	}
	});

	cljs.core.ci_reduce.cljs$lang$maxFixedArity = 4;

	cljs.core.array_reduce = (function cljs$core$array_reduce(var_args){
	var args1874 = [];
	var len__6099__auto___1883 = arguments.length;
	var i__6100__auto___1884 = (0);
	while(true){
	if((i__6100__auto___1884 < len__6099__auto___1883)){
	args1874.push((arguments[i__6100__auto___1884]));

	var G__1885 = (i__6100__auto___1884 + (1));
	i__6100__auto___1884 = G__1885;
	continue;
	} else {
	}
	break;
	}

	var G__1876 = args1874.length;
	switch (G__1876) {
	case 2:
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1874.length)].join('')));

	}
	});

	cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2 = (function (arr,f){
	var cnt = arr.length;
	if((arr.length === (0))){
	return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	} else {
	var val = (arr[(0)]);
	var n = (1);
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1877 = val;
	var G__1878 = (arr[n]);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1877,G__1878) : f.call(null,G__1877,G__1878));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1887 = nval;
	var G__1888 = (n + (1));
	val = G__1887;
	n = G__1888;
	continue;
	}
	} else {
	return val;
	}
	break;
	}
	}
	});

	cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3 = (function (arr,f,val){
	var cnt = arr.length;
	var val__$1 = val;
	var n = (0);
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1879 = val__$1;
	var G__1880 = (arr[n]);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1879,G__1880) : f.call(null,G__1879,G__1880));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1889 = nval;
	var G__1890 = (n + (1));
	val__$1 = G__1889;
	n = G__1890;
	continue;
	}
	} else {
	return val__$1;
	}
	break;
	}
	});

	cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4 = (function (arr,f,val,idx){
	var cnt = arr.length;
	var val__$1 = val;
	var n = idx;
	while(true){
	if((n < cnt)){
	var nval = (function (){var G__1881 = val__$1;
	var G__1882 = (arr[n]);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__1881,G__1882) : f.call(null,G__1881,G__1882));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__1891 = nval;
	var G__1892 = (n + (1));
	val__$1 = G__1891;
	n = G__1892;
	continue;
	}
	} else {
	return val__$1;
	}
	break;
	}
	});

	cljs.core.array_reduce.cljs$lang$maxFixedArity = 4;







	/**
	 * Returns true if coll implements count in constant time
	 */
	cljs.core.counted_QMARK_ = (function cljs$core$counted_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (2))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICounted$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICounted,x);
	}
	});
	/**
	 * Returns true if coll implements nth in constant time
	 */
	cljs.core.indexed_QMARK_ = (function cljs$core$indexed_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (16))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IIndexed$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed,x);
	}
	});
	cljs.core._indexOf = (function cljs$core$_indexOf(var_args){
	var args1897 = [];
	var len__6099__auto___1900 = arguments.length;
	var i__6100__auto___1901 = (0);
	while(true){
	if((i__6100__auto___1901 < len__6099__auto___1900)){
	args1897.push((arguments[i__6100__auto___1901]));

	var G__1902 = (i__6100__auto___1901 + (1));
	i__6100__auto___1901 = G__1902;
	continue;
	} else {
	}
	break;
	}

	var G__1899 = args1897.length;
	switch (G__1899) {
	case 2:
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1897.length)].join('')));

	}
	});

	cljs.core._indexOf.cljs$core$IFn$_invoke$arity$2 = (function (coll,x){
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});

	cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3 = (function (coll,x,start){
	var len = (cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null,coll));
	if((start >= len)){
	return (-1);
	} else {
	var idx = (((start > (0)))?start:(((start < (0)))?(function (){var x__5528__auto__ = (0);
	var y__5529__auto__ = (start + len);
	return ((x__5528__auto__ > y__5529__auto__) ? x__5528__auto__ : y__5529__auto__);
	})():start
	));
	while(true){
	if((idx < len)){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll,idx) : cljs.core.nth.call(null,coll,idx)),x)){
	return idx;
	} else {
	var G__1904 = (idx + (1));
	idx = G__1904;
	continue;
	}
	} else {
	return (-1);
	}
	break;
	}
	}
	});

	cljs.core._indexOf.cljs$lang$maxFixedArity = 3;

	cljs.core._lastIndexOf = (function cljs$core$_lastIndexOf(var_args){
	var args1905 = [];
	var len__6099__auto___1908 = arguments.length;
	var i__6100__auto___1909 = (0);
	while(true){
	if((i__6100__auto___1909 < len__6099__auto___1908)){
	args1905.push((arguments[i__6100__auto___1909]));

	var G__1910 = (i__6100__auto___1909 + (1));
	i__6100__auto___1909 = G__1910;
	continue;
	} else {
	}
	break;
	}

	var G__1907 = args1905.length;
	switch (G__1907) {
	case 2:
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1905.length)].join('')));

	}
	});

	cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$2 = (function (coll,x){
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null,coll)));
	});

	cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3 = (function (coll,x,start){
	var len = (cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null,coll));
	if((len === (0))){
	return (-1);
	} else {
	var idx = (((start > (0)))?(function (){var x__5531__auto__ = (len - (1));
	var y__5532__auto__ = start;
	return ((x__5531__auto__ < y__5532__auto__) ? x__5531__auto__ : y__5532__auto__);
	})():(((start < (0)))?(len + start):start
	));
	while(true){
	if((idx >= (0))){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((cljs.core.nth.cljs$core$IFn$_invoke$arity$2 ? cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll,idx) : cljs.core.nth.call(null,coll,idx)),x)){
	return idx;
	} else {
	var G__1912 = (idx - (1));
	idx = G__1912;
	continue;
	}
	} else {
	return (-1);
	}
	break;
	}
	}
	});

	cljs.core._lastIndexOf.cljs$lang$maxFixedArity = 3;


	/**
	* @constructor
	*/
	cljs.core.IndexedSeqIterator = (function (arr,i){
	this.arr = arr;
	this.i = i;
	})
	cljs.core.IndexedSeqIterator.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return (self__.i < self__.arr.length);
	});

	cljs.core.IndexedSeqIterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var ret = (self__.arr[self__.i]);
	self__.i = (self__.i + (1));

	return ret;
	});

	cljs.core.IndexedSeqIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.IndexedSeqIterator.cljs$lang$type = true;

	cljs.core.IndexedSeqIterator.cljs$lang$ctorStr = "cljs.core/IndexedSeqIterator";

	cljs.core.IndexedSeqIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/IndexedSeqIterator");
	});

	cljs.core.__GT_IndexedSeqIterator = (function cljs$core$__GT_IndexedSeqIterator(arr,i){
	return (new cljs.core.IndexedSeqIterator(arr,i));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IReversible}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ASeq}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.IndexedSeq = (function (arr,i,meta){
	this.arr = arr;
	this.i = i;
	this.meta = meta;
	this.cljs$lang$protocol_mask$partition0$ = 166592766;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.IndexedSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.IndexedSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.IndexedSeq.prototype.indexOf = (function() {
	var G__1913 = null;
	var G__1913__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__1913__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__1913 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__1913__1.call(this,x);
	case 2:
	return G__1913__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1913.cljs$core$IFn$_invoke$arity$1 = G__1913__1;
	G__1913.cljs$core$IFn$_invoke$arity$2 = G__1913__2;
	return G__1913;
	})()
	;

	cljs.core.IndexedSeq.prototype.lastIndexOf = (function() {
	var G__1914 = null;
	var G__1914__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null,coll)));
	});
	var G__1914__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__1914 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__1914__1.call(this,x);
	case 2:
	return G__1914__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1914.cljs$core$IFn$_invoke$arity$1 = G__1914__1;
	G__1914.cljs$core$IFn$_invoke$arity$2 = G__1914__2;
	return G__1914;
	})()
	;

	cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
	var self__ = this;
	var coll__$1 = this;
	var i__$1 = (n + self__.i);
	if((((0) <= i__$1)) && ((i__$1 < self__.arr.length))){
	return (self__.arr[i__$1]);
	} else {
	throw (new Error("Index out of bounds"));
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
	var self__ = this;
	var coll__$1 = this;
	var i__$1 = (n + self__.i);
	if((((0) <= i__$1)) && ((i__$1 < self__.arr.length))){
	return (self__.arr[i__$1]);
	} else {
	return not_found;
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.IndexedSeq.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.IndexedSeqIterator(self__.arr,self__.i));
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.IndexedSeq(self__.arr,self__.i,self__.meta));
	});

	cljs.core.IndexedSeq.prototype.cljs$core$INext$_next$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	if(((self__.i + (1)) < self__.arr.length)){
	return (new cljs.core.IndexedSeq(self__.arr,(self__.i + (1)),null));
	} else {
	return null;
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	var x__5528__auto__ = (0);
	var y__5529__auto__ = (self__.arr.length - self__.i);
	return ((x__5528__auto__ > y__5529__auto__) ? x__5528__auto__ : y__5529__auto__);
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var c = coll__$1.cljs$core$ICounted$_count$arity$1(null);
	if((c > (0))){
	return (new cljs.core.RSeq(coll__$1,(c - (1)),null));
	} else {
	return null;
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.hash_ordered_coll(coll__$1);
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1,other) : cljs.core.equiv_sequential.call(null,coll__$1,other));
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.List.EMPTY;
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr,f,(self__.arr[self__.i]),(self__.i + (1)));
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr,f,start,self__.i);
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (self__.arr[self__.i]);
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	if(((self__.i + (1)) < self__.arr.length)){
	return (new cljs.core.IndexedSeq(self__.arr,(self__.i + (1)),null));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.i < self__.arr.length)){
	return this$__$1;
	} else {
	return null;
	}
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,new_meta){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.IndexedSeq(self__.arr,self__.i,new_meta));
	});

	cljs.core.IndexedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o,coll__$1) : cljs.core.cons.call(null,o,coll__$1));
	});

	cljs.core.IndexedSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null);
	});

	cljs.core.IndexedSeq.cljs$lang$type = true;

	cljs.core.IndexedSeq.cljs$lang$ctorStr = "cljs.core/IndexedSeq";

	cljs.core.IndexedSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/IndexedSeq");
	});

	cljs.core.__GT_IndexedSeq = (function cljs$core$__GT_IndexedSeq(arr,i,meta){
	return (new cljs.core.IndexedSeq(arr,i,meta));
	});

	(cljs.core.IndexedSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Create seq from a primitive JavaScript Array-like.
	 */
	cljs.core.prim_seq = (function cljs$core$prim_seq(var_args){
	var args1915 = [];
	var len__6099__auto___1918 = arguments.length;
	var i__6100__auto___1919 = (0);
	while(true){
	if((i__6100__auto___1919 < len__6099__auto___1918)){
	args1915.push((arguments[i__6100__auto___1919]));

	var G__1920 = (i__6100__auto___1919 + (1));
	i__6100__auto___1919 = G__1920;
	continue;
	} else {
	}
	break;
	}

	var G__1917 = args1915.length;
	switch (G__1917) {
	case 1:
	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1915.length)].join('')));

	}
	});

	cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$1 = (function (prim){
	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(prim,(0));
	});

	cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2 = (function (prim,i){
	if((i < prim.length)){
	return (new cljs.core.IndexedSeq(prim,i,null));
	} else {
	return null;
	}
	});

	cljs.core.prim_seq.cljs$lang$maxFixedArity = 2;

	/**
	 * Create a seq from a JavaScript array.
	 */
	cljs.core.array_seq = (function cljs$core$array_seq(var_args){
	var args1922 = [];
	var len__6099__auto___1925 = arguments.length;
	var i__6100__auto___1926 = (0);
	while(true){
	if((i__6100__auto___1926 < len__6099__auto___1925)){
	args1922.push((arguments[i__6100__auto___1926]));

	var G__1927 = (i__6100__auto___1926 + (1));
	i__6100__auto___1926 = G__1927;
	continue;
	} else {
	}
	break;
	}

	var G__1924 = args1922.length;
	switch (G__1924) {
	case 1:
	return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1922.length)].join('')));

	}
	});

	cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1 = (function (array){
	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array,(0));
	});

	cljs.core.array_seq.cljs$core$IFn$_invoke$arity$2 = (function (array,i){
	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(array,i);
	});

	cljs.core.array_seq.cljs$lang$maxFixedArity = 2;



	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.RSeq = (function (ci,i,meta){
	this.ci = ci;
	this.i = i;
	this.meta = meta;
	this.cljs$lang$protocol_mask$partition0$ = 32374990;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.RSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.RSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.RSeq.prototype.indexOf = (function() {
	var G__1931 = null;
	var G__1931__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__1931__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__1931 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__1931__1.call(this,x);
	case 2:
	return G__1931__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1931.cljs$core$IFn$_invoke$arity$1 = G__1931__1;
	G__1931.cljs$core$IFn$_invoke$arity$2 = G__1931__2;
	return G__1931;
	})()
	;

	cljs.core.RSeq.prototype.lastIndexOf = (function() {
	var G__1932 = null;
	var G__1932__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(cljs.core.count.cljs$core$IFn$_invoke$arity$1 ? cljs.core.count.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.count.call(null,coll)));
	});
	var G__1932__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__1932 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__1932__1.call(this,x);
	case 2:
	return G__1932__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__1932.cljs$core$IFn$_invoke$arity$1 = G__1932__1;
	G__1932.cljs$core$IFn$_invoke$arity$2 = G__1932__2;
	return G__1932;
	})()
	;

	cljs.core.RSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.RSeq.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.RSeq(self__.ci,self__.i,self__.meta));
	});

	cljs.core.RSeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.i > (0))){
	return (new cljs.core.RSeq(self__.ci,(self__.i - (1)),null));
	} else {
	return null;
	}
	});

	cljs.core.RSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (self__.i + (1));
	});

	cljs.core.RSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.hash_ordered_coll(coll__$1);
	});

	cljs.core.RSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2 ? cljs.core.equiv_sequential.cljs$core$IFn$_invoke$arity$2(coll__$1,other) : cljs.core.equiv_sequential.call(null,coll__$1,other));
	});

	cljs.core.RSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var G__1929 = cljs.core.List.EMPTY;
	var G__1930 = self__.meta;
	return (cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2 ? cljs.core.with_meta.cljs$core$IFn$_invoke$arity$2(G__1929,G__1930) : cljs.core.with_meta.call(null,G__1929,G__1930));
	});

	cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (col,f){
	var self__ = this;
	var col__$1 = this;
	return (cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,col__$1) : cljs.core.seq_reduce.call(null,f,col__$1));
	});

	cljs.core.RSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (col,f,start){
	var self__ = this;
	var col__$1 = this;
	return (cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,col__$1) : cljs.core.seq_reduce.call(null,f,start,col__$1));
	});

	cljs.core.RSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.ci,self__.i);
	});

	cljs.core.RSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.i > (0))){
	return (new cljs.core.RSeq(self__.ci,(self__.i - (1)),null));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.RSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.RSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,new_meta){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.RSeq(self__.ci,self__.i,new_meta));
	});

	cljs.core.RSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.cons.cljs$core$IFn$_invoke$arity$2 ? cljs.core.cons.cljs$core$IFn$_invoke$arity$2(o,coll__$1) : cljs.core.cons.call(null,o,coll__$1));
	});

	cljs.core.RSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ci,cljs.core.cst$sym$i,cljs.core.cst$sym$meta], null);
	});

	cljs.core.RSeq.cljs$lang$type = true;

	cljs.core.RSeq.cljs$lang$ctorStr = "cljs.core/RSeq";

	cljs.core.RSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/RSeq");
	});

	cljs.core.__GT_RSeq = (function cljs$core$__GT_RSeq(ci,i,meta){
	return (new cljs.core.RSeq(ci,i,meta));
	});

	(cljs.core.RSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Same as (first (next x))
	 */
	cljs.core.second = (function cljs$core$second(coll){
	return cljs.core.first(cljs.core.next(coll));
	});
	/**
	 * Same as (first (first x))
	 */
	cljs.core.ffirst = (function cljs$core$ffirst(coll){
	return cljs.core.first(cljs.core.first(coll));
	});
	/**
	 * Same as (next (first x))
	 */
	cljs.core.nfirst = (function cljs$core$nfirst(coll){
	return cljs.core.next(cljs.core.first(coll));
	});
	/**
	 * Same as (first (next x))
	 */
	cljs.core.fnext = (function cljs$core$fnext(coll){
	return cljs.core.first(cljs.core.next(coll));
	});
	/**
	 * Same as (next (next x))
	 */
	cljs.core.nnext = (function cljs$core$nnext(coll){
	return cljs.core.next(cljs.core.next(coll));
	});
	/**
	 * Return the last item in coll, in linear time
	 */
	cljs.core.last = (function cljs$core$last(s){
	while(true){
	var sn = cljs.core.next(s);
	if(!((sn == null))){
	var G__1933 = sn;
	s = G__1933;
	continue;
	} else {
	return cljs.core.first(s);
	}
	break;
	}
	});
	(cljs.core.IEquiv["_"] = true);

	(cljs.core._equiv["_"] = (function (x,o){
	return (x === o);
	}));
	/**
	 * conj[oin]. Returns a new collection with the xs
	 *   'added'. (conj nil item) returns (item).  The 'addition' may
	 *   happen at different 'places' depending on the concrete type.
	 */
	cljs.core.conj = (function cljs$core$conj(var_args){
	var args1934 = [];
	var len__6099__auto___1940 = arguments.length;
	var i__6100__auto___1941 = (0);
	while(true){
	if((i__6100__auto___1941 < len__6099__auto___1940)){
	args1934.push((arguments[i__6100__auto___1941]));

	var G__1942 = (i__6100__auto___1941 + (1));
	i__6100__auto___1941 = G__1942;
	continue;
	} else {
	}
	break;
	}

	var G__1939 = args1934.length;
	switch (G__1939) {
	case 0:
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1934.slice((2)),(0),null));
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.conj.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.conj.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	return coll;
	});

	cljs.core.conj.cljs$core$IFn$_invoke$arity$2 = (function (coll,x){
	if(!((coll == null))){
	return cljs.core._conj(coll,x);
	} else {
	var x__5940__auto__ = x;
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto__);
	}
	});

	cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic = (function (coll,x,xs){
	while(true){
	if(cljs.core.truth_(xs)){
	var G__1944 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll,x);
	var G__1945 = cljs.core.first(xs);
	var G__1946 = cljs.core.next(xs);
	coll = G__1944;
	x = G__1945;
	xs = G__1946;
	continue;
	} else {
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(coll,x);
	}
	break;
	}
	});

	cljs.core.conj.cljs$lang$applyTo = (function (seq1935){
	var G__1936 = cljs.core.first(seq1935);
	var seq1935__$1 = cljs.core.next(seq1935);
	var G__1937 = cljs.core.first(seq1935__$1);
	var seq1935__$2 = cljs.core.next(seq1935__$1);
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(G__1936,G__1937,seq1935__$2);
	});

	cljs.core.conj.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns an empty collection of the same category as coll, or nil
	 */
	cljs.core.empty = (function cljs$core$empty(coll){
	if((coll == null)){
	return null;
	} else {
	return cljs.core._empty(coll);
	}
	});
	cljs.core.accumulating_seq_count = (function cljs$core$accumulating_seq_count(coll){
	var s = cljs.core.seq(coll);
	var acc = (0);
	while(true){
	if(cljs.core.counted_QMARK_(s)){
	return (acc + cljs.core._count(s));
	} else {
	var G__1947 = cljs.core.next(s);
	var G__1948 = (acc + (1));
	s = G__1947;
	acc = G__1948;
	continue;
	}
	break;
	}
	});
	/**
	 * Returns the number of items in the collection. (count nil) returns
	 *   0.  Also works on strings, arrays, and Maps
	 */
	cljs.core.count = (function cljs$core$count(coll){
	if(!((coll == null))){
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (2))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ICounted$)))?true:false):false)){
	return coll.cljs$core$ICounted$_count$arity$1(null);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	return coll.length;
	} else {
	if(typeof coll === 'string'){
	return coll.length;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (8388608))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeqable$)))?true:false):false)){
	return cljs.core.accumulating_seq_count(coll);
	} else {
	return cljs.core._count(coll);

	}
	}
	}
	}
	} else {
	return (0);
	}
	});
	cljs.core.linear_traversal_nth = (function cljs$core$linear_traversal_nth(var_args){
	var args1953 = [];
	var len__6099__auto___1956 = arguments.length;
	var i__6100__auto___1957 = (0);
	while(true){
	if((i__6100__auto___1957 < len__6099__auto___1956)){
	args1953.push((arguments[i__6100__auto___1957]));

	var G__1958 = (i__6100__auto___1957 + (1));
	i__6100__auto___1957 = G__1958;
	continue;
	} else {
	}
	break;
	}

	var G__1955 = args1953.length;
	switch (G__1955) {
	case 2:
	return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1953.length)].join('')));

	}
	});

	cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2 = (function (coll,n){
	while(true){
	if((coll == null)){
	throw (new Error("Index out of bounds"));
	} else {
	if((n === (0))){
	if(cljs.core.seq(coll)){
	return cljs.core.first(coll);
	} else {
	throw (new Error("Index out of bounds"));
	}
	} else {
	if(cljs.core.indexed_QMARK_(coll)){
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll,n);
	} else {
	if(cljs.core.seq(coll)){
	var G__1960 = cljs.core.next(coll);
	var G__1961 = (n - (1));
	coll = G__1960;
	n = G__1961;
	continue;
	} else {
	throw (new Error("Index out of bounds"));

	}
	}
	}
	}
	break;
	}
	});

	cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3 = (function (coll,n,not_found){
	while(true){
	if((coll == null)){
	return not_found;
	} else {
	if((n === (0))){
	if(cljs.core.seq(coll)){
	return cljs.core.first(coll);
	} else {
	return not_found;
	}
	} else {
	if(cljs.core.indexed_QMARK_(coll)){
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(coll,n,not_found);
	} else {
	if(cljs.core.seq(coll)){
	var G__1962 = cljs.core.next(coll);
	var G__1963 = (n - (1));
	var G__1964 = not_found;
	coll = G__1962;
	n = G__1963;
	not_found = G__1964;
	continue;
	} else {
	return not_found;

	}
	}
	}
	}
	break;
	}
	});

	cljs.core.linear_traversal_nth.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns the value at the index. get returns nil if index out of
	 *   bounds, nth throws an exception unless not-found is supplied.  nth
	 *   also works for strings, arrays, regex Matchers and Lists, and,
	 *   in O(n) time, for sequences.
	 */
	cljs.core.nth = (function cljs$core$nth(var_args){
	var args1965 = [];
	var len__6099__auto___1972 = arguments.length;
	var i__6100__auto___1973 = (0);
	while(true){
	if((i__6100__auto___1973 < len__6099__auto___1972)){
	args1965.push((arguments[i__6100__auto___1973]));

	var G__1974 = (i__6100__auto___1973 + (1));
	i__6100__auto___1973 = G__1974;
	continue;
	} else {
	}
	break;
	}

	var G__1967 = args1965.length;
	switch (G__1967) {
	case 2:
	return cljs.core.nth.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.nth.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1965.length)].join('')));

	}
	});

	cljs.core.nth.cljs$core$IFn$_invoke$arity$2 = (function (coll,n){
	if(!(typeof n === 'number')){
	throw (new Error("Index argument to nth must be a number"));
	} else {
	if((coll == null)){
	return coll;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (16))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$)))?true:false):false)){
	return coll.cljs$core$IIndexed$_nth$arity$2(null,n);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	if(((n >= (0))) && ((n < coll.length))){
	return (coll[n]);
	} else {
	throw (new Error("Index out of bounds"));
	}
	} else {
	if(typeof coll === 'string'){
	if(((n >= (0))) && ((n < coll.length))){
	return coll.charAt(n);
	} else {
	throw (new Error("Index out of bounds"));
	}
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$)))?true:false):false)){
	return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$2(coll,n);
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed,coll)){
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll,n);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join('')));

	}
	}
	}
	}
	}
	}
	}
	});

	cljs.core.nth.cljs$core$IFn$_invoke$arity$3 = (function (coll,n,not_found){
	if(!(typeof n === 'number')){
	throw (new Error("Index argument to nth must be a number."));
	} else {
	if((coll == null)){
	return not_found;
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (16))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IIndexed$)))?true:false):false)){
	return coll.cljs$core$IIndexed$_nth$arity$3(null,n,not_found);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	if(((n >= (0))) && ((n < coll.length))){
	return (coll[n]);
	} else {
	return not_found;
	}
	} else {
	if(typeof coll === 'string'){
	if(((n >= (0))) && ((n < coll.length))){
	return coll.charAt(n);
	} else {
	return not_found;
	}
	} else {
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$)))?true:false):false)){
	return cljs.core.linear_traversal_nth.cljs$core$IFn$_invoke$arity$3(coll,n,not_found);
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.IIndexed,coll)){
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(coll,n);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("nth not supported on this type "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.type__GT_str(cljs.core.type(coll)))].join('')));

	}
	}
	}
	}
	}
	}
	}
	});

	cljs.core.nth.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns the nth rest of coll, coll when n is 0.
	 */
	cljs.core.nthrest = (function cljs$core$nthrest(coll,n){
	var n__$1 = n;
	var xs = coll;
	while(true){
	if(((n__$1 > (0))) && (cljs.core.seq(xs))){
	var G__1976 = (n__$1 - (1));
	var G__1977 = cljs.core.rest(xs);
	n__$1 = G__1976;
	xs = G__1977;
	continue;
	} else {
	return xs;
	}
	break;
	}
	});
	/**
	 * Returns the value mapped to key, not-found or nil if key not present.
	 */
	cljs.core.get = (function cljs$core$get(var_args){
	var args1978 = [];
	var len__6099__auto___1983 = arguments.length;
	var i__6100__auto___1984 = (0);
	while(true){
	if((i__6100__auto___1984 < len__6099__auto___1983)){
	args1978.push((arguments[i__6100__auto___1984]));

	var G__1985 = (i__6100__auto___1984 + (1));
	i__6100__auto___1984 = G__1985;
	continue;
	} else {
	}
	break;
	}

	var G__1980 = args1978.length;
	switch (G__1980) {
	case 2:
	return cljs.core.get.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.get.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args1978.length)].join('')));

	}
	});

	cljs.core.get.cljs$core$IFn$_invoke$arity$2 = (function (o,k){
	if((o == null)){
	return null;
	} else {
	if(((!((o == null)))?((((o.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$)))?true:false):false)){
	return o.cljs$core$ILookup$_lookup$arity$2(null,k);
	} else {
	if(cljs.core.array_QMARK_(o)){
	if((!((k == null))) && ((k < o.length))){
	return (o[(k | (0))]);
	} else {
	return null;
	}
	} else {
	if(typeof o === 'string'){
	if((!((k == null))) && ((k < o.length))){
	return o.charAt((k | (0)));
	} else {
	return null;
	}
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,o)){
	return cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(o,k);
	} else {
	return null;

	}
	}
	}
	}
	}
	});

	cljs.core.get.cljs$core$IFn$_invoke$arity$3 = (function (o,k,not_found){
	if(!((o == null))){
	if(((!((o == null)))?((((o.cljs$lang$protocol_mask$partition0$ & (256))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$ILookup$)))?true:false):false)){
	return o.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	} else {
	if(cljs.core.array_QMARK_(o)){
	if((!((k == null))) && ((k >= (0))) && ((k < o.length))){
	return (o[(k | (0))]);
	} else {
	return not_found;
	}
	} else {
	if(typeof o === 'string'){
	if((!((k == null))) && ((k >= (0))) && ((k < o.length))){
	return o.charAt((k | (0)));
	} else {
	return not_found;
	}
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.ILookup,o)){
	return cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(o,k,not_found);
	} else {
	return not_found;

	}
	}
	}
	}
	} else {
	return not_found;
	}
	});

	cljs.core.get.cljs$lang$maxFixedArity = 3;


	/**
	 * assoc[iate]. When applied to a map, returns a new map of the
	 * same (hashed/sorted) type, that contains the mapping of key(s) to
	 * val(s). When applied to a vector, returns a new vector that
	 * contains val at index.
	 */
	cljs.core.assoc = (function cljs$core$assoc(var_args){
	var args1987 = [];
	var len__6099__auto___1994 = arguments.length;
	var i__6100__auto___1995 = (0);
	while(true){
	if((i__6100__auto___1995 < len__6099__auto___1994)){
	args1987.push((arguments[i__6100__auto___1995]));

	var G__1996 = (i__6100__auto___1995 + (1));
	i__6100__auto___1995 = G__1996;
	continue;
	} else {
	}
	break;
	}

	var G__1993 = args1987.length;
	switch (G__1993) {
	case 3:
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args1987.slice((3)),(0),null));
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.assoc.cljs$core$IFn$_invoke$arity$3 = (function (coll,k,v){
	if(!((coll == null))){
	return cljs.core._assoc(coll,k,v);
	} else {
	return cljs.core.PersistentArrayMap.createAsIfByAssoc([k,v]);
	}
	});

	cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic = (function (coll,k,v,kvs){
	while(true){
	var ret = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(coll,k,v);
	if(cljs.core.truth_(kvs)){
	var G__1998 = ret;
	var G__1999 = cljs.core.first(kvs);
	var G__2000 = cljs.core.second(kvs);
	var G__2001 = cljs.core.nnext(kvs);
	coll = G__1998;
	k = G__1999;
	v = G__2000;
	kvs = G__2001;
	continue;
	} else {
	return ret;
	}
	break;
	}
	});

	cljs.core.assoc.cljs$lang$applyTo = (function (seq1988){
	var G__1989 = cljs.core.first(seq1988);
	var seq1988__$1 = cljs.core.next(seq1988);
	var G__1990 = cljs.core.first(seq1988__$1);
	var seq1988__$2 = cljs.core.next(seq1988__$1);
	var G__1991 = cljs.core.first(seq1988__$2);
	var seq1988__$3 = cljs.core.next(seq1988__$2);
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic(G__1989,G__1990,G__1991,seq1988__$3);
	});

	cljs.core.assoc.cljs$lang$maxFixedArity = (3);

	/**
	 * dissoc[iate]. Returns a new map of the same (hashed/sorted) type,
	 *   that does not contain a mapping for key(s).
	 */
	cljs.core.dissoc = (function cljs$core$dissoc(var_args){
	var args2002 = [];
	var len__6099__auto___2008 = arguments.length;
	var i__6100__auto___2009 = (0);
	while(true){
	if((i__6100__auto___2009 < len__6099__auto___2008)){
	args2002.push((arguments[i__6100__auto___2009]));

	var G__2010 = (i__6100__auto___2009 + (1));
	i__6100__auto___2009 = G__2010;
	continue;
	} else {
	}
	break;
	}

	var G__2007 = args2002.length;
	switch (G__2007) {
	case 1:
	return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2002.slice((2)),(0),null));
	return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.dissoc.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	return coll;
	});

	cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2 = (function (coll,k){
	if((coll == null)){
	return null;
	} else {
	return cljs.core._dissoc(coll,k);
	}
	});

	cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic = (function (coll,k,ks){
	while(true){
	if((coll == null)){
	return null;
	} else {
	var ret = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(coll,k);
	if(cljs.core.truth_(ks)){
	var G__2012 = ret;
	var G__2013 = cljs.core.first(ks);
	var G__2014 = cljs.core.next(ks);
	coll = G__2012;
	k = G__2013;
	ks = G__2014;
	continue;
	} else {
	return ret;
	}
	}
	break;
	}
	});

	cljs.core.dissoc.cljs$lang$applyTo = (function (seq2003){
	var G__2004 = cljs.core.first(seq2003);
	var seq2003__$1 = cljs.core.next(seq2003);
	var G__2005 = cljs.core.first(seq2003__$1);
	var seq2003__$2 = cljs.core.next(seq2003__$1);
	return cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic(G__2004,G__2005,seq2003__$2);
	});

	cljs.core.dissoc.cljs$lang$maxFixedArity = (2);

	/**
	 * Return true if f is a JavaScript function or satisfies the Fn protocol.
	 */
	cljs.core.fn_QMARK_ = (function cljs$core$fn_QMARK_(f){
	var or__5450__auto__ = goog.isFunction(f);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	if(!((f == null))){
	if((false) || ((cljs.core.PROTOCOL_SENTINEL === f.cljs$core$Fn$))){
	return true;
	} else {
	if((!f.cljs$lang$protocol_mask$partition$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.Fn,f);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.Fn,f);
	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.Fn}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.MetaFn = (function (afn,meta){
	this.afn = afn;
	this.meta = meta;
	this.cljs$lang$protocol_mask$partition0$ = 393217;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.MetaFn.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.meta;
	});

	cljs.core.MetaFn.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_,new_meta){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.MetaFn(self__.afn,new_meta));
	});

	cljs.core.MetaFn.prototype.cljs$core$Fn$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.MetaFn.prototype.call = (function() {
	var G__2020 = null;
	var G__2020__1 = (function (self__){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null));
	});
	var G__2020__2 = (function (self__,a){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null,a));
	});
	var G__2020__3 = (function (self__,a,b){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a,b) : self__.afn.call(null,a,b));
	});
	var G__2020__4 = (function (self__,a,b,c){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a,b,c) : self__.afn.call(null,a,b,c));
	});
	var G__2020__5 = (function (self__,a,b,c,d){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : self__.afn.call(null,a,b,c,d));
	});
	var G__2020__6 = (function (self__,a,b,c,d,e){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : self__.afn.call(null,a,b,c,d,e));
	});
	var G__2020__7 = (function (self__,a,b,c,d,e,f){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : self__.afn.call(null,a,b,c,d,e,f));
	});
	var G__2020__8 = (function (self__,a,b,c,d,e,f,g){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : self__.afn.call(null,a,b,c,d,e,f,g));
	});
	var G__2020__9 = (function (self__,a,b,c,d,e,f,g,h){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : self__.afn.call(null,a,b,c,d,e,f,g,h));
	});
	var G__2020__10 = (function (self__,a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : self__.afn.call(null,a,b,c,d,e,f,g,h,i));
	});
	var G__2020__11 = (function (self__,a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j));
	});
	var G__2020__12 = (function (self__,a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	});
	var G__2020__13 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	});
	var G__2020__14 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	});
	var G__2020__15 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	});
	var G__2020__16 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	});
	var G__2020__17 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	});
	var G__2020__18 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	});
	var G__2020__19 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	});
	var G__2020__20 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	});
	var G__2020__21 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	});
	var G__2020__22 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var self____$1 = this;
	var _ = self____$1;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest) : cljs.core.apply.call(null,self__.afn,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest));
	});
	G__2020 = function(self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	switch(arguments.length){
	case 1:
	return G__2020__1.call(this,self__);
	case 2:
	return G__2020__2.call(this,self__,a);
	case 3:
	return G__2020__3.call(this,self__,a,b);
	case 4:
	return G__2020__4.call(this,self__,a,b,c);
	case 5:
	return G__2020__5.call(this,self__,a,b,c,d);
	case 6:
	return G__2020__6.call(this,self__,a,b,c,d,e);
	case 7:
	return G__2020__7.call(this,self__,a,b,c,d,e,f);
	case 8:
	return G__2020__8.call(this,self__,a,b,c,d,e,f,g);
	case 9:
	return G__2020__9.call(this,self__,a,b,c,d,e,f,g,h);
	case 10:
	return G__2020__10.call(this,self__,a,b,c,d,e,f,g,h,i);
	case 11:
	return G__2020__11.call(this,self__,a,b,c,d,e,f,g,h,i,j);
	case 12:
	return G__2020__12.call(this,self__,a,b,c,d,e,f,g,h,i,j,k);
	case 13:
	return G__2020__13.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l);
	case 14:
	return G__2020__14.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m);
	case 15:
	return G__2020__15.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	case 16:
	return G__2020__16.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	case 17:
	return G__2020__17.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	case 18:
	return G__2020__18.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	case 19:
	return G__2020__19.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	case 20:
	return G__2020__20.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	case 21:
	return G__2020__21.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	case 22:
	return G__2020__22.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2020.cljs$core$IFn$_invoke$arity$1 = G__2020__1;
	G__2020.cljs$core$IFn$_invoke$arity$2 = G__2020__2;
	G__2020.cljs$core$IFn$_invoke$arity$3 = G__2020__3;
	G__2020.cljs$core$IFn$_invoke$arity$4 = G__2020__4;
	G__2020.cljs$core$IFn$_invoke$arity$5 = G__2020__5;
	G__2020.cljs$core$IFn$_invoke$arity$6 = G__2020__6;
	G__2020.cljs$core$IFn$_invoke$arity$7 = G__2020__7;
	G__2020.cljs$core$IFn$_invoke$arity$8 = G__2020__8;
	G__2020.cljs$core$IFn$_invoke$arity$9 = G__2020__9;
	G__2020.cljs$core$IFn$_invoke$arity$10 = G__2020__10;
	G__2020.cljs$core$IFn$_invoke$arity$11 = G__2020__11;
	G__2020.cljs$core$IFn$_invoke$arity$12 = G__2020__12;
	G__2020.cljs$core$IFn$_invoke$arity$13 = G__2020__13;
	G__2020.cljs$core$IFn$_invoke$arity$14 = G__2020__14;
	G__2020.cljs$core$IFn$_invoke$arity$15 = G__2020__15;
	G__2020.cljs$core$IFn$_invoke$arity$16 = G__2020__16;
	G__2020.cljs$core$IFn$_invoke$arity$17 = G__2020__17;
	G__2020.cljs$core$IFn$_invoke$arity$18 = G__2020__18;
	G__2020.cljs$core$IFn$_invoke$arity$19 = G__2020__19;
	G__2020.cljs$core$IFn$_invoke$arity$20 = G__2020__20;
	G__2020.cljs$core$IFn$_invoke$arity$21 = G__2020__21;
	G__2020.cljs$core$IFn$_invoke$arity$22 = G__2020__22;
	return G__2020;
	})()
	;

	cljs.core.MetaFn.prototype.apply = (function (self__,args2019){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args2019)));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$0 ? self__.afn.cljs$core$IFn$_invoke$arity$0() : self__.afn.call(null));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$1 = (function (a){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$1 ? self__.afn.cljs$core$IFn$_invoke$arity$1(a) : self__.afn.call(null,a));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$2 = (function (a,b){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$2 ? self__.afn.cljs$core$IFn$_invoke$arity$2(a,b) : self__.afn.call(null,a,b));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$3 = (function (a,b,c){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$3 ? self__.afn.cljs$core$IFn$_invoke$arity$3(a,b,c) : self__.afn.call(null,a,b,c));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$4 = (function (a,b,c,d){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$4 ? self__.afn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : self__.afn.call(null,a,b,c,d));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$5 = (function (a,b,c,d,e){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$5 ? self__.afn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : self__.afn.call(null,a,b,c,d,e));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$6 = (function (a,b,c,d,e,f){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$6 ? self__.afn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : self__.afn.call(null,a,b,c,d,e,f));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$7 = (function (a,b,c,d,e,f,g){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$7 ? self__.afn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : self__.afn.call(null,a,b,c,d,e,f,g));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$8 = (function (a,b,c,d,e,f,g,h){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$8 ? self__.afn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : self__.afn.call(null,a,b,c,d,e,f,g,h));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$9 = (function (a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$9 ? self__.afn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : self__.afn.call(null,a,b,c,d,e,f,g,h,i));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$10 = (function (a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$10 ? self__.afn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$11 = (function (a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$11 ? self__.afn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$12 = (function (a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$12 ? self__.afn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$13 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$13 ? self__.afn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$14 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$14 ? self__.afn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$15 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$15 ? self__.afn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$16 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$16 ? self__.afn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$17 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$17 ? self__.afn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$18 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$18 ? self__.afn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$19 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$19 ? self__.afn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$20 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var _ = this;
	return (self__.afn.cljs$core$IFn$_invoke$arity$20 ? self__.afn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : self__.afn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	});

	cljs.core.MetaFn.prototype.cljs$core$IFn$_invoke$arity$21 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var _ = this;
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$22 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$22(self__.afn,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest) : cljs.core.apply.call(null,self__.afn,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest));
	});

	cljs.core.MetaFn.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$afn,cljs.core.cst$sym$meta], null);
	});

	cljs.core.MetaFn.cljs$lang$type = true;

	cljs.core.MetaFn.cljs$lang$ctorStr = "cljs.core/MetaFn";

	cljs.core.MetaFn.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/MetaFn");
	});

	cljs.core.__GT_MetaFn = (function cljs$core$__GT_MetaFn(afn,meta){
	return (new cljs.core.MetaFn(afn,meta));
	});

	/**
	 * Returns an object of the same type and value as obj, with
	 *   map m as its metadata.
	 */
	cljs.core.with_meta = (function cljs$core$with_meta(o,meta){
	if(goog.isFunction(o)){
	return (new cljs.core.MetaFn(o,meta));
	} else {
	if((o == null)){
	return null;
	} else {
	return cljs.core._with_meta(o,meta);
	}
	}
	});
	/**
	 * Returns the metadata of obj, returns nil if there is no metadata.
	 */
	cljs.core.meta = (function cljs$core$meta(o){
	if((function (){var and__5442__auto__ = !((o == null));
	if(and__5442__auto__){
	if(!((o == null))){
	if(((o.cljs$lang$protocol_mask$partition0$ & (131072))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMeta$))){
	return true;
	} else {
	if((!o.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta,o);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IMeta,o);
	}
	} else {
	return and__5442__auto__;
	}
	})()){
	return cljs.core._meta(o);
	} else {
	return null;
	}
	});
	/**
	 * For a list or queue, same as first, for a vector, same as, but much
	 *   more efficient than, last. If the collection is empty, returns nil.
	 */
	cljs.core.peek = (function cljs$core$peek(coll){
	if((coll == null)){
	return null;
	} else {
	return cljs.core._peek(coll);
	}
	});
	/**
	 * For a list or queue, returns a new list/queue without the first
	 *   item, for a vector, returns a new vector without the last item.
	 *   Note - not the same as next/butlast.
	 */
	cljs.core.pop = (function cljs$core$pop(coll){
	if((coll == null)){
	return null;
	} else {
	return cljs.core._pop(coll);
	}
	});
	/**
	 * disj[oin]. Returns a new set of the same (hashed/sorted) type, that
	 *   does not contain key(s).
	 */
	cljs.core.disj = (function cljs$core$disj(var_args){
	var args2025 = [];
	var len__6099__auto___2031 = arguments.length;
	var i__6100__auto___2032 = (0);
	while(true){
	if((i__6100__auto___2032 < len__6099__auto___2031)){
	args2025.push((arguments[i__6100__auto___2032]));

	var G__2033 = (i__6100__auto___2032 + (1));
	i__6100__auto___2032 = G__2033;
	continue;
	} else {
	}
	break;
	}

	var G__2030 = args2025.length;
	switch (G__2030) {
	case 1:
	return cljs.core.disj.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.disj.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2025.slice((2)),(0),null));
	return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.disj.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	return coll;
	});

	cljs.core.disj.cljs$core$IFn$_invoke$arity$2 = (function (coll,k){
	if((coll == null)){
	return null;
	} else {
	return cljs.core._disjoin(coll,k);
	}
	});

	cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic = (function (coll,k,ks){
	while(true){
	if((coll == null)){
	return null;
	} else {
	var ret = cljs.core.disj.cljs$core$IFn$_invoke$arity$2(coll,k);
	if(cljs.core.truth_(ks)){
	var G__2035 = ret;
	var G__2036 = cljs.core.first(ks);
	var G__2037 = cljs.core.next(ks);
	coll = G__2035;
	k = G__2036;
	ks = G__2037;
	continue;
	} else {
	return ret;
	}
	}
	break;
	}
	});

	cljs.core.disj.cljs$lang$applyTo = (function (seq2026){
	var G__2027 = cljs.core.first(seq2026);
	var seq2026__$1 = cljs.core.next(seq2026);
	var G__2028 = cljs.core.first(seq2026__$1);
	var seq2026__$2 = cljs.core.next(seq2026__$1);
	return cljs.core.disj.cljs$core$IFn$_invoke$arity$variadic(G__2027,G__2028,seq2026__$2);
	});

	cljs.core.disj.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns true if coll has no items - same as (not (seq coll)).
	 *   Please use the idiom (seq x) rather than (not (empty? x))
	 */
	cljs.core.empty_QMARK_ = (function cljs$core$empty_QMARK_(coll){
	return ((coll == null)) || (cljs.core.not(cljs.core.seq(coll)));
	});
	/**
	 * Returns true if x satisfies ICollection
	 */
	cljs.core.coll_QMARK_ = (function cljs$core$coll_QMARK_(x){
	if((x == null)){
	return false;
	} else {
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (8))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ICollection$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ICollection,x);
	}
	}
	});
	/**
	 * Returns true if x satisfies ISet
	 */
	cljs.core.set_QMARK_ = (function cljs$core$set_QMARK_(x){
	if((x == null)){
	return false;
	} else {
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (4096))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISet$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISet,x);
	}
	}
	});
	/**
	 * Returns true if coll implements Associative
	 */
	cljs.core.associative_QMARK_ = (function cljs$core$associative_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (512))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IAssociative$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IAssociative,x);
	}
	});
	/**
	 * Returns true if coll implements IFind
	 */
	cljs.core.ifind_QMARK_ = (function cljs$core$ifind_QMARK_(x){
	if(!((x == null))){
	if((false) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IFind$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IFind,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IFind,x);
	}
	});
	/**
	 * Returns true if coll satisfies ISequential
	 */
	cljs.core.sequential_QMARK_ = (function cljs$core$sequential_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (16777216))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISequential$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISequential,x);
	}
	});
	/**
	 * Returns true if coll satisfies ISorted
	 */
	cljs.core.sorted_QMARK_ = (function cljs$core$sorted_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (268435456))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$ISorted$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISorted,x);
	}
	});
	/**
	 * Returns true if coll satisfies IReduce
	 */
	cljs.core.reduceable_QMARK_ = (function cljs$core$reduceable_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (524288))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IReduce$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IReduce,x);
	}
	});
	/**
	 * Return true if x satisfies IMap
	 */
	cljs.core.map_QMARK_ = (function cljs$core$map_QMARK_(x){
	if((x == null)){
	return false;
	} else {
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (1024))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IMap$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IMap,x);
	}
	}
	});
	/**
	 * Return true if x satisfies IRecord
	 */
	cljs.core.record_QMARK_ = (function cljs$core$record_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (67108864))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IRecord$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IRecord,x);
	}
	});
	/**
	 * Return true if x satisfies IVector
	 */
	cljs.core.vector_QMARK_ = (function cljs$core$vector_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (16384))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IVector$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IVector,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IVector,x);
	}
	});

	/**
	 * Return true if x is satisfies IChunkedSeq.
	 */
	cljs.core.chunked_seq_QMARK_ = (function cljs$core$chunked_seq_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition1$ & (512))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IChunkedSeq$))){
	return true;
	} else {
	return false;
	}
	} else {
	return false;
	}
	});
	/**
	 * Create JavaSript object from an even number arguments representing
	 *   interleaved keys and values.
	 */
	cljs.core.js_obj = (function cljs$core$js_obj(var_args){
	var args2060 = [];
	var len__6099__auto___2066 = arguments.length;
	var i__6100__auto___2067 = (0);
	while(true){
	if((i__6100__auto___2067 < len__6099__auto___2066)){
	args2060.push((arguments[i__6100__auto___2067]));

	var G__2068 = (i__6100__auto___2067 + (1));
	i__6100__auto___2067 = G__2068;
	continue;
	} else {
	}
	break;
	}

	var G__2063 = args2060.length;
	switch (G__2063) {
	case 0:
	return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0();

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2060.slice((0)),(0),null));
	return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(argseq__6118__auto__);

	}
	});

	cljs.core.js_obj.cljs$core$IFn$_invoke$arity$0 = (function (){
	return {};
	});

	cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic = (function (keyvals){
	return (cljs.core.apply.cljs$core$IFn$_invoke$arity$2 ? cljs.core.apply.cljs$core$IFn$_invoke$arity$2(goog.object.create,keyvals) : cljs.core.apply.call(null,goog.object.create,keyvals));
	});

	cljs.core.js_obj.cljs$lang$applyTo = (function (seq2061){
	return cljs.core.js_obj.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq2061));
	});

	cljs.core.js_obj.cljs$lang$maxFixedArity = (0);

	/**
	 * Return the JavaScript keys for an object.
	 */
	cljs.core.js_keys = (function cljs$core$js_keys(obj){
	var keys = [];
	var G__2072_2074 = obj;
	var G__2073_2075 = ((function (G__2072_2074,keys){
	return (function (val,key,obj__$1){
	return keys.push(key);
	});})(G__2072_2074,keys))
	;
	goog.object.forEach(G__2072_2074,G__2073_2075);

	return keys;
	});
	/**
	 * Delete a property from a JavaScript object.
	 */
	cljs.core.js_delete = (function cljs$core$js_delete(obj,key){
	return delete obj[key];
	});
	cljs.core.array_copy = (function cljs$core$array_copy(from,i,to,j,len){
	var i__$1 = i;
	var j__$1 = j;
	var len__$1 = len;
	while(true){
	if((len__$1 === (0))){
	return to;
	} else {
	(to[j__$1] = (from[i__$1]));

	var G__2076 = (i__$1 + (1));
	var G__2077 = (j__$1 + (1));
	var G__2078 = (len__$1 - (1));
	i__$1 = G__2076;
	j__$1 = G__2077;
	len__$1 = G__2078;
	continue;
	}
	break;
	}
	});
	cljs.core.array_copy_downward = (function cljs$core$array_copy_downward(from,i,to,j,len){
	var i__$1 = (i + (len - (1)));
	var j__$1 = (j + (len - (1)));
	var len__$1 = len;
	while(true){
	if((len__$1 === (0))){
	return to;
	} else {
	(to[j__$1] = (from[i__$1]));

	var G__2079 = (i__$1 - (1));
	var G__2080 = (j__$1 - (1));
	var G__2081 = (len__$1 - (1));
	i__$1 = G__2079;
	j__$1 = G__2080;
	len__$1 = G__2081;
	continue;
	}
	break;
	}
	});
	cljs.core.lookup_sentinel = {};
	/**
	 * Returns true if x is the value false, false otherwise.
	 */
	cljs.core.false_QMARK_ = (function cljs$core$false_QMARK_(x){
	return x === false;
	});
	/**
	 * Returns true if x is the value true, false otherwise.
	 */
	cljs.core.true_QMARK_ = (function cljs$core$true_QMARK_(x){
	return x === true;
	});
	/**
	 * Return true if x is a Boolean
	 */
	cljs.core.boolean_QMARK_ = (function cljs$core$boolean_QMARK_(x){
	return (x === true) || (x === false);
	});
	/**
	 * Returns true if x identical to the JavaScript undefined value.
	 */
	cljs.core.undefined_QMARK_ = (function cljs$core$undefined_QMARK_(x){
	return (void 0 === x);
	});
	/**
	 * Return true if s satisfies ISeq
	 */
	cljs.core.seq_QMARK_ = (function cljs$core$seq_QMARK_(s){
	if((s == null)){
	return false;
	} else {
	if(!((s == null))){
	if(((s.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeq$))){
	return true;
	} else {
	if((!s.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq,s);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.ISeq,s);
	}
	}
	});
	/**
	 * Return true if the seq function is supported for s
	 */
	cljs.core.seqable_QMARK_ = (function cljs$core$seqable_QMARK_(s){
	var or__5450__auto__ = ((!((s == null)))?((((s.cljs$lang$protocol_mask$partition0$ & (8388608))) || ((cljs.core.PROTOCOL_SENTINEL === s.cljs$core$ISeqable$)))?true:(((!s.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable,s):false)):cljs.core.native_satisfies_QMARK_(cljs.core.ISeqable,s));
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return (cljs.core.array_QMARK_(s)) || (typeof s === 'string');
	}
	});
	/**
	 * Coerce to boolean
	 */
	cljs.core.boolean$ = (function cljs$core$boolean(x){
	if((x == null)){
	return false;
	} else {
	if(x === false){
	return false;
	} else {
	return true;

	}
	}
	});
	/**
	 * Returns true if f returns true for fn? or satisfies IFn.
	 */
	cljs.core.ifn_QMARK_ = (function cljs$core$ifn_QMARK_(f){
	var or__5450__auto__ = cljs.core.fn_QMARK_(f);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	if(!((f == null))){
	if(((f.cljs$lang$protocol_mask$partition0$ & (1))) || ((cljs.core.PROTOCOL_SENTINEL === f.cljs$core$IFn$))){
	return true;
	} else {
	if((!f.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IFn,f);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IFn,f);
	}
	}
	});
	/**
	 * Returns true if n is a JavaScript number with no decimal part.
	 */
	cljs.core.integer_QMARK_ = (function cljs$core$integer_QMARK_(n){
	return (typeof n === 'number') && (!(isNaN(n))) && (!((n === Infinity))) && ((parseFloat(n) === parseInt(n,(10))));
	});
	/**
	 * Return true if x satisfies integer? or is an instance of goog.math.Integer
	 * or goog.math.Long.
	 */
	cljs.core.int_QMARK_ = (function cljs$core$int_QMARK_(x){
	return (cljs.core.integer_QMARK_(x)) || ((x instanceof goog.math.Integer)) || ((x instanceof goog.math.Long));
	});
	/**
	 * Return true if x satisfies int? and is positive.
	 */
	cljs.core.pos_int_QMARK_ = (function cljs$core$pos_int_QMARK_(x){
	if(cljs.core.integer_QMARK_(x)){
	return (x > (0));
	} else {
	if((x instanceof goog.math.Integer)){
	return (cljs.core.not(x.isNegative())) && (cljs.core.not(x.isZero()));
	} else {
	if((x instanceof goog.math.Long)){
	return (cljs.core.not(x.isNegative())) && (cljs.core.not(x.isZero()));
	} else {
	return false;

	}
	}
	}
	});
	/**
	 * Return true if x satisfies int? and is positive.
	 */
	cljs.core.neg_int_QMARK_ = (function cljs$core$neg_int_QMARK_(x){
	if(cljs.core.integer_QMARK_(x)){
	return (x < (0));
	} else {
	if((x instanceof goog.math.Integer)){
	return x.isNegative();
	} else {
	if((x instanceof goog.math.Long)){
	return x.isNegative();
	} else {
	return false;

	}
	}
	}
	});
	/**
	 * Return true if x satisfies int? and is a natural integer value.
	 */
	cljs.core.nat_int_QMARK_ = (function cljs$core$nat_int_QMARK_(x){
	if(cljs.core.integer_QMARK_(x)){
	return (!((x < (0)))) || ((x === (0)));
	} else {
	if((x instanceof goog.math.Integer)){
	var or__5450__auto__ = cljs.core.not(x.isNegative());
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return x.isZero();
	}
	} else {
	if((x instanceof goog.math.Long)){
	var or__5450__auto__ = cljs.core.not(x.isNegative());
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return x.isZero();
	}
	} else {
	return false;

	}
	}
	}
	});
	/**
	 * Returns true for JavaScript numbers, false otherwise.
	 */
	cljs.core.float_QMARK_ = (function cljs$core$float_QMARK_(x){
	return typeof x === 'number';
	});
	/**
	 * Returns true for JavaScript numbers, false otherwise.
	 */
	cljs.core.double_QMARK_ = (function cljs$core$double_QMARK_(x){
	return typeof x === 'number';
	});
	/**
	 * Returns true for Infinity and -Infinity values.
	 */
	cljs.core.infinite_QMARK_ = (function cljs$core$infinite_QMARK_(x){
	return ((x === Number.POSITIVE_INFINITY)) || ((x === Number.NEGATIVE_INFINITY));
	});
	/**
	 * Returns true if key is present in the given collection, otherwise
	 *   returns false.  Note that for numerically indexed collections like
	 *   vectors and arrays, this tests if the numeric key is within the
	 *   range of indexes. 'contains?' operates constant or logarithmic time;
	 *   it will not perform a linear search for a value.  See also 'some'.
	 */
	cljs.core.contains_QMARK_ = (function cljs$core$contains_QMARK_(coll,v){
	if((cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll,v,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return false;
	} else {
	return true;
	}
	});
	/**
	 * Returns the map entry for key, or nil if key not present.
	 */
	cljs.core.find = (function cljs$core$find(coll,k){
	if((!((coll == null))) && (cljs.core.associative_QMARK_(coll)) && (cljs.core.contains_QMARK_(coll,k))){
	if(cljs.core.ifind_QMARK_(coll)){
	return cljs.core._find(coll,k);
	} else {
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll,k)], null);
	}
	} else {
	return null;
	}
	});
	/**
	 * Returns true if no two of the arguments are =
	 */
	cljs.core.distinct_QMARK_ = (function cljs$core$distinct_QMARK_(var_args){
	var args2094 = [];
	var len__6099__auto___2100 = arguments.length;
	var i__6100__auto___2101 = (0);
	while(true){
	if((i__6100__auto___2101 < len__6099__auto___2100)){
	args2094.push((arguments[i__6100__auto___2101]));

	var G__2102 = (i__6100__auto___2101 + (1));
	i__6100__auto___2101 = G__2102;
	continue;
	} else {
	}
	break;
	}

	var G__2099 = args2094.length;
	switch (G__2099) {
	case 1:
	return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2094.slice((2)),(0),null));
	return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return !(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y));
	});

	cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	if(!(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y))){
	var s = cljs.core.PersistentHashSet.createAsIfByAssoc([x,y]);
	var xs = more;
	while(true){
	var x__$1 = cljs.core.first(xs);
	var etc = cljs.core.next(xs);
	if(cljs.core.truth_(xs)){
	if(cljs.core.contains_QMARK_(s,x__$1)){
	return false;
	} else {
	var G__2104 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(s,x__$1);
	var G__2105 = etc;
	s = G__2104;
	xs = G__2105;
	continue;
	}
	} else {
	return true;
	}
	break;
	}
	} else {
	return false;
	}
	});

	cljs.core.distinct_QMARK_.cljs$lang$applyTo = (function (seq2095){
	var G__2096 = cljs.core.first(seq2095);
	var seq2095__$1 = cljs.core.next(seq2095);
	var G__2097 = cljs.core.first(seq2095__$1);
	var seq2095__$2 = cljs.core.next(seq2095__$1);
	return cljs.core.distinct_QMARK_.cljs$core$IFn$_invoke$arity$variadic(G__2096,G__2097,seq2095__$2);
	});

	cljs.core.distinct_QMARK_.cljs$lang$maxFixedArity = (2);

	/**
	 * Comparator. Returns a negative number, zero, or a positive number
	 *   when x is logically 'less than', 'equal to', or 'greater than'
	 *   y. Uses IComparable if available and google.array.defaultCompare for objects
	 *  of the same type and special-cases nil to be less than any other object.
	 */
	cljs.core.compare = (function cljs$core$compare(x,y){
	if((x === y)){
	return (0);
	} else {
	if((x == null)){
	return (-1);
	} else {
	if((y == null)){
	return (1);
	} else {
	if(typeof x === 'number'){
	if(typeof y === 'number'){
	return goog.array.defaultCompare(x,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}
	} else {
	if(((!((x == null)))?((((x.cljs$lang$protocol_mask$partition1$ & (2048))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IComparable$)))?true:(((!x.cljs$lang$protocol_mask$partition1$))?cljs.core.native_satisfies_QMARK_(cljs.core.IComparable,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IComparable,x))){
	return cljs.core._compare(x,y);
	} else {
	if(((typeof x === 'string') || (cljs.core.array_QMARK_(x)) || (x === true) || (x === false)) && ((cljs.core.type(x) === cljs.core.type(y)))){
	return goog.array.defaultCompare(x,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}

	}
	}
	}
	}
	}
	});
	/**
	 * Compare indexed collection.
	 */
	cljs.core.compare_indexed = (function cljs$core$compare_indexed(var_args){
	var args2108 = [];
	var len__6099__auto___2111 = arguments.length;
	var i__6100__auto___2112 = (0);
	while(true){
	if((i__6100__auto___2112 < len__6099__auto___2111)){
	args2108.push((arguments[i__6100__auto___2112]));

	var G__2113 = (i__6100__auto___2112 + (1));
	i__6100__auto___2112 = G__2113;
	continue;
	} else {
	}
	break;
	}

	var G__2110 = args2108.length;
	switch (G__2110) {
	case 2:
	return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 4:
	return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2108.length)].join('')));

	}
	});

	cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2 = (function (xs,ys){
	var xl = cljs.core.count(xs);
	var yl = cljs.core.count(ys);
	if((xl < yl)){
	return (-1);
	} else {
	if((xl > yl)){
	return (1);
	} else {
	if((xl === (0))){
	return (0);
	} else {
	return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4(xs,ys,xl,(0));

	}
	}
	}
	});

	cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$4 = (function (xs,ys,len,n){
	while(true){
	var d = cljs.core.compare(cljs.core.nth.cljs$core$IFn$_invoke$arity$2(xs,n),cljs.core.nth.cljs$core$IFn$_invoke$arity$2(ys,n));
	if(((d === (0))) && (((n + (1)) < len))){
	var G__2115 = xs;
	var G__2116 = ys;
	var G__2117 = len;
	var G__2118 = (n + (1));
	xs = G__2115;
	ys = G__2116;
	len = G__2117;
	n = G__2118;
	continue;
	} else {
	return d;
	}
	break;
	}
	});

	cljs.core.compare_indexed.cljs$lang$maxFixedArity = 4;

	/**
	 * Given a fn that might be boolean valued or a comparator,
	 * return a fn that is a comparator.
	 */
	cljs.core.fn__GT_comparator = (function cljs$core$fn__GT_comparator(f){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(f,cljs.core.compare)){
	return cljs.core.compare;
	} else {
	return (function (x,y){
	var r = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y));
	if(typeof r === 'number'){
	return r;
	} else {
	if(cljs.core.truth_(r)){
	return (-1);
	} else {
	if(cljs.core.truth_((f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(y,x) : f.call(null,y,x)))){
	return (1);
	} else {
	return (0);
	}
	}
	}
	});
	}
	});
	/**
	 * Returns a sorted sequence of the items in coll. Comp can be
	 * boolean-valued comparison function, or a -/0/+ valued comparator.
	 * Comp defaults to compare.
	 */
	cljs.core.sort = (function cljs$core$sort(var_args){
	var args2119 = [];
	var len__6099__auto___2124 = arguments.length;
	var i__6100__auto___2125 = (0);
	while(true){
	if((i__6100__auto___2125 < len__6099__auto___2124)){
	args2119.push((arguments[i__6100__auto___2125]));

	var G__2126 = (i__6100__auto___2125 + (1));
	i__6100__auto___2125 = G__2126;
	continue;
	} else {
	}
	break;
	}

	var G__2121 = args2119.length;
	switch (G__2121) {
	case 1:
	return cljs.core.sort.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.sort.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2119.length)].join('')));

	}
	});

	cljs.core.sort.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	return cljs.core.sort.cljs$core$IFn$_invoke$arity$2(cljs.core.compare,coll);
	});

	cljs.core.sort.cljs$core$IFn$_invoke$arity$2 = (function (comp,coll){
	if(cljs.core.seq(coll)){
	var a = (cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null,coll));
	var G__2122_2128 = a;
	var G__2123_2129 = cljs.core.fn__GT_comparator(comp);
	goog.array.stableSort(G__2122_2128,G__2123_2129);

	return cljs.core.seq(a);
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.sort.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a sorted sequence of the items in coll, where the sort
	 * order is determined by comparing (keyfn item).  Comp can be
	 * boolean-valued comparison funcion, or a -/0/+ valued comparator.
	 * Comp defaults to compare.
	 */
	cljs.core.sort_by = (function cljs$core$sort_by(var_args){
	var args2130 = [];
	var len__6099__auto___2133 = arguments.length;
	var i__6100__auto___2134 = (0);
	while(true){
	if((i__6100__auto___2134 < len__6099__auto___2133)){
	args2130.push((arguments[i__6100__auto___2134]));

	var G__2135 = (i__6100__auto___2134 + (1));
	i__6100__auto___2134 = G__2135;
	continue;
	} else {
	}
	break;
	}

	var G__2132 = args2130.length;
	switch (G__2132) {
	case 2:
	return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2130.length)].join('')));

	}
	});

	cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2 = (function (keyfn,coll){
	return cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3(keyfn,cljs.core.compare,coll);
	});

	cljs.core.sort_by.cljs$core$IFn$_invoke$arity$3 = (function (keyfn,comp,coll){
	return cljs.core.sort.cljs$core$IFn$_invoke$arity$2((function (x,y){
	return cljs.core.fn__GT_comparator(comp).call(null,(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(x) : keyfn.call(null,x)),(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(y) : keyfn.call(null,y)));
	}),coll);
	});

	cljs.core.sort_by.cljs$lang$maxFixedArity = 3;

	cljs.core.seq_reduce = (function cljs$core$seq_reduce(var_args){
	var args2137 = [];
	var len__6099__auto___2145 = arguments.length;
	var i__6100__auto___2146 = (0);
	while(true){
	if((i__6100__auto___2146 < len__6099__auto___2145)){
	args2137.push((arguments[i__6100__auto___2146]));

	var G__2147 = (i__6100__auto___2146 + (1));
	i__6100__auto___2146 = G__2147;
	continue;
	} else {
	}
	break;
	}

	var G__2139 = args2137.length;
	switch (G__2139) {
	case 2:
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2137.length)].join('')));

	}
	});

	cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	var temp__6736__auto__ = cljs.core.seq(coll);
	if(temp__6736__auto__){
	var s = temp__6736__auto__;
	var G__2140 = f;
	var G__2141 = cljs.core.first(s);
	var G__2142 = cljs.core.next(s);
	return (cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(G__2140,G__2141,G__2142) : cljs.core.reduce.call(null,G__2140,G__2141,G__2142));
	} else {
	return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	}
	});

	cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3 = (function (f,val,coll){
	var val__$1 = val;
	var coll__$1 = cljs.core.seq(coll);
	while(true){
	if(coll__$1){
	var nval = (function (){var G__2143 = val__$1;
	var G__2144 = cljs.core.first(coll__$1);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2143,G__2144) : f.call(null,G__2143,G__2144));
	})();
	if(cljs.core.reduced_QMARK_(nval)){
	return cljs.core.deref(nval);
	} else {
	var G__2149 = nval;
	var G__2150 = cljs.core.next(coll__$1);
	val__$1 = G__2149;
	coll__$1 = G__2150;
	continue;
	}
	} else {
	return val__$1;
	}
	break;
	}
	});

	cljs.core.seq_reduce.cljs$lang$maxFixedArity = 3;

	/**
	 * Return a random permutation of coll
	 */
	cljs.core.shuffle = (function cljs$core$shuffle(coll){
	var a = (cljs.core.to_array.cljs$core$IFn$_invoke$arity$1 ? cljs.core.to_array.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.to_array.call(null,coll));
	goog.array.shuffle(a);

	return (cljs.core.vec.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vec.cljs$core$IFn$_invoke$arity$1(a) : cljs.core.vec.call(null,a));
	});
	/**
	 * f should be a function of 2 arguments. If val is not supplied,
	 *   returns the result of applying f to the first 2 items in coll, then
	 *   applying f to that result and the 3rd item, etc. If coll contains no
	 *   items, f must accept no arguments as well, and reduce returns the
	 *   result of calling f with no arguments.  If coll has only 1 item, it
	 *   is returned and f is not called.  If val is supplied, returns the
	 *   result of applying f to val and the first item in coll, then
	 *   applying f to that result and the 2nd item, etc. If coll contains no
	 *   items, returns val and f is not called.
	 */
	cljs.core.reduce = (function cljs$core$reduce(var_args){
	var args2151 = [];
	var len__6099__auto___2156 = arguments.length;
	var i__6100__auto___2157 = (0);
	while(true){
	if((i__6100__auto___2157 < len__6099__auto___2156)){
	args2151.push((arguments[i__6100__auto___2157]));

	var G__2158 = (i__6100__auto___2157 + (1));
	i__6100__auto___2157 = G__2158;
	continue;
	} else {
	}
	break;
	}

	var G__2153 = args2151.length;
	switch (G__2153) {
	case 2:
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2151.length)].join('')));

	}
	});

	cljs.core.reduce.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (524288))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$)))?true:false):false)){
	return coll.cljs$core$IReduce$_reduce$arity$2(null,f);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll,f);
	} else {
	if(typeof coll === 'string'){
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$2(coll,f);
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.IReduce,coll)){
	return cljs.core._reduce.cljs$core$IFn$_invoke$arity$2(coll,f);
	} else {
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll);

	}
	}
	}
	}
	});

	cljs.core.reduce.cljs$core$IFn$_invoke$arity$3 = (function (f,val,coll){
	if(((!((coll == null)))?((((coll.cljs$lang$protocol_mask$partition0$ & (524288))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReduce$)))?true:false):false)){
	return coll.cljs$core$IReduce$_reduce$arity$3(null,f,val);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll,f,val);
	} else {
	if(typeof coll === 'string'){
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$3(coll,f,val);
	} else {
	if(cljs.core.native_satisfies_QMARK_(cljs.core.IReduce,coll)){
	return cljs.core._reduce.cljs$core$IFn$_invoke$arity$3(coll,f,val);
	} else {
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,val,coll);

	}
	}
	}
	}
	});

	cljs.core.reduce.cljs$lang$maxFixedArity = 3;

	/**
	 * Reduces an associative collection. f should be a function of 3
	 *   arguments. Returns the result of applying f to init, the first key
	 *   and the first value in coll, then applying f to that result and the
	 *   2nd key and value, etc. If coll contains no entries, returns init
	 *   and f is not called. Note that reduce-kv is supported on vectors,
	 *   where the keys will be the ordinals.
	 */
	cljs.core.reduce_kv = (function cljs$core$reduce_kv(f,init,coll){
	if(!((coll == null))){
	return cljs.core._kv_reduce(coll,f,init);
	} else {
	return init;
	}
	});
	/**
	 * Returns its argument.
	 */
	cljs.core.identity = (function cljs$core$identity(x){
	return x;
	});
	/**
	 * Takes a reducing function f of 2 args and returns a fn suitable for
	 *   transduce by adding an arity-1 signature that calls cf (default -
	 *   identity) on the result argument.
	 */
	cljs.core.completing = (function cljs$core$completing(var_args){
	var args2160 = [];
	var len__6099__auto___2163 = arguments.length;
	var i__6100__auto___2164 = (0);
	while(true){
	if((i__6100__auto___2164 < len__6099__auto___2163)){
	args2160.push((arguments[i__6100__auto___2164]));

	var G__2165 = (i__6100__auto___2164 + (1));
	i__6100__auto___2164 = G__2165;
	continue;
	} else {
	}
	break;
	}

	var G__2162 = args2160.length;
	switch (G__2162) {
	case 1:
	return cljs.core.completing.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.completing.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2160.length)].join('')));

	}
	});

	cljs.core.completing.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return cljs.core.completing.cljs$core$IFn$_invoke$arity$2(f,cljs.core.identity);
	});

	cljs.core.completing.cljs$core$IFn$_invoke$arity$2 = (function (f,cf){
	return (function() {
	var G__2167 = null;
	var G__2167__0 = (function (){
	return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	});
	var G__2167__1 = (function (x){
	return (cf.cljs$core$IFn$_invoke$arity$1 ? cf.cljs$core$IFn$_invoke$arity$1(x) : cf.call(null,x));
	});
	var G__2167__2 = (function (x,y){
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y));
	});
	G__2167 = function(x,y){
	switch(arguments.length){
	case 0:
	return G__2167__0.call(this);
	case 1:
	return G__2167__1.call(this,x);
	case 2:
	return G__2167__2.call(this,x,y);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2167.cljs$core$IFn$_invoke$arity$0 = G__2167__0;
	G__2167.cljs$core$IFn$_invoke$arity$1 = G__2167__1;
	G__2167.cljs$core$IFn$_invoke$arity$2 = G__2167__2;
	return G__2167;
	})()
	});

	cljs.core.completing.cljs$lang$maxFixedArity = 2;

	/**
	 * reduce with a transformation of f (xf). If init is not
	 *   supplied, (f) will be called to produce it. f should be a reducing
	 *   step function that accepts both 1 and 2 arguments, if it accepts
	 *   only 2 you can add the arity-1 with 'completing'. Returns the result
	 *   of applying (the transformed) xf to init and the first item in coll,
	 *   then applying xf to that result and the 2nd item, etc. If coll
	 *   contains no items, returns init and f is not called. Note that
	 *   certain transforms may inject or skip items.
	 */
	cljs.core.transduce = (function cljs$core$transduce(var_args){
	var args2168 = [];
	var len__6099__auto___2171 = arguments.length;
	var i__6100__auto___2172 = (0);
	while(true){
	if((i__6100__auto___2172 < len__6099__auto___2171)){
	args2168.push((arguments[i__6100__auto___2172]));

	var G__2173 = (i__6100__auto___2172 + (1));
	i__6100__auto___2172 = G__2173;
	continue;
	} else {
	}
	break;
	}

	var G__2170 = args2168.length;
	switch (G__2170) {
	case 3:
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2168.length)].join('')));

	}
	});

	cljs.core.transduce.cljs$core$IFn$_invoke$arity$3 = (function (xform,f,coll){
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform,f,(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),coll);
	});

	cljs.core.transduce.cljs$core$IFn$_invoke$arity$4 = (function (xform,f,init,coll){
	var f__$1 = (xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(f) : xform.call(null,f));
	var ret = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(f__$1,init,coll);
	return (f__$1.cljs$core$IFn$_invoke$arity$1 ? f__$1.cljs$core$IFn$_invoke$arity$1(ret) : f__$1.call(null,ret));
	});

	cljs.core.transduce.cljs$lang$maxFixedArity = 4;

	/**
	 * Returns the sum of nums. (+) returns 0.
	 */
	cljs.core._PLUS_ = (function cljs$core$_PLUS_(var_args){
	var args2175 = [];
	var len__6099__auto___2181 = arguments.length;
	var i__6100__auto___2182 = (0);
	while(true){
	if((i__6100__auto___2182 < len__6099__auto___2181)){
	args2175.push((arguments[i__6100__auto___2182]));

	var G__2183 = (i__6100__auto___2182 + (1));
	i__6100__auto___2182 = G__2183;
	continue;
	} else {
	}
	break;
	}

	var G__2180 = args2175.length;
	switch (G__2180) {
	case 0:
	return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2175.slice((2)),(0),null));
	return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (0);
	});

	cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x + y);
	});

	cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._PLUS_,(x + y),more);
	});

	cljs.core._PLUS_.cljs$lang$applyTo = (function (seq2176){
	var G__2177 = cljs.core.first(seq2176);
	var seq2176__$1 = cljs.core.next(seq2176);
	var G__2178 = cljs.core.first(seq2176__$1);
	var seq2176__$2 = cljs.core.next(seq2176__$1);
	return cljs.core._PLUS_.cljs$core$IFn$_invoke$arity$variadic(G__2177,G__2178,seq2176__$2);
	});

	cljs.core._PLUS_.cljs$lang$maxFixedArity = (2);

	/**
	 * If no ys are supplied, returns the negation of x, else subtracts
	 *   the ys from x and returns the result.
	 */
	cljs.core._ = (function cljs$core$_(var_args){
	var args2185 = [];
	var len__6099__auto___2191 = arguments.length;
	var i__6100__auto___2192 = (0);
	while(true){
	if((i__6100__auto___2192 < len__6099__auto___2191)){
	args2185.push((arguments[i__6100__auto___2192]));

	var G__2193 = (i__6100__auto___2192 + (1));
	i__6100__auto___2192 = G__2193;
	continue;
	} else {
	}
	break;
	}

	var G__2190 = args2185.length;
	switch (G__2190) {
	case 1:
	return cljs.core._.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2185.slice((2)),(0),null));
	return cljs.core._.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (- x);
	});

	cljs.core._.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x - y);
	});

	cljs.core._.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._,(x - y),more);
	});

	cljs.core._.cljs$lang$applyTo = (function (seq2186){
	var G__2187 = cljs.core.first(seq2186);
	var seq2186__$1 = cljs.core.next(seq2186);
	var G__2188 = cljs.core.first(seq2186__$1);
	var seq2186__$2 = cljs.core.next(seq2186__$1);
	return cljs.core._.cljs$core$IFn$_invoke$arity$variadic(G__2187,G__2188,seq2186__$2);
	});

	cljs.core._.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns the product of nums. (*) returns 1.
	 */
	cljs.core._STAR_ = (function cljs$core$_STAR_(var_args){
	var args2195 = [];
	var len__6099__auto___2201 = arguments.length;
	var i__6100__auto___2202 = (0);
	while(true){
	if((i__6100__auto___2202 < len__6099__auto___2201)){
	args2195.push((arguments[i__6100__auto___2202]));

	var G__2203 = (i__6100__auto___2202 + (1));
	i__6100__auto___2202 = G__2203;
	continue;
	} else {
	}
	break;
	}

	var G__2200 = args2195.length;
	switch (G__2200) {
	case 0:
	return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2195.slice((2)),(0),null));
	return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._STAR_.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (1);
	});

	cljs.core._STAR_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core._STAR_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x * y);
	});

	cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._STAR_,(x * y),more);
	});

	cljs.core._STAR_.cljs$lang$applyTo = (function (seq2196){
	var G__2197 = cljs.core.first(seq2196);
	var seq2196__$1 = cljs.core.next(seq2196);
	var G__2198 = cljs.core.first(seq2196__$1);
	var seq2196__$2 = cljs.core.next(seq2196__$1);
	return cljs.core._STAR_.cljs$core$IFn$_invoke$arity$variadic(G__2197,G__2198,seq2196__$2);
	});

	cljs.core._STAR_.cljs$lang$maxFixedArity = (2);

	/**
	 * If no denominators are supplied, returns 1/numerator,
	 *   else returns numerator divided by all of the denominators.
	 */
	cljs.core._SLASH_ = (function cljs$core$_SLASH_(var_args){
	var args2205 = [];
	var len__6099__auto___2211 = arguments.length;
	var i__6100__auto___2212 = (0);
	while(true){
	if((i__6100__auto___2212 < len__6099__auto___2211)){
	args2205.push((arguments[i__6100__auto___2212]));

	var G__2213 = (i__6100__auto___2212 + (1));
	i__6100__auto___2212 = G__2213;
	continue;
	} else {
	}
	break;
	}

	var G__2210 = args2205.length;
	switch (G__2210) {
	case 1:
	return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2205.slice((2)),(0),null));
	return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return ((1) / x);
	});

	cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x / y);
	});

	cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._SLASH_,(x / y),more);
	});

	cljs.core._SLASH_.cljs$lang$applyTo = (function (seq2206){
	var G__2207 = cljs.core.first(seq2206);
	var seq2206__$1 = cljs.core.next(seq2206);
	var G__2208 = cljs.core.first(seq2206__$1);
	var seq2206__$2 = cljs.core.next(seq2206__$1);
	return cljs.core._SLASH_.cljs$core$IFn$_invoke$arity$variadic(G__2207,G__2208,seq2206__$2);
	});

	cljs.core._SLASH_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns non-nil if nums are in monotonically increasing order,
	 *   otherwise false.
	 */
	cljs.core._LT_ = (function cljs$core$_LT_(var_args){
	var args2215 = [];
	var len__6099__auto___2221 = arguments.length;
	var i__6100__auto___2222 = (0);
	while(true){
	if((i__6100__auto___2222 < len__6099__auto___2221)){
	args2215.push((arguments[i__6100__auto___2222]));

	var G__2223 = (i__6100__auto___2222 + (1));
	i__6100__auto___2222 = G__2223;
	continue;
	} else {
	}
	break;
	}

	var G__2220 = args2215.length;
	switch (G__2220) {
	case 1:
	return cljs.core._LT_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._LT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2215.slice((2)),(0),null));
	return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._LT_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._LT_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x < y);
	});

	cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if((x < y)){
	if(cljs.core.next(more)){
	var G__2225 = y;
	var G__2226 = cljs.core.first(more);
	var G__2227 = cljs.core.next(more);
	x = G__2225;
	y = G__2226;
	more = G__2227;
	continue;
	} else {
	return (y < cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._LT_.cljs$lang$applyTo = (function (seq2216){
	var G__2217 = cljs.core.first(seq2216);
	var seq2216__$1 = cljs.core.next(seq2216);
	var G__2218 = cljs.core.first(seq2216__$1);
	var seq2216__$2 = cljs.core.next(seq2216__$1);
	return cljs.core._LT_.cljs$core$IFn$_invoke$arity$variadic(G__2217,G__2218,seq2216__$2);
	});

	cljs.core._LT_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns non-nil if nums are in monotonically non-decreasing order,
	 *   otherwise false.
	 */
	cljs.core._LT__EQ_ = (function cljs$core$_LT__EQ_(var_args){
	var args2228 = [];
	var len__6099__auto___2234 = arguments.length;
	var i__6100__auto___2235 = (0);
	while(true){
	if((i__6100__auto___2235 < len__6099__auto___2234)){
	args2228.push((arguments[i__6100__auto___2235]));

	var G__2236 = (i__6100__auto___2235 + (1));
	i__6100__auto___2235 = G__2236;
	continue;
	} else {
	}
	break;
	}

	var G__2233 = args2228.length;
	switch (G__2233) {
	case 1:
	return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2228.slice((2)),(0),null));
	return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x <= y);
	});

	cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if((x <= y)){
	if(cljs.core.next(more)){
	var G__2238 = y;
	var G__2239 = cljs.core.first(more);
	var G__2240 = cljs.core.next(more);
	x = G__2238;
	y = G__2239;
	more = G__2240;
	continue;
	} else {
	return (y <= cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._LT__EQ_.cljs$lang$applyTo = (function (seq2229){
	var G__2230 = cljs.core.first(seq2229);
	var seq2229__$1 = cljs.core.next(seq2229);
	var G__2231 = cljs.core.first(seq2229__$1);
	var seq2229__$2 = cljs.core.next(seq2229__$1);
	return cljs.core._LT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__2230,G__2231,seq2229__$2);
	});

	cljs.core._LT__EQ_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns non-nil if nums are in monotonically decreasing order,
	 *   otherwise false.
	 */
	cljs.core._GT_ = (function cljs$core$_GT_(var_args){
	var args2241 = [];
	var len__6099__auto___2247 = arguments.length;
	var i__6100__auto___2248 = (0);
	while(true){
	if((i__6100__auto___2248 < len__6099__auto___2247)){
	args2241.push((arguments[i__6100__auto___2248]));

	var G__2249 = (i__6100__auto___2248 + (1));
	i__6100__auto___2248 = G__2249;
	continue;
	} else {
	}
	break;
	}

	var G__2246 = args2241.length;
	switch (G__2246) {
	case 1:
	return cljs.core._GT_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._GT_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2241.slice((2)),(0),null));
	return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._GT_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._GT_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x > y);
	});

	cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if((x > y)){
	if(cljs.core.next(more)){
	var G__2251 = y;
	var G__2252 = cljs.core.first(more);
	var G__2253 = cljs.core.next(more);
	x = G__2251;
	y = G__2252;
	more = G__2253;
	continue;
	} else {
	return (y > cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._GT_.cljs$lang$applyTo = (function (seq2242){
	var G__2243 = cljs.core.first(seq2242);
	var seq2242__$1 = cljs.core.next(seq2242);
	var G__2244 = cljs.core.first(seq2242__$1);
	var seq2242__$2 = cljs.core.next(seq2242__$1);
	return cljs.core._GT_.cljs$core$IFn$_invoke$arity$variadic(G__2243,G__2244,seq2242__$2);
	});

	cljs.core._GT_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns non-nil if nums are in monotonically non-increasing order,
	 *   otherwise false.
	 */
	cljs.core._GT__EQ_ = (function cljs$core$_GT__EQ_(var_args){
	var args2254 = [];
	var len__6099__auto___2260 = arguments.length;
	var i__6100__auto___2261 = (0);
	while(true){
	if((i__6100__auto___2261 < len__6099__auto___2260)){
	args2254.push((arguments[i__6100__auto___2261]));

	var G__2262 = (i__6100__auto___2261 + (1));
	i__6100__auto___2261 = G__2262;
	continue;
	} else {
	}
	break;
	}

	var G__2259 = args2254.length;
	switch (G__2259) {
	case 1:
	return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2254.slice((2)),(0),null));
	return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x >= y);
	});

	cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if((x >= y)){
	if(cljs.core.next(more)){
	var G__2264 = y;
	var G__2265 = cljs.core.first(more);
	var G__2266 = cljs.core.next(more);
	x = G__2264;
	y = G__2265;
	more = G__2266;
	continue;
	} else {
	return (y >= cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._GT__EQ_.cljs$lang$applyTo = (function (seq2255){
	var G__2256 = cljs.core.first(seq2255);
	var seq2255__$1 = cljs.core.next(seq2255);
	var G__2257 = cljs.core.first(seq2255__$1);
	var seq2255__$2 = cljs.core.next(seq2255__$1);
	return cljs.core._GT__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__2256,G__2257,seq2255__$2);
	});

	cljs.core._GT__EQ_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns a number one less than num.
	 */
	cljs.core.dec = (function cljs$core$dec(x){
	return (x - (1));
	});
	/**
	 * Returns the greatest of the nums.
	 */
	cljs.core.max = (function cljs$core$max(var_args){
	var args2267 = [];
	var len__6099__auto___2273 = arguments.length;
	var i__6100__auto___2274 = (0);
	while(true){
	if((i__6100__auto___2274 < len__6099__auto___2273)){
	args2267.push((arguments[i__6100__auto___2274]));

	var G__2275 = (i__6100__auto___2274 + (1));
	i__6100__auto___2274 = G__2275;
	continue;
	} else {
	}
	break;
	}

	var G__2272 = args2267.length;
	switch (G__2272) {
	case 1:
	return cljs.core.max.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.max.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2267.slice((2)),(0),null));
	return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.max.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.max.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	var x__5528__auto__ = x;
	var y__5529__auto__ = y;
	return ((x__5528__auto__ > y__5529__auto__) ? x__5528__auto__ : y__5529__auto__);
	});

	cljs.core.max.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.max,(function (){var x__5528__auto__ = x;
	var y__5529__auto__ = y;
	return ((x__5528__auto__ > y__5529__auto__) ? x__5528__auto__ : y__5529__auto__);
	})(),more);
	});

	cljs.core.max.cljs$lang$applyTo = (function (seq2268){
	var G__2269 = cljs.core.first(seq2268);
	var seq2268__$1 = cljs.core.next(seq2268);
	var G__2270 = cljs.core.first(seq2268__$1);
	var seq2268__$2 = cljs.core.next(seq2268__$1);
	return cljs.core.max.cljs$core$IFn$_invoke$arity$variadic(G__2269,G__2270,seq2268__$2);
	});

	cljs.core.max.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns the least of the nums.
	 */
	cljs.core.min = (function cljs$core$min(var_args){
	var args2277 = [];
	var len__6099__auto___2283 = arguments.length;
	var i__6100__auto___2284 = (0);
	while(true){
	if((i__6100__auto___2284 < len__6099__auto___2283)){
	args2277.push((arguments[i__6100__auto___2284]));

	var G__2285 = (i__6100__auto___2284 + (1));
	i__6100__auto___2284 = G__2285;
	continue;
	} else {
	}
	break;
	}

	var G__2282 = args2277.length;
	switch (G__2282) {
	case 1:
	return cljs.core.min.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.min.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2277.slice((2)),(0),null));
	return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.min.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.min.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	var x__5531__auto__ = x;
	var y__5532__auto__ = y;
	return ((x__5531__auto__ < y__5532__auto__) ? x__5531__auto__ : y__5532__auto__);
	});

	cljs.core.min.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.min,(function (){var x__5531__auto__ = x;
	var y__5532__auto__ = y;
	return ((x__5531__auto__ < y__5532__auto__) ? x__5531__auto__ : y__5532__auto__);
	})(),more);
	});

	cljs.core.min.cljs$lang$applyTo = (function (seq2278){
	var G__2279 = cljs.core.first(seq2278);
	var seq2278__$1 = cljs.core.next(seq2278);
	var G__2280 = cljs.core.first(seq2278__$1);
	var seq2278__$2 = cljs.core.next(seq2278__$1);
	return cljs.core.min.cljs$core$IFn$_invoke$arity$variadic(G__2279,G__2280,seq2278__$2);
	});

	cljs.core.min.cljs$lang$maxFixedArity = (2);

	cljs.core.byte$ = (function cljs$core$byte(x){
	return x;
	});
	/**
	 * Coerce to char
	 */
	cljs.core.char$ = (function cljs$core$char(x){
	if(typeof x === 'number'){
	return String.fromCharCode(x);
	} else {
	if((typeof x === 'string') && ((x.length === (1)))){
	return x;
	} else {
	throw (new Error("Argument to char must be a character or number"));

	}
	}
	});
	cljs.core.short$ = (function cljs$core$short(x){
	return x;
	});
	cljs.core.float$ = (function cljs$core$float(x){
	return x;
	});
	cljs.core.double$ = (function cljs$core$double(x){
	return x;
	});
	cljs.core.unchecked_byte = (function cljs$core$unchecked_byte(x){
	return x;
	});
	cljs.core.unchecked_char = (function cljs$core$unchecked_char(x){
	return x;
	});
	cljs.core.unchecked_short = (function cljs$core$unchecked_short(x){
	return x;
	});
	cljs.core.unchecked_float = (function cljs$core$unchecked_float(x){
	return x;
	});
	cljs.core.unchecked_double = (function cljs$core$unchecked_double(x){
	return x;
	});
	/**
	 * Returns the sum of nums. (+) returns 0.
	 */
	cljs.core.unchecked_add = (function cljs$core$unchecked_add(var_args){
	var args2287 = [];
	var len__6099__auto___2293 = arguments.length;
	var i__6100__auto___2294 = (0);
	while(true){
	if((i__6100__auto___2294 < len__6099__auto___2293)){
	args2287.push((arguments[i__6100__auto___2294]));

	var G__2295 = (i__6100__auto___2294 + (1));
	i__6100__auto___2294 = G__2295;
	continue;
	} else {
	}
	break;
	}

	var G__2292 = args2287.length;
	switch (G__2292) {
	case 0:
	return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2287.slice((2)),(0),null));
	return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (0);
	});

	cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x + y);
	});

	cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add,(x + y),more);
	});

	cljs.core.unchecked_add.cljs$lang$applyTo = (function (seq2288){
	var G__2289 = cljs.core.first(seq2288);
	var seq2288__$1 = cljs.core.next(seq2288);
	var G__2290 = cljs.core.first(seq2288__$1);
	var seq2288__$2 = cljs.core.next(seq2288__$1);
	return cljs.core.unchecked_add.cljs$core$IFn$_invoke$arity$variadic(G__2289,G__2290,seq2288__$2);
	});

	cljs.core.unchecked_add.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns the sum of nums. (+) returns 0.
	 */
	cljs.core.unchecked_add_int = (function cljs$core$unchecked_add_int(var_args){
	var args2297 = [];
	var len__6099__auto___2303 = arguments.length;
	var i__6100__auto___2304 = (0);
	while(true){
	if((i__6100__auto___2304 < len__6099__auto___2303)){
	args2297.push((arguments[i__6100__auto___2304]));

	var G__2305 = (i__6100__auto___2304 + (1));
	i__6100__auto___2304 = G__2305;
	continue;
	} else {
	}
	break;
	}

	var G__2302 = args2297.length;
	switch (G__2302) {
	case 0:
	return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2297.slice((2)),(0),null));
	return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (0);
	});

	cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x + y);
	});

	cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_add_int,(x + y),more);
	});

	cljs.core.unchecked_add_int.cljs$lang$applyTo = (function (seq2298){
	var G__2299 = cljs.core.first(seq2298);
	var seq2298__$1 = cljs.core.next(seq2298);
	var G__2300 = cljs.core.first(seq2298__$1);
	var seq2298__$2 = cljs.core.next(seq2298__$1);
	return cljs.core.unchecked_add_int.cljs$core$IFn$_invoke$arity$variadic(G__2299,G__2300,seq2298__$2);
	});

	cljs.core.unchecked_add_int.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns a number one less than x, an int.
	 */
	cljs.core.unchecked_dec = (function cljs$core$unchecked_dec(x){
	return (x - (1));
	});
	/**
	 * Returns a number one less than x, an int.
	 */
	cljs.core.unchecked_dec_int = (function cljs$core$unchecked_dec_int(x){
	return (x - (1));
	});
	/**
	 * If no denominators are supplied, returns 1/numerator,
	 *   else returns numerator divided by all of the denominators.
	 */
	cljs.core.unchecked_divide_int = (function cljs$core$unchecked_divide_int(var_args){
	var args2307 = [];
	var len__6099__auto___2313 = arguments.length;
	var i__6100__auto___2314 = (0);
	while(true){
	if((i__6100__auto___2314 < len__6099__auto___2313)){
	args2307.push((arguments[i__6100__auto___2314]));

	var G__2315 = (i__6100__auto___2314 + (1));
	i__6100__auto___2314 = G__2315;
	continue;
	} else {
	}
	break;
	}

	var G__2312 = args2307.length;
	switch (G__2312) {
	case 1:
	return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2307.slice((2)),(0),null));
	return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return ((1) / x);
	});

	cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x / y);
	});

	cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_divide_int,(x / y),more);
	});

	cljs.core.unchecked_divide_int.cljs$lang$applyTo = (function (seq2308){
	var G__2309 = cljs.core.first(seq2308);
	var seq2308__$1 = cljs.core.next(seq2308);
	var G__2310 = cljs.core.first(seq2308__$1);
	var seq2308__$2 = cljs.core.next(seq2308__$1);
	return cljs.core.unchecked_divide_int.cljs$core$IFn$_invoke$arity$variadic(G__2309,G__2310,seq2308__$2);
	});

	cljs.core.unchecked_divide_int.cljs$lang$maxFixedArity = (2);

	cljs.core.unchecked_inc = (function cljs$core$unchecked_inc(x){
	return (x + (1));
	});
	cljs.core.unchecked_inc_int = (function cljs$core$unchecked_inc_int(x){
	return (x + (1));
	});
	/**
	 * Returns the product of nums. (*) returns 1.
	 */
	cljs.core.unchecked_multiply = (function cljs$core$unchecked_multiply(var_args){
	var args2317 = [];
	var len__6099__auto___2323 = arguments.length;
	var i__6100__auto___2324 = (0);
	while(true){
	if((i__6100__auto___2324 < len__6099__auto___2323)){
	args2317.push((arguments[i__6100__auto___2324]));

	var G__2325 = (i__6100__auto___2324 + (1));
	i__6100__auto___2324 = G__2325;
	continue;
	} else {
	}
	break;
	}

	var G__2322 = args2317.length;
	switch (G__2322) {
	case 0:
	return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2317.slice((2)),(0),null));
	return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (1);
	});

	cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x * y);
	});

	cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply,(x * y),more);
	});

	cljs.core.unchecked_multiply.cljs$lang$applyTo = (function (seq2318){
	var G__2319 = cljs.core.first(seq2318);
	var seq2318__$1 = cljs.core.next(seq2318);
	var G__2320 = cljs.core.first(seq2318__$1);
	var seq2318__$2 = cljs.core.next(seq2318__$1);
	return cljs.core.unchecked_multiply.cljs$core$IFn$_invoke$arity$variadic(G__2319,G__2320,seq2318__$2);
	});

	cljs.core.unchecked_multiply.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns the product of nums. (*) returns 1.
	 */
	cljs.core.unchecked_multiply_int = (function cljs$core$unchecked_multiply_int(var_args){
	var args2327 = [];
	var len__6099__auto___2333 = arguments.length;
	var i__6100__auto___2334 = (0);
	while(true){
	if((i__6100__auto___2334 < len__6099__auto___2333)){
	args2327.push((arguments[i__6100__auto___2334]));

	var G__2335 = (i__6100__auto___2334 + (1));
	i__6100__auto___2334 = G__2335;
	continue;
	} else {
	}
	break;
	}

	var G__2332 = args2327.length;
	switch (G__2332) {
	case 0:
	return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2327.slice((2)),(0),null));
	return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (1);
	});

	cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return x;
	});

	cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x * y);
	});

	cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_multiply_int,(x * y),more);
	});

	cljs.core.unchecked_multiply_int.cljs$lang$applyTo = (function (seq2328){
	var G__2329 = cljs.core.first(seq2328);
	var seq2328__$1 = cljs.core.next(seq2328);
	var G__2330 = cljs.core.first(seq2328__$1);
	var seq2328__$2 = cljs.core.next(seq2328__$1);
	return cljs.core.unchecked_multiply_int.cljs$core$IFn$_invoke$arity$variadic(G__2329,G__2330,seq2328__$2);
	});

	cljs.core.unchecked_multiply_int.cljs$lang$maxFixedArity = (2);

	cljs.core.unchecked_negate = (function cljs$core$unchecked_negate(x){
	return (- x);
	});
	cljs.core.unchecked_negate_int = (function cljs$core$unchecked_negate_int(x){
	return (- x);
	});
	cljs.core.unchecked_remainder_int = (function cljs$core$unchecked_remainder_int(x,n){
	return (cljs.core.mod.cljs$core$IFn$_invoke$arity$2 ? cljs.core.mod.cljs$core$IFn$_invoke$arity$2(x,n) : cljs.core.mod.call(null,x,n));
	});
	/**
	 * If no ys are supplied, returns the negation of x, else subtracts
	 *   the ys from x and returns the result.
	 */
	cljs.core.unchecked_subtract = (function cljs$core$unchecked_subtract(var_args){
	var args2337 = [];
	var len__6099__auto___2343 = arguments.length;
	var i__6100__auto___2344 = (0);
	while(true){
	if((i__6100__auto___2344 < len__6099__auto___2343)){
	args2337.push((arguments[i__6100__auto___2344]));

	var G__2345 = (i__6100__auto___2344 + (1));
	i__6100__auto___2344 = G__2345;
	continue;
	} else {
	}
	break;
	}

	var G__2342 = args2337.length;
	switch (G__2342) {
	case 1:
	return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2337.slice((2)),(0),null));
	return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (- x);
	});

	cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x - y);
	});

	cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract,(x - y),more);
	});

	cljs.core.unchecked_subtract.cljs$lang$applyTo = (function (seq2338){
	var G__2339 = cljs.core.first(seq2338);
	var seq2338__$1 = cljs.core.next(seq2338);
	var G__2340 = cljs.core.first(seq2338__$1);
	var seq2338__$2 = cljs.core.next(seq2338__$1);
	return cljs.core.unchecked_subtract.cljs$core$IFn$_invoke$arity$variadic(G__2339,G__2340,seq2338__$2);
	});

	cljs.core.unchecked_subtract.cljs$lang$maxFixedArity = (2);

	/**
	 * If no ys are supplied, returns the negation of x, else subtracts
	 *   the ys from x and returns the result.
	 */
	cljs.core.unchecked_subtract_int = (function cljs$core$unchecked_subtract_int(var_args){
	var args2347 = [];
	var len__6099__auto___2353 = arguments.length;
	var i__6100__auto___2354 = (0);
	while(true){
	if((i__6100__auto___2354 < len__6099__auto___2353)){
	args2347.push((arguments[i__6100__auto___2354]));

	var G__2355 = (i__6100__auto___2354 + (1));
	i__6100__auto___2354 = G__2355;
	continue;
	} else {
	}
	break;
	}

	var G__2352 = args2347.length;
	switch (G__2352) {
	case 1:
	return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2347.slice((2)),(0),null));
	return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (- x);
	});

	cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x - y);
	});

	cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.unchecked_subtract_int,(x - y),more);
	});

	cljs.core.unchecked_subtract_int.cljs$lang$applyTo = (function (seq2348){
	var G__2349 = cljs.core.first(seq2348);
	var seq2348__$1 = cljs.core.next(seq2348);
	var G__2350 = cljs.core.first(seq2348__$1);
	var seq2348__$2 = cljs.core.next(seq2348__$1);
	return cljs.core.unchecked_subtract_int.cljs$core$IFn$_invoke$arity$variadic(G__2349,G__2350,seq2348__$2);
	});

	cljs.core.unchecked_subtract_int.cljs$lang$maxFixedArity = (2);

	cljs.core.fix = (function cljs$core$fix(q){
	if((q >= (0))){
	return Math.floor(q);
	} else {
	return Math.ceil(q);
	}
	});
	/**
	 * Coerce to int by stripping decimal places.
	 */
	cljs.core.int$ = (function cljs$core$int(x){
	return (x | (0));
	});
	/**
	 * Coerce to int by stripping decimal places.
	 */
	cljs.core.unchecked_int = (function cljs$core$unchecked_int(x){
	return cljs.core.fix(x);
	});
	/**
	 * Coerce to long by stripping decimal places. Identical to `int'.
	 */
	cljs.core.long$ = (function cljs$core$long(x){
	return cljs.core.fix(x);
	});
	/**
	 * Coerce to long by stripping decimal places. Identical to `int'.
	 */
	cljs.core.unchecked_long = (function cljs$core$unchecked_long(x){
	return cljs.core.fix(x);
	});
	cljs.core.booleans = (function cljs$core$booleans(x){
	return x;
	});
	cljs.core.bytes = (function cljs$core$bytes(x){
	return x;
	});
	cljs.core.chars = (function cljs$core$chars(x){
	return x;
	});
	cljs.core.shorts = (function cljs$core$shorts(x){
	return x;
	});
	cljs.core.ints = (function cljs$core$ints(x){
	return x;
	});
	cljs.core.floats = (function cljs$core$floats(x){
	return x;
	});
	cljs.core.doubles = (function cljs$core$doubles(x){
	return x;
	});
	cljs.core.longs = (function cljs$core$longs(x){
	return x;
	});
	/**
	 * Modulus of num and div with original javascript behavior. i.e. bug for negative numbers
	 */
	cljs.core.js_mod = (function cljs$core$js_mod(n,d){
	return (n % d);
	});
	/**
	 * Modulus of num and div. Truncates toward negative infinity.
	 */
	cljs.core.mod = (function cljs$core$mod(n,d){
	return (((n % d) + d) % d);
	});
	/**
	 * quot[ient] of dividing numerator by denominator.
	 */
	cljs.core.quot = (function cljs$core$quot(n,d){
	var rem = (n % d);
	return cljs.core.fix(((n - rem) / d));
	});
	/**
	 * remainder of dividing numerator by denominator.
	 */
	cljs.core.rem = (function cljs$core$rem(n,d){
	var q = cljs.core.quot(n,d);
	return (n - (d * q));
	});
	/**
	 * Bitwise exclusive or
	 */
	cljs.core.bit_xor = (function cljs$core$bit_xor(var_args){
	var args2357 = [];
	var len__6099__auto___2363 = arguments.length;
	var i__6100__auto___2364 = (0);
	while(true){
	if((i__6100__auto___2364 < len__6099__auto___2363)){
	args2357.push((arguments[i__6100__auto___2364]));

	var G__2365 = (i__6100__auto___2364 + (1));
	i__6100__auto___2364 = G__2365;
	continue;
	} else {
	}
	break;
	}

	var G__2362 = args2357.length;
	switch (G__2362) {
	case 2:
	return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2357.slice((2)),(0),null));
	return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x ^ y);
	});

	cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_xor,(x ^ y),more);
	});

	cljs.core.bit_xor.cljs$lang$applyTo = (function (seq2358){
	var G__2359 = cljs.core.first(seq2358);
	var seq2358__$1 = cljs.core.next(seq2358);
	var G__2360 = cljs.core.first(seq2358__$1);
	var seq2358__$2 = cljs.core.next(seq2358__$1);
	return cljs.core.bit_xor.cljs$core$IFn$_invoke$arity$variadic(G__2359,G__2360,seq2358__$2);
	});

	cljs.core.bit_xor.cljs$lang$maxFixedArity = (2);

	/**
	 * Bitwise and
	 */
	cljs.core.bit_and = (function cljs$core$bit_and(var_args){
	var args2367 = [];
	var len__6099__auto___2373 = arguments.length;
	var i__6100__auto___2374 = (0);
	while(true){
	if((i__6100__auto___2374 < len__6099__auto___2373)){
	args2367.push((arguments[i__6100__auto___2374]));

	var G__2375 = (i__6100__auto___2374 + (1));
	i__6100__auto___2374 = G__2375;
	continue;
	} else {
	}
	break;
	}

	var G__2372 = args2367.length;
	switch (G__2372) {
	case 2:
	return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2367.slice((2)),(0),null));
	return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.bit_and.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x & y);
	});

	cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and,(x & y),more);
	});

	cljs.core.bit_and.cljs$lang$applyTo = (function (seq2368){
	var G__2369 = cljs.core.first(seq2368);
	var seq2368__$1 = cljs.core.next(seq2368);
	var G__2370 = cljs.core.first(seq2368__$1);
	var seq2368__$2 = cljs.core.next(seq2368__$1);
	return cljs.core.bit_and.cljs$core$IFn$_invoke$arity$variadic(G__2369,G__2370,seq2368__$2);
	});

	cljs.core.bit_and.cljs$lang$maxFixedArity = (2);

	/**
	 * Bitwise or
	 */
	cljs.core.bit_or = (function cljs$core$bit_or(var_args){
	var args2377 = [];
	var len__6099__auto___2383 = arguments.length;
	var i__6100__auto___2384 = (0);
	while(true){
	if((i__6100__auto___2384 < len__6099__auto___2383)){
	args2377.push((arguments[i__6100__auto___2384]));

	var G__2385 = (i__6100__auto___2384 + (1));
	i__6100__auto___2384 = G__2385;
	continue;
	} else {
	}
	break;
	}

	var G__2382 = args2377.length;
	switch (G__2382) {
	case 2:
	return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2377.slice((2)),(0),null));
	return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.bit_or.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x | y);
	});

	cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_or,(x | y),more);
	});

	cljs.core.bit_or.cljs$lang$applyTo = (function (seq2378){
	var G__2379 = cljs.core.first(seq2378);
	var seq2378__$1 = cljs.core.next(seq2378);
	var G__2380 = cljs.core.first(seq2378__$1);
	var seq2378__$2 = cljs.core.next(seq2378__$1);
	return cljs.core.bit_or.cljs$core$IFn$_invoke$arity$variadic(G__2379,G__2380,seq2378__$2);
	});

	cljs.core.bit_or.cljs$lang$maxFixedArity = (2);

	/**
	 * Bitwise and with complement
	 */
	cljs.core.bit_and_not = (function cljs$core$bit_and_not(var_args){
	var args2387 = [];
	var len__6099__auto___2393 = arguments.length;
	var i__6100__auto___2394 = (0);
	while(true){
	if((i__6100__auto___2394 < len__6099__auto___2393)){
	args2387.push((arguments[i__6100__auto___2394]));

	var G__2395 = (i__6100__auto___2394 + (1));
	i__6100__auto___2394 = G__2395;
	continue;
	} else {
	}
	break;
	}

	var G__2392 = args2387.length;
	switch (G__2392) {
	case 2:
	return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2387.slice((2)),(0),null));
	return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (x & ~y);
	});

	cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.bit_and_not,(x & ~y),more);
	});

	cljs.core.bit_and_not.cljs$lang$applyTo = (function (seq2388){
	var G__2389 = cljs.core.first(seq2388);
	var seq2388__$1 = cljs.core.next(seq2388);
	var G__2390 = cljs.core.first(seq2388__$1);
	var seq2388__$2 = cljs.core.next(seq2388__$1);
	return cljs.core.bit_and_not.cljs$core$IFn$_invoke$arity$variadic(G__2389,G__2390,seq2388__$2);
	});

	cljs.core.bit_and_not.cljs$lang$maxFixedArity = (2);

	/**
	 * Clear bit at index n
	 */
	cljs.core.bit_clear = (function cljs$core$bit_clear(x,n){
	return (x & ~(1 << n));
	});
	/**
	 * Flip bit at index n
	 */
	cljs.core.bit_flip = (function cljs$core$bit_flip(x,n){
	return (x ^ (1 << n));
	});
	/**
	 * Bitwise complement
	 */
	cljs.core.bit_not = (function cljs$core$bit_not(x){
	return (~ x);
	});
	/**
	 * Set bit at index n
	 */
	cljs.core.bit_set = (function cljs$core$bit_set(x,n){
	return (x | (1 << n));
	});
	/**
	 * Test bit at index n
	 */
	cljs.core.bit_test = (function cljs$core$bit_test(x,n){
	return ((x & (1 << n)) != 0);
	});
	/**
	 * Bitwise shift left
	 */
	cljs.core.bit_shift_left = (function cljs$core$bit_shift_left(x,n){
	return (x << n);
	});
	/**
	 * Bitwise shift right
	 */
	cljs.core.bit_shift_right = (function cljs$core$bit_shift_right(x,n){
	return (x >> n);
	});
	/**
	 * DEPRECATED: Bitwise shift right with zero fill
	 */
	cljs.core.bit_shift_right_zero_fill = (function cljs$core$bit_shift_right_zero_fill(x,n){
	return (x >>> n);
	});
	/**
	 * Bitwise shift right with zero fill
	 */
	cljs.core.unsigned_bit_shift_right = (function cljs$core$unsigned_bit_shift_right(x,n){
	return (x >>> n);
	});
	/**
	 * Counts the number of bits set in n
	 */
	cljs.core.bit_count = (function cljs$core$bit_count(v){
	var v__$1 = (v - ((v >> (1)) & (1431655765)));
	var v__$2 = ((v__$1 & (858993459)) + ((v__$1 >> (2)) & (858993459)));
	return ((((v__$2 + (v__$2 >> (4))) & (252645135)) * (16843009)) >> (24));
	});
	/**
	 * Returns non-nil if nums all have the equivalent
	 *   value, otherwise false. Behavior on non nums is
	 *   undefined.
	 */
	cljs.core._EQ__EQ_ = (function cljs$core$_EQ__EQ_(var_args){
	var args2397 = [];
	var len__6099__auto___2403 = arguments.length;
	var i__6100__auto___2404 = (0);
	while(true){
	if((i__6100__auto___2404 < len__6099__auto___2403)){
	args2397.push((arguments[i__6100__auto___2404]));

	var G__2405 = (i__6100__auto___2404 + (1));
	i__6100__auto___2404 = G__2405;
	continue;
	} else {
	}
	break;
	}

	var G__2402 = args2397.length;
	switch (G__2402) {
	case 1:
	return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2397.slice((2)),(0),null));
	return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return true;
	});

	cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return cljs.core._equiv(x,y);
	});

	cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	while(true){
	if((x === y)){
	if(cljs.core.next(more)){
	var G__2407 = y;
	var G__2408 = cljs.core.first(more);
	var G__2409 = cljs.core.next(more);
	x = G__2407;
	y = G__2408;
	more = G__2409;
	continue;
	} else {
	return (y === cljs.core.first(more));
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core._EQ__EQ_.cljs$lang$applyTo = (function (seq2398){
	var G__2399 = cljs.core.first(seq2398);
	var seq2398__$1 = cljs.core.next(seq2398);
	var G__2400 = cljs.core.first(seq2398__$1);
	var seq2398__$2 = cljs.core.next(seq2398__$1);
	return cljs.core._EQ__EQ_.cljs$core$IFn$_invoke$arity$variadic(G__2399,G__2400,seq2398__$2);
	});

	cljs.core._EQ__EQ_.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns true if num is greater than zero, else false
	 */
	cljs.core.pos_QMARK_ = (function cljs$core$pos_QMARK_(x){
	return (x > (0));
	});
	/**
	 * Returns true if num is zero, else false
	 */
	cljs.core.zero_QMARK_ = (function cljs$core$zero_QMARK_(x){
	return (x === (0));
	});
	/**
	 * Returns true if num is less than zero, else false
	 */
	cljs.core.neg_QMARK_ = (function cljs$core$neg_QMARK_(x){
	return (x < (0));
	});
	/**
	 * Returns the nth next of coll, (seq coll) when n is 0.
	 */
	cljs.core.nthnext = (function cljs$core$nthnext(coll,n){
	var n__$1 = n;
	var xs = cljs.core.seq(coll);
	while(true){
	if((xs) && ((n__$1 > (0)))){
	var G__2410 = (n__$1 - (1));
	var G__2411 = cljs.core.next(xs);
	n__$1 = G__2410;
	xs = G__2411;
	continue;
	} else {
	return xs;
	}
	break;
	}
	});
	/**
	 * With no args, returns the empty string. With one arg x, returns
	 *   x.toString().  (str nil) returns the empty string. With more than
	 *   one arg, returns the concatenation of the str values of the args.
	 */
	cljs.core.str = (function cljs$core$str(var_args){
	var args2412 = [];
	var len__6099__auto___2417 = arguments.length;
	var i__6100__auto___2418 = (0);
	while(true){
	if((i__6100__auto___2418 < len__6099__auto___2417)){
	args2412.push((arguments[i__6100__auto___2418]));

	var G__2419 = (i__6100__auto___2418 + (1));
	i__6100__auto___2418 = G__2419;
	continue;
	} else {
	}
	break;
	}

	var G__2416 = args2412.length;
	switch (G__2416) {
	case 0:
	return cljs.core.str.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.str.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2412.slice((1)),(0),null));
	return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6118__auto__);

	}
	});

	cljs.core.str.cljs$core$IFn$_invoke$arity$0 = (function (){
	return "";
	});

	cljs.core.str.cljs$core$IFn$_invoke$arity$1 = (function (x){
	if((x == null)){
	return "";
	} else {
	return [x].join("");
	}
	});

	cljs.core.str.cljs$core$IFn$_invoke$arity$variadic = (function (x,ys){
	var sb = (new goog.string.StringBuffer([cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join('')));
	var more = ys;
	while(true){
	if(cljs.core.truth_(more)){
	var G__2421 = sb.append([cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(more))].join(''));
	var G__2422 = cljs.core.next(more);
	sb = G__2421;
	more = G__2422;
	continue;
	} else {
	return sb.toString();
	}
	break;
	}
	});

	cljs.core.str.cljs$lang$applyTo = (function (seq2413){
	var G__2414 = cljs.core.first(seq2413);
	var seq2413__$1 = cljs.core.next(seq2413);
	return cljs.core.str.cljs$core$IFn$_invoke$arity$variadic(G__2414,seq2413__$1);
	});

	cljs.core.str.cljs$lang$maxFixedArity = (1);

	/**
	 * Returns the substring of s beginning at start inclusive, and ending
	 *   at end (defaults to length of string), exclusive.
	 */
	cljs.core.subs = (function cljs$core$subs(var_args){
	var args2423 = [];
	var len__6099__auto___2426 = arguments.length;
	var i__6100__auto___2427 = (0);
	while(true){
	if((i__6100__auto___2427 < len__6099__auto___2426)){
	args2423.push((arguments[i__6100__auto___2427]));

	var G__2428 = (i__6100__auto___2427 + (1));
	i__6100__auto___2427 = G__2428;
	continue;
	} else {
	}
	break;
	}

	var G__2425 = args2423.length;
	switch (G__2425) {
	case 2:
	return cljs.core.subs.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.subs.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2423.length)].join('')));

	}
	});

	cljs.core.subs.cljs$core$IFn$_invoke$arity$2 = (function (s,start){
	return s.substring(start);
	});

	cljs.core.subs.cljs$core$IFn$_invoke$arity$3 = (function (s,start,end){
	return s.substring(start,end);
	});

	cljs.core.subs.cljs$lang$maxFixedArity = 3;


	/**
	 * Assumes x is sequential. Returns true if x equals y, otherwise
	 *   returns false.
	 */
	cljs.core.equiv_sequential = (function cljs$core$equiv_sequential(x,y){
	return cljs.core.boolean$(((cljs.core.sequential_QMARK_(y))?(((cljs.core.counted_QMARK_(x)) && (cljs.core.counted_QMARK_(y)) && (!((cljs.core.count(x) === cljs.core.count(y)))))?false:(function (){var xs = cljs.core.seq(x);
	var ys = cljs.core.seq(y);
	while(true){
	if((xs == null)){
	return (ys == null);
	} else {
	if((ys == null)){
	return false;
	} else {
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(xs),cljs.core.first(ys))){
	var G__2430 = cljs.core.next(xs);
	var G__2431 = cljs.core.next(ys);
	xs = G__2430;
	ys = G__2431;
	continue;
	} else {
	return false;

	}
	}
	}
	break;
	}
	})()):null));
	});
	cljs.core.hash_coll = (function cljs$core$hash_coll(coll){
	if(cljs.core.seq(coll)){
	var res = cljs.core.hash(cljs.core.first(coll));
	var s = cljs.core.next(coll);
	while(true){
	if((s == null)){
	return res;
	} else {
	var G__2432 = cljs.core.hash_combine(res,cljs.core.hash(cljs.core.first(s)));
	var G__2433 = cljs.core.next(s);
	res = G__2432;
	s = G__2433;
	continue;
	}
	break;
	}
	} else {
	return (0);
	}
	});

	cljs.core.hash_imap = (function cljs$core$hash_imap(m){
	var h = (0);
	var s = cljs.core.seq(m);
	while(true){
	if(s){
	var e = cljs.core.first(s);
	var G__2434 = ((h + (cljs.core.hash((cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null,e))) ^ cljs.core.hash((cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null,e))))) % (4503599627370496));
	var G__2435 = cljs.core.next(s);
	h = G__2434;
	s = G__2435;
	continue;
	} else {
	return h;
	}
	break;
	}
	});
	cljs.core.hash_iset = (function cljs$core$hash_iset(s){
	var h = (0);
	var s__$1 = cljs.core.seq(s);
	while(true){
	if(s__$1){
	var e = cljs.core.first(s__$1);
	var G__2436 = ((h + cljs.core.hash(e)) % (4503599627370496));
	var G__2437 = cljs.core.next(s__$1);
	h = G__2436;
	s__$1 = G__2437;
	continue;
	} else {
	return h;
	}
	break;
	}
	});


	/**
	 * Takes a JavaScript object and a map of names to functions and
	 *   attaches said functions as methods on the object.  Any references to
	 *   JavaScript's implicit this (via the this-as macro) will resolve to the
	 *   object that the function is attached.
	 */
	cljs.core.extend_object_BANG_ = (function cljs$core$extend_object_BANG_(obj,fn_map){
	var seq__2448_2458 = cljs.core.seq(fn_map);
	var chunk__2449_2459 = null;
	var count__2450_2460 = (0);
	var i__2451_2461 = (0);
	while(true){
	if((i__2451_2461 < count__2450_2460)){
	var vec__2452_2462 = chunk__2449_2459.cljs$core$IIndexed$_nth$arity$2(null,i__2451_2461);
	var key_name_2463 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2452_2462,(0),null);
	var f_2464 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2452_2462,(1),null);
	var str_name_2465 = (cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_2463) : cljs.core.name.call(null,key_name_2463));
	(obj[str_name_2465] = f_2464);

	var G__2466 = seq__2448_2458;
	var G__2467 = chunk__2449_2459;
	var G__2468 = count__2450_2460;
	var G__2469 = (i__2451_2461 + (1));
	seq__2448_2458 = G__2466;
	chunk__2449_2459 = G__2467;
	count__2450_2460 = G__2468;
	i__2451_2461 = G__2469;
	continue;
	} else {
	var temp__6738__auto___2470 = cljs.core.seq(seq__2448_2458);
	if(temp__6738__auto___2470){
	var seq__2448_2471__$1 = temp__6738__auto___2470;
	if(cljs.core.chunked_seq_QMARK_(seq__2448_2471__$1)){
	var c__5929__auto___2472 = (cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_first.cljs$core$IFn$_invoke$arity$1(seq__2448_2471__$1) : cljs.core.chunk_first.call(null,seq__2448_2471__$1));
	var G__2473 = (cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1 ? cljs.core.chunk_rest.cljs$core$IFn$_invoke$arity$1(seq__2448_2471__$1) : cljs.core.chunk_rest.call(null,seq__2448_2471__$1));
	var G__2474 = c__5929__auto___2472;
	var G__2475 = cljs.core.count(c__5929__auto___2472);
	var G__2476 = (0);
	seq__2448_2458 = G__2473;
	chunk__2449_2459 = G__2474;
	count__2450_2460 = G__2475;
	i__2451_2461 = G__2476;
	continue;
	} else {
	var vec__2455_2477 = cljs.core.first(seq__2448_2471__$1);
	var key_name_2478 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2455_2477,(0),null);
	var f_2479 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2455_2477,(1),null);
	var str_name_2480 = (cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(key_name_2478) : cljs.core.name.call(null,key_name_2478));
	(obj[str_name_2480] = f_2479);

	var G__2481 = cljs.core.next(seq__2448_2471__$1);
	var G__2482 = null;
	var G__2483 = (0);
	var G__2484 = (0);
	seq__2448_2458 = G__2481;
	chunk__2449_2459 = G__2482;
	count__2450_2460 = G__2483;
	i__2451_2461 = G__2484;
	continue;
	}
	} else {
	}
	}
	break;
	}

	return obj;
	});

	/**
	* @constructor
	 * @implements {cljs.core.IList}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ASeq}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.List = (function (meta,first,rest,count,__hash){
	this.meta = meta;
	this.first = first;
	this.rest = rest;
	this.count = count;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 65937646;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.List.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.List.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.List.prototype.indexOf = (function() {
	var G__2485 = null;
	var G__2485__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2485__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2485 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2485__1.call(this,x);
	case 2:
	return G__2485__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2485.cljs$core$IFn$_invoke$arity$1 = G__2485__1;
	G__2485.cljs$core$IFn$_invoke$arity$2 = G__2485__2;
	return G__2485;
	})()
	;

	cljs.core.List.prototype.lastIndexOf = (function() {
	var G__2486 = null;
	var G__2486__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,self__.count);
	});
	var G__2486__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2486 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2486__1.call(this,x);
	case 2:
	return G__2486__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2486.cljs$core$IFn$_invoke$arity$1 = G__2486__1;
	G__2486.cljs$core$IFn$_invoke$arity$2 = G__2486__2;
	return G__2486;
	})()
	;

	cljs.core.List.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.List.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.List(self__.meta,self__.first,self__.rest,self__.count,self__.__hash));
	});

	cljs.core.List.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.count === (1))){
	return null;
	} else {
	return self__.rest;
	}
	});

	cljs.core.List.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.count;
	});

	cljs.core.List.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.first;
	});

	cljs.core.List.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ISeq$_rest$arity$1(null);
	});

	cljs.core.List.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.List.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.List.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.List.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.List.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.first;
	});

	cljs.core.List.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.count === (1))){
	return cljs.core.List.EMPTY;
	} else {
	return self__.rest;
	}
	});

	cljs.core.List.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.List.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.List(meta__$1,self__.first,self__.rest,self__.count,self__.__hash));
	});

	cljs.core.List.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.List(self__.meta,o,coll__$1,(self__.count + (1)),null));
	});

	cljs.core.List.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.cst$sym$count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.List.cljs$lang$type = true;

	cljs.core.List.cljs$lang$ctorStr = "cljs.core/List";

	cljs.core.List.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/List");
	});

	cljs.core.__GT_List = (function cljs$core$__GT_List(meta,first,rest,count,__hash){
	return (new cljs.core.List(meta,first,rest,count,__hash));
	});

	/**
	 * Returns true if x implements IList
	 */
	cljs.core.list_QMARK_ = (function cljs$core$list_QMARK_(x){
	if(!((x == null))){
	if(((x.cljs$lang$protocol_mask$partition0$ & (33554432))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IList$))){
	return true;
	} else {
	if((!x.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IList,x);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IList,x);
	}
	});
	(cljs.core.List.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.IList}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.EmptyList = (function (meta){
	this.meta = meta;
	this.cljs$lang$protocol_mask$partition0$ = 65937614;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.EmptyList.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.EmptyList.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.EmptyList.prototype.indexOf = (function() {
	var G__2489 = null;
	var G__2489__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2489__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2489 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2489__1.call(this,x);
	case 2:
	return G__2489__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2489.cljs$core$IFn$_invoke$arity$1 = G__2489__1;
	G__2489.cljs$core$IFn$_invoke$arity$2 = G__2489__2;
	return G__2489;
	})()
	;

	cljs.core.EmptyList.prototype.lastIndexOf = (function() {
	var G__2490 = null;
	var G__2490__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__2490__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2490 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2490__1.call(this,x);
	case 2:
	return G__2490__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2490.cljs$core$IFn$_invoke$arity$1 = G__2490__1;
	G__2490.cljs$core$IFn$_invoke$arity$2 = G__2490__2;
	return G__2490;
	})()
	;

	cljs.core.EmptyList.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.EmptyList.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.EmptyList(self__.meta));
	});

	cljs.core.EmptyList.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return null;
	});

	cljs.core.EmptyList.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (0);
	});

	cljs.core.EmptyList.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return null;
	});

	cljs.core.EmptyList.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	throw (new Error("Can't pop empty list"));
	});

	cljs.core.EmptyList.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.empty_ordered_hash;
	});

	cljs.core.EmptyList.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	if((cljs.core.list_QMARK_(other)) || (cljs.core.sequential_QMARK_(other))){
	return (cljs.core.seq(other) == null);
	} else {
	return false;
	}
	});

	cljs.core.EmptyList.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.EmptyList.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.EmptyList.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return null;
	});

	cljs.core.EmptyList.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.List.EMPTY;
	});

	cljs.core.EmptyList.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return null;
	});

	cljs.core.EmptyList.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.EmptyList(meta__$1));
	});

	cljs.core.EmptyList.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.List(self__.meta,o,null,(1),null));
	});

	cljs.core.EmptyList.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta], null);
	});

	cljs.core.EmptyList.cljs$lang$type = true;

	cljs.core.EmptyList.cljs$lang$ctorStr = "cljs.core/EmptyList";

	cljs.core.EmptyList.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/EmptyList");
	});

	cljs.core.__GT_EmptyList = (function cljs$core$__GT_EmptyList(meta){
	return (new cljs.core.EmptyList(meta));
	});

	cljs.core.List.EMPTY = (new cljs.core.EmptyList(null));
	(cljs.core.EmptyList.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns true if coll satisfies? IReversible.
	 */
	cljs.core.reversible_QMARK_ = (function cljs$core$reversible_QMARK_(coll){
	if(!((coll == null))){
	if(((coll.cljs$lang$protocol_mask$partition0$ & (134217728))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$IReversible$))){
	return true;
	} else {
	if((!coll.cljs$lang$protocol_mask$partition0$)){
	return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible,coll);
	} else {
	return false;
	}
	}
	} else {
	return cljs.core.native_satisfies_QMARK_(cljs.core.IReversible,coll);
	}
	});
	/**
	 * Returns, in constant time, a seq of the items in rev (which
	 *   can be a vector or sorted-map), in reverse order. If rev is empty returns nil
	 */
	cljs.core.rseq = (function cljs$core$rseq(rev){
	return cljs.core._rseq(rev);
	});
	/**
	 * Returns a seq of the items in coll in reverse order. Not lazy.
	 */
	cljs.core.reverse = (function cljs$core$reverse(coll){
	if(cljs.core.reversible_QMARK_(coll)){
	return cljs.core.rseq(coll);
	} else {
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,cljs.core.List.EMPTY,coll);
	}
	});
	/**
	 * Creates a new list containing the items.
	 */
	cljs.core.list = (function cljs$core$list(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___2494 = arguments.length;
	var i__6100__auto___2495 = (0);
	while(true){
	if((i__6100__auto___2495 < len__6099__auto___2494)){
	args__6102__auto__.push((arguments[i__6100__auto___2495]));

	var G__2496 = (i__6100__auto___2495 + (1));
	i__6100__auto___2495 = G__2496;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.list.cljs$core$IFn$_invoke$arity$variadic = (function (xs){
	var arr = ((((xs instanceof cljs.core.IndexedSeq)) && ((xs.i === (0))))?xs.arr:(function (){var arr = [];
	var xs__$1 = xs;
	while(true){
	if(!((xs__$1 == null))){
	arr.push(xs__$1.cljs$core$ISeq$_first$arity$1(null));

	var G__2497 = xs__$1.cljs$core$INext$_next$arity$1(null);
	xs__$1 = G__2497;
	continue;
	} else {
	return arr;
	}
	break;
	}
	})());
	var i = arr.length;
	var r = cljs.core.List.EMPTY;
	while(true){
	if((i > (0))){
	var G__2498 = (i - (1));
	var G__2499 = r.cljs$core$ICollection$_conj$arity$2(null,(arr[(i - (1))]));
	i = G__2498;
	r = G__2499;
	continue;
	} else {
	return r;
	}
	break;
	}
	});

	cljs.core.list.cljs$lang$maxFixedArity = (0);

	cljs.core.list.cljs$lang$applyTo = (function (seq2493){
	return cljs.core.list.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq2493));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IList}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ASeq}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.Cons = (function (meta,first,rest,__hash){
	this.meta = meta;
	this.first = first;
	this.rest = rest;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 65929452;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.Cons.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.Cons.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Cons.prototype.indexOf = (function() {
	var G__2500 = null;
	var G__2500__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2500__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2500 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2500__1.call(this,x);
	case 2:
	return G__2500__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2500.cljs$core$IFn$_invoke$arity$1 = G__2500__1;
	G__2500.cljs$core$IFn$_invoke$arity$2 = G__2500__2;
	return G__2500;
	})()
	;

	cljs.core.Cons.prototype.lastIndexOf = (function() {
	var G__2501 = null;
	var G__2501__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__2501__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2501 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2501__1.call(this,x);
	case 2:
	return G__2501__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2501.cljs$core$IFn$_invoke$arity$1 = G__2501__1;
	G__2501.cljs$core$IFn$_invoke$arity$2 = G__2501__2;
	return G__2501;
	})()
	;

	cljs.core.Cons.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.Cons.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.Cons(self__.meta,self__.first,self__.rest,self__.__hash));
	});

	cljs.core.Cons.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.rest == null)){
	return null;
	} else {
	return cljs.core.seq(self__.rest);
	}
	});

	cljs.core.Cons.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.Cons.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.Cons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.Cons.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.Cons.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.first;
	});

	cljs.core.Cons.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.rest == null)){
	return cljs.core.List.EMPTY;
	} else {
	return self__.rest;
	}
	});

	cljs.core.Cons.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.Cons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.Cons(meta__$1,self__.first,self__.rest,self__.__hash));
	});

	cljs.core.Cons.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.Cons(null,o,coll__$1,null));
	});

	cljs.core.Cons.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$first,cljs.core.cst$sym$rest,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Cons.cljs$lang$type = true;

	cljs.core.Cons.cljs$lang$ctorStr = "cljs.core/Cons";

	cljs.core.Cons.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Cons");
	});

	cljs.core.__GT_Cons = (function cljs$core$__GT_Cons(meta,first,rest,__hash){
	return (new cljs.core.Cons(meta,first,rest,__hash));
	});

	(cljs.core.Cons.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns a new seq where x is the first element and coll is the rest.
	 */
	cljs.core.cons = (function cljs$core$cons(x,coll){
	if((function (){var or__5450__auto__ = (coll == null);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	if(!((coll == null))){
	if(((coll.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === coll.cljs$core$ISeq$))){
	return true;
	} else {
	return false;
	}
	} else {
	return false;
	}
	}
	})()){
	return (new cljs.core.Cons(null,x,coll,null));
	} else {
	return (new cljs.core.Cons(null,x,cljs.core.seq(coll),null));
	}
	});
	cljs.core.hash_keyword = (function cljs$core$hash_keyword(k){
	return ((cljs.core.hash_symbol(k) + (2654435769)) | (0));
	});
	cljs.core.compare_keywords = (function cljs$core$compare_keywords(a,b){
	if((a.fqn === b.fqn)){
	return (0);
	} else {
	if(cljs.core.truth_((function (){var and__5442__auto__ = cljs.core.not(a.ns);
	if(and__5442__auto__){
	return b.ns;
	} else {
	return and__5442__auto__;
	}
	})())){
	return (-1);
	} else {
	if(cljs.core.truth_(a.ns)){
	if(cljs.core.not(b.ns)){
	return (1);
	} else {
	var nsc = (function (){var G__2512 = a.ns;
	var G__2513 = b.ns;
	return goog.array.defaultCompare(G__2512,G__2513);
	})();
	if(((0) === nsc)){
	var G__2514 = a.name;
	var G__2515 = b.name;
	return goog.array.defaultCompare(G__2514,G__2515);
	} else {
	return nsc;
	}
	}
	} else {
	var G__2516 = a.name;
	var G__2517 = b.name;
	return goog.array.defaultCompare(G__2516,G__2517);

	}
	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.INamed}
	 * @implements {cljs.core.IPrintWithWriter}
	*/
	cljs.core.Keyword = (function (ns,name,fqn,_hash){
	this.ns = ns;
	this.name = name;
	this.fqn = fqn;
	this._hash = _hash;
	this.cljs$lang$protocol_mask$partition0$ = 2153775105;
	this.cljs$lang$protocol_mask$partition1$ = 4096;
	})
	cljs.core.Keyword.prototype.toString = (function (){
	var self__ = this;
	var _ = this;
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join('');
	});

	cljs.core.Keyword.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Keyword.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (_,other){
	var self__ = this;
	var ___$1 = this;
	if((other instanceof cljs.core.Keyword)){
	return (self__.fqn === other.fqn);
	} else {
	return false;
	}
	});

	cljs.core.Keyword.prototype.call = (function() {
	var G__2519 = null;
	var G__2519__2 = (function (self__,coll){
	var self__ = this;
	var self____$1 = this;
	var kw = self____$1;
	return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll,kw);
	});
	var G__2519__3 = (function (self__,coll,not_found){
	var self__ = this;
	var self____$1 = this;
	var kw = self____$1;
	return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll,kw,not_found);
	});
	G__2519 = function(self__,coll,not_found){
	switch(arguments.length){
	case 2:
	return G__2519__2.call(this,self__,coll);
	case 3:
	return G__2519__3.call(this,self__,coll,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2519.cljs$core$IFn$_invoke$arity$2 = G__2519__2;
	G__2519.cljs$core$IFn$_invoke$arity$3 = G__2519__3;
	return G__2519;
	})()
	;

	cljs.core.Keyword.prototype.apply = (function (self__,args2518){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args2518)));
	});

	cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	var self__ = this;
	var kw = this;
	return cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll,kw);
	});

	cljs.core.Keyword.prototype.cljs$core$IFn$_invoke$arity$2 = (function (coll,not_found){
	var self__ = this;
	var kw = this;
	return cljs.core.get.cljs$core$IFn$_invoke$arity$3(coll,kw,not_found);
	});

	cljs.core.Keyword.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	var h__5552__auto__ = self__._hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_keyword(this$__$1);
	self__._hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.Keyword.prototype.cljs$core$INamed$_name$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.name;
	});

	cljs.core.Keyword.prototype.cljs$core$INamed$_namespace$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.ns;
	});

	cljs.core.Keyword.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (o,writer,_){
	var self__ = this;
	var o__$1 = this;
	return cljs.core._write(writer,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(":"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.fqn)].join(''));
	});

	cljs.core.Keyword.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$ns,cljs.core.cst$sym$name,cljs.core.cst$sym$fqn,cljs.core.with_meta(cljs.core.cst$sym$_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Keyword.cljs$lang$type = true;

	cljs.core.Keyword.cljs$lang$ctorStr = "cljs.core/Keyword";

	cljs.core.Keyword.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Keyword");
	});

	cljs.core.__GT_Keyword = (function cljs$core$__GT_Keyword(ns,name,fqn,_hash){
	return (new cljs.core.Keyword(ns,name,fqn,_hash));
	});

	/**
	 * Return true if x is a Keyword
	 */
	cljs.core.keyword_QMARK_ = (function cljs$core$keyword_QMARK_(x){
	return (x instanceof cljs.core.Keyword);
	});
	/**
	 * Efficient test to determine that two keywords are identical.
	 */
	cljs.core.keyword_identical_QMARK_ = (function cljs$core$keyword_identical_QMARK_(x,y){
	if((x === y)){
	return true;
	} else {
	if(((x instanceof cljs.core.Keyword)) && ((y instanceof cljs.core.Keyword))){
	return (x.fqn === y.fqn);
	} else {
	return false;
	}
	}
	});
	/**
	 * Efficient test to determine that two symbols are identical.
	 */
	cljs.core.symbol_identical_QMARK_ = (function cljs$core$symbol_identical_QMARK_(x,y){
	if((x === y)){
	return true;
	} else {
	if(((x instanceof cljs.core.Symbol)) && ((y instanceof cljs.core.Symbol))){
	return (x.str === y.str);
	} else {
	return false;
	}
	}
	});
	/**
	 * Returns the namespace String of a symbol or keyword, or nil if not present.
	 */
	cljs.core.namespace = (function cljs$core$namespace(x){
	if(((!((x == null)))?((((x.cljs$lang$protocol_mask$partition1$ & (4096))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$)))?true:false):false)){
	return x.cljs$core$INamed$_namespace$arity$1(null);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support namespace: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join('')));
	}
	});
	/**
	 * Return true if x is a symbol or keyword
	 */
	cljs.core.ident_QMARK_ = (function cljs$core$ident_QMARK_(x){
	return ((x instanceof cljs.core.Keyword)) || ((x instanceof cljs.core.Symbol));
	});
	/**
	 * Return true if x is a symbol or keyword without a namespace
	 */
	cljs.core.simple_ident_QMARK_ = (function cljs$core$simple_ident_QMARK_(x){
	return (cljs.core.ident_QMARK_(x)) && ((cljs.core.namespace(x) == null));
	});
	/**
	 * Return true if x is a symbol or keyword with a namespace
	 */
	cljs.core.qualified_ident_QMARK_ = (function cljs$core$qualified_ident_QMARK_(x){
	var and__5442__auto__ = cljs.core.ident_QMARK_(x);
	if(and__5442__auto__){
	var and__5442__auto____$1 = cljs.core.namespace(x);
	if(cljs.core.truth_(and__5442__auto____$1)){
	return true;
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	});
	/**
	 * Return true if x is a symbol without a namespace
	 */
	cljs.core.simple_symbol_QMARK_ = (function cljs$core$simple_symbol_QMARK_(x){
	return ((x instanceof cljs.core.Symbol)) && ((cljs.core.namespace(x) == null));
	});
	/**
	 * Return true if x is a symbol with a namespace
	 */
	cljs.core.qualified_symbol_QMARK_ = (function cljs$core$qualified_symbol_QMARK_(x){
	var and__5442__auto__ = (x instanceof cljs.core.Symbol);
	if(and__5442__auto__){
	var and__5442__auto____$1 = cljs.core.namespace(x);
	if(cljs.core.truth_(and__5442__auto____$1)){
	return true;
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	});
	/**
	 * Return true if x is a keyword without a namespace
	 */
	cljs.core.simple_keyword_QMARK_ = (function cljs$core$simple_keyword_QMARK_(x){
	return ((x instanceof cljs.core.Keyword)) && ((cljs.core.namespace(x) == null));
	});
	/**
	 * Return true if x is a keyword with a namespace
	 */
	cljs.core.qualified_keyword_QMARK_ = (function cljs$core$qualified_keyword_QMARK_(x){
	var and__5442__auto__ = (x instanceof cljs.core.Keyword);
	if(and__5442__auto__){
	var and__5442__auto____$1 = cljs.core.namespace(x);
	if(cljs.core.truth_(and__5442__auto____$1)){
	return true;
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	});
	/**
	 * Returns a Keyword with the given namespace and name.  Do not use :
	 *   in the keyword strings, it will be added automatically.
	 */
	cljs.core.keyword = (function cljs$core$keyword(var_args){
	var args2522 = [];
	var len__6099__auto___2525 = arguments.length;
	var i__6100__auto___2526 = (0);
	while(true){
	if((i__6100__auto___2526 < len__6099__auto___2525)){
	args2522.push((arguments[i__6100__auto___2526]));

	var G__2527 = (i__6100__auto___2526 + (1));
	i__6100__auto___2526 = G__2527;
	continue;
	} else {
	}
	break;
	}

	var G__2524 = args2522.length;
	switch (G__2524) {
	case 1:
	return cljs.core.keyword.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2522.length)].join('')));

	}
	});

	cljs.core.keyword.cljs$core$IFn$_invoke$arity$1 = (function (name){
	if((name instanceof cljs.core.Keyword)){
	return name;
	} else {
	if((name instanceof cljs.core.Symbol)){
	return (new cljs.core.Keyword(cljs.core.namespace(name),(cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null,name)),name.str,null));
	} else {
	if(typeof name === 'string'){
	var parts = name.split("/");
	if((parts.length === (2))){
	return (new cljs.core.Keyword((parts[(0)]),(parts[(1)]),name,null));
	} else {
	return (new cljs.core.Keyword(null,(parts[(0)]),name,null));
	}
	} else {
	return null;
	}
	}
	}
	});

	cljs.core.keyword.cljs$core$IFn$_invoke$arity$2 = (function (ns,name){
	var ns__$1 = (((ns instanceof cljs.core.Keyword))?(cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null,ns)):(((ns instanceof cljs.core.Symbol))?(cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(ns) : cljs.core.name.call(null,ns)):ns
	));
	var name__$1 = (((name instanceof cljs.core.Keyword))?(cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null,name)):(((name instanceof cljs.core.Symbol))?(cljs.core.name.cljs$core$IFn$_invoke$arity$1 ? cljs.core.name.cljs$core$IFn$_invoke$arity$1(name) : cljs.core.name.call(null,name)):name
	));
	return (new cljs.core.Keyword(ns__$1,name__$1,[cljs.core.str.cljs$core$IFn$_invoke$arity$1((cljs.core.truth_(ns__$1)?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1("/")].join(''):null)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name__$1)].join(''),null));
	});

	cljs.core.keyword.cljs$lang$maxFixedArity = 2;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IPending}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.LazySeq = (function (meta,fn,s,__hash){
	this.meta = meta;
	this.fn = fn;
	this.s = s;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32374988;
	this.cljs$lang$protocol_mask$partition1$ = 1;
	})
	cljs.core.LazySeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.LazySeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.LazySeq.prototype.sval = (function (){
	var self__ = this;
	var coll = this;
	if((self__.fn == null)){
	return self__.s;
	} else {
	self__.s = (self__.fn.cljs$core$IFn$_invoke$arity$0 ? self__.fn.cljs$core$IFn$_invoke$arity$0() : self__.fn.call(null));

	self__.fn = null;

	return self__.s;
	}
	});

	cljs.core.LazySeq.prototype.indexOf = (function() {
	var G__2529 = null;
	var G__2529__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2529__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2529 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2529__1.call(this,x);
	case 2:
	return G__2529__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2529.cljs$core$IFn$_invoke$arity$1 = G__2529__1;
	G__2529.cljs$core$IFn$_invoke$arity$2 = G__2529__2;
	return G__2529;
	})()
	;

	cljs.core.LazySeq.prototype.lastIndexOf = (function() {
	var G__2530 = null;
	var G__2530__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__2530__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2530 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2530__1.call(this,x);
	case 2:
	return G__2530__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2530.cljs$core$IFn$_invoke$arity$1 = G__2530__1;
	G__2530.cljs$core$IFn$_invoke$arity$2 = G__2530__2;
	return G__2530;
	})()
	;

	cljs.core.LazySeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.LazySeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	coll__$1.cljs$core$ISeqable$_seq$arity$1(null);

	if((self__.s == null)){
	return null;
	} else {
	return cljs.core.next(self__.s);
	}
	});

	cljs.core.LazySeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.LazySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.LazySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.LazySeq.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.not(self__.fn);
	});

	cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.LazySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.LazySeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	coll__$1.cljs$core$ISeqable$_seq$arity$1(null);

	if((self__.s == null)){
	return null;
	} else {
	return cljs.core.first(self__.s);
	}
	});

	cljs.core.LazySeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	coll__$1.cljs$core$ISeqable$_seq$arity$1(null);

	if(!((self__.s == null))){
	return cljs.core.rest(self__.s);
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	coll__$1.sval();

	if((self__.s == null)){
	return null;
	} else {
	var ls = self__.s;
	while(true){
	if((ls instanceof cljs.core.LazySeq)){
	var G__2531 = ls.sval();
	ls = G__2531;
	continue;
	} else {
	self__.s = ls;

	return cljs.core.seq(self__.s);
	}
	break;
	}
	}
	});

	cljs.core.LazySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.LazySeq(meta__$1,self__.fn,self__.s,self__.__hash));
	});

	cljs.core.LazySeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.LazySeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$fn,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.LazySeq.cljs$lang$type = true;

	cljs.core.LazySeq.cljs$lang$ctorStr = "cljs.core/LazySeq";

	cljs.core.LazySeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/LazySeq");
	});

	cljs.core.__GT_LazySeq = (function cljs$core$__GT_LazySeq(meta,fn,s,__hash){
	return (new cljs.core.LazySeq(meta,fn,s,__hash));
	});

	(cljs.core.LazySeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.ICounted}
	*/
	cljs.core.ChunkBuffer = (function (buf,end){
	this.buf = buf;
	this.end = end;
	this.cljs$lang$protocol_mask$partition0$ = 2;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.ChunkBuffer.prototype.add = (function (o){
	var self__ = this;
	var _ = this;
	(self__.buf[self__.end] = o);

	return self__.end = (self__.end + (1));
	});

	cljs.core.ChunkBuffer.prototype.chunk = (function (o){
	var self__ = this;
	var _ = this;
	var ret = (new cljs.core.ArrayChunk(self__.buf,(0),self__.end));
	self__.buf = null;

	return ret;
	});

	cljs.core.ChunkBuffer.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.end;
	});

	cljs.core.ChunkBuffer.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$buf,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$end,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ChunkBuffer.cljs$lang$type = true;

	cljs.core.ChunkBuffer.cljs$lang$ctorStr = "cljs.core/ChunkBuffer";

	cljs.core.ChunkBuffer.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ChunkBuffer");
	});

	cljs.core.__GT_ChunkBuffer = (function cljs$core$__GT_ChunkBuffer(buf,end){
	return (new cljs.core.ChunkBuffer(buf,end));
	});

	cljs.core.chunk_buffer = (function cljs$core$chunk_buffer(capacity){
	return (new cljs.core.ChunkBuffer((new Array(capacity)),(0)));
	});

	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.IChunk}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.ArrayChunk = (function (arr,off,end){
	this.arr = arr;
	this.off = off;
	this.end = end;
	this.cljs$lang$protocol_mask$partition0$ = 524306;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.ArrayChunk.prototype.cljs$core$ICounted$_count$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (self__.end - self__.off);
	});

	cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,i){
	var self__ = this;
	var coll__$1 = this;
	return (self__.arr[(self__.off + i)]);
	});

	cljs.core.ArrayChunk.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,i,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(((i >= (0))) && ((i < (self__.end - self__.off)))){
	return (self__.arr[(self__.off + i)]);
	} else {
	return not_found;
	}
	});

	cljs.core.ArrayChunk.prototype.cljs$core$IChunk$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ArrayChunk.prototype.cljs$core$IChunk$_drop_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.off === self__.end)){
	throw (new Error("-drop-first of empty chunk"));
	} else {
	return (new cljs.core.ArrayChunk(self__.arr,(self__.off + (1)),self__.end));
	}
	});

	cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr,f,(self__.arr[self__.off]),(self__.off + (1)));
	});

	cljs.core.ArrayChunk.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.array_reduce.cljs$core$IFn$_invoke$arity$4(self__.arr,f,start,self__.off);
	});

	cljs.core.ArrayChunk.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$off,cljs.core.cst$sym$end], null);
	});

	cljs.core.ArrayChunk.cljs$lang$type = true;

	cljs.core.ArrayChunk.cljs$lang$ctorStr = "cljs.core/ArrayChunk";

	cljs.core.ArrayChunk.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayChunk");
	});

	cljs.core.__GT_ArrayChunk = (function cljs$core$__GT_ArrayChunk(arr,off,end){
	return (new cljs.core.ArrayChunk(arr,off,end));
	});

	cljs.core.array_chunk = (function cljs$core$array_chunk(var_args){
	var args2532 = [];
	var len__6099__auto___2535 = arguments.length;
	var i__6100__auto___2536 = (0);
	while(true){
	if((i__6100__auto___2536 < len__6099__auto___2535)){
	args2532.push((arguments[i__6100__auto___2536]));

	var G__2537 = (i__6100__auto___2536 + (1));
	i__6100__auto___2536 = G__2537;
	continue;
	} else {
	}
	break;
	}

	var G__2534 = args2532.length;
	switch (G__2534) {
	case 1:
	return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2532.length)].join('')));

	}
	});

	cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$1 = (function (arr){
	return (new cljs.core.ArrayChunk(arr,(0),arr.length));
	});

	cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2 = (function (arr,off){
	return (new cljs.core.ArrayChunk(arr,off,arr.length));
	});

	cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$3 = (function (arr,off,end){
	return (new cljs.core.ArrayChunk(arr,off,end));
	});

	cljs.core.array_chunk.cljs$lang$maxFixedArity = 3;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ASeq}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IChunkedNext}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IChunkedSeq}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.ChunkedCons = (function (chunk,more,meta,__hash){
	this.chunk = chunk;
	this.more = more;
	this.meta = meta;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 31850732;
	this.cljs$lang$protocol_mask$partition1$ = 1536;
	})
	cljs.core.ChunkedCons.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.ChunkedCons.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.ChunkedCons.prototype.indexOf = (function() {
	var G__2539 = null;
	var G__2539__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2539__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2539 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2539__1.call(this,x);
	case 2:
	return G__2539__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2539.cljs$core$IFn$_invoke$arity$1 = G__2539__1;
	G__2539.cljs$core$IFn$_invoke$arity$2 = G__2539__2;
	return G__2539;
	})()
	;

	cljs.core.ChunkedCons.prototype.lastIndexOf = (function() {
	var G__2540 = null;
	var G__2540__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__2540__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2540 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2540__1.call(this,x);
	case 2:
	return G__2540__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2540.cljs$core$IFn$_invoke$arity$1 = G__2540__1;
	G__2540.cljs$core$IFn$_invoke$arity$2 = G__2540__2;
	return G__2540;
	})()
	;

	cljs.core.ChunkedCons.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.ChunkedCons.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((cljs.core._count(self__.chunk) > (1))){
	return (new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk),self__.more,self__.meta,null));
	} else {
	var more__$1 = cljs.core._seq(self__.more);
	if((more__$1 == null)){
	return null;
	} else {
	return more__$1;
	}
	}
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.chunk,(0));
	});

	cljs.core.ChunkedCons.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((cljs.core._count(self__.chunk) > (1))){
	return (new cljs.core.ChunkedCons(cljs.core._drop_first(self__.chunk),self__.more,self__.meta,null));
	} else {
	if((self__.more == null)){
	return cljs.core.List.EMPTY;
	} else {
	return self__.more;
	}
	}
	});

	cljs.core.ChunkedCons.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.chunk;
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.more == null)){
	return cljs.core.List.EMPTY;
	} else {
	return self__.more;
	}
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,m){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.ChunkedCons(self__.chunk,self__.more,m,self__.__hash));
	});

	cljs.core.ChunkedCons.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this$,o){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.cons(o,this$__$1);
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.more == null)){
	return null;
	} else {
	return self__.more;
	}
	});

	cljs.core.ChunkedCons.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$chunk,cljs.core.cst$sym$more,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ChunkedCons.cljs$lang$type = true;

	cljs.core.ChunkedCons.cljs$lang$ctorStr = "cljs.core/ChunkedCons";

	cljs.core.ChunkedCons.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ChunkedCons");
	});

	cljs.core.__GT_ChunkedCons = (function cljs$core$__GT_ChunkedCons(chunk,more,meta,__hash){
	return (new cljs.core.ChunkedCons(chunk,more,meta,__hash));
	});

	(cljs.core.ChunkedCons.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.chunk_cons = (function cljs$core$chunk_cons(chunk,rest){
	if((cljs.core._count(chunk) === (0))){
	return rest;
	} else {
	return (new cljs.core.ChunkedCons(chunk,rest,null,null));
	}
	});
	cljs.core.chunk_append = (function cljs$core$chunk_append(b,x){
	return b.add(x);
	});
	cljs.core.chunk = (function cljs$core$chunk(b){
	return b.chunk();
	});
	cljs.core.chunk_first = (function cljs$core$chunk_first(s){
	return cljs.core._chunked_first(s);
	});
	cljs.core.chunk_rest = (function cljs$core$chunk_rest(s){
	return cljs.core._chunked_rest(s);
	});
	cljs.core.chunk_next = (function cljs$core$chunk_next(s){
	if(((!((s == null)))?((((s.cljs$lang$protocol_mask$partition1$ & (1024))) || ((cljs.core.PROTOCOL_SENTINEL === s.cljs$core$IChunkedNext$)))?true:false):false)){
	return cljs.core._chunked_next(s);
	} else {
	return cljs.core.seq(cljs.core._chunked_rest(s));
	}
	});
	/**
	 * Naive impl of to-array as a start.
	 */
	cljs.core.to_array = (function cljs$core$to_array(s){
	var ary = [];
	var s__$1 = s;
	while(true){
	if(cljs.core.seq(s__$1)){
	ary.push(cljs.core.first(s__$1));

	var G__2543 = cljs.core.next(s__$1);
	s__$1 = G__2543;
	continue;
	} else {
	return ary;
	}
	break;
	}
	});
	/**
	 * Returns a (potentially-ragged) 2-dimensional array
	 *   containing the contents of coll.
	 */
	cljs.core.to_array_2d = (function cljs$core$to_array_2d(coll){
	var ret = (new Array(cljs.core.count(coll)));
	var i_2544 = (0);
	var xs_2545 = cljs.core.seq(coll);
	while(true){
	if(xs_2545){
	(ret[i_2544] = cljs.core.to_array(cljs.core.first(xs_2545)));

	var G__2546 = (i_2544 + (1));
	var G__2547 = cljs.core.next(xs_2545);
	i_2544 = G__2546;
	xs_2545 = G__2547;
	continue;
	} else {
	}
	break;
	}

	return ret;
	});
	/**
	 * Creates an array of ints. Does not coerce array, provided for compatibility
	 *   with Clojure.
	 */
	cljs.core.int_array = (function cljs$core$int_array(var_args){
	var args2548 = [];
	var len__6099__auto___2551 = arguments.length;
	var i__6100__auto___2552 = (0);
	while(true){
	if((i__6100__auto___2552 < len__6099__auto___2551)){
	args2548.push((arguments[i__6100__auto___2552]));

	var G__2553 = (i__6100__auto___2552 + (1));
	i__6100__auto___2552 = G__2553;
	continue;
	} else {
	}
	break;
	}

	var G__2550 = args2548.length;
	switch (G__2550) {
	case 1:
	return cljs.core.int_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2548.length)].join('')));

	}
	});

	cljs.core.int_array.cljs$core$IFn$_invoke$arity$1 = (function (size_or_seq){
	if(typeof size_or_seq === 'number'){
	return cljs.core.int_array.cljs$core$IFn$_invoke$arity$2(size_or_seq,null);
	} else {
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
	}
	});

	cljs.core.int_array.cljs$core$IFn$_invoke$arity$2 = (function (size,init_val_or_seq){
	var a = (new Array(size));
	if(cljs.core.seq_QMARK_(init_val_or_seq)){
	var s = cljs.core.seq(init_val_or_seq);
	var i = (0);
	var s__$1 = s;
	while(true){
	if((s__$1) && ((i < size))){
	(a[i] = cljs.core.first(s__$1));

	var G__2555 = (i + (1));
	var G__2556 = cljs.core.next(s__$1);
	i = G__2555;
	s__$1 = G__2556;
	continue;
	} else {
	return a;
	}
	break;
	}
	} else {
	var n__5991__auto___2557 = size;
	var i_2558 = (0);
	while(true){
	if((i_2558 < n__5991__auto___2557)){
	(a[i_2558] = init_val_or_seq);

	var G__2559 = (i_2558 + (1));
	i_2558 = G__2559;
	continue;
	} else {
	}
	break;
	}

	return a;
	}
	});

	cljs.core.int_array.cljs$lang$maxFixedArity = 2;

	/**
	 * Creates an array of longs. Does not coerce array, provided for compatibility
	 *   with Clojure.
	 */
	cljs.core.long_array = (function cljs$core$long_array(var_args){
	var args2560 = [];
	var len__6099__auto___2563 = arguments.length;
	var i__6100__auto___2564 = (0);
	while(true){
	if((i__6100__auto___2564 < len__6099__auto___2563)){
	args2560.push((arguments[i__6100__auto___2564]));

	var G__2565 = (i__6100__auto___2564 + (1));
	i__6100__auto___2564 = G__2565;
	continue;
	} else {
	}
	break;
	}

	var G__2562 = args2560.length;
	switch (G__2562) {
	case 1:
	return cljs.core.long_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2560.length)].join('')));

	}
	});

	cljs.core.long_array.cljs$core$IFn$_invoke$arity$1 = (function (size_or_seq){
	if(typeof size_or_seq === 'number'){
	return cljs.core.long_array.cljs$core$IFn$_invoke$arity$2(size_or_seq,null);
	} else {
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
	}
	});

	cljs.core.long_array.cljs$core$IFn$_invoke$arity$2 = (function (size,init_val_or_seq){
	var a = (new Array(size));
	if(cljs.core.seq_QMARK_(init_val_or_seq)){
	var s = cljs.core.seq(init_val_or_seq);
	var i = (0);
	var s__$1 = s;
	while(true){
	if((s__$1) && ((i < size))){
	(a[i] = cljs.core.first(s__$1));

	var G__2567 = (i + (1));
	var G__2568 = cljs.core.next(s__$1);
	i = G__2567;
	s__$1 = G__2568;
	continue;
	} else {
	return a;
	}
	break;
	}
	} else {
	var n__5991__auto___2569 = size;
	var i_2570 = (0);
	while(true){
	if((i_2570 < n__5991__auto___2569)){
	(a[i_2570] = init_val_or_seq);

	var G__2571 = (i_2570 + (1));
	i_2570 = G__2571;
	continue;
	} else {
	}
	break;
	}

	return a;
	}
	});

	cljs.core.long_array.cljs$lang$maxFixedArity = 2;

	/**
	 * Creates an array of doubles. Does not coerce array, provided for compatibility
	 *   with Clojure.
	 */
	cljs.core.double_array = (function cljs$core$double_array(var_args){
	var args2572 = [];
	var len__6099__auto___2575 = arguments.length;
	var i__6100__auto___2576 = (0);
	while(true){
	if((i__6100__auto___2576 < len__6099__auto___2575)){
	args2572.push((arguments[i__6100__auto___2576]));

	var G__2577 = (i__6100__auto___2576 + (1));
	i__6100__auto___2576 = G__2577;
	continue;
	} else {
	}
	break;
	}

	var G__2574 = args2572.length;
	switch (G__2574) {
	case 1:
	return cljs.core.double_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2572.length)].join('')));

	}
	});

	cljs.core.double_array.cljs$core$IFn$_invoke$arity$1 = (function (size_or_seq){
	if(typeof size_or_seq === 'number'){
	return cljs.core.double_array.cljs$core$IFn$_invoke$arity$2(size_or_seq,null);
	} else {
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
	}
	});

	cljs.core.double_array.cljs$core$IFn$_invoke$arity$2 = (function (size,init_val_or_seq){
	var a = (new Array(size));
	if(cljs.core.seq_QMARK_(init_val_or_seq)){
	var s = cljs.core.seq(init_val_or_seq);
	var i = (0);
	var s__$1 = s;
	while(true){
	if((s__$1) && ((i < size))){
	(a[i] = cljs.core.first(s__$1));

	var G__2579 = (i + (1));
	var G__2580 = cljs.core.next(s__$1);
	i = G__2579;
	s__$1 = G__2580;
	continue;
	} else {
	return a;
	}
	break;
	}
	} else {
	var n__5991__auto___2581 = size;
	var i_2582 = (0);
	while(true){
	if((i_2582 < n__5991__auto___2581)){
	(a[i_2582] = init_val_or_seq);

	var G__2583 = (i_2582 + (1));
	i_2582 = G__2583;
	continue;
	} else {
	}
	break;
	}

	return a;
	}
	});

	cljs.core.double_array.cljs$lang$maxFixedArity = 2;

	/**
	 * Creates an array of objects. Does not coerce array, provided for compatibility
	 *   with Clojure.
	 */
	cljs.core.object_array = (function cljs$core$object_array(var_args){
	var args2584 = [];
	var len__6099__auto___2587 = arguments.length;
	var i__6100__auto___2588 = (0);
	while(true){
	if((i__6100__auto___2588 < len__6099__auto___2587)){
	args2584.push((arguments[i__6100__auto___2588]));

	var G__2589 = (i__6100__auto___2588 + (1));
	i__6100__auto___2588 = G__2589;
	continue;
	} else {
	}
	break;
	}

	var G__2586 = args2584.length;
	switch (G__2586) {
	case 1:
	return cljs.core.object_array.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2584.length)].join('')));

	}
	});

	cljs.core.object_array.cljs$core$IFn$_invoke$arity$1 = (function (size_or_seq){
	if(typeof size_or_seq === 'number'){
	return cljs.core.object_array.cljs$core$IFn$_invoke$arity$2(size_or_seq,null);
	} else {
	return cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(size_or_seq);
	}
	});

	cljs.core.object_array.cljs$core$IFn$_invoke$arity$2 = (function (size,init_val_or_seq){
	var a = (new Array(size));
	if(cljs.core.seq_QMARK_(init_val_or_seq)){
	var s = cljs.core.seq(init_val_or_seq);
	var i = (0);
	var s__$1 = s;
	while(true){
	if((s__$1) && ((i < size))){
	(a[i] = cljs.core.first(s__$1));

	var G__2591 = (i + (1));
	var G__2592 = cljs.core.next(s__$1);
	i = G__2591;
	s__$1 = G__2592;
	continue;
	} else {
	return a;
	}
	break;
	}
	} else {
	var n__5991__auto___2593 = size;
	var i_2594 = (0);
	while(true){
	if((i_2594 < n__5991__auto___2593)){
	(a[i_2594] = init_val_or_seq);

	var G__2595 = (i_2594 + (1));
	i_2594 = G__2595;
	continue;
	} else {
	}
	break;
	}

	return a;
	}
	});

	cljs.core.object_array.cljs$lang$maxFixedArity = 2;

	/**
	 * If coll is counted? returns its count, else will count at most the first n
	 * elements of coll using its seq
	 */
	cljs.core.bounded_count = (function cljs$core$bounded_count(n,coll){
	if(cljs.core.counted_QMARK_(coll)){
	return cljs.core.count(coll);
	} else {
	var i = (0);
	var s = cljs.core.seq(coll);
	while(true){
	if((!((s == null))) && ((i < n))){
	var G__2596 = (i + (1));
	var G__2597 = cljs.core.next(s);
	i = G__2596;
	s = G__2597;
	continue;
	} else {
	return i;
	}
	break;
	}
	}
	});
	cljs.core.spread = (function cljs$core$spread(arglist){
	if((arglist == null)){
	return null;
	} else {
	if((cljs.core.next(arglist) == null)){
	return cljs.core.seq(cljs.core.first(arglist));
	} else {
	return cljs.core.cons(cljs.core.first(arglist),(function (){var G__2599 = cljs.core.next(arglist);
	return (cljs.core.spread.cljs$core$IFn$_invoke$arity$1 ? cljs.core.spread.cljs$core$IFn$_invoke$arity$1(G__2599) : cljs.core.spread.call(null,G__2599));
	})());

	}
	}
	});
	/**
	 * Returns a lazy seq representing the concatenation of the elements in the supplied colls.
	 */
	cljs.core.concat = (function cljs$core$concat(var_args){
	var args2600 = [];
	var len__6099__auto___2612 = arguments.length;
	var i__6100__auto___2613 = (0);
	while(true){
	if((i__6100__auto___2613 < len__6099__auto___2612)){
	args2600.push((arguments[i__6100__auto___2613]));

	var G__2614 = (i__6100__auto___2613 + (1));
	i__6100__auto___2613 = G__2614;
	continue;
	} else {
	}
	break;
	}

	var G__2605 = args2600.length;
	switch (G__2605) {
	case 0:
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2600.slice((2)),(0),null));
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.concat.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (new cljs.core.LazySeq(null,(function (){
	return null;
	}),null,null));
	});

	cljs.core.concat.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (new cljs.core.LazySeq(null,(function (){
	return x;
	}),null,null));
	});

	cljs.core.concat.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return (new cljs.core.LazySeq(null,(function (){
	var s = cljs.core.seq(x);
	if(s){
	if(cljs.core.chunked_seq_QMARK_(s)){
	return cljs.core.chunk_cons(cljs.core.chunk_first(s),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.chunk_rest(s),y));
	} else {
	return cljs.core.cons(cljs.core.first(s),cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s),y));
	}
	} else {
	return y;
	}
	}),null,null));
	});

	cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,zs){
	var cat = (function cljs$core$cat(xys,zs__$1){
	return (new cljs.core.LazySeq(null,(function (){
	var xys__$1 = cljs.core.seq(xys);
	if(xys__$1){
	if(cljs.core.chunked_seq_QMARK_(xys__$1)){
	return cljs.core.chunk_cons(cljs.core.chunk_first(xys__$1),cljs$core$cat(cljs.core.chunk_rest(xys__$1),zs__$1));
	} else {
	return cljs.core.cons(cljs.core.first(xys__$1),cljs$core$cat(cljs.core.rest(xys__$1),zs__$1));
	}
	} else {
	if(cljs.core.truth_(zs__$1)){
	return cljs$core$cat(cljs.core.first(zs__$1),cljs.core.next(zs__$1));
	} else {
	return null;
	}
	}
	}),null,null));
	});
	return cat(cljs.core.concat.cljs$core$IFn$_invoke$arity$2(x,y),zs);
	});

	cljs.core.concat.cljs$lang$applyTo = (function (seq2601){
	var G__2602 = cljs.core.first(seq2601);
	var seq2601__$1 = cljs.core.next(seq2601);
	var G__2603 = cljs.core.first(seq2601__$1);
	var seq2601__$2 = cljs.core.next(seq2601__$1);
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic(G__2602,G__2603,seq2601__$2);
	});

	cljs.core.concat.cljs$lang$maxFixedArity = (2);

	/**
	 * Creates a new list containing the items prepended to the rest, the
	 *   last of which will be treated as a sequence.
	 */
	cljs.core.list_STAR_ = (function cljs$core$list_STAR_(var_args){
	var args2616 = [];
	var len__6099__auto___2624 = arguments.length;
	var i__6100__auto___2625 = (0);
	while(true){
	if((i__6100__auto___2625 < len__6099__auto___2624)){
	args2616.push((arguments[i__6100__auto___2625]));

	var G__2626 = (i__6100__auto___2625 + (1));
	i__6100__auto___2625 = G__2626;
	continue;
	} else {
	}
	break;
	}

	var G__2623 = args2616.length;
	switch (G__2623) {
	case 1:
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2616.slice((4)),(0),null));
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__6118__auto__);

	}
	});

	cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1 = (function (args){
	return cljs.core.seq(args);
	});

	cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2 = (function (a,args){
	return cljs.core.cons(a,args);
	});

	cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3 = (function (a,b,args){
	return cljs.core.cons(a,cljs.core.cons(b,args));
	});

	cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4 = (function (a,b,c,args){
	return cljs.core.cons(a,cljs.core.cons(b,cljs.core.cons(c,args)));
	});

	cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic = (function (a,b,c,d,more){
	return cljs.core.cons(a,cljs.core.cons(b,cljs.core.cons(c,cljs.core.cons(d,cljs.core.spread(more)))));
	});

	cljs.core.list_STAR_.cljs$lang$applyTo = (function (seq2617){
	var G__2618 = cljs.core.first(seq2617);
	var seq2617__$1 = cljs.core.next(seq2617);
	var G__2619 = cljs.core.first(seq2617__$1);
	var seq2617__$2 = cljs.core.next(seq2617__$1);
	var G__2620 = cljs.core.first(seq2617__$2);
	var seq2617__$3 = cljs.core.next(seq2617__$2);
	var G__2621 = cljs.core.first(seq2617__$3);
	var seq2617__$4 = cljs.core.next(seq2617__$3);
	return cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$variadic(G__2618,G__2619,G__2620,G__2621,seq2617__$4);
	});

	cljs.core.list_STAR_.cljs$lang$maxFixedArity = (4);

	/**
	 * Returns a new, transient version of the collection, in constant time.
	 */
	cljs.core.transient$ = (function cljs$core$transient(coll){
	return cljs.core._as_transient(coll);
	});
	/**
	 * Returns a new, persistent version of the transient collection, in
	 *   constant time. The transient collection cannot be used after this
	 *   call, any such use will throw an exception.
	 */
	cljs.core.persistent_BANG_ = (function cljs$core$persistent_BANG_(tcoll){
	return cljs.core._persistent_BANG_(tcoll);
	});
	/**
	 * Adds val to the transient collection, and return tcoll. The 'addition'
	 *   may happen at different 'places' depending on the concrete type.
	 */
	cljs.core.conj_BANG_ = (function cljs$core$conj_BANG_(var_args){
	var args2628 = [];
	var len__6099__auto___2634 = arguments.length;
	var i__6100__auto___2635 = (0);
	while(true){
	if((i__6100__auto___2635 < len__6099__auto___2634)){
	args2628.push((arguments[i__6100__auto___2635]));

	var G__2636 = (i__6100__auto___2635 + (1));
	i__6100__auto___2635 = G__2636;
	continue;
	} else {
	}
	break;
	}

	var G__2633 = args2628.length;
	switch (G__2633) {
	case 0:
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2628.slice((2)),(0),null));
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.transient$(cljs.core.PersistentVector.EMPTY);
	});

	cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$1 = (function (tcoll){
	return tcoll;
	});

	cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (tcoll,val){
	return cljs.core._conj_BANG_(tcoll,val);
	});

	cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (tcoll,val,vals){
	while(true){
	var ntcoll = cljs.core._conj_BANG_(tcoll,val);
	if(cljs.core.truth_(vals)){
	var G__2638 = ntcoll;
	var G__2639 = cljs.core.first(vals);
	var G__2640 = cljs.core.next(vals);
	tcoll = G__2638;
	val = G__2639;
	vals = G__2640;
	continue;
	} else {
	return ntcoll;
	}
	break;
	}
	});

	cljs.core.conj_BANG_.cljs$lang$applyTo = (function (seq2629){
	var G__2630 = cljs.core.first(seq2629);
	var seq2629__$1 = cljs.core.next(seq2629);
	var G__2631 = cljs.core.first(seq2629__$1);
	var seq2629__$2 = cljs.core.next(seq2629__$1);
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__2630,G__2631,seq2629__$2);
	});

	cljs.core.conj_BANG_.cljs$lang$maxFixedArity = (2);

	/**
	 * When applied to a transient map, adds mapping of key(s) to
	 *   val(s). When applied to a transient vector, sets the val at index.
	 *   Note - index must be <= (count vector). Returns coll.
	 */
	cljs.core.assoc_BANG_ = (function cljs$core$assoc_BANG_(var_args){
	var args2641 = [];
	var len__6099__auto___2648 = arguments.length;
	var i__6100__auto___2649 = (0);
	while(true){
	if((i__6100__auto___2649 < len__6099__auto___2648)){
	args2641.push((arguments[i__6100__auto___2649]));

	var G__2650 = (i__6100__auto___2649 + (1));
	i__6100__auto___2649 = G__2650;
	continue;
	} else {
	}
	break;
	}

	var G__2647 = args2641.length;
	switch (G__2647) {
	case 3:
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2641.slice((3)),(0),null));
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (tcoll,key,val){
	return cljs.core._assoc_BANG_(tcoll,key,val);
	});

	cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (tcoll,key,val,kvs){
	while(true){
	var ntcoll = cljs.core._assoc_BANG_(tcoll,key,val);
	if(cljs.core.truth_(kvs)){
	var G__2652 = ntcoll;
	var G__2653 = cljs.core.first(kvs);
	var G__2654 = cljs.core.second(kvs);
	var G__2655 = cljs.core.nnext(kvs);
	tcoll = G__2652;
	key = G__2653;
	val = G__2654;
	kvs = G__2655;
	continue;
	} else {
	return ntcoll;
	}
	break;
	}
	});

	cljs.core.assoc_BANG_.cljs$lang$applyTo = (function (seq2642){
	var G__2643 = cljs.core.first(seq2642);
	var seq2642__$1 = cljs.core.next(seq2642);
	var G__2644 = cljs.core.first(seq2642__$1);
	var seq2642__$2 = cljs.core.next(seq2642__$1);
	var G__2645 = cljs.core.first(seq2642__$2);
	var seq2642__$3 = cljs.core.next(seq2642__$2);
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__2643,G__2644,G__2645,seq2642__$3);
	});

	cljs.core.assoc_BANG_.cljs$lang$maxFixedArity = (3);

	/**
	 * Returns a transient map that doesn't contain a mapping for key(s).
	 */
	cljs.core.dissoc_BANG_ = (function cljs$core$dissoc_BANG_(var_args){
	var args2656 = [];
	var len__6099__auto___2662 = arguments.length;
	var i__6100__auto___2663 = (0);
	while(true){
	if((i__6100__auto___2663 < len__6099__auto___2662)){
	args2656.push((arguments[i__6100__auto___2663]));

	var G__2664 = (i__6100__auto___2663 + (1));
	i__6100__auto___2663 = G__2664;
	continue;
	} else {
	}
	break;
	}

	var G__2661 = args2656.length;
	switch (G__2661) {
	case 2:
	return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2656.slice((2)),(0),null));
	return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (tcoll,key){
	return cljs.core._dissoc_BANG_(tcoll,key);
	});

	cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (tcoll,key,ks){
	while(true){
	var ntcoll = cljs.core._dissoc_BANG_(tcoll,key);
	if(cljs.core.truth_(ks)){
	var G__2666 = ntcoll;
	var G__2667 = cljs.core.first(ks);
	var G__2668 = cljs.core.next(ks);
	tcoll = G__2666;
	key = G__2667;
	ks = G__2668;
	continue;
	} else {
	return ntcoll;
	}
	break;
	}
	});

	cljs.core.dissoc_BANG_.cljs$lang$applyTo = (function (seq2657){
	var G__2658 = cljs.core.first(seq2657);
	var seq2657__$1 = cljs.core.next(seq2657);
	var G__2659 = cljs.core.first(seq2657__$1);
	var seq2657__$2 = cljs.core.next(seq2657__$1);
	return cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__2658,G__2659,seq2657__$2);
	});

	cljs.core.dissoc_BANG_.cljs$lang$maxFixedArity = (2);

	/**
	 * Removes the last item from a transient vector. If
	 *   the collection is empty, throws an exception. Returns tcoll
	 */
	cljs.core.pop_BANG_ = (function cljs$core$pop_BANG_(tcoll){
	return cljs.core._pop_BANG_(tcoll);
	});
	/**
	 * disj[oin]. Returns a transient set of the same (hashed/sorted) type, that
	 *   does not contain key(s).
	 */
	cljs.core.disj_BANG_ = (function cljs$core$disj_BANG_(var_args){
	var args2669 = [];
	var len__6099__auto___2675 = arguments.length;
	var i__6100__auto___2676 = (0);
	while(true){
	if((i__6100__auto___2676 < len__6099__auto___2675)){
	args2669.push((arguments[i__6100__auto___2676]));

	var G__2677 = (i__6100__auto___2676 + (1));
	i__6100__auto___2676 = G__2677;
	continue;
	} else {
	}
	break;
	}

	var G__2674 = args2669.length;
	switch (G__2674) {
	case 2:
	return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2669.slice((2)),(0),null));
	return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (tcoll,val){
	return cljs.core._disjoin_BANG_(tcoll,val);
	});

	cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (tcoll,val,vals){
	while(true){
	var ntcoll = cljs.core._disjoin_BANG_(tcoll,val);
	if(cljs.core.truth_(vals)){
	var G__2679 = ntcoll;
	var G__2680 = cljs.core.first(vals);
	var G__2681 = cljs.core.next(vals);
	tcoll = G__2679;
	val = G__2680;
	vals = G__2681;
	continue;
	} else {
	return ntcoll;
	}
	break;
	}
	});

	cljs.core.disj_BANG_.cljs$lang$applyTo = (function (seq2670){
	var G__2671 = cljs.core.first(seq2670);
	var seq2670__$1 = cljs.core.next(seq2670);
	var G__2672 = cljs.core.first(seq2670__$1);
	var seq2670__$2 = cljs.core.next(seq2670__$1);
	return cljs.core.disj_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__2671,G__2672,seq2670__$2);
	});

	cljs.core.disj_BANG_.cljs$lang$maxFixedArity = (2);


	cljs.core.apply_to = (function cljs$core$apply_to(f,argc,args){
	var args__$1 = cljs.core.seq(args);
	if((argc === (0))){
	return (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	} else {
	var a1596 = cljs.core._first(args__$1);
	var args__$2 = cljs.core._rest(args__$1);
	if((argc === (1))){
	if(f.cljs$core$IFn$_invoke$arity$1){
	return f.cljs$core$IFn$_invoke$arity$1(a1596);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(a1596) : f.call(null,a1596));
	}
	} else {
	var b1597 = cljs.core._first(args__$2);
	var args__$3 = cljs.core._rest(args__$2);
	if((argc === (2))){
	if(f.cljs$core$IFn$_invoke$arity$2){
	return f.cljs$core$IFn$_invoke$arity$2(a1596,b1597);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(a1596,b1597) : f.call(null,a1596,b1597));
	}
	} else {
	var c1598 = cljs.core._first(args__$3);
	var args__$4 = cljs.core._rest(args__$3);
	if((argc === (3))){
	if(f.cljs$core$IFn$_invoke$arity$3){
	return f.cljs$core$IFn$_invoke$arity$3(a1596,b1597,c1598);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(a1596,b1597,c1598) : f.call(null,a1596,b1597,c1598));
	}
	} else {
	var d1599 = cljs.core._first(args__$4);
	var args__$5 = cljs.core._rest(args__$4);
	if((argc === (4))){
	if(f.cljs$core$IFn$_invoke$arity$4){
	return f.cljs$core$IFn$_invoke$arity$4(a1596,b1597,c1598,d1599);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(a1596,b1597,c1598,d1599) : f.call(null,a1596,b1597,c1598,d1599));
	}
	} else {
	var e1600 = cljs.core._first(args__$5);
	var args__$6 = cljs.core._rest(args__$5);
	if((argc === (5))){
	if(f.cljs$core$IFn$_invoke$arity$5){
	return f.cljs$core$IFn$_invoke$arity$5(a1596,b1597,c1598,d1599,e1600);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(a1596,b1597,c1598,d1599,e1600) : f.call(null,a1596,b1597,c1598,d1599,e1600));
	}
	} else {
	var f1601 = cljs.core._first(args__$6);
	var args__$7 = cljs.core._rest(args__$6);
	if((argc === (6))){
	if(f.cljs$core$IFn$_invoke$arity$6){
	return f.cljs$core$IFn$_invoke$arity$6(a1596,b1597,c1598,d1599,e1600,f1601);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(a1596,b1597,c1598,d1599,e1600,f1601) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601));
	}
	} else {
	var g1602 = cljs.core._first(args__$7);
	var args__$8 = cljs.core._rest(args__$7);
	if((argc === (7))){
	if(f.cljs$core$IFn$_invoke$arity$7){
	return f.cljs$core$IFn$_invoke$arity$7(a1596,b1597,c1598,d1599,e1600,f1601,g1602);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$7 ? f.cljs$core$IFn$_invoke$arity$7(a1596,b1597,c1598,d1599,e1600,f1601,g1602) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602));
	}
	} else {
	var h1603 = cljs.core._first(args__$8);
	var args__$9 = cljs.core._rest(args__$8);
	if((argc === (8))){
	if(f.cljs$core$IFn$_invoke$arity$8){
	return f.cljs$core$IFn$_invoke$arity$8(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$8 ? f.cljs$core$IFn$_invoke$arity$8(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603));
	}
	} else {
	var i1604 = cljs.core._first(args__$9);
	var args__$10 = cljs.core._rest(args__$9);
	if((argc === (9))){
	if(f.cljs$core$IFn$_invoke$arity$9){
	return f.cljs$core$IFn$_invoke$arity$9(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$9 ? f.cljs$core$IFn$_invoke$arity$9(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604));
	}
	} else {
	var j1605 = cljs.core._first(args__$10);
	var args__$11 = cljs.core._rest(args__$10);
	if((argc === (10))){
	if(f.cljs$core$IFn$_invoke$arity$10){
	return f.cljs$core$IFn$_invoke$arity$10(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$10 ? f.cljs$core$IFn$_invoke$arity$10(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605));
	}
	} else {
	var k1606 = cljs.core._first(args__$11);
	var args__$12 = cljs.core._rest(args__$11);
	if((argc === (11))){
	if(f.cljs$core$IFn$_invoke$arity$11){
	return f.cljs$core$IFn$_invoke$arity$11(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$11 ? f.cljs$core$IFn$_invoke$arity$11(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606));
	}
	} else {
	var l1607 = cljs.core._first(args__$12);
	var args__$13 = cljs.core._rest(args__$12);
	if((argc === (12))){
	if(f.cljs$core$IFn$_invoke$arity$12){
	return f.cljs$core$IFn$_invoke$arity$12(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$12 ? f.cljs$core$IFn$_invoke$arity$12(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607));
	}
	} else {
	var m1608 = cljs.core._first(args__$13);
	var args__$14 = cljs.core._rest(args__$13);
	if((argc === (13))){
	if(f.cljs$core$IFn$_invoke$arity$13){
	return f.cljs$core$IFn$_invoke$arity$13(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$13 ? f.cljs$core$IFn$_invoke$arity$13(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608));
	}
	} else {
	var n1609 = cljs.core._first(args__$14);
	var args__$15 = cljs.core._rest(args__$14);
	if((argc === (14))){
	if(f.cljs$core$IFn$_invoke$arity$14){
	return f.cljs$core$IFn$_invoke$arity$14(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$14 ? f.cljs$core$IFn$_invoke$arity$14(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609));
	}
	} else {
	var o1610 = cljs.core._first(args__$15);
	var args__$16 = cljs.core._rest(args__$15);
	if((argc === (15))){
	if(f.cljs$core$IFn$_invoke$arity$15){
	return f.cljs$core$IFn$_invoke$arity$15(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$15 ? f.cljs$core$IFn$_invoke$arity$15(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610));
	}
	} else {
	var p1611 = cljs.core._first(args__$16);
	var args__$17 = cljs.core._rest(args__$16);
	if((argc === (16))){
	if(f.cljs$core$IFn$_invoke$arity$16){
	return f.cljs$core$IFn$_invoke$arity$16(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$16 ? f.cljs$core$IFn$_invoke$arity$16(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611));
	}
	} else {
	var q1612 = cljs.core._first(args__$17);
	var args__$18 = cljs.core._rest(args__$17);
	if((argc === (17))){
	if(f.cljs$core$IFn$_invoke$arity$17){
	return f.cljs$core$IFn$_invoke$arity$17(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$17 ? f.cljs$core$IFn$_invoke$arity$17(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612));
	}
	} else {
	var r1613 = cljs.core._first(args__$18);
	var args__$19 = cljs.core._rest(args__$18);
	if((argc === (18))){
	if(f.cljs$core$IFn$_invoke$arity$18){
	return f.cljs$core$IFn$_invoke$arity$18(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$18 ? f.cljs$core$IFn$_invoke$arity$18(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613));
	}
	} else {
	var s1614 = cljs.core._first(args__$19);
	var args__$20 = cljs.core._rest(args__$19);
	if((argc === (19))){
	if(f.cljs$core$IFn$_invoke$arity$19){
	return f.cljs$core$IFn$_invoke$arity$19(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$19 ? f.cljs$core$IFn$_invoke$arity$19(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614));
	}
	} else {
	var t1615 = cljs.core._first(args__$20);
	var args__$21 = cljs.core._rest(args__$20);
	if((argc === (20))){
	if(f.cljs$core$IFn$_invoke$arity$20){
	return f.cljs$core$IFn$_invoke$arity$20(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614,t1615);
	} else {
	return (f.cljs$core$IFn$_invoke$arity$20 ? f.cljs$core$IFn$_invoke$arity$20(a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614,t1615) : f.call(null,a1596,b1597,c1598,d1599,e1600,f1601,g1602,h1603,i1604,j1605,k1606,l1607,m1608,n1609,o1610,p1611,q1612,r1613,s1614,t1615));
	}
	} else {
	throw (new Error("Only up to 20 arguments supported on functions"));
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	}
	});

	/**
	 * Applies fn f to the argument list formed by prepending intervening arguments to args.
	 */
	cljs.core.apply = (function cljs$core$apply(var_args){
	var args2682 = [];
	var len__6099__auto___2691 = arguments.length;
	var i__6100__auto___2692 = (0);
	while(true){
	if((i__6100__auto___2692 < len__6099__auto___2691)){
	args2682.push((arguments[i__6100__auto___2692]));

	var G__2693 = (i__6100__auto___2692 + (1));
	i__6100__auto___2692 = G__2693;
	continue;
	} else {
	}
	break;
	}

	var G__2690 = args2682.length;
	switch (G__2690) {
	case 2:
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2682.slice((5)),(0),null));
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),argseq__6118__auto__);

	}
	});

	cljs.core.apply.cljs$core$IFn$_invoke$arity$2 = (function (f,args){
	var fixed_arity = f.cljs$lang$maxFixedArity;
	if(f.cljs$lang$applyTo){
	var bc = cljs.core.bounded_count((fixed_arity + (1)),args);
	if((bc <= fixed_arity)){
	return cljs.core.apply_to(f,bc,args);
	} else {
	return f.cljs$lang$applyTo(args);
	}
	} else {
	return f.apply(f,cljs.core.to_array(args));
	}
	});

	cljs.core.apply.cljs$core$IFn$_invoke$arity$3 = (function (f,x,args){
	var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$2(x,args);
	var fixed_arity = f.cljs$lang$maxFixedArity;
	if(f.cljs$lang$applyTo){
	var bc = cljs.core.bounded_count((fixed_arity + (1)),arglist);
	if((bc <= fixed_arity)){
	return cljs.core.apply_to(f,bc,arglist);
	} else {
	return f.cljs$lang$applyTo(arglist);
	}
	} else {
	return f.apply(f,cljs.core.to_array(arglist));
	}
	});

	cljs.core.apply.cljs$core$IFn$_invoke$arity$4 = (function (f,x,y,args){
	var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3(x,y,args);
	var fixed_arity = f.cljs$lang$maxFixedArity;
	if(f.cljs$lang$applyTo){
	var bc = cljs.core.bounded_count((fixed_arity + (1)),arglist);
	if((bc <= fixed_arity)){
	return cljs.core.apply_to(f,bc,arglist);
	} else {
	return f.cljs$lang$applyTo(arglist);
	}
	} else {
	return f.apply(f,cljs.core.to_array(arglist));
	}
	});

	cljs.core.apply.cljs$core$IFn$_invoke$arity$5 = (function (f,x,y,z,args){
	var arglist = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(x,y,z,args);
	var fixed_arity = f.cljs$lang$maxFixedArity;
	if(f.cljs$lang$applyTo){
	var bc = cljs.core.bounded_count((fixed_arity + (1)),arglist);
	if((bc <= fixed_arity)){
	return cljs.core.apply_to(f,bc,arglist);
	} else {
	return f.cljs$lang$applyTo(arglist);
	}
	} else {
	return f.apply(f,cljs.core.to_array(arglist));
	}
	});

	cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic = (function (f,a,b,c,d,args){
	var arglist = cljs.core.cons(a,cljs.core.cons(b,cljs.core.cons(c,cljs.core.cons(d,cljs.core.spread(args)))));
	var fixed_arity = f.cljs$lang$maxFixedArity;
	if(f.cljs$lang$applyTo){
	var bc = cljs.core.bounded_count((fixed_arity + (1)),arglist);
	if((bc <= fixed_arity)){
	return cljs.core.apply_to(f,bc,arglist);
	} else {
	return f.cljs$lang$applyTo(arglist);
	}
	} else {
	return f.apply(f,cljs.core.to_array(arglist));
	}
	});

	cljs.core.apply.cljs$lang$applyTo = (function (seq2683){
	var G__2684 = cljs.core.first(seq2683);
	var seq2683__$1 = cljs.core.next(seq2683);
	var G__2685 = cljs.core.first(seq2683__$1);
	var seq2683__$2 = cljs.core.next(seq2683__$1);
	var G__2686 = cljs.core.first(seq2683__$2);
	var seq2683__$3 = cljs.core.next(seq2683__$2);
	var G__2687 = cljs.core.first(seq2683__$3);
	var seq2683__$4 = cljs.core.next(seq2683__$3);
	var G__2688 = cljs.core.first(seq2683__$4);
	var seq2683__$5 = cljs.core.next(seq2683__$4);
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(G__2684,G__2685,G__2686,G__2687,G__2688,seq2683__$5);
	});

	cljs.core.apply.cljs$lang$maxFixedArity = (5);

	/**
	 * Returns an object of the same type and value as obj, with
	 *   (apply f (meta obj) args) as its metadata.
	 */
	cljs.core.vary_meta = (function cljs$core$vary_meta(var_args){
	var args2695 = [];
	var len__6099__auto___2720 = arguments.length;
	var i__6100__auto___2721 = (0);
	while(true){
	if((i__6100__auto___2721 < len__6099__auto___2720)){
	args2695.push((arguments[i__6100__auto___2721]));

	var G__2722 = (i__6100__auto___2721 + (1));
	i__6100__auto___2721 = G__2722;
	continue;
	} else {
	}
	break;
	}

	var G__2704 = args2695.length;
	switch (G__2704) {
	case 2:
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	case 6:
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2695.slice((6)),(0),null));
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),argseq__6118__auto__);

	}
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$2 = (function (obj,f){
	return cljs.core.with_meta(obj,(function (){var G__2705 = cljs.core.meta(obj);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2705) : f.call(null,G__2705));
	})());
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$3 = (function (obj,f,a){
	return cljs.core.with_meta(obj,(function (){var G__2706 = cljs.core.meta(obj);
	var G__2707 = a;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2706,G__2707) : f.call(null,G__2706,G__2707));
	})());
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4 = (function (obj,f,a,b){
	return cljs.core.with_meta(obj,(function (){var G__2708 = cljs.core.meta(obj);
	var G__2709 = a;
	var G__2710 = b;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__2708,G__2709,G__2710) : f.call(null,G__2708,G__2709,G__2710));
	})());
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$5 = (function (obj,f,a,b,c){
	return cljs.core.with_meta(obj,(function (){var G__2711 = cljs.core.meta(obj);
	var G__2712 = a;
	var G__2713 = b;
	var G__2714 = c;
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__2711,G__2712,G__2713,G__2714) : f.call(null,G__2711,G__2712,G__2713,G__2714));
	})());
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$6 = (function (obj,f,a,b,c,d){
	return cljs.core.with_meta(obj,(function (){var G__2715 = cljs.core.meta(obj);
	var G__2716 = a;
	var G__2717 = b;
	var G__2718 = c;
	var G__2719 = d;
	return (f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(G__2715,G__2716,G__2717,G__2718,G__2719) : f.call(null,G__2715,G__2716,G__2717,G__2718,G__2719));
	})());
	});

	cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic = (function (obj,f,a,b,c,d,args){
	return cljs.core.with_meta(obj,cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,cljs.core.meta(obj),a,b,c,cljs.core.array_seq([d,args], 0)));
	});

	cljs.core.vary_meta.cljs$lang$applyTo = (function (seq2696){
	var G__2697 = cljs.core.first(seq2696);
	var seq2696__$1 = cljs.core.next(seq2696);
	var G__2698 = cljs.core.first(seq2696__$1);
	var seq2696__$2 = cljs.core.next(seq2696__$1);
	var G__2699 = cljs.core.first(seq2696__$2);
	var seq2696__$3 = cljs.core.next(seq2696__$2);
	var G__2700 = cljs.core.first(seq2696__$3);
	var seq2696__$4 = cljs.core.next(seq2696__$3);
	var G__2701 = cljs.core.first(seq2696__$4);
	var seq2696__$5 = cljs.core.next(seq2696__$4);
	var G__2702 = cljs.core.first(seq2696__$5);
	var seq2696__$6 = cljs.core.next(seq2696__$5);
	return cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$variadic(G__2697,G__2698,G__2699,G__2700,G__2701,G__2702,seq2696__$6);
	});

	cljs.core.vary_meta.cljs$lang$maxFixedArity = (6);

	/**
	 * Same as (not (= obj1 obj2))
	 */
	cljs.core.not_EQ_ = (function cljs$core$not_EQ_(var_args){
	var args2724 = [];
	var len__6099__auto___2730 = arguments.length;
	var i__6100__auto___2731 = (0);
	while(true){
	if((i__6100__auto___2731 < len__6099__auto___2730)){
	args2724.push((arguments[i__6100__auto___2731]));

	var G__2732 = (i__6100__auto___2731 + (1));
	i__6100__auto___2731 = G__2732;
	continue;
	} else {
	}
	break;
	}

	var G__2729 = args2724.length;
	switch (G__2729) {
	case 1:
	return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2724.slice((2)),(0),null));
	return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return false;
	});

	cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2 = (function (x,y){
	return !(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y));
	});

	cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic = (function (x,y,more){
	return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core._EQ_,x,y,more));
	});

	cljs.core.not_EQ_.cljs$lang$applyTo = (function (seq2725){
	var G__2726 = cljs.core.first(seq2725);
	var seq2725__$1 = cljs.core.next(seq2725);
	var G__2727 = cljs.core.first(seq2725__$1);
	var seq2725__$2 = cljs.core.next(seq2725__$1);
	return cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$variadic(G__2726,G__2727,seq2725__$2);
	});

	cljs.core.not_EQ_.cljs$lang$maxFixedArity = (2);

	/**
	 * If coll is empty, returns nil, else coll
	 */
	cljs.core.not_empty = (function cljs$core$not_empty(coll){
	if(cljs.core.seq(coll)){
	return coll;
	} else {
	return null;
	}
	});
	cljs.core.nil_iter = (function cljs$core$nil_iter(){
	if(typeof cljs.core.t_cljs$core2737 !== 'undefined'){
	} else {

	/**
	* @constructor
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.t_cljs$core2737 = (function (meta2738){
	this.meta2738 = meta2738;
	this.cljs$lang$protocol_mask$partition0$ = 393216;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.t_cljs$core2737.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (_2739,meta2738__$1){
	var self__ = this;
	var _2739__$1 = this;
	return (new cljs.core.t_cljs$core2737(meta2738__$1));
	});

	cljs.core.t_cljs$core2737.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_2739){
	var self__ = this;
	var _2739__$1 = this;
	return self__.meta2738;
	});

	cljs.core.t_cljs$core2737.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return false;
	});

	cljs.core.t_cljs$core2737.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("No such element"));
	});

	cljs.core.t_cljs$core2737.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.t_cljs$core2737.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta2738], null);
	});

	cljs.core.t_cljs$core2737.cljs$lang$type = true;

	cljs.core.t_cljs$core2737.cljs$lang$ctorStr = "cljs.core/t_cljs$core2737";

	cljs.core.t_cljs$core2737.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/t_cljs$core2737");
	});

	cljs.core.__GT_t_cljs$core2737 = (function cljs$core$nil_iter_$___GT_t_cljs$core2737(meta2738){
	return (new cljs.core.t_cljs$core2737(meta2738));
	});

	}

	return (new cljs.core.t_cljs$core2737(cljs.core.PersistentArrayMap.EMPTY));
	});

	/**
	* @constructor
	*/
	cljs.core.StringIter = (function (s,i){
	this.s = s;
	this.i = i;
	})
	cljs.core.StringIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return (self__.i < self__.s.length);
	});

	cljs.core.StringIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var ret = self__.s.charAt(self__.i);
	self__.i = (self__.i + (1));

	return ret;
	});

	cljs.core.StringIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.StringIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.StringIter.cljs$lang$type = true;

	cljs.core.StringIter.cljs$lang$ctorStr = "cljs.core/StringIter";

	cljs.core.StringIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/StringIter");
	});

	cljs.core.__GT_StringIter = (function cljs$core$__GT_StringIter(s,i){
	return (new cljs.core.StringIter(s,i));
	});

	cljs.core.string_iter = (function cljs$core$string_iter(x){
	return (new cljs.core.StringIter(x,(0)));
	});

	/**
	* @constructor
	*/
	cljs.core.ArrayIter = (function (arr,i){
	this.arr = arr;
	this.i = i;
	})
	cljs.core.ArrayIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return (self__.i < self__.arr.length);
	});

	cljs.core.ArrayIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var ret = (self__.arr[self__.i]);
	self__.i = (self__.i + (1));

	return ret;
	});

	cljs.core.ArrayIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.ArrayIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ArrayIter.cljs$lang$type = true;

	cljs.core.ArrayIter.cljs$lang$ctorStr = "cljs.core/ArrayIter";

	cljs.core.ArrayIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayIter");
	});

	cljs.core.__GT_ArrayIter = (function cljs$core$__GT_ArrayIter(arr,i){
	return (new cljs.core.ArrayIter(arr,i));
	});

	cljs.core.array_iter = (function cljs$core$array_iter(x){
	return (new cljs.core.ArrayIter(x,(0)));
	});
	cljs.core.INIT = ({});
	cljs.core.START = ({});

	/**
	* @constructor
	*/
	cljs.core.SeqIter = (function (_seq,_next){
	this._seq = _seq;
	this._next = _next;
	})
	cljs.core.SeqIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	if((self__._seq === cljs.core.INIT)){
	self__._seq = cljs.core.START;

	self__._next = cljs.core.seq(self__._next);
	} else {
	if((self__._seq === self__._next)){
	self__._next = cljs.core.next(self__._seq);
	} else {
	}
	}

	return !((self__._next == null));
	});

	cljs.core.SeqIter.prototype.next = (function (){
	var self__ = this;
	var this$ = this;
	if(!(this$.hasNext())){
	throw (new Error("No such element"));
	} else {
	self__._seq = self__._next;

	return cljs.core.first(self__._next);
	}
	});

	cljs.core.SeqIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.SeqIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$_seq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$_next,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.SeqIter.cljs$lang$type = true;

	cljs.core.SeqIter.cljs$lang$ctorStr = "cljs.core/SeqIter";

	cljs.core.SeqIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/SeqIter");
	});

	cljs.core.__GT_SeqIter = (function cljs$core$__GT_SeqIter(_seq,_next){
	return (new cljs.core.SeqIter(_seq,_next));
	});

	cljs.core.seq_iter = (function cljs$core$seq_iter(coll){
	return (new cljs.core.SeqIter(cljs.core.INIT,coll));
	});
	cljs.core.iter = (function cljs$core$iter(coll){
	if((coll == null)){
	return cljs.core.nil_iter();
	} else {
	if(typeof coll === 'string'){
	return cljs.core.string_iter(coll);
	} else {
	if(cljs.core.array_QMARK_(coll)){
	return cljs.core.array_iter(coll);
	} else {
	if(cljs.core.iterable_QMARK_(coll)){
	return cljs.core._iterator(coll);
	} else {
	if(cljs.core.seqable_QMARK_(coll)){
	return cljs.core.seq_iter(coll);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot create iterator from "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll)].join('')));

	}
	}
	}
	}
	}
	});
	cljs.core.lazy_transformer = (function cljs$core$lazy_transformer(stepper){
	return (new cljs.core.LazyTransformer(stepper,null,null,null));
	});

	/**
	* @constructor
	*/
	cljs.core.Stepper = (function (xform,iter){
	this.xform = xform;
	this.iter = iter;
	})
	cljs.core.Stepper.prototype.step = (function (lt){
	var self__ = this;
	var this$ = this;
	while(true){
	if(cljs.core.truth_((function (){var and__5442__auto__ = !((lt.stepper == null));
	if(and__5442__auto__){
	return self__.iter.hasNext();
	} else {
	return and__5442__auto__;
	}
	})())){
	if(cljs.core.reduced_QMARK_((function (){var G__2740 = lt;
	var G__2741 = self__.iter.next();
	return (self__.xform.cljs$core$IFn$_invoke$arity$2 ? self__.xform.cljs$core$IFn$_invoke$arity$2(G__2740,G__2741) : self__.xform.call(null,G__2740,G__2741));
	})())){
	if((lt.rest == null)){
	} else {
	lt.rest.stepper = null;
	}
	} else {
	continue;
	}
	} else {
	}
	break;
	}

	if((lt.stepper == null)){
	return null;
	} else {
	return (self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null,lt));
	}
	});

	cljs.core.Stepper.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iter], null);
	});

	cljs.core.Stepper.cljs$lang$type = true;

	cljs.core.Stepper.cljs$lang$ctorStr = "cljs.core/Stepper";

	cljs.core.Stepper.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Stepper");
	});

	cljs.core.__GT_Stepper = (function cljs$core$__GT_Stepper(xform,iter){
	return (new cljs.core.Stepper(xform,iter));
	});

	cljs.core.stepper = (function cljs$core$stepper(xform,iter){
	var stepfn = (function() {
	var cljs$core$stepper_$_stepfn = null;
	var cljs$core$stepper_$_stepfn__1 = (function (result){
	var lt = ((cljs.core.reduced_QMARK_(result))?cljs.core.deref(result):result);
	lt.stepper = null;

	return result;
	});
	var cljs$core$stepper_$_stepfn__2 = (function (result,input){
	var lt = result;
	lt.first = input;

	lt.rest = cljs.core.lazy_transformer(lt.stepper);

	lt.stepper = null;

	return lt.rest;
	});
	cljs$core$stepper_$_stepfn = function(result,input){
	switch(arguments.length){
	case 1:
	return cljs$core$stepper_$_stepfn__1.call(this,result);
	case 2:
	return cljs$core$stepper_$_stepfn__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepper_$_stepfn__1;
	cljs$core$stepper_$_stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepper_$_stepfn__2;
	return cljs$core$stepper_$_stepfn;
	})()
	;
	return (new cljs.core.Stepper((xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null,stepfn)),iter));
	});

	/**
	* @constructor
	*/
	cljs.core.MultiStepper = (function (xform,iters,nexts){
	this.xform = xform;
	this.iters = iters;
	this.nexts = nexts;
	})
	cljs.core.MultiStepper.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	var iters__$1 = cljs.core.seq(self__.iters);
	while(true){
	if(!((iters__$1 == null))){
	var iter = cljs.core.first(iters__$1);
	if(!(iter.hasNext())){
	return false;
	} else {
	var G__2742 = cljs.core.next(iters__$1);
	iters__$1 = G__2742;
	continue;
	}
	} else {
	return true;
	}
	break;
	}
	});

	cljs.core.MultiStepper.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var n__5991__auto___2743 = self__.iters.length;
	var i_2744 = (0);
	while(true){
	if((i_2744 < n__5991__auto___2743)){
	(self__.nexts[i_2744] = (self__.iters[i_2744]).next());

	var G__2745 = (i_2744 + (1));
	i_2744 = G__2745;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2(self__.nexts,(0));
	});

	cljs.core.MultiStepper.prototype.step = (function (lt){
	var self__ = this;
	var this$ = this;
	while(true){
	if(cljs.core.truth_((function (){var and__5442__auto__ = !((lt.stepper == null));
	if(and__5442__auto__){
	return this$.hasNext();
	} else {
	return and__5442__auto__;
	}
	})())){
	if(cljs.core.reduced_QMARK_(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(self__.xform,cljs.core.cons(lt,this$.next())))){
	if((lt.rest == null)){
	} else {
	lt.rest.stepper = null;
	}
	} else {
	continue;
	}
	} else {
	}
	break;
	}

	if((lt.stepper == null)){
	return null;
	} else {
	return (self__.xform.cljs$core$IFn$_invoke$arity$1 ? self__.xform.cljs$core$IFn$_invoke$arity$1(lt) : self__.xform.call(null,lt));
	}
	});

	cljs.core.MultiStepper.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$iters,cljs.core.cst$sym$nexts], null);
	});

	cljs.core.MultiStepper.cljs$lang$type = true;

	cljs.core.MultiStepper.cljs$lang$ctorStr = "cljs.core/MultiStepper";

	cljs.core.MultiStepper.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/MultiStepper");
	});

	cljs.core.__GT_MultiStepper = (function cljs$core$__GT_MultiStepper(xform,iters,nexts){
	return (new cljs.core.MultiStepper(xform,iters,nexts));
	});

	cljs.core.multi_stepper = (function cljs$core$multi_stepper(var_args){
	var args2746 = [];
	var len__6099__auto___2749 = arguments.length;
	var i__6100__auto___2750 = (0);
	while(true){
	if((i__6100__auto___2750 < len__6099__auto___2749)){
	args2746.push((arguments[i__6100__auto___2750]));

	var G__2751 = (i__6100__auto___2750 + (1));
	i__6100__auto___2750 = G__2751;
	continue;
	} else {
	}
	break;
	}

	var G__2748 = args2746.length;
	switch (G__2748) {
	case 2:
	return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2746.length)].join('')));

	}
	});

	cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$2 = (function (xform,iters){
	return cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform,iters,(new Array(iters.length)));
	});

	cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3 = (function (xform,iters,nexts){
	var stepfn = (function() {
	var cljs$core$stepfn = null;
	var cljs$core$stepfn__1 = (function (result){
	var lt = ((cljs.core.reduced_QMARK_(result))?cljs.core.deref(result):result);
	lt.stepper = null;

	return lt;
	});
	var cljs$core$stepfn__2 = (function (result,input){
	var lt = result;
	lt.first = input;

	lt.rest = cljs.core.lazy_transformer(lt.stepper);

	lt.stepper = null;

	return lt.rest;
	});
	cljs$core$stepfn = function(result,input){
	switch(arguments.length){
	case 1:
	return cljs$core$stepfn__1.call(this,result);
	case 2:
	return cljs$core$stepfn__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$stepfn.cljs$core$IFn$_invoke$arity$1 = cljs$core$stepfn__1;
	cljs$core$stepfn.cljs$core$IFn$_invoke$arity$2 = cljs$core$stepfn__2;
	return cljs$core$stepfn;
	})()
	;
	return (new cljs.core.MultiStepper((xform.cljs$core$IFn$_invoke$arity$1 ? xform.cljs$core$IFn$_invoke$arity$1(stepfn) : xform.call(null,stepfn)),iters,nexts));
	});

	cljs.core.multi_stepper.cljs$lang$maxFixedArity = 3;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IPending}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.LazyTransformer = (function (stepper,first,rest,meta){
	this.stepper = stepper;
	this.first = first;
	this.rest = rest;
	this.meta = meta;
	this.cljs$lang$protocol_mask$partition0$ = 31850700;
	this.cljs$lang$protocol_mask$partition1$ = 1;
	})
	cljs.core.LazyTransformer.prototype.indexOf = (function() {
	var G__2753 = null;
	var G__2753__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__2753__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2753 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2753__1.call(this,x);
	case 2:
	return G__2753__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2753.cljs$core$IFn$_invoke$arity$1 = G__2753__1;
	G__2753.cljs$core$IFn$_invoke$arity$2 = G__2753__2;
	return G__2753;
	})()
	;

	cljs.core.LazyTransformer.prototype.lastIndexOf = (function() {
	var G__2754 = null;
	var G__2754__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__2754__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__2754 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__2754__1.call(this,x);
	case 2:
	return G__2754__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2754.cljs$core$IFn$_invoke$arity$1 = G__2754__1;
	G__2754.cljs$core$IFn$_invoke$arity$2 = G__2754__2;
	return G__2754;
	})()
	;

	cljs.core.LazyTransformer.prototype.cljs$core$IMeta$_meta$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return self__.meta;
	});

	cljs.core.LazyTransformer.prototype.cljs$core$INext$_next$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.stepper == null)){
	} else {
	this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
	}

	if((self__.rest == null)){
	return null;
	} else {
	return cljs.core._seq(self__.rest);
	}
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.hash_ordered_coll(this$__$1);
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){
	var self__ = this;
	var this$__$1 = this;
	var s = this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
	if(!((s == null))){
	return cljs.core.equiv_sequential(this$__$1,other);
	} else {
	return (cljs.core.sequential_QMARK_(other)) && ((cljs.core.seq(other) == null));
	}
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.List.EMPTY;
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (self__.stepper == null);
	});

	cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_first$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.stepper == null)){
	} else {
	this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
	}

	if((self__.rest == null)){
	return null;
	} else {
	return self__.first;
	}
	});

	cljs.core.LazyTransformer.prototype.cljs$core$ISeq$_rest$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.stepper == null)){
	} else {
	this$__$1.cljs$core$ISeqable$_seq$arity$1(null);
	}

	if((self__.rest == null)){
	return cljs.core.List.EMPTY;
	} else {
	return self__.rest;
	}
	});

	cljs.core.LazyTransformer.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.stepper == null)){
	} else {
	self__.stepper.step(this$__$1);
	}

	if((self__.rest == null)){
	return null;
	} else {
	return this$__$1;
	}
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (this$,new_meta){
	var self__ = this;
	var this$__$1 = this;
	return (new cljs.core.LazyTransformer(self__.stepper,self__.first,self__.rest,new_meta));
	});

	cljs.core.LazyTransformer.prototype.cljs$core$ICollection$_conj$arity$2 = (function (this$,o){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.cons(o,this$__$1.cljs$core$ISeqable$_seq$arity$1(null));
	});

	cljs.core.LazyTransformer.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$stepper,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$first,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$rest,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$meta], null);
	});

	cljs.core.LazyTransformer.cljs$lang$type = true;

	cljs.core.LazyTransformer.cljs$lang$ctorStr = "cljs.core/LazyTransformer";

	cljs.core.LazyTransformer.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/LazyTransformer");
	});

	cljs.core.__GT_LazyTransformer = (function cljs$core$__GT_LazyTransformer(stepper,first,rest,meta){
	return (new cljs.core.LazyTransformer(stepper,first,rest,meta));
	});

	(cljs.core.LazyTransformer.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.LazyTransformer.create = (function (xform,coll){
	return (new cljs.core.LazyTransformer(cljs.core.stepper(xform,cljs.core.iter(coll)),null,null,null));
	});
	cljs.core.LazyTransformer.createMulti = (function (xform,colls){
	var iters = [];
	var seq__2755_2759 = cljs.core.seq(colls);
	var chunk__2756_2760 = null;
	var count__2757_2761 = (0);
	var i__2758_2762 = (0);
	while(true){
	if((i__2758_2762 < count__2757_2761)){
	var coll_2763 = chunk__2756_2760.cljs$core$IIndexed$_nth$arity$2(null,i__2758_2762);
	iters.push(cljs.core.iter(coll_2763));

	var G__2764 = seq__2755_2759;
	var G__2765 = chunk__2756_2760;
	var G__2766 = count__2757_2761;
	var G__2767 = (i__2758_2762 + (1));
	seq__2755_2759 = G__2764;
	chunk__2756_2760 = G__2765;
	count__2757_2761 = G__2766;
	i__2758_2762 = G__2767;
	continue;
	} else {
	var temp__6738__auto___2768 = cljs.core.seq(seq__2755_2759);
	if(temp__6738__auto___2768){
	var seq__2755_2769__$1 = temp__6738__auto___2768;
	if(cljs.core.chunked_seq_QMARK_(seq__2755_2769__$1)){
	var c__5929__auto___2770 = cljs.core.chunk_first(seq__2755_2769__$1);
	var G__2771 = cljs.core.chunk_rest(seq__2755_2769__$1);
	var G__2772 = c__5929__auto___2770;
	var G__2773 = cljs.core.count(c__5929__auto___2770);
	var G__2774 = (0);
	seq__2755_2759 = G__2771;
	chunk__2756_2760 = G__2772;
	count__2757_2761 = G__2773;
	i__2758_2762 = G__2774;
	continue;
	} else {
	var coll_2775 = cljs.core.first(seq__2755_2769__$1);
	iters.push(cljs.core.iter(coll_2775));

	var G__2776 = cljs.core.next(seq__2755_2769__$1);
	var G__2777 = null;
	var G__2778 = (0);
	var G__2779 = (0);
	seq__2755_2759 = G__2776;
	chunk__2756_2760 = G__2777;
	count__2757_2761 = G__2778;
	i__2758_2762 = G__2779;
	continue;
	}
	} else {
	}
	}
	break;
	}

	return (new cljs.core.LazyTransformer(cljs.core.multi_stepper.cljs$core$IFn$_invoke$arity$3(xform,iters,(new Array(iters.length))),null,null,null));
	});
	/**
	 * Coerces coll to a (possibly empty) sequence, if it is not already
	 *   one. Will not force a lazy seq. (sequence nil) yields (), When a
	 *   transducer is supplied, returns a lazy sequence of applications of
	 *   the transform to the items in coll(s), i.e. to the set of first
	 *   items of each coll, followed by the set of second
	 *   items in each coll, until any one of the colls is exhausted.  Any
	 *   remaining items in other colls are ignored. The transform should accept
	 *   number-of-colls arguments
	 */
	cljs.core.sequence = (function cljs$core$sequence(var_args){
	var args2780 = [];
	var len__6099__auto___2786 = arguments.length;
	var i__6100__auto___2787 = (0);
	while(true){
	if((i__6100__auto___2787 < len__6099__auto___2786)){
	args2780.push((arguments[i__6100__auto___2787]));

	var G__2788 = (i__6100__auto___2787 + (1));
	i__6100__auto___2787 = G__2788;
	continue;
	} else {
	}
	break;
	}

	var G__2785 = args2780.length;
	switch (G__2785) {
	case 1:
	return cljs.core.sequence.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2780.slice((2)),(0),null));
	return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.sequence.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	if(cljs.core.seq_QMARK_(coll)){
	return coll;
	} else {
	var or__5450__auto__ = cljs.core.seq(coll);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return cljs.core.List.EMPTY;
	}
	}
	});

	cljs.core.sequence.cljs$core$IFn$_invoke$arity$2 = (function (xform,coll){
	return cljs.core.LazyTransformer.create(xform,coll);
	});

	cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic = (function (xform,coll,colls){
	return cljs.core.LazyTransformer.createMulti(xform,cljs.core.to_array(cljs.core.cons(coll,colls)));
	});

	cljs.core.sequence.cljs$lang$applyTo = (function (seq2781){
	var G__2782 = cljs.core.first(seq2781);
	var seq2781__$1 = cljs.core.next(seq2781);
	var G__2783 = cljs.core.first(seq2781__$1);
	var seq2781__$2 = cljs.core.next(seq2781__$1);
	return cljs.core.sequence.cljs$core$IFn$_invoke$arity$variadic(G__2782,G__2783,seq2781__$2);
	});

	cljs.core.sequence.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns true if (pred x) is logical true for every x in coll, else
	 *   false.
	 */
	cljs.core.every_QMARK_ = (function cljs$core$every_QMARK_(pred,coll){
	while(true){
	if((cljs.core.seq(coll) == null)){
	return true;
	} else {
	if(cljs.core.truth_((function (){var G__2791 = cljs.core.first(coll);
	return (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__2791) : pred.call(null,G__2791));
	})())){
	var G__2792 = pred;
	var G__2793 = cljs.core.next(coll);
	pred = G__2792;
	coll = G__2793;
	continue;
	} else {
	return false;

	}
	}
	break;
	}
	});
	/**
	 * Returns false if (pred x) is logical true for every x in
	 *   coll, else true.
	 */
	cljs.core.not_every_QMARK_ = (function cljs$core$not_every_QMARK_(pred,coll){
	return !(cljs.core.every_QMARK_(pred,coll));
	});
	/**
	 * Returns the first logical true value of (pred x) for any x in coll,
	 *   else nil.  One common idiom is to use a set as pred, for example
	 *   this will return :fred if :fred is in the sequence, otherwise nil:
	 *   (some #{:fred} coll)
	 */
	cljs.core.some = (function cljs$core$some(pred,coll){
	while(true){
	if(cljs.core.seq(coll)){
	var or__5450__auto__ = (function (){var G__2797 = cljs.core.first(coll);
	return (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__2797) : pred.call(null,G__2797));
	})();
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var G__2798 = pred;
	var G__2799 = cljs.core.next(coll);
	pred = G__2798;
	coll = G__2799;
	continue;
	}
	} else {
	return null;
	}
	break;
	}
	});
	/**
	 * Returns false if (pred x) is logical true for any x in coll,
	 *   else true.
	 */
	cljs.core.not_any_QMARK_ = (function cljs$core$not_any_QMARK_(pred,coll){
	return cljs.core.not(cljs.core.some(pred,coll));
	});
	/**
	 * Returns true if n is even, throws an exception if n is not an integer
	 */
	cljs.core.even_QMARK_ = (function cljs$core$even_QMARK_(n){
	if(cljs.core.integer_QMARK_(n)){
	return ((n & (1)) === (0));
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Argument must be an integer: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join('')));
	}
	});
	/**
	 * Returns true if n is odd, throws an exception if n is not an integer
	 */
	cljs.core.odd_QMARK_ = (function cljs$core$odd_QMARK_(n){
	return !(cljs.core.even_QMARK_(n));
	});
	/**
	 * Takes a fn f and returns a fn that takes the same arguments as f,
	 *   has the same effects, if any, and returns the opposite truth value.
	 */
	cljs.core.complement = (function cljs$core$complement(f){
	return (function() {
	var G__2800 = null;
	var G__2800__0 = (function (){
	return cljs.core.not((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)));
	});
	var G__2800__1 = (function (x){
	return cljs.core.not((f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x)));
	});
	var G__2800__2 = (function (x,y){
	return cljs.core.not((f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y)));
	});
	var G__2800__3 = (function() { 
	var G__2801__delegate = function (x,y,zs){
	return cljs.core.not(cljs.core.apply.cljs$core$IFn$_invoke$arity$4(f,x,y,zs));
	};
	var G__2801 = function (x,y,var_args){
	var zs = null;
	if (arguments.length > 2) {
	var G__2802__i = 0, G__2802__a = new Array(arguments.length -  2);
	while (G__2802__i < G__2802__a.length) {G__2802__a[G__2802__i] = arguments[G__2802__i + 2]; ++G__2802__i;}
	  zs = new cljs.core.IndexedSeq(G__2802__a,0,null);
	} 
	return G__2801__delegate.call(this,x,y,zs);};
	G__2801.cljs$lang$maxFixedArity = 2;
	G__2801.cljs$lang$applyTo = (function (arglist__2803){
	var x = cljs.core.first(arglist__2803);
	arglist__2803 = cljs.core.next(arglist__2803);
	var y = cljs.core.first(arglist__2803);
	var zs = cljs.core.rest(arglist__2803);
	return G__2801__delegate(x,y,zs);
	});
	G__2801.cljs$core$IFn$_invoke$arity$variadic = G__2801__delegate;
	return G__2801;
	})()
	;
	G__2800 = function(x,y,var_args){
	var zs = var_args;
	switch(arguments.length){
	case 0:
	return G__2800__0.call(this);
	case 1:
	return G__2800__1.call(this,x);
	case 2:
	return G__2800__2.call(this,x,y);
	default:
	var G__2804 = null;
	if (arguments.length > 2) {
	var G__2805__i = 0, G__2805__a = new Array(arguments.length -  2);
	while (G__2805__i < G__2805__a.length) {G__2805__a[G__2805__i] = arguments[G__2805__i + 2]; ++G__2805__i;}
	G__2804 = new cljs.core.IndexedSeq(G__2805__a,0,null);
	}
	return G__2800__3.cljs$core$IFn$_invoke$arity$variadic(x,y, G__2804);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2800.cljs$lang$maxFixedArity = 2;
	G__2800.cljs$lang$applyTo = G__2800__3.cljs$lang$applyTo;
	G__2800.cljs$core$IFn$_invoke$arity$0 = G__2800__0;
	G__2800.cljs$core$IFn$_invoke$arity$1 = G__2800__1;
	G__2800.cljs$core$IFn$_invoke$arity$2 = G__2800__2;
	G__2800.cljs$core$IFn$_invoke$arity$variadic = G__2800__3.cljs$core$IFn$_invoke$arity$variadic;
	return G__2800;
	})()
	});
	/**
	 * Returns a function that takes any number of arguments and returns x.
	 */
	cljs.core.constantly = (function cljs$core$constantly(x){
	return (function() { 
	var G__2806__delegate = function (args){
	return x;
	};
	var G__2806 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__2807__i = 0, G__2807__a = new Array(arguments.length -  0);
	while (G__2807__i < G__2807__a.length) {G__2807__a[G__2807__i] = arguments[G__2807__i + 0]; ++G__2807__i;}
	  args = new cljs.core.IndexedSeq(G__2807__a,0,null);
	} 
	return G__2806__delegate.call(this,args);};
	G__2806.cljs$lang$maxFixedArity = 0;
	G__2806.cljs$lang$applyTo = (function (arglist__2808){
	var args = cljs.core.seq(arglist__2808);
	return G__2806__delegate(args);
	});
	G__2806.cljs$core$IFn$_invoke$arity$variadic = G__2806__delegate;
	return G__2806;
	})()
	;
	});
	/**
	 * Takes a set of functions and returns a fn that is the composition
	 *   of those fns.  The returned fn takes a variable number of args,
	 *   applies the rightmost of fns to the args, the next
	 *   fn (right-to-left) to the result, etc.
	 */
	cljs.core.comp = (function cljs$core$comp(var_args){
	var args2809 = [];
	var len__6099__auto___2831 = arguments.length;
	var i__6100__auto___2832 = (0);
	while(true){
	if((i__6100__auto___2832 < len__6099__auto___2831)){
	args2809.push((arguments[i__6100__auto___2832]));

	var G__2833 = (i__6100__auto___2832 + (1));
	i__6100__auto___2832 = G__2833;
	continue;
	} else {
	}
	break;
	}

	var G__2815 = args2809.length;
	switch (G__2815) {
	case 0:
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2809.slice((3)),(0),null));
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.comp.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.identity;
	});

	cljs.core.comp.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return f;
	});

	cljs.core.comp.cljs$core$IFn$_invoke$arity$2 = (function (f,g){
	return (function() {
	var G__2835 = null;
	var G__2835__0 = (function (){
	var G__2816 = (g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null));
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2816) : f.call(null,G__2816));
	});
	var G__2835__1 = (function (x){
	var G__2817 = (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null,x));
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2817) : f.call(null,G__2817));
	});
	var G__2835__2 = (function (x,y){
	var G__2818 = (g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x,y) : g.call(null,x,y));
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2818) : f.call(null,G__2818));
	});
	var G__2835__3 = (function (x,y,z){
	var G__2819 = (g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x,y,z) : g.call(null,x,y,z));
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2819) : f.call(null,G__2819));
	});
	var G__2835__4 = (function() { 
	var G__2836__delegate = function (x,y,z,args){
	var G__2820 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g,x,y,z,args);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2820) : f.call(null,G__2820));
	};
	var G__2836 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__2837__i = 0, G__2837__a = new Array(arguments.length -  3);
	while (G__2837__i < G__2837__a.length) {G__2837__a[G__2837__i] = arguments[G__2837__i + 3]; ++G__2837__i;}
	  args = new cljs.core.IndexedSeq(G__2837__a,0,null);
	} 
	return G__2836__delegate.call(this,x,y,z,args);};
	G__2836.cljs$lang$maxFixedArity = 3;
	G__2836.cljs$lang$applyTo = (function (arglist__2838){
	var x = cljs.core.first(arglist__2838);
	arglist__2838 = cljs.core.next(arglist__2838);
	var y = cljs.core.first(arglist__2838);
	arglist__2838 = cljs.core.next(arglist__2838);
	var z = cljs.core.first(arglist__2838);
	var args = cljs.core.rest(arglist__2838);
	return G__2836__delegate(x,y,z,args);
	});
	G__2836.cljs$core$IFn$_invoke$arity$variadic = G__2836__delegate;
	return G__2836;
	})()
	;
	G__2835 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__2835__0.call(this);
	case 1:
	return G__2835__1.call(this,x);
	case 2:
	return G__2835__2.call(this,x,y);
	case 3:
	return G__2835__3.call(this,x,y,z);
	default:
	var G__2839 = null;
	if (arguments.length > 3) {
	var G__2840__i = 0, G__2840__a = new Array(arguments.length -  3);
	while (G__2840__i < G__2840__a.length) {G__2840__a[G__2840__i] = arguments[G__2840__i + 3]; ++G__2840__i;}
	G__2839 = new cljs.core.IndexedSeq(G__2840__a,0,null);
	}
	return G__2835__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__2839);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2835.cljs$lang$maxFixedArity = 3;
	G__2835.cljs$lang$applyTo = G__2835__4.cljs$lang$applyTo;
	G__2835.cljs$core$IFn$_invoke$arity$0 = G__2835__0;
	G__2835.cljs$core$IFn$_invoke$arity$1 = G__2835__1;
	G__2835.cljs$core$IFn$_invoke$arity$2 = G__2835__2;
	G__2835.cljs$core$IFn$_invoke$arity$3 = G__2835__3;
	G__2835.cljs$core$IFn$_invoke$arity$variadic = G__2835__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2835;
	})()
	});

	cljs.core.comp.cljs$core$IFn$_invoke$arity$3 = (function (f,g,h){
	return (function() {
	var G__2841 = null;
	var G__2841__0 = (function (){
	var G__2821 = (function (){var G__2822 = (h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null));
	return (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2822) : g.call(null,G__2822));
	})();
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2821) : f.call(null,G__2821));
	});
	var G__2841__1 = (function (x){
	var G__2823 = (function (){var G__2824 = (h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null,x));
	return (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2824) : g.call(null,G__2824));
	})();
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2823) : f.call(null,G__2823));
	});
	var G__2841__2 = (function (x,y){
	var G__2825 = (function (){var G__2826 = (h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x,y) : h.call(null,x,y));
	return (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2826) : g.call(null,G__2826));
	})();
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2825) : f.call(null,G__2825));
	});
	var G__2841__3 = (function (x,y,z){
	var G__2827 = (function (){var G__2828 = (h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x,y,z) : h.call(null,x,y,z));
	return (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2828) : g.call(null,G__2828));
	})();
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2827) : f.call(null,G__2827));
	});
	var G__2841__4 = (function() { 
	var G__2842__delegate = function (x,y,z,args){
	var G__2829 = (function (){var G__2830 = cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h,x,y,z,args);
	return (g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(G__2830) : g.call(null,G__2830));
	})();
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2829) : f.call(null,G__2829));
	};
	var G__2842 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__2843__i = 0, G__2843__a = new Array(arguments.length -  3);
	while (G__2843__i < G__2843__a.length) {G__2843__a[G__2843__i] = arguments[G__2843__i + 3]; ++G__2843__i;}
	  args = new cljs.core.IndexedSeq(G__2843__a,0,null);
	} 
	return G__2842__delegate.call(this,x,y,z,args);};
	G__2842.cljs$lang$maxFixedArity = 3;
	G__2842.cljs$lang$applyTo = (function (arglist__2844){
	var x = cljs.core.first(arglist__2844);
	arglist__2844 = cljs.core.next(arglist__2844);
	var y = cljs.core.first(arglist__2844);
	arglist__2844 = cljs.core.next(arglist__2844);
	var z = cljs.core.first(arglist__2844);
	var args = cljs.core.rest(arglist__2844);
	return G__2842__delegate(x,y,z,args);
	});
	G__2842.cljs$core$IFn$_invoke$arity$variadic = G__2842__delegate;
	return G__2842;
	})()
	;
	G__2841 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__2841__0.call(this);
	case 1:
	return G__2841__1.call(this,x);
	case 2:
	return G__2841__2.call(this,x,y);
	case 3:
	return G__2841__3.call(this,x,y,z);
	default:
	var G__2845 = null;
	if (arguments.length > 3) {
	var G__2846__i = 0, G__2846__a = new Array(arguments.length -  3);
	while (G__2846__i < G__2846__a.length) {G__2846__a[G__2846__i] = arguments[G__2846__i + 3]; ++G__2846__i;}
	G__2845 = new cljs.core.IndexedSeq(G__2846__a,0,null);
	}
	return G__2841__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__2845);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2841.cljs$lang$maxFixedArity = 3;
	G__2841.cljs$lang$applyTo = G__2841__4.cljs$lang$applyTo;
	G__2841.cljs$core$IFn$_invoke$arity$0 = G__2841__0;
	G__2841.cljs$core$IFn$_invoke$arity$1 = G__2841__1;
	G__2841.cljs$core$IFn$_invoke$arity$2 = G__2841__2;
	G__2841.cljs$core$IFn$_invoke$arity$3 = G__2841__3;
	G__2841.cljs$core$IFn$_invoke$arity$variadic = G__2841__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2841;
	})()
	});

	cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic = (function (f1,f2,f3,fs){
	var fs__$1 = cljs.core.reverse(cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f1,f2,f3,fs));
	return ((function (fs__$1){
	return (function() { 
	var G__2847__delegate = function (args){
	var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.first(fs__$1),args);
	var fs__$2 = cljs.core.next(fs__$1);
	while(true){
	if(fs__$2){
	var G__2848 = cljs.core.first(fs__$2).call(null,ret);
	var G__2849 = cljs.core.next(fs__$2);
	ret = G__2848;
	fs__$2 = G__2849;
	continue;
	} else {
	return ret;
	}
	break;
	}
	};
	var G__2847 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__2850__i = 0, G__2850__a = new Array(arguments.length -  0);
	while (G__2850__i < G__2850__a.length) {G__2850__a[G__2850__i] = arguments[G__2850__i + 0]; ++G__2850__i;}
	  args = new cljs.core.IndexedSeq(G__2850__a,0,null);
	} 
	return G__2847__delegate.call(this,args);};
	G__2847.cljs$lang$maxFixedArity = 0;
	G__2847.cljs$lang$applyTo = (function (arglist__2851){
	var args = cljs.core.seq(arglist__2851);
	return G__2847__delegate(args);
	});
	G__2847.cljs$core$IFn$_invoke$arity$variadic = G__2847__delegate;
	return G__2847;
	})()
	;
	;})(fs__$1))
	});

	cljs.core.comp.cljs$lang$applyTo = (function (seq2810){
	var G__2811 = cljs.core.first(seq2810);
	var seq2810__$1 = cljs.core.next(seq2810);
	var G__2812 = cljs.core.first(seq2810__$1);
	var seq2810__$2 = cljs.core.next(seq2810__$1);
	var G__2813 = cljs.core.first(seq2810__$2);
	var seq2810__$3 = cljs.core.next(seq2810__$2);
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$variadic(G__2811,G__2812,G__2813,seq2810__$3);
	});

	cljs.core.comp.cljs$lang$maxFixedArity = (3);

	/**
	 * Takes a function f and fewer than the normal arguments to f, and
	 *   returns a fn that takes a variable number of additional args. When
	 *   called, the returned function calls f with args + additional args.
	 */
	cljs.core.partial = (function cljs$core$partial(var_args){
	var args2852 = [];
	var len__6099__auto___2860 = arguments.length;
	var i__6100__auto___2861 = (0);
	while(true){
	if((i__6100__auto___2861 < len__6099__auto___2860)){
	args2852.push((arguments[i__6100__auto___2861]));

	var G__2862 = (i__6100__auto___2861 + (1));
	i__6100__auto___2861 = G__2862;
	continue;
	} else {
	}
	break;
	}

	var G__2859 = args2852.length;
	switch (G__2859) {
	case 1:
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args2852.slice((4)),(0),null));
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__6118__auto__);

	}
	});

	cljs.core.partial.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return f;
	});

	cljs.core.partial.cljs$core$IFn$_invoke$arity$2 = (function (f,arg1){
	return (function() {
	var G__2864 = null;
	var G__2864__0 = (function (){
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(arg1) : f.call(null,arg1));
	});
	var G__2864__1 = (function (x){
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1,x) : f.call(null,arg1,x));
	});
	var G__2864__2 = (function (x,y){
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1,x,y) : f.call(null,arg1,x,y));
	});
	var G__2864__3 = (function (x,y,z){
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1,x,y,z) : f.call(null,arg1,x,y,z));
	});
	var G__2864__4 = (function() { 
	var G__2865__delegate = function (x,y,z,args){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,arg1,x,y,z,cljs.core.array_seq([args], 0));
	};
	var G__2865 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__2866__i = 0, G__2866__a = new Array(arguments.length -  3);
	while (G__2866__i < G__2866__a.length) {G__2866__a[G__2866__i] = arguments[G__2866__i + 3]; ++G__2866__i;}
	  args = new cljs.core.IndexedSeq(G__2866__a,0,null);
	} 
	return G__2865__delegate.call(this,x,y,z,args);};
	G__2865.cljs$lang$maxFixedArity = 3;
	G__2865.cljs$lang$applyTo = (function (arglist__2867){
	var x = cljs.core.first(arglist__2867);
	arglist__2867 = cljs.core.next(arglist__2867);
	var y = cljs.core.first(arglist__2867);
	arglist__2867 = cljs.core.next(arglist__2867);
	var z = cljs.core.first(arglist__2867);
	var args = cljs.core.rest(arglist__2867);
	return G__2865__delegate(x,y,z,args);
	});
	G__2865.cljs$core$IFn$_invoke$arity$variadic = G__2865__delegate;
	return G__2865;
	})()
	;
	G__2864 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__2864__0.call(this);
	case 1:
	return G__2864__1.call(this,x);
	case 2:
	return G__2864__2.call(this,x,y);
	case 3:
	return G__2864__3.call(this,x,y,z);
	default:
	var G__2868 = null;
	if (arguments.length > 3) {
	var G__2869__i = 0, G__2869__a = new Array(arguments.length -  3);
	while (G__2869__i < G__2869__a.length) {G__2869__a[G__2869__i] = arguments[G__2869__i + 3]; ++G__2869__i;}
	G__2868 = new cljs.core.IndexedSeq(G__2869__a,0,null);
	}
	return G__2864__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__2868);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2864.cljs$lang$maxFixedArity = 3;
	G__2864.cljs$lang$applyTo = G__2864__4.cljs$lang$applyTo;
	G__2864.cljs$core$IFn$_invoke$arity$0 = G__2864__0;
	G__2864.cljs$core$IFn$_invoke$arity$1 = G__2864__1;
	G__2864.cljs$core$IFn$_invoke$arity$2 = G__2864__2;
	G__2864.cljs$core$IFn$_invoke$arity$3 = G__2864__3;
	G__2864.cljs$core$IFn$_invoke$arity$variadic = G__2864__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2864;
	})()
	});

	cljs.core.partial.cljs$core$IFn$_invoke$arity$3 = (function (f,arg1,arg2){
	return (function() {
	var G__2870 = null;
	var G__2870__0 = (function (){
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(arg1,arg2) : f.call(null,arg1,arg2));
	});
	var G__2870__1 = (function (x){
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1,arg2,x) : f.call(null,arg1,arg2,x));
	});
	var G__2870__2 = (function (x,y){
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1,arg2,x,y) : f.call(null,arg1,arg2,x,y));
	});
	var G__2870__3 = (function (x,y,z){
	return (f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1,arg2,x,y,z) : f.call(null,arg1,arg2,x,y,z));
	});
	var G__2870__4 = (function() { 
	var G__2871__delegate = function (x,y,z,args){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,arg1,arg2,x,y,cljs.core.array_seq([z,args], 0));
	};
	var G__2871 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__2872__i = 0, G__2872__a = new Array(arguments.length -  3);
	while (G__2872__i < G__2872__a.length) {G__2872__a[G__2872__i] = arguments[G__2872__i + 3]; ++G__2872__i;}
	  args = new cljs.core.IndexedSeq(G__2872__a,0,null);
	} 
	return G__2871__delegate.call(this,x,y,z,args);};
	G__2871.cljs$lang$maxFixedArity = 3;
	G__2871.cljs$lang$applyTo = (function (arglist__2873){
	var x = cljs.core.first(arglist__2873);
	arglist__2873 = cljs.core.next(arglist__2873);
	var y = cljs.core.first(arglist__2873);
	arglist__2873 = cljs.core.next(arglist__2873);
	var z = cljs.core.first(arglist__2873);
	var args = cljs.core.rest(arglist__2873);
	return G__2871__delegate(x,y,z,args);
	});
	G__2871.cljs$core$IFn$_invoke$arity$variadic = G__2871__delegate;
	return G__2871;
	})()
	;
	G__2870 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__2870__0.call(this);
	case 1:
	return G__2870__1.call(this,x);
	case 2:
	return G__2870__2.call(this,x,y);
	case 3:
	return G__2870__3.call(this,x,y,z);
	default:
	var G__2874 = null;
	if (arguments.length > 3) {
	var G__2875__i = 0, G__2875__a = new Array(arguments.length -  3);
	while (G__2875__i < G__2875__a.length) {G__2875__a[G__2875__i] = arguments[G__2875__i + 3]; ++G__2875__i;}
	G__2874 = new cljs.core.IndexedSeq(G__2875__a,0,null);
	}
	return G__2870__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__2874);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2870.cljs$lang$maxFixedArity = 3;
	G__2870.cljs$lang$applyTo = G__2870__4.cljs$lang$applyTo;
	G__2870.cljs$core$IFn$_invoke$arity$0 = G__2870__0;
	G__2870.cljs$core$IFn$_invoke$arity$1 = G__2870__1;
	G__2870.cljs$core$IFn$_invoke$arity$2 = G__2870__2;
	G__2870.cljs$core$IFn$_invoke$arity$3 = G__2870__3;
	G__2870.cljs$core$IFn$_invoke$arity$variadic = G__2870__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2870;
	})()
	});

	cljs.core.partial.cljs$core$IFn$_invoke$arity$4 = (function (f,arg1,arg2,arg3){
	return (function() {
	var G__2876 = null;
	var G__2876__0 = (function (){
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(arg1,arg2,arg3) : f.call(null,arg1,arg2,arg3));
	});
	var G__2876__1 = (function (x){
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(arg1,arg2,arg3,x) : f.call(null,arg1,arg2,arg3,x));
	});
	var G__2876__2 = (function (x,y){
	return (f.cljs$core$IFn$_invoke$arity$5 ? f.cljs$core$IFn$_invoke$arity$5(arg1,arg2,arg3,x,y) : f.call(null,arg1,arg2,arg3,x,y));
	});
	var G__2876__3 = (function (x,y,z){
	return (f.cljs$core$IFn$_invoke$arity$6 ? f.cljs$core$IFn$_invoke$arity$6(arg1,arg2,arg3,x,y,z) : f.call(null,arg1,arg2,arg3,x,y,z));
	});
	var G__2876__4 = (function() { 
	var G__2877__delegate = function (x,y,z,args){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,arg1,arg2,arg3,x,cljs.core.array_seq([y,z,args], 0));
	};
	var G__2877 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__2878__i = 0, G__2878__a = new Array(arguments.length -  3);
	while (G__2878__i < G__2878__a.length) {G__2878__a[G__2878__i] = arguments[G__2878__i + 3]; ++G__2878__i;}
	  args = new cljs.core.IndexedSeq(G__2878__a,0,null);
	} 
	return G__2877__delegate.call(this,x,y,z,args);};
	G__2877.cljs$lang$maxFixedArity = 3;
	G__2877.cljs$lang$applyTo = (function (arglist__2879){
	var x = cljs.core.first(arglist__2879);
	arglist__2879 = cljs.core.next(arglist__2879);
	var y = cljs.core.first(arglist__2879);
	arglist__2879 = cljs.core.next(arglist__2879);
	var z = cljs.core.first(arglist__2879);
	var args = cljs.core.rest(arglist__2879);
	return G__2877__delegate(x,y,z,args);
	});
	G__2877.cljs$core$IFn$_invoke$arity$variadic = G__2877__delegate;
	return G__2877;
	})()
	;
	G__2876 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__2876__0.call(this);
	case 1:
	return G__2876__1.call(this,x);
	case 2:
	return G__2876__2.call(this,x,y);
	case 3:
	return G__2876__3.call(this,x,y,z);
	default:
	var G__2880 = null;
	if (arguments.length > 3) {
	var G__2881__i = 0, G__2881__a = new Array(arguments.length -  3);
	while (G__2881__i < G__2881__a.length) {G__2881__a[G__2881__i] = arguments[G__2881__i + 3]; ++G__2881__i;}
	G__2880 = new cljs.core.IndexedSeq(G__2881__a,0,null);
	}
	return G__2876__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__2880);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2876.cljs$lang$maxFixedArity = 3;
	G__2876.cljs$lang$applyTo = G__2876__4.cljs$lang$applyTo;
	G__2876.cljs$core$IFn$_invoke$arity$0 = G__2876__0;
	G__2876.cljs$core$IFn$_invoke$arity$1 = G__2876__1;
	G__2876.cljs$core$IFn$_invoke$arity$2 = G__2876__2;
	G__2876.cljs$core$IFn$_invoke$arity$3 = G__2876__3;
	G__2876.cljs$core$IFn$_invoke$arity$variadic = G__2876__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2876;
	})()
	});

	cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic = (function (f,arg1,arg2,arg3,more){
	return (function() { 
	var G__2882__delegate = function (args){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,arg1,arg2,arg3,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(more,args));
	};
	var G__2882 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__2883__i = 0, G__2883__a = new Array(arguments.length -  0);
	while (G__2883__i < G__2883__a.length) {G__2883__a[G__2883__i] = arguments[G__2883__i + 0]; ++G__2883__i;}
	  args = new cljs.core.IndexedSeq(G__2883__a,0,null);
	} 
	return G__2882__delegate.call(this,args);};
	G__2882.cljs$lang$maxFixedArity = 0;
	G__2882.cljs$lang$applyTo = (function (arglist__2884){
	var args = cljs.core.seq(arglist__2884);
	return G__2882__delegate(args);
	});
	G__2882.cljs$core$IFn$_invoke$arity$variadic = G__2882__delegate;
	return G__2882;
	})()
	;
	});

	cljs.core.partial.cljs$lang$applyTo = (function (seq2853){
	var G__2854 = cljs.core.first(seq2853);
	var seq2853__$1 = cljs.core.next(seq2853);
	var G__2855 = cljs.core.first(seq2853__$1);
	var seq2853__$2 = cljs.core.next(seq2853__$1);
	var G__2856 = cljs.core.first(seq2853__$2);
	var seq2853__$3 = cljs.core.next(seq2853__$2);
	var G__2857 = cljs.core.first(seq2853__$3);
	var seq2853__$4 = cljs.core.next(seq2853__$3);
	return cljs.core.partial.cljs$core$IFn$_invoke$arity$variadic(G__2854,G__2855,G__2856,G__2857,seq2853__$4);
	});

	cljs.core.partial.cljs$lang$maxFixedArity = (4);

	/**
	 * Takes a function f, and returns a function that calls f, replacing
	 *   a nil first argument to f with the supplied value x. Higher arity
	 *   versions can replace arguments in the second and third
	 *   positions (y, z). Note that the function f can take any number of
	 *   arguments, not just the one(s) being nil-patched.
	 */
	cljs.core.fnil = (function cljs$core$fnil(var_args){
	var args2885 = [];
	var len__6099__auto___2904 = arguments.length;
	var i__6100__auto___2905 = (0);
	while(true){
	if((i__6100__auto___2905 < len__6099__auto___2904)){
	args2885.push((arguments[i__6100__auto___2905]));

	var G__2906 = (i__6100__auto___2905 + (1));
	i__6100__auto___2905 = G__2906;
	continue;
	} else {
	}
	break;
	}

	var G__2887 = args2885.length;
	switch (G__2887) {
	case 2:
	return cljs.core.fnil.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.fnil.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.fnil.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2885.length)].join('')));

	}
	});

	cljs.core.fnil.cljs$core$IFn$_invoke$arity$2 = (function (f,x){
	return (function() {
	var G__2908 = null;
	var G__2908__1 = (function (a){
	var G__2888 = (((a == null))?x:a);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2888) : f.call(null,G__2888));
	});
	var G__2908__2 = (function (a,b){
	var G__2889 = (((a == null))?x:a);
	var G__2890 = b;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2889,G__2890) : f.call(null,G__2889,G__2890));
	});
	var G__2908__3 = (function (a,b,c){
	var G__2891 = (((a == null))?x:a);
	var G__2892 = b;
	var G__2893 = c;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__2891,G__2892,G__2893) : f.call(null,G__2891,G__2892,G__2893));
	});
	var G__2908__4 = (function() { 
	var G__2909__delegate = function (a,b,c,ds){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,(((a == null))?x:a),b,c,ds);
	};
	var G__2909 = function (a,b,c,var_args){
	var ds = null;
	if (arguments.length > 3) {
	var G__2910__i = 0, G__2910__a = new Array(arguments.length -  3);
	while (G__2910__i < G__2910__a.length) {G__2910__a[G__2910__i] = arguments[G__2910__i + 3]; ++G__2910__i;}
	  ds = new cljs.core.IndexedSeq(G__2910__a,0,null);
	} 
	return G__2909__delegate.call(this,a,b,c,ds);};
	G__2909.cljs$lang$maxFixedArity = 3;
	G__2909.cljs$lang$applyTo = (function (arglist__2911){
	var a = cljs.core.first(arglist__2911);
	arglist__2911 = cljs.core.next(arglist__2911);
	var b = cljs.core.first(arglist__2911);
	arglist__2911 = cljs.core.next(arglist__2911);
	var c = cljs.core.first(arglist__2911);
	var ds = cljs.core.rest(arglist__2911);
	return G__2909__delegate(a,b,c,ds);
	});
	G__2909.cljs$core$IFn$_invoke$arity$variadic = G__2909__delegate;
	return G__2909;
	})()
	;
	G__2908 = function(a,b,c,var_args){
	var ds = var_args;
	switch(arguments.length){
	case 1:
	return G__2908__1.call(this,a);
	case 2:
	return G__2908__2.call(this,a,b);
	case 3:
	return G__2908__3.call(this,a,b,c);
	default:
	var G__2912 = null;
	if (arguments.length > 3) {
	var G__2913__i = 0, G__2913__a = new Array(arguments.length -  3);
	while (G__2913__i < G__2913__a.length) {G__2913__a[G__2913__i] = arguments[G__2913__i + 3]; ++G__2913__i;}
	G__2912 = new cljs.core.IndexedSeq(G__2913__a,0,null);
	}
	return G__2908__4.cljs$core$IFn$_invoke$arity$variadic(a,b,c, G__2912);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2908.cljs$lang$maxFixedArity = 3;
	G__2908.cljs$lang$applyTo = G__2908__4.cljs$lang$applyTo;
	G__2908.cljs$core$IFn$_invoke$arity$1 = G__2908__1;
	G__2908.cljs$core$IFn$_invoke$arity$2 = G__2908__2;
	G__2908.cljs$core$IFn$_invoke$arity$3 = G__2908__3;
	G__2908.cljs$core$IFn$_invoke$arity$variadic = G__2908__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2908;
	})()
	});

	cljs.core.fnil.cljs$core$IFn$_invoke$arity$3 = (function (f,x,y){
	return (function() {
	var G__2914 = null;
	var G__2914__2 = (function (a,b){
	var G__2894 = (((a == null))?x:a);
	var G__2895 = (((b == null))?y:b);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2894,G__2895) : f.call(null,G__2894,G__2895));
	});
	var G__2914__3 = (function (a,b,c){
	var G__2896 = (((a == null))?x:a);
	var G__2897 = (((b == null))?y:b);
	var G__2898 = c;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__2896,G__2897,G__2898) : f.call(null,G__2896,G__2897,G__2898));
	});
	var G__2914__4 = (function() { 
	var G__2915__delegate = function (a,b,c,ds){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,(((a == null))?x:a),(((b == null))?y:b),c,ds);
	};
	var G__2915 = function (a,b,c,var_args){
	var ds = null;
	if (arguments.length > 3) {
	var G__2916__i = 0, G__2916__a = new Array(arguments.length -  3);
	while (G__2916__i < G__2916__a.length) {G__2916__a[G__2916__i] = arguments[G__2916__i + 3]; ++G__2916__i;}
	  ds = new cljs.core.IndexedSeq(G__2916__a,0,null);
	} 
	return G__2915__delegate.call(this,a,b,c,ds);};
	G__2915.cljs$lang$maxFixedArity = 3;
	G__2915.cljs$lang$applyTo = (function (arglist__2917){
	var a = cljs.core.first(arglist__2917);
	arglist__2917 = cljs.core.next(arglist__2917);
	var b = cljs.core.first(arglist__2917);
	arglist__2917 = cljs.core.next(arglist__2917);
	var c = cljs.core.first(arglist__2917);
	var ds = cljs.core.rest(arglist__2917);
	return G__2915__delegate(a,b,c,ds);
	});
	G__2915.cljs$core$IFn$_invoke$arity$variadic = G__2915__delegate;
	return G__2915;
	})()
	;
	G__2914 = function(a,b,c,var_args){
	var ds = var_args;
	switch(arguments.length){
	case 2:
	return G__2914__2.call(this,a,b);
	case 3:
	return G__2914__3.call(this,a,b,c);
	default:
	var G__2918 = null;
	if (arguments.length > 3) {
	var G__2919__i = 0, G__2919__a = new Array(arguments.length -  3);
	while (G__2919__i < G__2919__a.length) {G__2919__a[G__2919__i] = arguments[G__2919__i + 3]; ++G__2919__i;}
	G__2918 = new cljs.core.IndexedSeq(G__2919__a,0,null);
	}
	return G__2914__4.cljs$core$IFn$_invoke$arity$variadic(a,b,c, G__2918);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2914.cljs$lang$maxFixedArity = 3;
	G__2914.cljs$lang$applyTo = G__2914__4.cljs$lang$applyTo;
	G__2914.cljs$core$IFn$_invoke$arity$2 = G__2914__2;
	G__2914.cljs$core$IFn$_invoke$arity$3 = G__2914__3;
	G__2914.cljs$core$IFn$_invoke$arity$variadic = G__2914__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2914;
	})()
	});

	cljs.core.fnil.cljs$core$IFn$_invoke$arity$4 = (function (f,x,y,z){
	return (function() {
	var G__2920 = null;
	var G__2920__2 = (function (a,b){
	var G__2899 = (((a == null))?x:a);
	var G__2900 = (((b == null))?y:b);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2899,G__2900) : f.call(null,G__2899,G__2900));
	});
	var G__2920__3 = (function (a,b,c){
	var G__2901 = (((a == null))?x:a);
	var G__2902 = (((b == null))?y:b);
	var G__2903 = (((c == null))?z:c);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__2901,G__2902,G__2903) : f.call(null,G__2901,G__2902,G__2903));
	});
	var G__2920__4 = (function() { 
	var G__2921__delegate = function (a,b,c,ds){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,(((a == null))?x:a),(((b == null))?y:b),(((c == null))?z:c),ds);
	};
	var G__2921 = function (a,b,c,var_args){
	var ds = null;
	if (arguments.length > 3) {
	var G__2922__i = 0, G__2922__a = new Array(arguments.length -  3);
	while (G__2922__i < G__2922__a.length) {G__2922__a[G__2922__i] = arguments[G__2922__i + 3]; ++G__2922__i;}
	  ds = new cljs.core.IndexedSeq(G__2922__a,0,null);
	} 
	return G__2921__delegate.call(this,a,b,c,ds);};
	G__2921.cljs$lang$maxFixedArity = 3;
	G__2921.cljs$lang$applyTo = (function (arglist__2923){
	var a = cljs.core.first(arglist__2923);
	arglist__2923 = cljs.core.next(arglist__2923);
	var b = cljs.core.first(arglist__2923);
	arglist__2923 = cljs.core.next(arglist__2923);
	var c = cljs.core.first(arglist__2923);
	var ds = cljs.core.rest(arglist__2923);
	return G__2921__delegate(a,b,c,ds);
	});
	G__2921.cljs$core$IFn$_invoke$arity$variadic = G__2921__delegate;
	return G__2921;
	})()
	;
	G__2920 = function(a,b,c,var_args){
	var ds = var_args;
	switch(arguments.length){
	case 2:
	return G__2920__2.call(this,a,b);
	case 3:
	return G__2920__3.call(this,a,b,c);
	default:
	var G__2924 = null;
	if (arguments.length > 3) {
	var G__2925__i = 0, G__2925__a = new Array(arguments.length -  3);
	while (G__2925__i < G__2925__a.length) {G__2925__a[G__2925__i] = arguments[G__2925__i + 3]; ++G__2925__i;}
	G__2924 = new cljs.core.IndexedSeq(G__2925__a,0,null);
	}
	return G__2920__4.cljs$core$IFn$_invoke$arity$variadic(a,b,c, G__2924);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2920.cljs$lang$maxFixedArity = 3;
	G__2920.cljs$lang$applyTo = G__2920__4.cljs$lang$applyTo;
	G__2920.cljs$core$IFn$_invoke$arity$2 = G__2920__2;
	G__2920.cljs$core$IFn$_invoke$arity$3 = G__2920__3;
	G__2920.cljs$core$IFn$_invoke$arity$variadic = G__2920__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__2920;
	})()
	});

	cljs.core.fnil.cljs$lang$maxFixedArity = 4;

	/**
	 * Returns a lazy sequence consisting of the result of applying f to 0
	 *   and the first item of coll, followed by applying f to 1 and the second
	 *   item in coll, etc, until coll is exhausted. Thus function f should
	 *   accept 2 arguments, index and item. Returns a stateful transducer when
	 *   no collection is provided.
	 */
	cljs.core.map_indexed = (function cljs$core$map_indexed(var_args){
	var args2926 = [];
	var len__6099__auto___2957 = arguments.length;
	var i__6100__auto___2958 = (0);
	while(true){
	if((i__6100__auto___2958 < len__6099__auto___2957)){
	args2926.push((arguments[i__6100__auto___2958]));

	var G__2959 = (i__6100__auto___2958 + (1));
	i__6100__auto___2958 = G__2959;
	continue;
	} else {
	}
	break;
	}

	var G__2928 = args2926.length;
	switch (G__2928) {
	case 1:
	return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2926.length)].join('')));

	}
	});

	cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function (rf){
	var i = (cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1 ? cljs.core.volatile_BANG_.cljs$core$IFn$_invoke$arity$1((-1)) : cljs.core.volatile_BANG_.call(null,(-1)));
	return ((function (i){
	return (function() {
	var G__2961 = null;
	var G__2961__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__2961__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__2961__2 = (function (result,input){
	var G__2929 = result;
	var G__2930 = (function (){var G__2931 = cljs.core._vreset_BANG_(i,(cljs.core._deref(i) + (1)));
	var G__2932 = input;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2931,G__2932) : f.call(null,G__2931,G__2932));
	})();
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__2929,G__2930) : rf.call(null,G__2929,G__2930));
	});
	G__2961 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__2961__0.call(this);
	case 1:
	return G__2961__1.call(this,result);
	case 2:
	return G__2961__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2961.cljs$core$IFn$_invoke$arity$0 = G__2961__0;
	G__2961.cljs$core$IFn$_invoke$arity$1 = G__2961__1;
	G__2961.cljs$core$IFn$_invoke$arity$2 = G__2961__2;
	return G__2961;
	})()
	;})(i))
	});
	});

	cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	var mapi = (function cljs$core$mapi(idx,coll__$1){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll__$1);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s)){
	var c = cljs.core.chunk_first(s);
	var size = cljs.core.count(c);
	var b = cljs.core.chunk_buffer(size);
	var n__5991__auto___2962 = size;
	var i_2963 = (0);
	while(true){
	if((i_2963 < n__5991__auto___2962)){
	cljs.core.chunk_append(b,(function (){var G__2953 = (idx + i_2963);
	var G__2954 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_2963);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2953,G__2954) : f.call(null,G__2953,G__2954));
	})());

	var G__2964 = (i_2963 + (1));
	i_2963 = G__2964;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.chunk_cons(cljs.core.chunk(b),cljs$core$mapi((idx + size),cljs.core.chunk_rest(s)));
	} else {
	return cljs.core.cons((function (){var G__2955 = idx;
	var G__2956 = cljs.core.first(s);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__2955,G__2956) : f.call(null,G__2955,G__2956));
	})(),cljs$core$mapi((idx + (1)),cljs.core.rest(s)));
	}
	} else {
	return null;
	}
	}),null,null));
	});
	return mapi((0),coll);
	});

	cljs.core.map_indexed.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of the non-nil results of (f item). Note,
	 *   this means false return values will be included.  f must be free of
	 *   side-effects.  Returns a transducer when no collection is provided.
	 */
	cljs.core.keep = (function cljs$core$keep(var_args){
	var args2965 = [];
	var len__6099__auto___2970 = arguments.length;
	var i__6100__auto___2971 = (0);
	while(true){
	if((i__6100__auto___2971 < len__6099__auto___2970)){
	args2965.push((arguments[i__6100__auto___2971]));

	var G__2972 = (i__6100__auto___2971 + (1));
	i__6100__auto___2971 = G__2972;
	continue;
	} else {
	}
	break;
	}

	var G__2967 = args2965.length;
	switch (G__2967) {
	case 1:
	return cljs.core.keep.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.keep.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args2965.length)].join('')));

	}
	});

	cljs.core.keep.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function (rf){
	return (function() {
	var G__2974 = null;
	var G__2974__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__2974__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__2974__2 = (function (result,input){
	var v = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null,input));
	if((v == null)){
	return result;
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v));
	}
	});
	G__2974 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__2974__0.call(this);
	case 1:
	return G__2974__1.call(this,result);
	case 2:
	return G__2974__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__2974.cljs$core$IFn$_invoke$arity$0 = G__2974__0;
	G__2974.cljs$core$IFn$_invoke$arity$1 = G__2974__1;
	G__2974.cljs$core$IFn$_invoke$arity$2 = G__2974__2;
	return G__2974;
	})()
	});
	});

	cljs.core.keep.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s)){
	var c = cljs.core.chunk_first(s);
	var size = cljs.core.count(c);
	var b = cljs.core.chunk_buffer(size);
	var n__5991__auto___2975 = size;
	var i_2976 = (0);
	while(true){
	if((i_2976 < n__5991__auto___2975)){
	var x_2977 = (function (){var G__2968 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_2976);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2968) : f.call(null,G__2968));
	})();
	if((x_2977 == null)){
	} else {
	cljs.core.chunk_append(b,x_2977);
	}

	var G__2978 = (i_2976 + (1));
	i_2976 = G__2978;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.chunk_cons(cljs.core.chunk(b),cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f,cljs.core.chunk_rest(s)));
	} else {
	var x = (function (){var G__2969 = cljs.core.first(s);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__2969) : f.call(null,G__2969));
	})();
	if((x == null)){
	return cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f,cljs.core.rest(s));
	} else {
	return cljs.core.cons(x,cljs.core.keep.cljs$core$IFn$_invoke$arity$2(f,cljs.core.rest(s)));
	}
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.keep.cljs$lang$maxFixedArity = 2;


	/**
	* @constructor
	 * @implements {cljs.core.IWatchable}
	 * @implements {cljs.core.IAtom}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IDeref}
	*/
	cljs.core.Atom = (function (state,meta,validator,watches){
	this.state = state;
	this.meta = meta;
	this.validator = validator;
	this.watches = watches;
	this.cljs$lang$protocol_mask$partition1$ = 16386;
	this.cljs$lang$protocol_mask$partition0$ = 6455296;
	})
	cljs.core.Atom.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Atom.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
	var self__ = this;
	var o__$1 = this;
	return (o__$1 === other);
	});

	cljs.core.Atom.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.state;
	});

	cljs.core.Atom.prototype.cljs$core$IMeta$_meta$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.meta;
	});

	cljs.core.Atom.prototype.cljs$core$IWatchable$_notify_watches$arity$3 = (function (this$,oldval,newval){
	var self__ = this;
	var this$__$1 = this;
	var seq__2979 = cljs.core.seq(self__.watches);
	var chunk__2980 = null;
	var count__2981 = (0);
	var i__2982 = (0);
	while(true){
	if((i__2982 < count__2981)){
	var vec__2983 = chunk__2980.cljs$core$IIndexed$_nth$arity$2(null,i__2982);
	var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2983,(0),null);
	var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2983,(1),null);
	(f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key,this$__$1,oldval,newval) : f.call(null,key,this$__$1,oldval,newval));

	var G__2989 = seq__2979;
	var G__2990 = chunk__2980;
	var G__2991 = count__2981;
	var G__2992 = (i__2982 + (1));
	seq__2979 = G__2989;
	chunk__2980 = G__2990;
	count__2981 = G__2991;
	i__2982 = G__2992;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__2979);
	if(temp__6738__auto__){
	var seq__2979__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__2979__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__2979__$1);
	var G__2993 = cljs.core.chunk_rest(seq__2979__$1);
	var G__2994 = c__5929__auto__;
	var G__2995 = cljs.core.count(c__5929__auto__);
	var G__2996 = (0);
	seq__2979 = G__2993;
	chunk__2980 = G__2994;
	count__2981 = G__2995;
	i__2982 = G__2996;
	continue;
	} else {
	var vec__2986 = cljs.core.first(seq__2979__$1);
	var key = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2986,(0),null);
	var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__2986,(1),null);
	(f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(key,this$__$1,oldval,newval) : f.call(null,key,this$__$1,oldval,newval));

	var G__2997 = cljs.core.next(seq__2979__$1);
	var G__2998 = null;
	var G__2999 = (0);
	var G__3000 = (0);
	seq__2979 = G__2997;
	chunk__2980 = G__2998;
	count__2981 = G__2999;
	i__2982 = G__3000;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.Atom.prototype.cljs$core$IWatchable$_add_watch$arity$3 = (function (this$,key,f){
	var self__ = this;
	var this$__$1 = this;
	this$__$1.watches = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.watches,key,f);

	return this$__$1;
	});

	cljs.core.Atom.prototype.cljs$core$IWatchable$_remove_watch$arity$2 = (function (this$,key){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1.watches = cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.watches,key);
	});

	cljs.core.Atom.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return goog.getUid(this$__$1);
	});

	cljs.core.Atom.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$state,cljs.core.cst$sym$meta,cljs.core.cst$sym$validator,cljs.core.cst$sym$watches], null);
	});

	cljs.core.Atom.cljs$lang$type = true;

	cljs.core.Atom.cljs$lang$ctorStr = "cljs.core/Atom";

	cljs.core.Atom.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Atom");
	});

	cljs.core.__GT_Atom = (function cljs$core$__GT_Atom(state,meta,validator,watches){
	return (new cljs.core.Atom(state,meta,validator,watches));
	});

	/**
	 * Creates and returns an Atom with an initial value of x and zero or
	 *   more options (in any order):
	 * 
	 *   :meta metadata-map
	 * 
	 *   :validator validate-fn
	 * 
	 *   If metadata-map is supplied, it will be come the metadata on the
	 *   atom. validate-fn must be nil or a side-effect-free fn of one
	 *   argument, which will be passed the intended new state on any state
	 *   change. If the new state is unacceptable, the validate-fn should
	 *   return false or throw an Error.  If either of these error conditions
	 *   occur, then the value of the atom will not change.
	 */
	cljs.core.atom = (function cljs$core$atom(var_args){
	var args3001 = [];
	var len__6099__auto___3009 = arguments.length;
	var i__6100__auto___3010 = (0);
	while(true){
	if((i__6100__auto___3010 < len__6099__auto___3009)){
	args3001.push((arguments[i__6100__auto___3010]));

	var G__3011 = (i__6100__auto___3010 + (1));
	i__6100__auto___3010 = G__3011;
	continue;
	} else {
	}
	break;
	}

	var G__3005 = args3001.length;
	switch (G__3005) {
	case 1:
	return cljs.core.atom.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3001.slice((1)),(0),null));
	return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6118__auto__);

	}
	});

	cljs.core.atom.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (new cljs.core.Atom(x,null,null,null));
	});

	cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic = (function (x,p__3006){
	var map__3007 = p__3006;
	var map__3007__$1 = ((((!((map__3007 == null)))?((((map__3007.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__3007.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__3007):map__3007);
	var meta = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__3007__$1,cljs.core.cst$kw$meta);
	var validator = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__3007__$1,cljs.core.cst$kw$validator);
	return (new cljs.core.Atom(x,meta,validator,null));
	});

	cljs.core.atom.cljs$lang$applyTo = (function (seq3002){
	var G__3003 = cljs.core.first(seq3002);
	var seq3002__$1 = cljs.core.next(seq3002);
	return cljs.core.atom.cljs$core$IFn$_invoke$arity$variadic(G__3003,seq3002__$1);
	});

	cljs.core.atom.cljs$lang$maxFixedArity = (1);

	/**
	 * Sets the value of atom to newval without regard for the
	 *   current value. Returns new-value.
	 */
	cljs.core.reset_BANG_ = (function cljs$core$reset_BANG_(a,new_value){
	if((a instanceof cljs.core.Atom)){
	var validate = a.validator;
	if((validate == null)){
	} else {
	if(cljs.core.truth_((validate.cljs$core$IFn$_invoke$arity$1 ? validate.cljs$core$IFn$_invoke$arity$1(new_value) : validate.call(null,new_value)))){
	} else {
	throw (new Error("Validator rejected reference state"));
	}
	}

	var old_value = a.state;
	a.state = new_value;

	if((a.watches == null)){
	} else {
	cljs.core._notify_watches(a,old_value,new_value);
	}

	return new_value;
	} else {
	return cljs.core._reset_BANG_(a,new_value);
	}
	});
	/**
	 * Atomically swaps the value of atom to be:
	 *   (apply f current-value-of-atom args). Note that f may be called
	 *   multiple times, and thus should be free of side effects.  Returns
	 *   the value that was swapped in.
	 */
	cljs.core.swap_BANG_ = (function cljs$core$swap_BANG_(var_args){
	var args3013 = [];
	var len__6099__auto___3027 = arguments.length;
	var i__6100__auto___3028 = (0);
	while(true){
	if((i__6100__auto___3028 < len__6099__auto___3027)){
	args3013.push((arguments[i__6100__auto___3028]));

	var G__3029 = (i__6100__auto___3028 + (1));
	i__6100__auto___3028 = G__3029;
	continue;
	} else {
	}
	break;
	}

	var G__3020 = args3013.length;
	switch (G__3020) {
	case 2:
	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3013.slice((4)),(0),null));
	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__6118__auto__);

	}
	});

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2 = (function (a,f){
	if((a instanceof cljs.core.Atom)){
	return cljs.core.reset_BANG_(a,(function (){var G__3021 = a.state;
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3021) : f.call(null,G__3021));
	})());
	} else {
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$2(a,f);
	}
	});

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3 = (function (a,f,x){
	if((a instanceof cljs.core.Atom)){
	return cljs.core.reset_BANG_(a,(function (){var G__3022 = a.state;
	var G__3023 = x;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3022,G__3023) : f.call(null,G__3022,G__3023));
	})());
	} else {
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$3(a,f,x);
	}
	});

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4 = (function (a,f,x,y){
	if((a instanceof cljs.core.Atom)){
	return cljs.core.reset_BANG_(a,(function (){var G__3024 = a.state;
	var G__3025 = x;
	var G__3026 = y;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3024,G__3025,G__3026) : f.call(null,G__3024,G__3025,G__3026));
	})());
	} else {
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$4(a,f,x,y);
	}
	});

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (a,f,x,y,more){
	if((a instanceof cljs.core.Atom)){
	return cljs.core.reset_BANG_(a,cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,a.state,x,y,more));
	} else {
	return cljs.core._swap_BANG_.cljs$core$IFn$_invoke$arity$5(a,f,x,y,more);
	}
	});

	cljs.core.swap_BANG_.cljs$lang$applyTo = (function (seq3014){
	var G__3015 = cljs.core.first(seq3014);
	var seq3014__$1 = cljs.core.next(seq3014);
	var G__3016 = cljs.core.first(seq3014__$1);
	var seq3014__$2 = cljs.core.next(seq3014__$1);
	var G__3017 = cljs.core.first(seq3014__$2);
	var seq3014__$3 = cljs.core.next(seq3014__$2);
	var G__3018 = cljs.core.first(seq3014__$3);
	var seq3014__$4 = cljs.core.next(seq3014__$3);
	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__3015,G__3016,G__3017,G__3018,seq3014__$4);
	});

	cljs.core.swap_BANG_.cljs$lang$maxFixedArity = (4);

	/**
	 * Atomically sets the value of atom to newval if and only if the
	 *   current value of the atom is equal to oldval. Returns true if
	 *   set happened, else false.
	 */
	cljs.core.compare_and_set_BANG_ = (function cljs$core$compare_and_set_BANG_(a,oldval,newval){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(a.cljs$core$IDeref$_deref$arity$1(null),oldval)){
	cljs.core.reset_BANG_(a,newval);

	return true;
	} else {
	return false;
	}
	});
	/**
	 * Sets the validator-fn for an atom. validator-fn must be nil or a
	 *   side-effect-free fn of one argument, which will be passed the intended
	 *   new state on any state change. If the new state is unacceptable, the
	 *   validator-fn should return false or throw an Error. If the current state
	 *   is not acceptable to the new validator, an Error will be thrown and the
	 *   validator will not be changed.
	 */
	cljs.core.set_validator_BANG_ = (function cljs$core$set_validator_BANG_(iref,val){
	return iref.validator = val;
	});
	/**
	 * Gets the validator-fn for a var/ref/agent/atom.
	 */
	cljs.core.get_validator = (function cljs$core$get_validator(iref){
	return iref.validator;
	});

	/**
	* @constructor
	 * @implements {cljs.core.IVolatile}
	 * @implements {cljs.core.IDeref}
	*/
	cljs.core.Volatile = (function (state){
	this.state = state;
	this.cljs$lang$protocol_mask$partition0$ = 32768;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.Volatile.prototype.cljs$core$IVolatile$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Volatile.prototype.cljs$core$IVolatile$_vreset_BANG_$arity$2 = (function (_,new_state){
	var self__ = this;
	var ___$1 = this;
	return self__.state = new_state;
	});

	cljs.core.Volatile.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return self__.state;
	});

	cljs.core.Volatile.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$state,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Volatile.cljs$lang$type = true;

	cljs.core.Volatile.cljs$lang$ctorStr = "cljs.core/Volatile";

	cljs.core.Volatile.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Volatile");
	});

	cljs.core.__GT_Volatile = (function cljs$core$__GT_Volatile(state){
	return (new cljs.core.Volatile(state));
	});

	/**
	 * Creates and returns a Volatile with an initial value of val.
	 */
	cljs.core.volatile_BANG_ = (function cljs$core$volatile_BANG_(val){
	return (new cljs.core.Volatile(val));
	});
	/**
	 * Returns true if x is a volatile.
	 */
	cljs.core.volatile_QMARK_ = (function cljs$core$volatile_QMARK_(x){
	return (x instanceof cljs.core.Volatile);
	});
	/**
	 * Sets the value of volatile to newval without regard for the
	 * current value. Returns newval.
	 */
	cljs.core.vreset_BANG_ = (function cljs$core$vreset_BANG_(vol,newval){
	return cljs.core._vreset_BANG_(vol,newval);
	});
	/**
	 * Returns a lazy sequence of the non-nil results of (f index item). Note,
	 *   this means false return values will be included.  f must be free of
	 *   side-effects.  Returns a stateful transducer when no collection is
	 *   provided.
	 */
	cljs.core.keep_indexed = (function cljs$core$keep_indexed(var_args){
	var args3031 = [];
	var len__6099__auto___3062 = arguments.length;
	var i__6100__auto___3063 = (0);
	while(true){
	if((i__6100__auto___3063 < len__6099__auto___3062)){
	args3031.push((arguments[i__6100__auto___3063]));

	var G__3064 = (i__6100__auto___3063 + (1));
	i__6100__auto___3063 = G__3064;
	continue;
	} else {
	}
	break;
	}

	var G__3033 = args3031.length;
	switch (G__3033) {
	case 1:
	return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3031.length)].join('')));

	}
	});

	cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function (rf){
	var ia = cljs.core.volatile_BANG_((-1));
	return ((function (ia){
	return (function() {
	var G__3066 = null;
	var G__3066__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3066__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3066__2 = (function (result,input){
	var i = cljs.core._vreset_BANG_(ia,(cljs.core._deref(ia) + (1)));
	var v = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(i,input) : f.call(null,i,input));
	if((v == null)){
	return result;
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v));
	}
	});
	G__3066 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3066__0.call(this);
	case 1:
	return G__3066__1.call(this,result);
	case 2:
	return G__3066__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3066.cljs$core$IFn$_invoke$arity$0 = G__3066__0;
	G__3066.cljs$core$IFn$_invoke$arity$1 = G__3066__1;
	G__3066.cljs$core$IFn$_invoke$arity$2 = G__3066__2;
	return G__3066;
	})()
	;})(ia))
	});
	});

	cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	var keepi = (function cljs$core$keepi(idx,coll__$1){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll__$1);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s)){
	var c = cljs.core.chunk_first(s);
	var size = cljs.core.count(c);
	var b = cljs.core.chunk_buffer(size);
	var n__5991__auto___3067 = size;
	var i_3068 = (0);
	while(true){
	if((i_3068 < n__5991__auto___3067)){
	var x_3069 = (function (){var G__3058 = (idx + i_3068);
	var G__3059 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_3068);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3058,G__3059) : f.call(null,G__3058,G__3059));
	})();
	if((x_3069 == null)){
	} else {
	cljs.core.chunk_append(b,x_3069);
	}

	var G__3070 = (i_3068 + (1));
	i_3068 = G__3070;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.chunk_cons(cljs.core.chunk(b),cljs$core$keepi((idx + size),cljs.core.chunk_rest(s)));
	} else {
	var x = (function (){var G__3060 = idx;
	var G__3061 = cljs.core.first(s);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3060,G__3061) : f.call(null,G__3060,G__3061));
	})();
	if((x == null)){
	return cljs$core$keepi((idx + (1)),cljs.core.rest(s));
	} else {
	return cljs.core.cons(x,cljs$core$keepi((idx + (1)),cljs.core.rest(s)));
	}
	}
	} else {
	return null;
	}
	}),null,null));
	});
	return keepi((0),coll);
	});

	cljs.core.keep_indexed.cljs$lang$maxFixedArity = 2;

	/**
	 * Takes a set of predicates and returns a function f that returns true if all of its
	 *   composing predicates return a logical true value against all of its arguments, else it returns
	 *   false. Note that f is short-circuiting in that it will stop execution on the first
	 *   argument that triggers a logical false result against the original predicates.
	 */
	cljs.core.every_pred = (function cljs$core$every_pred(var_args){
	var args3077 = [];
	var len__6099__auto___3084 = arguments.length;
	var i__6100__auto___3085 = (0);
	while(true){
	if((i__6100__auto___3085 < len__6099__auto___3084)){
	args3077.push((arguments[i__6100__auto___3085]));

	var G__3086 = (i__6100__auto___3085 + (1));
	i__6100__auto___3085 = G__3086;
	continue;
	} else {
	}
	break;
	}

	var G__3083 = args3077.length;
	switch (G__3083) {
	case 1:
	return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3077.slice((3)),(0),null));
	return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.every_pred.cljs$core$IFn$_invoke$arity$1 = (function (p){
	return (function() {
	var cljs$core$ep1 = null;
	var cljs$core$ep1__0 = (function (){
	return true;
	});
	var cljs$core$ep1__1 = (function (x){
	return cljs.core.boolean$((p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x)));
	});
	var cljs$core$ep1__2 = (function (x,y){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	return (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null,y));
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep1__3 = (function (x,y,z){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$1)){
	return (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null,z));
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep1__4 = (function() { 
	var G__3088__delegate = function (x,y,z,args){
	return cljs.core.boolean$((function (){var and__5442__auto__ = cljs$core$ep1.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(and__5442__auto__)){
	return cljs.core.every_QMARK_(p,args);
	} else {
	return and__5442__auto__;
	}
	})());
	};
	var G__3088 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3089__i = 0, G__3089__a = new Array(arguments.length -  3);
	while (G__3089__i < G__3089__a.length) {G__3089__a[G__3089__i] = arguments[G__3089__i + 3]; ++G__3089__i;}
	  args = new cljs.core.IndexedSeq(G__3089__a,0,null);
	} 
	return G__3088__delegate.call(this,x,y,z,args);};
	G__3088.cljs$lang$maxFixedArity = 3;
	G__3088.cljs$lang$applyTo = (function (arglist__3090){
	var x = cljs.core.first(arglist__3090);
	arglist__3090 = cljs.core.next(arglist__3090);
	var y = cljs.core.first(arglist__3090);
	arglist__3090 = cljs.core.next(arglist__3090);
	var z = cljs.core.first(arglist__3090);
	var args = cljs.core.rest(arglist__3090);
	return G__3088__delegate(x,y,z,args);
	});
	G__3088.cljs$core$IFn$_invoke$arity$variadic = G__3088__delegate;
	return G__3088;
	})()
	;
	cljs$core$ep1 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$ep1__0.call(this);
	case 1:
	return cljs$core$ep1__1.call(this,x);
	case 2:
	return cljs$core$ep1__2.call(this,x,y);
	case 3:
	return cljs$core$ep1__3.call(this,x,y,z);
	default:
	var G__3091 = null;
	if (arguments.length > 3) {
	var G__3092__i = 0, G__3092__a = new Array(arguments.length -  3);
	while (G__3092__i < G__3092__a.length) {G__3092__a[G__3092__i] = arguments[G__3092__i + 3]; ++G__3092__i;}
	G__3091 = new cljs.core.IndexedSeq(G__3092__a,0,null);
	}
	return cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3091);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$ep1.cljs$lang$maxFixedArity = 3;
	cljs$core$ep1.cljs$lang$applyTo = cljs$core$ep1__4.cljs$lang$applyTo;
	cljs$core$ep1.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep1__0;
	cljs$core$ep1.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep1__1;
	cljs$core$ep1.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep1__2;
	cljs$core$ep1.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep1__3;
	cljs$core$ep1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep1__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$ep1;
	})()
	});

	cljs.core.every_pred.cljs$core$IFn$_invoke$arity$2 = (function (p1,p2){
	return (function() {
	var cljs$core$ep2 = null;
	var cljs$core$ep2__0 = (function (){
	return true;
	});
	var cljs$core$ep2__1 = (function (x){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep2__2 = (function (x,y){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$1)){
	var and__5442__auto____$2 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$2)){
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep2__3 = (function (x,y,z){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$1)){
	var and__5442__auto____$2 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null,z));
	if(cljs.core.truth_(and__5442__auto____$2)){
	var and__5442__auto____$3 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$3)){
	var and__5442__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$4)){
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null,z));
	} else {
	return and__5442__auto____$4;
	}
	} else {
	return and__5442__auto____$3;
	}
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep2__4 = (function() { 
	var G__3093__delegate = function (x,y,z,args){
	return cljs.core.boolean$((function (){var and__5442__auto__ = cljs$core$ep2.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(and__5442__auto__)){
	return cljs.core.every_QMARK_(((function (and__5442__auto__){
	return (function (p1__3071_SHARP_){
	var and__5442__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3071_SHARP_) : p1.call(null,p1__3071_SHARP_));
	if(cljs.core.truth_(and__5442__auto____$1)){
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3071_SHARP_) : p2.call(null,p1__3071_SHARP_));
	} else {
	return and__5442__auto____$1;
	}
	});})(and__5442__auto__))
	,args);
	} else {
	return and__5442__auto__;
	}
	})());
	};
	var G__3093 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3094__i = 0, G__3094__a = new Array(arguments.length -  3);
	while (G__3094__i < G__3094__a.length) {G__3094__a[G__3094__i] = arguments[G__3094__i + 3]; ++G__3094__i;}
	  args = new cljs.core.IndexedSeq(G__3094__a,0,null);
	} 
	return G__3093__delegate.call(this,x,y,z,args);};
	G__3093.cljs$lang$maxFixedArity = 3;
	G__3093.cljs$lang$applyTo = (function (arglist__3095){
	var x = cljs.core.first(arglist__3095);
	arglist__3095 = cljs.core.next(arglist__3095);
	var y = cljs.core.first(arglist__3095);
	arglist__3095 = cljs.core.next(arglist__3095);
	var z = cljs.core.first(arglist__3095);
	var args = cljs.core.rest(arglist__3095);
	return G__3093__delegate(x,y,z,args);
	});
	G__3093.cljs$core$IFn$_invoke$arity$variadic = G__3093__delegate;
	return G__3093;
	})()
	;
	cljs$core$ep2 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$ep2__0.call(this);
	case 1:
	return cljs$core$ep2__1.call(this,x);
	case 2:
	return cljs$core$ep2__2.call(this,x,y);
	case 3:
	return cljs$core$ep2__3.call(this,x,y,z);
	default:
	var G__3096 = null;
	if (arguments.length > 3) {
	var G__3097__i = 0, G__3097__a = new Array(arguments.length -  3);
	while (G__3097__i < G__3097__a.length) {G__3097__a[G__3097__i] = arguments[G__3097__i + 3]; ++G__3097__i;}
	G__3096 = new cljs.core.IndexedSeq(G__3097__a,0,null);
	}
	return cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3096);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$ep2.cljs$lang$maxFixedArity = 3;
	cljs$core$ep2.cljs$lang$applyTo = cljs$core$ep2__4.cljs$lang$applyTo;
	cljs$core$ep2.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep2__0;
	cljs$core$ep2.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep2__1;
	cljs$core$ep2.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep2__2;
	cljs$core$ep2.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep2__3;
	cljs$core$ep2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep2__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$ep2;
	})()
	});

	cljs.core.every_pred.cljs$core$IFn$_invoke$arity$3 = (function (p1,p2,p3){
	return (function() {
	var cljs$core$ep3 = null;
	var cljs$core$ep3__0 = (function (){
	return true;
	});
	var cljs$core$ep3__1 = (function (x){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$1)){
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep3__2 = (function (x,y){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$1)){
	var and__5442__auto____$2 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$2)){
	var and__5442__auto____$3 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$3)){
	var and__5442__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$4)){
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null,y));
	} else {
	return and__5442__auto____$4;
	}
	} else {
	return and__5442__auto____$3;
	}
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep3__3 = (function (x,y,z){
	return cljs.core.boolean$((function (){var and__5442__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$1)){
	var and__5442__auto____$2 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	if(cljs.core.truth_(and__5442__auto____$2)){
	var and__5442__auto____$3 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$3)){
	var and__5442__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$4)){
	var and__5442__auto____$5 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$5)){
	var and__5442__auto____$6 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null,z));
	if(cljs.core.truth_(and__5442__auto____$6)){
	var and__5442__auto____$7 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null,z));
	if(cljs.core.truth_(and__5442__auto____$7)){
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null,z));
	} else {
	return and__5442__auto____$7;
	}
	} else {
	return and__5442__auto____$6;
	}
	} else {
	return and__5442__auto____$5;
	}
	} else {
	return and__5442__auto____$4;
	}
	} else {
	return and__5442__auto____$3;
	}
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	})());
	});
	var cljs$core$ep3__4 = (function() { 
	var G__3098__delegate = function (x,y,z,args){
	return cljs.core.boolean$((function (){var and__5442__auto__ = cljs$core$ep3.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(and__5442__auto__)){
	return cljs.core.every_QMARK_(((function (and__5442__auto__){
	return (function (p1__3072_SHARP_){
	var and__5442__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3072_SHARP_) : p1.call(null,p1__3072_SHARP_));
	if(cljs.core.truth_(and__5442__auto____$1)){
	var and__5442__auto____$2 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3072_SHARP_) : p2.call(null,p1__3072_SHARP_));
	if(cljs.core.truth_(and__5442__auto____$2)){
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__3072_SHARP_) : p3.call(null,p1__3072_SHARP_));
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	});})(and__5442__auto__))
	,args);
	} else {
	return and__5442__auto__;
	}
	})());
	};
	var G__3098 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3099__i = 0, G__3099__a = new Array(arguments.length -  3);
	while (G__3099__i < G__3099__a.length) {G__3099__a[G__3099__i] = arguments[G__3099__i + 3]; ++G__3099__i;}
	  args = new cljs.core.IndexedSeq(G__3099__a,0,null);
	} 
	return G__3098__delegate.call(this,x,y,z,args);};
	G__3098.cljs$lang$maxFixedArity = 3;
	G__3098.cljs$lang$applyTo = (function (arglist__3100){
	var x = cljs.core.first(arglist__3100);
	arglist__3100 = cljs.core.next(arglist__3100);
	var y = cljs.core.first(arglist__3100);
	arglist__3100 = cljs.core.next(arglist__3100);
	var z = cljs.core.first(arglist__3100);
	var args = cljs.core.rest(arglist__3100);
	return G__3098__delegate(x,y,z,args);
	});
	G__3098.cljs$core$IFn$_invoke$arity$variadic = G__3098__delegate;
	return G__3098;
	})()
	;
	cljs$core$ep3 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$ep3__0.call(this);
	case 1:
	return cljs$core$ep3__1.call(this,x);
	case 2:
	return cljs$core$ep3__2.call(this,x,y);
	case 3:
	return cljs$core$ep3__3.call(this,x,y,z);
	default:
	var G__3101 = null;
	if (arguments.length > 3) {
	var G__3102__i = 0, G__3102__a = new Array(arguments.length -  3);
	while (G__3102__i < G__3102__a.length) {G__3102__a[G__3102__i] = arguments[G__3102__i + 3]; ++G__3102__i;}
	G__3101 = new cljs.core.IndexedSeq(G__3102__a,0,null);
	}
	return cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3101);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$ep3.cljs$lang$maxFixedArity = 3;
	cljs$core$ep3.cljs$lang$applyTo = cljs$core$ep3__4.cljs$lang$applyTo;
	cljs$core$ep3.cljs$core$IFn$_invoke$arity$0 = cljs$core$ep3__0;
	cljs$core$ep3.cljs$core$IFn$_invoke$arity$1 = cljs$core$ep3__1;
	cljs$core$ep3.cljs$core$IFn$_invoke$arity$2 = cljs$core$ep3__2;
	cljs$core$ep3.cljs$core$IFn$_invoke$arity$3 = cljs$core$ep3__3;
	cljs$core$ep3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$ep3__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$ep3;
	})()
	});

	cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic = (function (p1,p2,p3,ps){
	var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1,p2,p3,ps);
	return ((function (ps__$1){
	return (function() {
	var cljs$core$epn = null;
	var cljs$core$epn__0 = (function (){
	return true;
	});
	var cljs$core$epn__1 = (function (x){
	return cljs.core.every_QMARK_(((function (ps__$1){
	return (function (p1__3073_SHARP_){
	return (p1__3073_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3073_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3073_SHARP_.call(null,x));
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$epn__2 = (function (x,y){
	return cljs.core.every_QMARK_(((function (ps__$1){
	return (function (p1__3074_SHARP_){
	var and__5442__auto__ = (p1__3074_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3074_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3074_SHARP_.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	return (p1__3074_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3074_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3074_SHARP_.call(null,y));
	} else {
	return and__5442__auto__;
	}
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$epn__3 = (function (x,y,z){
	return cljs.core.every_QMARK_(((function (ps__$1){
	return (function (p1__3075_SHARP_){
	var and__5442__auto__ = (p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3075_SHARP_.call(null,x));
	if(cljs.core.truth_(and__5442__auto__)){
	var and__5442__auto____$1 = (p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3075_SHARP_.call(null,y));
	if(cljs.core.truth_(and__5442__auto____$1)){
	return (p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3075_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__3075_SHARP_.call(null,z));
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$epn__4 = (function() { 
	var G__3103__delegate = function (x,y,z,args){
	return cljs.core.boolean$((function (){var and__5442__auto__ = cljs$core$epn.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(and__5442__auto__)){
	return cljs.core.every_QMARK_(((function (and__5442__auto__,ps__$1){
	return (function (p1__3076_SHARP_){
	return cljs.core.every_QMARK_(p1__3076_SHARP_,args);
	});})(and__5442__auto__,ps__$1))
	,ps__$1);
	} else {
	return and__5442__auto__;
	}
	})());
	};
	var G__3103 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3104__i = 0, G__3104__a = new Array(arguments.length -  3);
	while (G__3104__i < G__3104__a.length) {G__3104__a[G__3104__i] = arguments[G__3104__i + 3]; ++G__3104__i;}
	  args = new cljs.core.IndexedSeq(G__3104__a,0,null);
	} 
	return G__3103__delegate.call(this,x,y,z,args);};
	G__3103.cljs$lang$maxFixedArity = 3;
	G__3103.cljs$lang$applyTo = (function (arglist__3105){
	var x = cljs.core.first(arglist__3105);
	arglist__3105 = cljs.core.next(arglist__3105);
	var y = cljs.core.first(arglist__3105);
	arglist__3105 = cljs.core.next(arglist__3105);
	var z = cljs.core.first(arglist__3105);
	var args = cljs.core.rest(arglist__3105);
	return G__3103__delegate(x,y,z,args);
	});
	G__3103.cljs$core$IFn$_invoke$arity$variadic = G__3103__delegate;
	return G__3103;
	})()
	;
	cljs$core$epn = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$epn__0.call(this);
	case 1:
	return cljs$core$epn__1.call(this,x);
	case 2:
	return cljs$core$epn__2.call(this,x,y);
	case 3:
	return cljs$core$epn__3.call(this,x,y,z);
	default:
	var G__3106 = null;
	if (arguments.length > 3) {
	var G__3107__i = 0, G__3107__a = new Array(arguments.length -  3);
	while (G__3107__i < G__3107__a.length) {G__3107__a[G__3107__i] = arguments[G__3107__i + 3]; ++G__3107__i;}
	G__3106 = new cljs.core.IndexedSeq(G__3107__a,0,null);
	}
	return cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3106);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$epn.cljs$lang$maxFixedArity = 3;
	cljs$core$epn.cljs$lang$applyTo = cljs$core$epn__4.cljs$lang$applyTo;
	cljs$core$epn.cljs$core$IFn$_invoke$arity$0 = cljs$core$epn__0;
	cljs$core$epn.cljs$core$IFn$_invoke$arity$1 = cljs$core$epn__1;
	cljs$core$epn.cljs$core$IFn$_invoke$arity$2 = cljs$core$epn__2;
	cljs$core$epn.cljs$core$IFn$_invoke$arity$3 = cljs$core$epn__3;
	cljs$core$epn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$epn__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$epn;
	})()
	;})(ps__$1))
	});

	cljs.core.every_pred.cljs$lang$applyTo = (function (seq3078){
	var G__3079 = cljs.core.first(seq3078);
	var seq3078__$1 = cljs.core.next(seq3078);
	var G__3080 = cljs.core.first(seq3078__$1);
	var seq3078__$2 = cljs.core.next(seq3078__$1);
	var G__3081 = cljs.core.first(seq3078__$2);
	var seq3078__$3 = cljs.core.next(seq3078__$2);
	return cljs.core.every_pred.cljs$core$IFn$_invoke$arity$variadic(G__3079,G__3080,G__3081,seq3078__$3);
	});

	cljs.core.every_pred.cljs$lang$maxFixedArity = (3);

	/**
	 * Takes a set of predicates and returns a function f that returns the first logical true value
	 *   returned by one of its composing predicates against any of its arguments, else it returns
	 *   logical false. Note that f is short-circuiting in that it will stop execution on the first
	 *   argument that triggers a logical true result against the original predicates.
	 */
	cljs.core.some_fn = (function cljs$core$some_fn(var_args){
	var args3114 = [];
	var len__6099__auto___3121 = arguments.length;
	var i__6100__auto___3122 = (0);
	while(true){
	if((i__6100__auto___3122 < len__6099__auto___3121)){
	args3114.push((arguments[i__6100__auto___3122]));

	var G__3123 = (i__6100__auto___3122 + (1));
	i__6100__auto___3122 = G__3123;
	continue;
	} else {
	}
	break;
	}

	var G__3120 = args3114.length;
	switch (G__3120) {
	case 1:
	return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3114.slice((3)),(0),null));
	return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.some_fn.cljs$core$IFn$_invoke$arity$1 = (function (p){
	return (function() {
	var cljs$core$sp1 = null;
	var cljs$core$sp1__0 = (function (){
	return null;
	});
	var cljs$core$sp1__1 = (function (x){
	return (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x));
	});
	var cljs$core$sp1__2 = (function (x,y){
	var or__5450__auto__ = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null,y));
	}
	});
	var cljs$core$sp1__3 = (function (x,y,z){
	var or__5450__auto__ = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(x) : p.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(y) : p.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	return (p.cljs$core$IFn$_invoke$arity$1 ? p.cljs$core$IFn$_invoke$arity$1(z) : p.call(null,z));
	}
	}
	});
	var cljs$core$sp1__4 = (function() { 
	var G__3125__delegate = function (x,y,z,args){
	var or__5450__auto__ = cljs$core$sp1.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.some(p,args);
	}
	};
	var G__3125 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3126__i = 0, G__3126__a = new Array(arguments.length -  3);
	while (G__3126__i < G__3126__a.length) {G__3126__a[G__3126__i] = arguments[G__3126__i + 3]; ++G__3126__i;}
	  args = new cljs.core.IndexedSeq(G__3126__a,0,null);
	} 
	return G__3125__delegate.call(this,x,y,z,args);};
	G__3125.cljs$lang$maxFixedArity = 3;
	G__3125.cljs$lang$applyTo = (function (arglist__3127){
	var x = cljs.core.first(arglist__3127);
	arglist__3127 = cljs.core.next(arglist__3127);
	var y = cljs.core.first(arglist__3127);
	arglist__3127 = cljs.core.next(arglist__3127);
	var z = cljs.core.first(arglist__3127);
	var args = cljs.core.rest(arglist__3127);
	return G__3125__delegate(x,y,z,args);
	});
	G__3125.cljs$core$IFn$_invoke$arity$variadic = G__3125__delegate;
	return G__3125;
	})()
	;
	cljs$core$sp1 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$sp1__0.call(this);
	case 1:
	return cljs$core$sp1__1.call(this,x);
	case 2:
	return cljs$core$sp1__2.call(this,x,y);
	case 3:
	return cljs$core$sp1__3.call(this,x,y,z);
	default:
	var G__3128 = null;
	if (arguments.length > 3) {
	var G__3129__i = 0, G__3129__a = new Array(arguments.length -  3);
	while (G__3129__i < G__3129__a.length) {G__3129__a[G__3129__i] = arguments[G__3129__i + 3]; ++G__3129__i;}
	G__3128 = new cljs.core.IndexedSeq(G__3129__a,0,null);
	}
	return cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3128);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$sp1.cljs$lang$maxFixedArity = 3;
	cljs$core$sp1.cljs$lang$applyTo = cljs$core$sp1__4.cljs$lang$applyTo;
	cljs$core$sp1.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp1__0;
	cljs$core$sp1.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp1__1;
	cljs$core$sp1.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp1__2;
	cljs$core$sp1.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp1__3;
	cljs$core$sp1.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp1__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$sp1;
	})()
	});

	cljs.core.some_fn.cljs$core$IFn$_invoke$arity$2 = (function (p1,p2){
	return (function() {
	var cljs$core$sp2 = null;
	var cljs$core$sp2__0 = (function (){
	return null;
	});
	var cljs$core$sp2__1 = (function (x){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	}
	});
	var cljs$core$sp2__2 = (function (x,y){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	}
	}
	}
	});
	var cljs$core$sp2__3 = (function (x,y,z){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null,z));
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	var or__5450__auto____$3 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$3)){
	return or__5450__auto____$3;
	} else {
	var or__5450__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$4)){
	return or__5450__auto____$4;
	} else {
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null,z));
	}
	}
	}
	}
	}
	});
	var cljs$core$sp2__4 = (function() { 
	var G__3130__delegate = function (x,y,z,args){
	var or__5450__auto__ = cljs$core$sp2.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.some(((function (or__5450__auto__){
	return (function (p1__3108_SHARP_){
	var or__5450__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3108_SHARP_) : p1.call(null,p1__3108_SHARP_));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	return (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3108_SHARP_) : p2.call(null,p1__3108_SHARP_));
	}
	});})(or__5450__auto__))
	,args);
	}
	};
	var G__3130 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3131__i = 0, G__3131__a = new Array(arguments.length -  3);
	while (G__3131__i < G__3131__a.length) {G__3131__a[G__3131__i] = arguments[G__3131__i + 3]; ++G__3131__i;}
	  args = new cljs.core.IndexedSeq(G__3131__a,0,null);
	} 
	return G__3130__delegate.call(this,x,y,z,args);};
	G__3130.cljs$lang$maxFixedArity = 3;
	G__3130.cljs$lang$applyTo = (function (arglist__3132){
	var x = cljs.core.first(arglist__3132);
	arglist__3132 = cljs.core.next(arglist__3132);
	var y = cljs.core.first(arglist__3132);
	arglist__3132 = cljs.core.next(arglist__3132);
	var z = cljs.core.first(arglist__3132);
	var args = cljs.core.rest(arglist__3132);
	return G__3130__delegate(x,y,z,args);
	});
	G__3130.cljs$core$IFn$_invoke$arity$variadic = G__3130__delegate;
	return G__3130;
	})()
	;
	cljs$core$sp2 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$sp2__0.call(this);
	case 1:
	return cljs$core$sp2__1.call(this,x);
	case 2:
	return cljs$core$sp2__2.call(this,x,y);
	case 3:
	return cljs$core$sp2__3.call(this,x,y,z);
	default:
	var G__3133 = null;
	if (arguments.length > 3) {
	var G__3134__i = 0, G__3134__a = new Array(arguments.length -  3);
	while (G__3134__i < G__3134__a.length) {G__3134__a[G__3134__i] = arguments[G__3134__i + 3]; ++G__3134__i;}
	G__3133 = new cljs.core.IndexedSeq(G__3134__a,0,null);
	}
	return cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3133);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$sp2.cljs$lang$maxFixedArity = 3;
	cljs$core$sp2.cljs$lang$applyTo = cljs$core$sp2__4.cljs$lang$applyTo;
	cljs$core$sp2.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp2__0;
	cljs$core$sp2.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp2__1;
	cljs$core$sp2.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp2__2;
	cljs$core$sp2.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp2__3;
	cljs$core$sp2.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp2__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$sp2;
	})()
	});

	cljs.core.some_fn.cljs$core$IFn$_invoke$arity$3 = (function (p1,p2,p3){
	return (function() {
	var cljs$core$sp3 = null;
	var cljs$core$sp3__0 = (function (){
	return null;
	});
	var cljs$core$sp3__1 = (function (x){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	}
	}
	});
	var cljs$core$sp3__2 = (function (x,y){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	var or__5450__auto____$3 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$3)){
	return or__5450__auto____$3;
	} else {
	var or__5450__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$4)){
	return or__5450__auto____$4;
	} else {
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null,y));
	}
	}
	}
	}
	}
	});
	var cljs$core$sp3__3 = (function (x,y,z){
	var or__5450__auto__ = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(x) : p1.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(x) : p2.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(x) : p3.call(null,x));
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	var or__5450__auto____$3 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(y) : p1.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$3)){
	return or__5450__auto____$3;
	} else {
	var or__5450__auto____$4 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(y) : p2.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$4)){
	return or__5450__auto____$4;
	} else {
	var or__5450__auto____$5 = (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(y) : p3.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$5)){
	return or__5450__auto____$5;
	} else {
	var or__5450__auto____$6 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(z) : p1.call(null,z));
	if(cljs.core.truth_(or__5450__auto____$6)){
	return or__5450__auto____$6;
	} else {
	var or__5450__auto____$7 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(z) : p2.call(null,z));
	if(cljs.core.truth_(or__5450__auto____$7)){
	return or__5450__auto____$7;
	} else {
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(z) : p3.call(null,z));
	}
	}
	}
	}
	}
	}
	}
	}
	});
	var cljs$core$sp3__4 = (function() { 
	var G__3135__delegate = function (x,y,z,args){
	var or__5450__auto__ = cljs$core$sp3.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.some(((function (or__5450__auto__){
	return (function (p1__3109_SHARP_){
	var or__5450__auto____$1 = (p1.cljs$core$IFn$_invoke$arity$1 ? p1.cljs$core$IFn$_invoke$arity$1(p1__3109_SHARP_) : p1.call(null,p1__3109_SHARP_));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (p2.cljs$core$IFn$_invoke$arity$1 ? p2.cljs$core$IFn$_invoke$arity$1(p1__3109_SHARP_) : p2.call(null,p1__3109_SHARP_));
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	return (p3.cljs$core$IFn$_invoke$arity$1 ? p3.cljs$core$IFn$_invoke$arity$1(p1__3109_SHARP_) : p3.call(null,p1__3109_SHARP_));
	}
	}
	});})(or__5450__auto__))
	,args);
	}
	};
	var G__3135 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3136__i = 0, G__3136__a = new Array(arguments.length -  3);
	while (G__3136__i < G__3136__a.length) {G__3136__a[G__3136__i] = arguments[G__3136__i + 3]; ++G__3136__i;}
	  args = new cljs.core.IndexedSeq(G__3136__a,0,null);
	} 
	return G__3135__delegate.call(this,x,y,z,args);};
	G__3135.cljs$lang$maxFixedArity = 3;
	G__3135.cljs$lang$applyTo = (function (arglist__3137){
	var x = cljs.core.first(arglist__3137);
	arglist__3137 = cljs.core.next(arglist__3137);
	var y = cljs.core.first(arglist__3137);
	arglist__3137 = cljs.core.next(arglist__3137);
	var z = cljs.core.first(arglist__3137);
	var args = cljs.core.rest(arglist__3137);
	return G__3135__delegate(x,y,z,args);
	});
	G__3135.cljs$core$IFn$_invoke$arity$variadic = G__3135__delegate;
	return G__3135;
	})()
	;
	cljs$core$sp3 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$sp3__0.call(this);
	case 1:
	return cljs$core$sp3__1.call(this,x);
	case 2:
	return cljs$core$sp3__2.call(this,x,y);
	case 3:
	return cljs$core$sp3__3.call(this,x,y,z);
	default:
	var G__3138 = null;
	if (arguments.length > 3) {
	var G__3139__i = 0, G__3139__a = new Array(arguments.length -  3);
	while (G__3139__i < G__3139__a.length) {G__3139__a[G__3139__i] = arguments[G__3139__i + 3]; ++G__3139__i;}
	G__3138 = new cljs.core.IndexedSeq(G__3139__a,0,null);
	}
	return cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3138);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$sp3.cljs$lang$maxFixedArity = 3;
	cljs$core$sp3.cljs$lang$applyTo = cljs$core$sp3__4.cljs$lang$applyTo;
	cljs$core$sp3.cljs$core$IFn$_invoke$arity$0 = cljs$core$sp3__0;
	cljs$core$sp3.cljs$core$IFn$_invoke$arity$1 = cljs$core$sp3__1;
	cljs$core$sp3.cljs$core$IFn$_invoke$arity$2 = cljs$core$sp3__2;
	cljs$core$sp3.cljs$core$IFn$_invoke$arity$3 = cljs$core$sp3__3;
	cljs$core$sp3.cljs$core$IFn$_invoke$arity$variadic = cljs$core$sp3__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$sp3;
	})()
	});

	cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic = (function (p1,p2,p3,ps){
	var ps__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(p1,p2,p3,ps);
	return ((function (ps__$1){
	return (function() {
	var cljs$core$spn = null;
	var cljs$core$spn__0 = (function (){
	return null;
	});
	var cljs$core$spn__1 = (function (x){
	return cljs.core.some(((function (ps__$1){
	return (function (p1__3110_SHARP_){
	return (p1__3110_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3110_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3110_SHARP_.call(null,x));
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$spn__2 = (function (x,y){
	return cljs.core.some(((function (ps__$1){
	return (function (p1__3111_SHARP_){
	var or__5450__auto__ = (p1__3111_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3111_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3111_SHARP_.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return (p1__3111_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3111_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3111_SHARP_.call(null,y));
	}
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$spn__3 = (function (x,y,z){
	return cljs.core.some(((function (ps__$1){
	return (function (p1__3112_SHARP_){
	var or__5450__auto__ = (p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p1__3112_SHARP_.call(null,x));
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1(y) : p1__3112_SHARP_.call(null,y));
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	return (p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p1__3112_SHARP_.cljs$core$IFn$_invoke$arity$1(z) : p1__3112_SHARP_.call(null,z));
	}
	}
	});})(ps__$1))
	,ps__$1);
	});
	var cljs$core$spn__4 = (function() { 
	var G__3140__delegate = function (x,y,z,args){
	var or__5450__auto__ = cljs$core$spn.cljs$core$IFn$_invoke$arity$3(x,y,z);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.some(((function (or__5450__auto__,ps__$1){
	return (function (p1__3113_SHARP_){
	return cljs.core.some(p1__3113_SHARP_,args);
	});})(or__5450__auto__,ps__$1))
	,ps__$1);
	}
	};
	var G__3140 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__3141__i = 0, G__3141__a = new Array(arguments.length -  3);
	while (G__3141__i < G__3141__a.length) {G__3141__a[G__3141__i] = arguments[G__3141__i + 3]; ++G__3141__i;}
	  args = new cljs.core.IndexedSeq(G__3141__a,0,null);
	} 
	return G__3140__delegate.call(this,x,y,z,args);};
	G__3140.cljs$lang$maxFixedArity = 3;
	G__3140.cljs$lang$applyTo = (function (arglist__3142){
	var x = cljs.core.first(arglist__3142);
	arglist__3142 = cljs.core.next(arglist__3142);
	var y = cljs.core.first(arglist__3142);
	arglist__3142 = cljs.core.next(arglist__3142);
	var z = cljs.core.first(arglist__3142);
	var args = cljs.core.rest(arglist__3142);
	return G__3140__delegate(x,y,z,args);
	});
	G__3140.cljs$core$IFn$_invoke$arity$variadic = G__3140__delegate;
	return G__3140;
	})()
	;
	cljs$core$spn = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return cljs$core$spn__0.call(this);
	case 1:
	return cljs$core$spn__1.call(this,x);
	case 2:
	return cljs$core$spn__2.call(this,x,y);
	case 3:
	return cljs$core$spn__3.call(this,x,y,z);
	default:
	var G__3143 = null;
	if (arguments.length > 3) {
	var G__3144__i = 0, G__3144__a = new Array(arguments.length -  3);
	while (G__3144__i < G__3144__a.length) {G__3144__a[G__3144__i] = arguments[G__3144__i + 3]; ++G__3144__i;}
	G__3143 = new cljs.core.IndexedSeq(G__3144__a,0,null);
	}
	return cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__3143);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	cljs$core$spn.cljs$lang$maxFixedArity = 3;
	cljs$core$spn.cljs$lang$applyTo = cljs$core$spn__4.cljs$lang$applyTo;
	cljs$core$spn.cljs$core$IFn$_invoke$arity$0 = cljs$core$spn__0;
	cljs$core$spn.cljs$core$IFn$_invoke$arity$1 = cljs$core$spn__1;
	cljs$core$spn.cljs$core$IFn$_invoke$arity$2 = cljs$core$spn__2;
	cljs$core$spn.cljs$core$IFn$_invoke$arity$3 = cljs$core$spn__3;
	cljs$core$spn.cljs$core$IFn$_invoke$arity$variadic = cljs$core$spn__4.cljs$core$IFn$_invoke$arity$variadic;
	return cljs$core$spn;
	})()
	;})(ps__$1))
	});

	cljs.core.some_fn.cljs$lang$applyTo = (function (seq3115){
	var G__3116 = cljs.core.first(seq3115);
	var seq3115__$1 = cljs.core.next(seq3115);
	var G__3117 = cljs.core.first(seq3115__$1);
	var seq3115__$2 = cljs.core.next(seq3115__$1);
	var G__3118 = cljs.core.first(seq3115__$2);
	var seq3115__$3 = cljs.core.next(seq3115__$2);
	return cljs.core.some_fn.cljs$core$IFn$_invoke$arity$variadic(G__3116,G__3117,G__3118,seq3115__$3);
	});

	cljs.core.some_fn.cljs$lang$maxFixedArity = (3);

	/**
	 * Returns a lazy sequence consisting of the result of applying f to
	 *   the set of first items of each coll, followed by applying f to the
	 *   set of second items in each coll, until any one of the colls is
	 *   exhausted.  Any remaining items in other colls are ignored. Function
	 *   f should accept number-of-colls arguments. Returns a transducer when
	 *   no collection is provided.
	 */
	cljs.core.map = (function cljs$core$map(var_args){
	var args3146 = [];
	var len__6099__auto___3166 = arguments.length;
	var i__6100__auto___3167 = (0);
	while(true){
	if((i__6100__auto___3167 < len__6099__auto___3166)){
	args3146.push((arguments[i__6100__auto___3167]));

	var G__3168 = (i__6100__auto___3167 + (1));
	i__6100__auto___3167 = G__3168;
	continue;
	} else {
	}
	break;
	}

	var G__3153 = args3146.length;
	switch (G__3153) {
	case 1:
	return cljs.core.map.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.map.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.map.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3146.slice((4)),(0),null));
	return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__6118__auto__);

	}
	});

	cljs.core.map.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function (rf){
	return (function() {
	var G__3170 = null;
	var G__3170__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3170__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3170__2 = (function (result,input){
	var G__3154 = result;
	var G__3155 = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null,input));
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__3154,G__3155) : rf.call(null,G__3154,G__3155));
	});
	var G__3170__3 = (function() { 
	var G__3171__delegate = function (result,input,inputs){
	var G__3156 = result;
	var G__3157 = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,input,inputs);
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(G__3156,G__3157) : rf.call(null,G__3156,G__3157));
	};
	var G__3171 = function (result,input,var_args){
	var inputs = null;
	if (arguments.length > 2) {
	var G__3172__i = 0, G__3172__a = new Array(arguments.length -  2);
	while (G__3172__i < G__3172__a.length) {G__3172__a[G__3172__i] = arguments[G__3172__i + 2]; ++G__3172__i;}
	  inputs = new cljs.core.IndexedSeq(G__3172__a,0,null);
	} 
	return G__3171__delegate.call(this,result,input,inputs);};
	G__3171.cljs$lang$maxFixedArity = 2;
	G__3171.cljs$lang$applyTo = (function (arglist__3173){
	var result = cljs.core.first(arglist__3173);
	arglist__3173 = cljs.core.next(arglist__3173);
	var input = cljs.core.first(arglist__3173);
	var inputs = cljs.core.rest(arglist__3173);
	return G__3171__delegate(result,input,inputs);
	});
	G__3171.cljs$core$IFn$_invoke$arity$variadic = G__3171__delegate;
	return G__3171;
	})()
	;
	G__3170 = function(result,input,var_args){
	var inputs = var_args;
	switch(arguments.length){
	case 0:
	return G__3170__0.call(this);
	case 1:
	return G__3170__1.call(this,result);
	case 2:
	return G__3170__2.call(this,result,input);
	default:
	var G__3174 = null;
	if (arguments.length > 2) {
	var G__3175__i = 0, G__3175__a = new Array(arguments.length -  2);
	while (G__3175__i < G__3175__a.length) {G__3175__a[G__3175__i] = arguments[G__3175__i + 2]; ++G__3175__i;}
	G__3174 = new cljs.core.IndexedSeq(G__3175__a,0,null);
	}
	return G__3170__3.cljs$core$IFn$_invoke$arity$variadic(result,input, G__3174);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3170.cljs$lang$maxFixedArity = 2;
	G__3170.cljs$lang$applyTo = G__3170__3.cljs$lang$applyTo;
	G__3170.cljs$core$IFn$_invoke$arity$0 = G__3170__0;
	G__3170.cljs$core$IFn$_invoke$arity$1 = G__3170__1;
	G__3170.cljs$core$IFn$_invoke$arity$2 = G__3170__2;
	G__3170.cljs$core$IFn$_invoke$arity$variadic = G__3170__3.cljs$core$IFn$_invoke$arity$variadic;
	return G__3170;
	})()
	});
	});

	cljs.core.map.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s)){
	var c = cljs.core.chunk_first(s);
	var size = cljs.core.count(c);
	var b = cljs.core.chunk_buffer(size);
	var n__5991__auto___3176 = size;
	var i_3177 = (0);
	while(true){
	if((i_3177 < n__5991__auto___3176)){
	cljs.core.chunk_append(b,(function (){var G__3158 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_3177);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3158) : f.call(null,G__3158));
	})());

	var G__3178 = (i_3177 + (1));
	i_3177 = G__3178;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.chunk_cons(cljs.core.chunk(b),cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,cljs.core.chunk_rest(s)));
	} else {
	return cljs.core.cons((function (){var G__3159 = cljs.core.first(s);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3159) : f.call(null,G__3159));
	})(),cljs.core.map.cljs$core$IFn$_invoke$arity$2(f,cljs.core.rest(s)));
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.map.cljs$core$IFn$_invoke$arity$3 = (function (f,c1,c2){
	return (new cljs.core.LazySeq(null,(function (){
	var s1 = cljs.core.seq(c1);
	var s2 = cljs.core.seq(c2);
	if((s1) && (s2)){
	return cljs.core.cons((function (){var G__3160 = cljs.core.first(s1);
	var G__3161 = cljs.core.first(s2);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3160,G__3161) : f.call(null,G__3160,G__3161));
	})(),cljs.core.map.cljs$core$IFn$_invoke$arity$3(f,cljs.core.rest(s1),cljs.core.rest(s2)));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.map.cljs$core$IFn$_invoke$arity$4 = (function (f,c1,c2,c3){
	return (new cljs.core.LazySeq(null,(function (){
	var s1 = cljs.core.seq(c1);
	var s2 = cljs.core.seq(c2);
	var s3 = cljs.core.seq(c3);
	if((s1) && (s2) && (s3)){
	return cljs.core.cons((function (){var G__3162 = cljs.core.first(s1);
	var G__3163 = cljs.core.first(s2);
	var G__3164 = cljs.core.first(s3);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3162,G__3163,G__3164) : f.call(null,G__3162,G__3163,G__3164));
	})(),cljs.core.map.cljs$core$IFn$_invoke$arity$4(f,cljs.core.rest(s1),cljs.core.rest(s2),cljs.core.rest(s3)));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.map.cljs$core$IFn$_invoke$arity$variadic = (function (f,c1,c2,c3,colls){
	var step = (function cljs$core$step(cs){
	return (new cljs.core.LazySeq(null,(function (){
	var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq,cs);
	if(cljs.core.every_QMARK_(cljs.core.identity,ss)){
	return cljs.core.cons(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,ss),cljs$core$step(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest,ss)));
	} else {
	return null;
	}
	}),null,null));
	});
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (step){
	return (function (p1__3145_SHARP_){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,p1__3145_SHARP_);
	});})(step))
	,step(cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls,c3,cljs.core.array_seq([c2,c1], 0))));
	});

	cljs.core.map.cljs$lang$applyTo = (function (seq3147){
	var G__3148 = cljs.core.first(seq3147);
	var seq3147__$1 = cljs.core.next(seq3147);
	var G__3149 = cljs.core.first(seq3147__$1);
	var seq3147__$2 = cljs.core.next(seq3147__$1);
	var G__3150 = cljs.core.first(seq3147__$2);
	var seq3147__$3 = cljs.core.next(seq3147__$2);
	var G__3151 = cljs.core.first(seq3147__$3);
	var seq3147__$4 = cljs.core.next(seq3147__$3);
	return cljs.core.map.cljs$core$IFn$_invoke$arity$variadic(G__3148,G__3149,G__3150,G__3151,seq3147__$4);
	});

	cljs.core.map.cljs$lang$maxFixedArity = (4);

	/**
	 * Returns a lazy sequence of the first n items in coll, or all items if
	 *   there are fewer than n.  Returns a stateful transducer when
	 *   no collection is provided.
	 */
	cljs.core.take = (function cljs$core$take(var_args){
	var args3179 = [];
	var len__6099__auto___3182 = arguments.length;
	var i__6100__auto___3183 = (0);
	while(true){
	if((i__6100__auto___3183 < len__6099__auto___3182)){
	args3179.push((arguments[i__6100__auto___3183]));

	var G__3184 = (i__6100__auto___3183 + (1));
	i__6100__auto___3183 = G__3184;
	continue;
	} else {
	}
	break;
	}

	var G__3181 = args3179.length;
	switch (G__3181) {
	case 1:
	return cljs.core.take.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.take.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3179.length)].join('')));

	}
	});

	cljs.core.take.cljs$core$IFn$_invoke$arity$1 = (function (n){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	return (function (rf){
	var na = cljs.core.volatile_BANG_(n);
	return ((function (na){
	return (function() {
	var G__3186 = null;
	var G__3186__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3186__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3186__2 = (function (result,input){
	var n__$1 = cljs.core.deref(na);
	var nn = cljs.core._vreset_BANG_(na,(cljs.core._deref(na) - (1)));
	var result__$1 = (((n__$1 > (0)))?(rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input)):result);
	if(!((nn > (0)))){
	return cljs.core.ensure_reduced(result__$1);
	} else {
	return result__$1;
	}
	});
	G__3186 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3186__0.call(this);
	case 1:
	return G__3186__1.call(this,result);
	case 2:
	return G__3186__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3186.cljs$core$IFn$_invoke$arity$0 = G__3186__0;
	G__3186.cljs$core$IFn$_invoke$arity$1 = G__3186__1;
	G__3186.cljs$core$IFn$_invoke$arity$2 = G__3186__2;
	return G__3186;
	})()
	;})(na))
	});
	});

	cljs.core.take.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	return (new cljs.core.LazySeq(null,(function (){
	if((n > (0))){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	return cljs.core.cons(cljs.core.first(s),cljs.core.take.cljs$core$IFn$_invoke$arity$2((n - (1)),cljs.core.rest(s)));
	} else {
	return null;
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.take.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of all but the first n items in coll.
	 *   Returns a stateful transducer when no collection is provided.
	 */
	cljs.core.drop = (function cljs$core$drop(var_args){
	var args3187 = [];
	var len__6099__auto___3190 = arguments.length;
	var i__6100__auto___3191 = (0);
	while(true){
	if((i__6100__auto___3191 < len__6099__auto___3190)){
	args3187.push((arguments[i__6100__auto___3191]));

	var G__3192 = (i__6100__auto___3191 + (1));
	i__6100__auto___3191 = G__3192;
	continue;
	} else {
	}
	break;
	}

	var G__3189 = args3187.length;
	switch (G__3189) {
	case 1:
	return cljs.core.drop.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.drop.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3187.length)].join('')));

	}
	});

	cljs.core.drop.cljs$core$IFn$_invoke$arity$1 = (function (n){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	return (function (rf){
	var na = cljs.core.volatile_BANG_(n);
	return ((function (na){
	return (function() {
	var G__3194 = null;
	var G__3194__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3194__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3194__2 = (function (result,input){
	var n__$1 = cljs.core.deref(na);
	cljs.core._vreset_BANG_(na,(cljs.core._deref(na) - (1)));

	if((n__$1 > (0))){
	return result;
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__3194 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3194__0.call(this);
	case 1:
	return G__3194__1.call(this,result);
	case 2:
	return G__3194__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3194.cljs$core$IFn$_invoke$arity$0 = G__3194__0;
	G__3194.cljs$core$IFn$_invoke$arity$1 = G__3194__1;
	G__3194.cljs$core$IFn$_invoke$arity$2 = G__3194__2;
	return G__3194;
	})()
	;})(na))
	});
	});

	cljs.core.drop.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	var step = (function (n__$1,coll__$1){
	while(true){
	var s = cljs.core.seq(coll__$1);
	if(((n__$1 > (0))) && (s)){
	var G__3195 = (n__$1 - (1));
	var G__3196 = cljs.core.rest(s);
	n__$1 = G__3195;
	coll__$1 = G__3196;
	continue;
	} else {
	return s;
	}
	break;
	}
	});
	return (new cljs.core.LazySeq(null,((function (step){
	return (function (){
	return step(n,coll);
	});})(step))
	,null,null));
	});

	cljs.core.drop.cljs$lang$maxFixedArity = 2;

	/**
	 * Return a lazy sequence of all but the last n (default 1) items in coll
	 */
	cljs.core.drop_last = (function cljs$core$drop_last(var_args){
	var args3197 = [];
	var len__6099__auto___3200 = arguments.length;
	var i__6100__auto___3201 = (0);
	while(true){
	if((i__6100__auto___3201 < len__6099__auto___3200)){
	args3197.push((arguments[i__6100__auto___3201]));

	var G__3202 = (i__6100__auto___3201 + (1));
	i__6100__auto___3201 = G__3202;
	continue;
	} else {
	}
	break;
	}

	var G__3199 = args3197.length;
	switch (G__3199) {
	case 1:
	return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3197.length)].join('')));

	}
	});

	cljs.core.drop_last.cljs$core$IFn$_invoke$arity$1 = (function (s){
	return cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2((1),s);
	});

	cljs.core.drop_last.cljs$core$IFn$_invoke$arity$2 = (function (n,s){
	return cljs.core.map.cljs$core$IFn$_invoke$arity$3((function (x,_){
	return x;
	}),s,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n,s));
	});

	cljs.core.drop_last.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a seq of the last n items in coll.  Depending on the type
	 *   of coll may be no better than linear time.  For vectors, see also subvec.
	 */
	cljs.core.take_last = (function cljs$core$take_last(n,coll){
	var s = cljs.core.seq(coll);
	var lead = cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n,coll));
	while(true){
	if(lead){
	var G__3204 = cljs.core.next(s);
	var G__3205 = cljs.core.next(lead);
	s = G__3204;
	lead = G__3205;
	continue;
	} else {
	return s;
	}
	break;
	}
	});
	/**
	 * Returns a lazy sequence of the items in coll starting from the
	 *   first item for which (pred item) returns logical false.  Returns a
	 *   stateful transducer when no collection is provided.
	 */
	cljs.core.drop_while = (function cljs$core$drop_while(var_args){
	var args3206 = [];
	var len__6099__auto___3211 = arguments.length;
	var i__6100__auto___3212 = (0);
	while(true){
	if((i__6100__auto___3212 < len__6099__auto___3211)){
	args3206.push((arguments[i__6100__auto___3212]));

	var G__3213 = (i__6100__auto___3212 + (1));
	i__6100__auto___3212 = G__3213;
	continue;
	} else {
	}
	break;
	}

	var G__3208 = args3206.length;
	switch (G__3208) {
	case 1:
	return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3206.length)].join('')));

	}
	});

	cljs.core.drop_while.cljs$core$IFn$_invoke$arity$1 = (function (pred){
	return (function (rf){
	var da = cljs.core.volatile_BANG_(true);
	return ((function (da){
	return (function() {
	var G__3215 = null;
	var G__3215__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3215__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3215__2 = (function (result,input){
	var drop_QMARK_ = cljs.core.deref(da);
	if(cljs.core.truth_((function (){var and__5442__auto__ = drop_QMARK_;
	if(cljs.core.truth_(and__5442__auto__)){
	return (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null,input));
	} else {
	return and__5442__auto__;
	}
	})())){
	return result;
	} else {
	cljs.core.vreset_BANG_(da,null);

	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__3215 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3215__0.call(this);
	case 1:
	return G__3215__1.call(this,result);
	case 2:
	return G__3215__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3215.cljs$core$IFn$_invoke$arity$0 = G__3215__0;
	G__3215.cljs$core$IFn$_invoke$arity$1 = G__3215__1;
	G__3215.cljs$core$IFn$_invoke$arity$2 = G__3215__2;
	return G__3215;
	})()
	;})(da))
	});
	});

	cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2 = (function (pred,coll){
	var step = (function (pred__$1,coll__$1){
	while(true){
	var s = cljs.core.seq(coll__$1);
	if(cljs.core.truth_((function (){var and__5442__auto__ = s;
	if(and__5442__auto__){
	var G__3210 = cljs.core.first(s);
	return (pred__$1.cljs$core$IFn$_invoke$arity$1 ? pred__$1.cljs$core$IFn$_invoke$arity$1(G__3210) : pred__$1.call(null,G__3210));
	} else {
	return and__5442__auto__;
	}
	})())){
	var G__3216 = pred__$1;
	var G__3217 = cljs.core.rest(s);
	pred__$1 = G__3216;
	coll__$1 = G__3217;
	continue;
	} else {
	return s;
	}
	break;
	}
	});
	return (new cljs.core.LazySeq(null,((function (step){
	return (function (){
	return step(pred,coll);
	});})(step))
	,null,null));
	});

	cljs.core.drop_while.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy (infinite!) sequence of repetitions of the items in coll.
	 */
	cljs.core.cycle = (function cljs$core$cycle(coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(s,(cljs.core.cycle.cljs$core$IFn$_invoke$arity$1 ? cljs.core.cycle.cljs$core$IFn$_invoke$arity$1(s) : cljs.core.cycle.call(null,s)));
	} else {
	return null;
	}
	}),null,null));
	});
	/**
	 * Returns a vector of [(take n coll) (drop n coll)]
	 */
	cljs.core.split_at = (function cljs$core$split_at(n,coll){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,coll),cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n,coll)], null);
	});
	/**
	 * Returns a lazy (infinite!, or length n if supplied) sequence of xs.
	 */
	cljs.core.repeat = (function cljs$core$repeat(var_args){
	var args3218 = [];
	var len__6099__auto___3221 = arguments.length;
	var i__6100__auto___3222 = (0);
	while(true){
	if((i__6100__auto___3222 < len__6099__auto___3221)){
	args3218.push((arguments[i__6100__auto___3222]));

	var G__3223 = (i__6100__auto___3222 + (1));
	i__6100__auto___3222 = G__3223;
	continue;
	} else {
	}
	break;
	}

	var G__3220 = args3218.length;
	switch (G__3220) {
	case 1:
	return cljs.core.repeat.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.repeat.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3218.length)].join('')));

	}
	});

	cljs.core.repeat.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return (new cljs.core.LazySeq(null,(function (){
	return cljs.core.cons(x,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
	}),null,null));
	});

	cljs.core.repeat.cljs$core$IFn$_invoke$arity$2 = (function (n,x){
	return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
	});

	cljs.core.repeat.cljs$lang$maxFixedArity = 2;

	/**
	 * DEPRECATED: Use 'repeat' instead.
	 *   Returns a lazy seq of n xs.
	 */
	cljs.core.replicate = (function cljs$core$replicate(n,x){
	return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(x));
	});
	/**
	 * Takes a function of no args, presumably with side effects, and
	 *   returns an infinite (or length n if supplied) lazy sequence of calls
	 *   to it
	 */
	cljs.core.repeatedly = (function cljs$core$repeatedly(var_args){
	var args3225 = [];
	var len__6099__auto___3228 = arguments.length;
	var i__6100__auto___3229 = (0);
	while(true){
	if((i__6100__auto___3229 < len__6099__auto___3228)){
	args3225.push((arguments[i__6100__auto___3229]));

	var G__3230 = (i__6100__auto___3229 + (1));
	i__6100__auto___3229 = G__3230;
	continue;
	} else {
	}
	break;
	}

	var G__3227 = args3225.length;
	switch (G__3227) {
	case 1:
	return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3225.length)].join('')));

	}
	});

	cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (new cljs.core.LazySeq(null,(function (){
	return cljs.core.cons((f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
	}),null,null));
	});

	cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2 = (function (n,f){
	return cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$1(f));
	});

	cljs.core.repeatedly.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects
	 */
	cljs.core.iterate = (function cljs$core$iterate(f,x){
	return cljs.core.cons(x,(new cljs.core.LazySeq(null,(function (){
	var G__3234 = f;
	var G__3235 = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x));
	return (cljs.core.iterate.cljs$core$IFn$_invoke$arity$2 ? cljs.core.iterate.cljs$core$IFn$_invoke$arity$2(G__3234,G__3235) : cljs.core.iterate.call(null,G__3234,G__3235));
	}),null,null)));
	});
	/**
	 * Returns a lazy seq of the first item in each coll, then the second etc.
	 */
	cljs.core.interleave = (function cljs$core$interleave(var_args){
	var args3236 = [];
	var len__6099__auto___3242 = arguments.length;
	var i__6100__auto___3243 = (0);
	while(true){
	if((i__6100__auto___3243 < len__6099__auto___3242)){
	args3236.push((arguments[i__6100__auto___3243]));

	var G__3244 = (i__6100__auto___3243 + (1));
	i__6100__auto___3243 = G__3244;
	continue;
	} else {
	}
	break;
	}

	var G__3241 = args3236.length;
	switch (G__3241) {
	case 0:
	return cljs.core.interleave.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.interleave.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.interleave.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3236.slice((2)),(0),null));
	return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6118__auto__);

	}
	});

	cljs.core.interleave.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.List.EMPTY;
	});

	cljs.core.interleave.cljs$core$IFn$_invoke$arity$1 = (function (c1){
	return (new cljs.core.LazySeq(null,(function (){
	return c1;
	}),null,null));
	});

	cljs.core.interleave.cljs$core$IFn$_invoke$arity$2 = (function (c1,c2){
	return (new cljs.core.LazySeq(null,(function (){
	var s1 = cljs.core.seq(c1);
	var s2 = cljs.core.seq(c2);
	if((s1) && (s2)){
	return cljs.core.cons(cljs.core.first(s1),cljs.core.cons(cljs.core.first(s2),cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.rest(s1),cljs.core.rest(s2))));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic = (function (c1,c2,colls){
	return (new cljs.core.LazySeq(null,(function (){
	var ss = cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.seq,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(colls,c2,cljs.core.array_seq([c1], 0)));
	if(cljs.core.every_QMARK_(cljs.core.identity,ss)){
	return cljs.core.concat.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.first,ss),cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.interleave,cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.rest,ss)));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.interleave.cljs$lang$applyTo = (function (seq3237){
	var G__3238 = cljs.core.first(seq3237);
	var seq3237__$1 = cljs.core.next(seq3237);
	var G__3239 = cljs.core.first(seq3237__$1);
	var seq3237__$2 = cljs.core.next(seq3237__$1);
	return cljs.core.interleave.cljs$core$IFn$_invoke$arity$variadic(G__3238,G__3239,seq3237__$2);
	});

	cljs.core.interleave.cljs$lang$maxFixedArity = (2);

	/**
	 * Returns a lazy seq of the elements of coll separated by sep.
	 *   Returns a stateful transducer when no collection is provided.
	 */
	cljs.core.interpose = (function cljs$core$interpose(var_args){
	var args3246 = [];
	var len__6099__auto___3249 = arguments.length;
	var i__6100__auto___3250 = (0);
	while(true){
	if((i__6100__auto___3250 < len__6099__auto___3249)){
	args3246.push((arguments[i__6100__auto___3250]));

	var G__3251 = (i__6100__auto___3250 + (1));
	i__6100__auto___3250 = G__3251;
	continue;
	} else {
	}
	break;
	}

	var G__3248 = args3246.length;
	switch (G__3248) {
	case 1:
	return cljs.core.interpose.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.interpose.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3246.length)].join('')));

	}
	});

	cljs.core.interpose.cljs$core$IFn$_invoke$arity$1 = (function (sep){
	return (function (rf){
	var started = cljs.core.volatile_BANG_(false);
	return ((function (started){
	return (function() {
	var G__3253 = null;
	var G__3253__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3253__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3253__2 = (function (result,input){
	if(cljs.core.truth_(cljs.core.deref(started))){
	var sepr = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,sep) : rf.call(null,result,sep));
	if(cljs.core.reduced_QMARK_(sepr)){
	return sepr;
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(sepr,input) : rf.call(null,sepr,input));
	}
	} else {
	cljs.core.vreset_BANG_(started,true);

	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__3253 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3253__0.call(this);
	case 1:
	return G__3253__1.call(this,result);
	case 2:
	return G__3253__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3253.cljs$core$IFn$_invoke$arity$0 = G__3253__0;
	G__3253.cljs$core$IFn$_invoke$arity$1 = G__3253__1;
	G__3253.cljs$core$IFn$_invoke$arity$2 = G__3253__2;
	return G__3253;
	})()
	;})(started))
	});
	});

	cljs.core.interpose.cljs$core$IFn$_invoke$arity$2 = (function (sep,coll){
	return cljs.core.drop.cljs$core$IFn$_invoke$arity$2((1),cljs.core.interleave.cljs$core$IFn$_invoke$arity$2(cljs.core.repeat.cljs$core$IFn$_invoke$arity$1(sep),coll));
	});

	cljs.core.interpose.cljs$lang$maxFixedArity = 2;

	/**
	 * Take a collection of collections, and return a lazy seq
	 *   of items from the inner collection
	 */
	cljs.core.flatten1 = (function cljs$core$flatten1(colls){
	var cat = (function cljs$core$flatten1_$_cat(coll,colls__$1){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6736__auto__ = cljs.core.seq(coll);
	if(temp__6736__auto__){
	var coll__$1 = temp__6736__auto__;
	return cljs.core.cons(cljs.core.first(coll__$1),cljs$core$flatten1_$_cat(cljs.core.rest(coll__$1),colls__$1));
	} else {
	if(cljs.core.seq(colls__$1)){
	return cljs$core$flatten1_$_cat(cljs.core.first(colls__$1),cljs.core.rest(colls__$1));
	} else {
	return null;
	}
	}
	}),null,null));
	});
	return cat(null,colls);
	});
	/**
	 * Returns the result of applying concat to the result of applying map
	 *   to f and colls.  Thus function f should return a collection. Returns
	 *   a transducer when no collections are provided
	 */
	cljs.core.mapcat = (function cljs$core$mapcat(var_args){
	var args3262 = [];
	var len__6099__auto___3267 = arguments.length;
	var i__6100__auto___3268 = (0);
	while(true){
	if((i__6100__auto___3268 < len__6099__auto___3267)){
	args3262.push((arguments[i__6100__auto___3268]));

	var G__3269 = (i__6100__auto___3268 + (1));
	i__6100__auto___3268 = G__3269;
	continue;
	} else {
	}
	break;
	}

	var G__3266 = args3262.length;
	switch (G__3266) {
	case 1:
	return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3262.slice((1)),(0),null));
	return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6118__auto__);

	}
	});

	cljs.core.mapcat.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return cljs.core.comp.cljs$core$IFn$_invoke$arity$2(cljs.core.map.cljs$core$IFn$_invoke$arity$1(f),cljs.core.cat);
	});

	cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic = (function (f,colls){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.concat,cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.map,f,colls));
	});

	cljs.core.mapcat.cljs$lang$applyTo = (function (seq3263){
	var G__3264 = cljs.core.first(seq3263);
	var seq3263__$1 = cljs.core.next(seq3263);
	return cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(G__3264,seq3263__$1);
	});

	cljs.core.mapcat.cljs$lang$maxFixedArity = (1);

	/**
	 * Returns a lazy sequence of the items in coll for which
	 *   (pred item) returns true. pred must be free of side-effects.
	 *   Returns a transducer when no collection is provided.
	 */
	cljs.core.filter = (function cljs$core$filter(var_args){
	var args3271 = [];
	var len__6099__auto___3275 = arguments.length;
	var i__6100__auto___3276 = (0);
	while(true){
	if((i__6100__auto___3276 < len__6099__auto___3275)){
	args3271.push((arguments[i__6100__auto___3276]));

	var G__3277 = (i__6100__auto___3276 + (1));
	i__6100__auto___3276 = G__3277;
	continue;
	} else {
	}
	break;
	}

	var G__3273 = args3271.length;
	switch (G__3273) {
	case 1:
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3271.length)].join('')));

	}
	});

	cljs.core.filter.cljs$core$IFn$_invoke$arity$1 = (function (pred){
	return (function (rf){
	return (function() {
	var G__3279 = null;
	var G__3279__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__3279__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__3279__2 = (function (result,input){
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null,input)))){
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	} else {
	return result;
	}
	});
	G__3279 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__3279__0.call(this);
	case 1:
	return G__3279__1.call(this,result);
	case 2:
	return G__3279__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3279.cljs$core$IFn$_invoke$arity$0 = G__3279__0;
	G__3279.cljs$core$IFn$_invoke$arity$1 = G__3279__1;
	G__3279.cljs$core$IFn$_invoke$arity$2 = G__3279__2;
	return G__3279;
	})()
	});
	});

	cljs.core.filter.cljs$core$IFn$_invoke$arity$2 = (function (pred,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s)){
	var c = cljs.core.chunk_first(s);
	var size = cljs.core.count(c);
	var b = cljs.core.chunk_buffer(size);
	var n__5991__auto___3280 = size;
	var i_3281 = (0);
	while(true){
	if((i_3281 < n__5991__auto___3280)){
	if(cljs.core.truth_((function (){var G__3274 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_3281);
	return (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__3274) : pred.call(null,G__3274));
	})())){
	cljs.core.chunk_append(b,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c,i_3281));
	} else {
	}

	var G__3282 = (i_3281 + (1));
	i_3281 = G__3282;
	continue;
	} else {
	}
	break;
	}

	return cljs.core.chunk_cons(cljs.core.chunk(b),cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred,cljs.core.chunk_rest(s)));
	} else {
	var f = cljs.core.first(s);
	var r = cljs.core.rest(s);
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(f) : pred.call(null,f)))){
	return cljs.core.cons(f,cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred,r));
	} else {
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(pred,r);
	}
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.filter.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of the items in coll for which
	 *   (pred item) returns false. pred must be free of side-effects.
	 *   Returns a transducer when no collection is provided.
	 */
	cljs.core.remove = (function cljs$core$remove(var_args){
	var args3283 = [];
	var len__6099__auto___3286 = arguments.length;
	var i__6100__auto___3287 = (0);
	while(true){
	if((i__6100__auto___3287 < len__6099__auto___3286)){
	args3283.push((arguments[i__6100__auto___3287]));

	var G__3288 = (i__6100__auto___3287 + (1));
	i__6100__auto___3287 = G__3288;
	continue;
	} else {
	}
	break;
	}

	var G__3285 = args3283.length;
	switch (G__3285) {
	case 1:
	return cljs.core.remove.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.remove.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3283.length)].join('')));

	}
	});

	cljs.core.remove.cljs$core$IFn$_invoke$arity$1 = (function (pred){
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$1(cljs.core.complement(pred));
	});

	cljs.core.remove.cljs$core$IFn$_invoke$arity$2 = (function (pred,coll){
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$2(cljs.core.complement(pred),coll);
	});

	cljs.core.remove.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of the nodes in a tree, via a depth-first walk.
	 *   branch? must be a fn of one arg that returns true if passed a node
	 *   that can have children (but may not).  children must be a fn of one
	 *   arg that returns a sequence of the children. Will only be called on
	 *   nodes for which branch? returns true. Root is the root node of the
	 *   tree.
	 */
	cljs.core.tree_seq = (function cljs$core$tree_seq(branch_QMARK_,children,root){
	var walk = (function cljs$core$tree_seq_$_walk(node){
	return (new cljs.core.LazySeq(null,(function (){
	return cljs.core.cons(node,(cljs.core.truth_((branch_QMARK_.cljs$core$IFn$_invoke$arity$1 ? branch_QMARK_.cljs$core$IFn$_invoke$arity$1(node) : branch_QMARK_.call(null,node)))?cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic(cljs$core$tree_seq_$_walk,cljs.core.array_seq([(children.cljs$core$IFn$_invoke$arity$1 ? children.cljs$core$IFn$_invoke$arity$1(node) : children.call(null,node))], 0)):null));
	}),null,null));
	});
	return walk(root);
	});
	/**
	 * Takes any nested combination of sequential things (lists, vectors,
	 *   etc.) and returns their contents as a single, flat sequence.
	 *   (flatten nil) returns nil.
	 */
	cljs.core.flatten = (function cljs$core$flatten(x){
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (p1__3290_SHARP_){
	return !(cljs.core.sequential_QMARK_(p1__3290_SHARP_));
	}),cljs.core.rest(cljs.core.tree_seq(cljs.core.sequential_QMARK_,cljs.core.seq,x)));
	});
	/**
	 * Returns a new coll consisting of to-coll with all of the items of
	 *   from-coll conjoined. A transducer may be supplied.
	 */
	cljs.core.into = (function cljs$core$into(var_args){
	var args3291 = [];
	var len__6099__auto___3296 = arguments.length;
	var i__6100__auto___3297 = (0);
	while(true){
	if((i__6100__auto___3297 < len__6099__auto___3296)){
	args3291.push((arguments[i__6100__auto___3297]));

	var G__3298 = (i__6100__auto___3297 + (1));
	i__6100__auto___3297 = G__3298;
	continue;
	} else {
	}
	break;
	}

	var G__3293 = args3291.length;
	switch (G__3293) {
	case 0:
	return cljs.core.into.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.into.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.into.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3291.length)].join('')));

	}
	});

	cljs.core.into.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.into.cljs$core$IFn$_invoke$arity$1 = (function (to){
	return to;
	});

	cljs.core.into.cljs$core$IFn$_invoke$arity$2 = (function (to,from){
	if(!((to == null))){
	if(((!((to == null)))?((((to.cljs$lang$protocol_mask$partition1$ & (4))) || ((cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$)))?true:false):false)){
	return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_,cljs.core.transient$(to),from)),cljs.core.meta(to));
	} else {
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,to,from);
	}
	} else {
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,cljs.core.List.EMPTY,from);
	}
	});

	cljs.core.into.cljs$core$IFn$_invoke$arity$3 = (function (to,xform,from){
	if(((!((to == null)))?((((to.cljs$lang$protocol_mask$partition1$ & (4))) || ((cljs.core.PROTOCOL_SENTINEL === to.cljs$core$IEditableCollection$)))?true:false):false)){
	return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform,cljs.core.conj_BANG_,cljs.core.transient$(to),from)),cljs.core.meta(to));
	} else {
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(xform,cljs.core.conj,to,from);
	}
	});

	cljs.core.into.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns a vector consisting of the result of applying f to the
	 *   set of first items of each coll, followed by applying f to the set
	 *   of second items in each coll, until any one of the colls is
	 *   exhausted.  Any remaining items in other colls are ignored. Function
	 *   f should accept number-of-colls arguments.
	 */
	cljs.core.mapv = (function cljs$core$mapv(var_args){
	var args3300 = [];
	var len__6099__auto___3308 = arguments.length;
	var i__6100__auto___3309 = (0);
	while(true){
	if((i__6100__auto___3309 < len__6099__auto___3308)){
	args3300.push((arguments[i__6100__auto___3309]));

	var G__3310 = (i__6100__auto___3309 + (1));
	i__6100__auto___3309 = G__3310;
	continue;
	} else {
	}
	break;
	}

	var G__3307 = args3300.length;
	switch (G__3307) {
	case 2:
	return cljs.core.mapv.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.mapv.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.mapv.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3300.slice((4)),(0),null));
	return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),argseq__6118__auto__);

	}
	});

	cljs.core.mapv.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (v,o){
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(o) : f.call(null,o)));
	}),cljs.core.transient$(cljs.core.PersistentVector.EMPTY),coll));
	});

	cljs.core.mapv.cljs$core$IFn$_invoke$arity$3 = (function (f,c1,c2){
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$3(f,c1,c2));
	});

	cljs.core.mapv.cljs$core$IFn$_invoke$arity$4 = (function (f,c1,c2,c3){
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.map.cljs$core$IFn$_invoke$arity$4(f,c1,c2,c3));
	});

	cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic = (function (f,c1,c2,c3,colls){
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentVector.EMPTY,cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.map,f,c1,c2,c3,cljs.core.array_seq([colls], 0)));
	});

	cljs.core.mapv.cljs$lang$applyTo = (function (seq3301){
	var G__3302 = cljs.core.first(seq3301);
	var seq3301__$1 = cljs.core.next(seq3301);
	var G__3303 = cljs.core.first(seq3301__$1);
	var seq3301__$2 = cljs.core.next(seq3301__$1);
	var G__3304 = cljs.core.first(seq3301__$2);
	var seq3301__$3 = cljs.core.next(seq3301__$2);
	var G__3305 = cljs.core.first(seq3301__$3);
	var seq3301__$4 = cljs.core.next(seq3301__$3);
	return cljs.core.mapv.cljs$core$IFn$_invoke$arity$variadic(G__3302,G__3303,G__3304,G__3305,seq3301__$4);
	});

	cljs.core.mapv.cljs$lang$maxFixedArity = (4);

	/**
	 * Returns a vector of the items in coll for which
	 *   (pred item) returns true. pred must be free of side-effects.
	 */
	cljs.core.filterv = (function cljs$core$filterv(pred,coll){
	return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (v,o){
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(o) : pred.call(null,o)))){
	return cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(v,o);
	} else {
	return v;
	}
	}),cljs.core.transient$(cljs.core.PersistentVector.EMPTY),coll));
	});
	/**
	 * Returns a lazy sequence of lists of n items each, at offsets step
	 *   apart. If step is not supplied, defaults to n, i.e. the partitions
	 *   do not overlap. If a pad collection is supplied, use its elements as
	 *   necessary to complete last partition up to n items. In case there are
	 *   not enough padding elements, return a partition with less than n items.
	 */
	cljs.core.partition = (function cljs$core$partition(var_args){
	var args3312 = [];
	var len__6099__auto___3315 = arguments.length;
	var i__6100__auto___3316 = (0);
	while(true){
	if((i__6100__auto___3316 < len__6099__auto___3315)){
	args3312.push((arguments[i__6100__auto___3316]));

	var G__3317 = (i__6100__auto___3316 + (1));
	i__6100__auto___3316 = G__3317;
	continue;
	} else {
	}
	break;
	}

	var G__3314 = args3312.length;
	switch (G__3314) {
	case 2:
	return cljs.core.partition.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.partition.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.partition.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3312.length)].join('')));

	}
	});

	cljs.core.partition.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	return cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n,n,coll);
	});

	cljs.core.partition.cljs$core$IFn$_invoke$arity$3 = (function (n,step,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,s);
	if((n === cljs.core.count(p))){
	return cljs.core.cons(p,cljs.core.partition.cljs$core$IFn$_invoke$arity$3(n,step,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step,s)));
	} else {
	return null;
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.partition.cljs$core$IFn$_invoke$arity$4 = (function (n,step,pad,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	var p = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,s);
	if((n === cljs.core.count(p))){
	return cljs.core.cons(p,cljs.core.partition.cljs$core$IFn$_invoke$arity$4(n,step,pad,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step,s)));
	} else {
	var x__5940__auto__ = cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,cljs.core.concat.cljs$core$IFn$_invoke$arity$2(p,pad));
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto__);
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.partition.cljs$lang$maxFixedArity = 4;

	/**
	 * Returns the value in a nested associative structure,
	 *   where ks is a sequence of keys. Returns nil if the key is not present,
	 *   or the not-found value if supplied.
	 */
	cljs.core.get_in = (function cljs$core$get_in(var_args){
	var args3319 = [];
	var len__6099__auto___3322 = arguments.length;
	var i__6100__auto___3323 = (0);
	while(true){
	if((i__6100__auto___3323 < len__6099__auto___3322)){
	args3319.push((arguments[i__6100__auto___3323]));

	var G__3324 = (i__6100__auto___3323 + (1));
	i__6100__auto___3323 = G__3324;
	continue;
	} else {
	}
	break;
	}

	var G__3321 = args3319.length;
	switch (G__3321) {
	case 2:
	return cljs.core.get_in.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.get_in.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3319.length)].join('')));

	}
	});

	cljs.core.get_in.cljs$core$IFn$_invoke$arity$2 = (function (m,ks){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.get,m,ks);
	});

	cljs.core.get_in.cljs$core$IFn$_invoke$arity$3 = (function (m,ks,not_found){
	var sentinel = cljs.core.lookup_sentinel;
	var m__$1 = m;
	var ks__$1 = cljs.core.seq(ks);
	while(true){
	if(!((ks__$1 == null))){
	var m__$2 = cljs.core.get.cljs$core$IFn$_invoke$arity$3(m__$1,cljs.core.first(ks__$1),sentinel);
	if((sentinel === m__$2)){
	return not_found;
	} else {
	var G__3326 = sentinel;
	var G__3327 = m__$2;
	var G__3328 = cljs.core.next(ks__$1);
	sentinel = G__3326;
	m__$1 = G__3327;
	ks__$1 = G__3328;
	continue;
	}
	} else {
	return m__$1;
	}
	break;
	}
	});

	cljs.core.get_in.cljs$lang$maxFixedArity = 3;

	/**
	 * Associates a value in a nested associative structure, where ks is a
	 *   sequence of keys and v is the new value and returns a new nested structure.
	 *   If any levels do not exist, hash-maps will be created.
	 */
	cljs.core.assoc_in = (function cljs$core$assoc_in(m,p__3329,v){
	var vec__3336 = p__3329;
	var seq__3337 = cljs.core.seq(vec__3336);
	var first__3338 = cljs.core.first(seq__3337);
	var seq__3337__$1 = cljs.core.next(seq__3337);
	var k = first__3338;
	var ks = seq__3337__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3339 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3340 = ks;
	var G__3341 = v;
	return (cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3 ? cljs.core.assoc_in.cljs$core$IFn$_invoke$arity$3(G__3339,G__3340,G__3341) : cljs.core.assoc_in.call(null,G__3339,G__3340,G__3341));
	})());
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,v);
	}
	});
	/**
	 * 'Updates' a value in a nested associative structure, where ks is a
	 *   sequence of keys and f is a function that will take the old value
	 *   and any supplied args and return the new value, and returns a new
	 *   nested structure.  If any levels do not exist, hash-maps will be
	 *   created.
	 */
	cljs.core.update_in = (function cljs$core$update_in(var_args){
	var args3342 = [];
	var len__6099__auto___3382 = arguments.length;
	var i__6100__auto___3383 = (0);
	while(true){
	if((i__6100__auto___3383 < len__6099__auto___3382)){
	args3342.push((arguments[i__6100__auto___3383]));

	var G__3384 = (i__6100__auto___3383 + (1));
	i__6100__auto___3383 = G__3384;
	continue;
	} else {
	}
	break;
	}

	var G__3351 = args3342.length;
	switch (G__3351) {
	case 3:
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	case 6:
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3342.slice((6)),(0),null));
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),argseq__6118__auto__);

	}
	});

	cljs.core.update_in.cljs$core$IFn$_invoke$arity$3 = (function (m,p__3352,f){
	var vec__3353 = p__3352;
	var seq__3354 = cljs.core.seq(vec__3353);
	var first__3355 = cljs.core.first(seq__3354);
	var seq__3354__$1 = cljs.core.next(seq__3354);
	var k = first__3355;
	var ks = seq__3354__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.update_in.cljs$core$IFn$_invoke$arity$3(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),ks,f));
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3356 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3356) : f.call(null,G__3356));
	})());
	}
	});

	cljs.core.update_in.cljs$core$IFn$_invoke$arity$4 = (function (m,p__3357,f,a){
	var vec__3358 = p__3357;
	var seq__3359 = cljs.core.seq(vec__3358);
	var first__3360 = cljs.core.first(seq__3359);
	var seq__3359__$1 = cljs.core.next(seq__3359);
	var k = first__3360;
	var ks = seq__3359__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.update_in.cljs$core$IFn$_invoke$arity$4(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),ks,f,a));
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3361 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3362 = a;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3361,G__3362) : f.call(null,G__3361,G__3362));
	})());
	}
	});

	cljs.core.update_in.cljs$core$IFn$_invoke$arity$5 = (function (m,p__3363,f,a,b){
	var vec__3364 = p__3363;
	var seq__3365 = cljs.core.seq(vec__3364);
	var first__3366 = cljs.core.first(seq__3365);
	var seq__3365__$1 = cljs.core.next(seq__3365);
	var k = first__3366;
	var ks = seq__3365__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.update_in.cljs$core$IFn$_invoke$arity$5(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),ks,f,a,b));
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3367 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3368 = a;
	var G__3369 = b;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3367,G__3368,G__3369) : f.call(null,G__3367,G__3368,G__3369));
	})());
	}
	});

	cljs.core.update_in.cljs$core$IFn$_invoke$arity$6 = (function (m,p__3370,f,a,b,c){
	var vec__3371 = p__3370;
	var seq__3372 = cljs.core.seq(vec__3371);
	var first__3373 = cljs.core.first(seq__3372);
	var seq__3372__$1 = cljs.core.next(seq__3372);
	var k = first__3373;
	var ks = seq__3372__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.update_in.cljs$core$IFn$_invoke$arity$6(cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),ks,f,a,b,c));
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3374 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3375 = a;
	var G__3376 = b;
	var G__3377 = c;
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__3374,G__3375,G__3376,G__3377) : f.call(null,G__3374,G__3375,G__3376,G__3377));
	})());
	}
	});

	cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic = (function (m,p__3378,f,a,b,c,args){
	var vec__3379 = p__3378;
	var seq__3380 = cljs.core.seq(vec__3379);
	var first__3381 = cljs.core.first(seq__3380);
	var seq__3380__$1 = cljs.core.next(seq__3380);
	var k = first__3381;
	var ks = seq__3380__$1;
	if(ks){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(cljs.core.update_in,cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),ks,f,a,cljs.core.array_seq([b,c,args], 0)));
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),a,b,c,cljs.core.array_seq([args], 0)));
	}
	});

	cljs.core.update_in.cljs$lang$applyTo = (function (seq3343){
	var G__3344 = cljs.core.first(seq3343);
	var seq3343__$1 = cljs.core.next(seq3343);
	var G__3345 = cljs.core.first(seq3343__$1);
	var seq3343__$2 = cljs.core.next(seq3343__$1);
	var G__3346 = cljs.core.first(seq3343__$2);
	var seq3343__$3 = cljs.core.next(seq3343__$2);
	var G__3347 = cljs.core.first(seq3343__$3);
	var seq3343__$4 = cljs.core.next(seq3343__$3);
	var G__3348 = cljs.core.first(seq3343__$4);
	var seq3343__$5 = cljs.core.next(seq3343__$4);
	var G__3349 = cljs.core.first(seq3343__$5);
	var seq3343__$6 = cljs.core.next(seq3343__$5);
	return cljs.core.update_in.cljs$core$IFn$_invoke$arity$variadic(G__3344,G__3345,G__3346,G__3347,G__3348,G__3349,seq3343__$6);
	});

	cljs.core.update_in.cljs$lang$maxFixedArity = (6);

	/**
	 * 'Updates' a value in an associative structure, where k is a
	 *   key and f is a function that will take the old value
	 *   and any supplied args and return the new value, and returns a new
	 *   structure.  If the key does not exist, nil is passed as the old value.
	 */
	cljs.core.update = (function cljs$core$update(var_args){
	var args3386 = [];
	var len__6099__auto___3406 = arguments.length;
	var i__6100__auto___3407 = (0);
	while(true){
	if((i__6100__auto___3407 < len__6099__auto___3406)){
	args3386.push((arguments[i__6100__auto___3407]));

	var G__3408 = (i__6100__auto___3407 + (1));
	i__6100__auto___3407 = G__3408;
	continue;
	} else {
	}
	break;
	}

	var G__3395 = args3386.length;
	switch (G__3395) {
	case 3:
	return cljs.core.update.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.update.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core.update.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	case 6:
	return cljs.core.update.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args3386.slice((6)),(0),null));
	return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),argseq__6118__auto__);

	}
	});

	cljs.core.update.cljs$core$IFn$_invoke$arity$3 = (function (m,k,f){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3396 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	return (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(G__3396) : f.call(null,G__3396));
	})());
	});

	cljs.core.update.cljs$core$IFn$_invoke$arity$4 = (function (m,k,f,x){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3397 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3398 = x;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3397,G__3398) : f.call(null,G__3397,G__3398));
	})());
	});

	cljs.core.update.cljs$core$IFn$_invoke$arity$5 = (function (m,k,f,x,y){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3399 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3400 = x;
	var G__3401 = y;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3399,G__3400,G__3401) : f.call(null,G__3399,G__3400,G__3401));
	})());
	});

	cljs.core.update.cljs$core$IFn$_invoke$arity$6 = (function (m,k,f,x,y,z){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3402 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3403 = x;
	var G__3404 = y;
	var G__3405 = z;
	return (f.cljs$core$IFn$_invoke$arity$4 ? f.cljs$core$IFn$_invoke$arity$4(G__3402,G__3403,G__3404,G__3405) : f.call(null,G__3402,G__3403,G__3404,G__3405));
	})());
	});

	cljs.core.update.cljs$core$IFn$_invoke$arity$variadic = (function (m,k,f,x,y,z,more){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(f,cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k),x,y,z,cljs.core.array_seq([more], 0)));
	});

	cljs.core.update.cljs$lang$applyTo = (function (seq3387){
	var G__3388 = cljs.core.first(seq3387);
	var seq3387__$1 = cljs.core.next(seq3387);
	var G__3389 = cljs.core.first(seq3387__$1);
	var seq3387__$2 = cljs.core.next(seq3387__$1);
	var G__3390 = cljs.core.first(seq3387__$2);
	var seq3387__$3 = cljs.core.next(seq3387__$2);
	var G__3391 = cljs.core.first(seq3387__$3);
	var seq3387__$4 = cljs.core.next(seq3387__$3);
	var G__3392 = cljs.core.first(seq3387__$4);
	var seq3387__$5 = cljs.core.next(seq3387__$4);
	var G__3393 = cljs.core.first(seq3387__$5);
	var seq3387__$6 = cljs.core.next(seq3387__$5);
	return cljs.core.update.cljs$core$IFn$_invoke$arity$variadic(G__3388,G__3389,G__3390,G__3391,G__3392,G__3393,seq3387__$6);
	});

	cljs.core.update.cljs$lang$maxFixedArity = (6);


	/**
	* @constructor
	*/
	cljs.core.VectorNode = (function (edit,arr){
	this.edit = edit;
	this.arr = arr;
	})

	cljs.core.VectorNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.cst$sym$arr], null);
	});

	cljs.core.VectorNode.cljs$lang$type = true;

	cljs.core.VectorNode.cljs$lang$ctorStr = "cljs.core/VectorNode";

	cljs.core.VectorNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/VectorNode");
	});

	cljs.core.__GT_VectorNode = (function cljs$core$__GT_VectorNode(edit,arr){
	return (new cljs.core.VectorNode(edit,arr));
	});

	cljs.core.pv_fresh_node = (function cljs$core$pv_fresh_node(edit){
	return (new cljs.core.VectorNode(edit,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]));
	});
	cljs.core.pv_aget = (function cljs$core$pv_aget(node,idx){
	return (node.arr[idx]);
	});
	cljs.core.pv_aset = (function cljs$core$pv_aset(node,idx,val){
	return (node.arr[idx] = val);
	});
	cljs.core.pv_clone_node = (function cljs$core$pv_clone_node(node){
	return (new cljs.core.VectorNode(node.edit,cljs.core.aclone(node.arr)));
	});
	cljs.core.tail_off = (function cljs$core$tail_off(pv){
	var cnt = pv.cnt;
	if((cnt < (32))){
	return (0);
	} else {
	return (((cnt - (1)) >>> (5)) << (5));
	}
	});
	cljs.core.new_path = (function cljs$core$new_path(edit,level,node){
	var ll = level;
	var ret = node;
	while(true){
	if((ll === (0))){
	return ret;
	} else {
	var embed = ret;
	var r = cljs.core.pv_fresh_node(edit);
	var _ = cljs.core.pv_aset(r,(0),embed);
	var G__3410 = (ll - (5));
	var G__3411 = r;
	ll = G__3410;
	ret = G__3411;
	continue;
	}
	break;
	}
	});
	cljs.core.push_tail = (function cljs$core$push_tail(pv,level,parent,tailnode){
	var ret = cljs.core.pv_clone_node(parent);
	var subidx = (((pv.cnt - (1)) >>> level) & (31));
	if(((5) === level)){
	cljs.core.pv_aset(ret,subidx,tailnode);

	return ret;
	} else {
	var child = cljs.core.pv_aget(parent,subidx);
	if(!((child == null))){
	var node_to_insert = (function (){var G__3416 = pv;
	var G__3417 = (level - (5));
	var G__3418 = child;
	var G__3419 = tailnode;
	return (cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.push_tail.cljs$core$IFn$_invoke$arity$4(G__3416,G__3417,G__3418,G__3419) : cljs.core.push_tail.call(null,G__3416,G__3417,G__3418,G__3419));
	})();
	cljs.core.pv_aset(ret,subidx,node_to_insert);

	return ret;
	} else {
	var node_to_insert = cljs.core.new_path(null,(level - (5)),tailnode);
	cljs.core.pv_aset(ret,subidx,node_to_insert);

	return ret;
	}
	}
	});
	cljs.core.vector_index_out_of_bounds = (function cljs$core$vector_index_out_of_bounds(i,cnt){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No item "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(i),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" in vector of length "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cnt)].join('')));
	});
	cljs.core.first_array_for_longvec = (function cljs$core$first_array_for_longvec(pv){
	var node = pv.root;
	var level = pv.shift;
	while(true){
	if((level > (0))){
	var G__3420 = cljs.core.pv_aget(node,(0));
	var G__3421 = (level - (5));
	node = G__3420;
	level = G__3421;
	continue;
	} else {
	return node.arr;
	}
	break;
	}
	});
	cljs.core.unchecked_array_for = (function cljs$core$unchecked_array_for(pv,i){
	if((i >= cljs.core.tail_off(pv))){
	return pv.tail;
	} else {
	var node = pv.root;
	var level = pv.shift;
	while(true){
	if((level > (0))){
	var G__3422 = cljs.core.pv_aget(node,((i >>> level) & (31)));
	var G__3423 = (level - (5));
	node = G__3422;
	level = G__3423;
	continue;
	} else {
	return node.arr;
	}
	break;
	}
	}
	});
	cljs.core.array_for = (function cljs$core$array_for(pv,i){
	if((((0) <= i)) && ((i < pv.cnt))){
	return cljs.core.unchecked_array_for(pv,i);
	} else {
	return cljs.core.vector_index_out_of_bounds(i,pv.cnt);
	}
	});
	cljs.core.do_assoc = (function cljs$core$do_assoc(pv,level,node,i,val){
	var ret = cljs.core.pv_clone_node(node);
	if((level === (0))){
	cljs.core.pv_aset(ret,(i & (31)),val);

	return ret;
	} else {
	var subidx = ((i >>> level) & (31));
	cljs.core.pv_aset(ret,subidx,(function (){var G__3429 = pv;
	var G__3430 = (level - (5));
	var G__3431 = cljs.core.pv_aget(node,subidx);
	var G__3432 = i;
	var G__3433 = val;
	return (cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5 ? cljs.core.do_assoc.cljs$core$IFn$_invoke$arity$5(G__3429,G__3430,G__3431,G__3432,G__3433) : cljs.core.do_assoc.call(null,G__3429,G__3430,G__3431,G__3432,G__3433));
	})());

	return ret;
	}
	});
	cljs.core.pop_tail = (function cljs$core$pop_tail(pv,level,node){
	var subidx = (((pv.cnt - (2)) >>> level) & (31));
	if((level > (5))){
	var new_child = (function (){var G__3437 = pv;
	var G__3438 = (level - (5));
	var G__3439 = cljs.core.pv_aget(node,subidx);
	return (cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pop_tail.cljs$core$IFn$_invoke$arity$3(G__3437,G__3438,G__3439) : cljs.core.pop_tail.call(null,G__3437,G__3438,G__3439));
	})();
	if(((new_child == null)) && ((subidx === (0)))){
	return null;
	} else {
	var ret = cljs.core.pv_clone_node(node);
	cljs.core.pv_aset(ret,subidx,new_child);

	return ret;
	}
	} else {
	if((subidx === (0))){
	return null;
	} else {
	var ret = cljs.core.pv_clone_node(node);
	cljs.core.pv_aset(ret,subidx,null);

	return ret;

	}
	}
	});

	/**
	* @constructor
	*/
	cljs.core.RangedIterator = (function (i,base,arr,v,start,end){
	this.i = i;
	this.base = base;
	this.arr = arr;
	this.v = v;
	this.start = start;
	this.end = end;
	})
	cljs.core.RangedIterator.prototype.hasNext = (function (){
	var self__ = this;
	var this$ = this;
	return (self__.i < self__.end);
	});

	cljs.core.RangedIterator.prototype.next = (function (){
	var self__ = this;
	var this$ = this;
	if(((self__.i - self__.base) === (32))){
	self__.arr = cljs.core.unchecked_array_for(self__.v,self__.i);

	self__.base = (self__.base + (32));
	} else {
	}

	var ret = (self__.arr[(self__.i & (31))]);
	self__.i = (self__.i + (1));

	return ret;
	});

	cljs.core.RangedIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$base,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end], null);
	});

	cljs.core.RangedIterator.cljs$lang$type = true;

	cljs.core.RangedIterator.cljs$lang$ctorStr = "cljs.core/RangedIterator";

	cljs.core.RangedIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/RangedIterator");
	});

	cljs.core.__GT_RangedIterator = (function cljs$core$__GT_RangedIterator(i,base,arr,v,start,end){
	return (new cljs.core.RangedIterator(i,base,arr,v,start,end));
	});

	cljs.core.ranged_iterator = (function cljs$core$ranged_iterator(v,start,end){
	var i = start;
	return (new cljs.core.RangedIterator(i,(i - (i % (32))),(((start < cljs.core.count(v)))?cljs.core.unchecked_array_for(v,i):null),v,start,end));
	});







	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IVector}
	 * @implements {cljs.core.IReversible}
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEditableCollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IMapEntry}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.PersistentVector = (function (meta,cnt,shift,root,tail,__hash){
	this.meta = meta;
	this.cnt = cnt;
	this.shift = shift;
	this.root = root;
	this.tail = tail;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 167668511;
	this.cljs$lang$protocol_mask$partition1$ = 8196;
	})
	cljs.core.PersistentVector.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentVector.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1,k)], null);
	});

	cljs.core.PersistentVector.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentVector.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentVector.prototype.indexOf = (function() {
	var G__3450 = null;
	var G__3450__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3450__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3450 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3450__1.call(this,x);
	case 2:
	return G__3450__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3450.cljs$core$IFn$_invoke$arity$1 = G__3450__1;
	G__3450.cljs$core$IFn$_invoke$arity$2 = G__3450__2;
	return G__3450;
	})()
	;

	cljs.core.PersistentVector.prototype.lastIndexOf = (function() {
	var G__3451 = null;
	var G__3451__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3451__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3451 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3451__1.call(this,x);
	case 2:
	return G__3451__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3451.cljs$core$IFn$_invoke$arity$1 = G__3451__1;
	G__3451.cljs$core$IFn$_invoke$arity$2 = G__3451__2;
	return G__3451;
	})()
	;

	cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.PersistentVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(typeof k === 'number'){
	return coll__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	} else {
	return not_found;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (v,f,init){
	var self__ = this;
	var v__$1 = this;
	var i = (0);
	var init__$1 = init;
	while(true){
	if((i < self__.cnt)){
	var arr = cljs.core.unchecked_array_for(v__$1,i);
	var len = arr.length;
	var init__$2 = (function (){var j = (0);
	var init__$2 = init__$1;
	while(true){
	if((j < len)){
	var init__$3 = (function (){var G__3441 = init__$2;
	var G__3442 = (j + i);
	var G__3443 = (arr[j]);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3441,G__3442,G__3443) : f.call(null,G__3441,G__3442,G__3443));
	})();
	if(cljs.core.reduced_QMARK_(init__$3)){
	return init__$3;
	} else {
	var G__3452 = (j + (1));
	var G__3453 = init__$3;
	j = G__3452;
	init__$2 = G__3453;
	continue;
	}
	} else {
	return init__$2;
	}
	break;
	}
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3454 = (i + len);
	var G__3455 = init__$2;
	i = G__3454;
	init__$1 = G__3455;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.array_for(coll__$1,n)[(n & (31))]);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
	var self__ = this;
	var coll__$1 = this;
	if((((0) <= n)) && ((n < self__.cnt))){
	return (cljs.core.unchecked_array_for(coll__$1,n)[(n & (31))]);
	} else {
	return not_found;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (coll,n,val){
	var self__ = this;
	var coll__$1 = this;
	if((((0) <= n)) && ((n < self__.cnt))){
	if((cljs.core.tail_off(coll__$1) <= n)){
	var new_tail = cljs.core.aclone(self__.tail);
	(new_tail[(n & (31))] = val);

	return (new cljs.core.PersistentVector(self__.meta,self__.cnt,self__.shift,self__.root,new_tail,null));
	} else {
	return (new cljs.core.PersistentVector(self__.meta,self__.cnt,self__.shift,cljs.core.do_assoc(coll__$1,self__.shift,self__.root,n,val),self__.tail,null));
	}
	} else {
	if((n === self__.cnt)){
	return coll__$1.cljs$core$ICollection$_conj$arity$2(null,val);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds  [0,"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt),cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join('')));

	}
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentVector.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.ranged_iterator(this$__$1,(0),self__.cnt);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentVector.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentVector(self__.meta,self__.cnt,self__.shift,self__.root,self__.tail,self__.__hash));
	});

	cljs.core.PersistentVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.cnt;
	});

	cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$IIndexed$_nth$arity$2(null,(0));
	});

	cljs.core.PersistentVector.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$IIndexed$_nth$arity$2(null,(1));
	});

	cljs.core.PersistentVector.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	return coll__$1.cljs$core$IIndexed$_nth$arity$2(null,(self__.cnt - (1)));
	} else {
	return null;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt === (0))){
	throw (new Error("Can't pop empty vector"));
	} else {
	if(((1) === self__.cnt)){
	return cljs.core._with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);
	} else {
	if(((1) < (self__.cnt - cljs.core.tail_off(coll__$1)))){
	return (new cljs.core.PersistentVector(self__.meta,(self__.cnt - (1)),self__.shift,self__.root,self__.tail.slice((0),(-1)),null));
	} else {
	var new_tail = cljs.core.unchecked_array_for(coll__$1,(self__.cnt - (2)));
	var nr = cljs.core.pop_tail(coll__$1,self__.shift,self__.root);
	var new_root = (((nr == null))?cljs.core.PersistentVector.EMPTY_NODE:nr);
	var cnt_1 = (self__.cnt - (1));
	if((((5) < self__.shift)) && ((cljs.core.pv_aget(new_root,(1)) == null))){
	return (new cljs.core.PersistentVector(self__.meta,cnt_1,(self__.shift - (5)),cljs.core.pv_aget(new_root,(0)),new_tail,null));
	} else {
	return (new cljs.core.PersistentVector(self__.meta,cnt_1,self__.shift,new_root,new_tail,null));
	}

	}
	}
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	return (new cljs.core.RSeq(coll__$1,(self__.cnt - (1)),null));
	} else {
	return null;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	if((other instanceof cljs.core.PersistentVector)){
	if((self__.cnt === cljs.core.count(other))){
	var me_iter = coll__$1.cljs$core$IIterable$_iterator$arity$1(null);
	var you_iter = cljs.core._iterator(other);
	while(true){
	if(me_iter.hasNext()){
	var x = me_iter.next();
	var y = you_iter.next();
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(x,y)){
	continue;
	} else {
	return false;
	}
	} else {
	return true;
	}
	break;
	}
	} else {
	return false;
	}
	} else {
	return cljs.core.equiv_sequential(coll__$1,other);
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.TransientVector(self__.cnt,self__.shift,(cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_root.cljs$core$IFn$_invoke$arity$1(self__.root) : cljs.core.tv_editable_root.call(null,self__.root)),(cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1 ? cljs.core.tv_editable_tail.cljs$core$IFn$_invoke$arity$1(self__.tail) : cljs.core.tv_editable_tail.call(null,self__.tail))));
	});

	cljs.core.PersistentVector.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (v,f){
	var self__ = this;
	var v__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(v__$1,f);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (v,f,init){
	var self__ = this;
	var v__$1 = this;
	var i = (0);
	var init__$1 = init;
	while(true){
	if((i < self__.cnt)){
	var arr = cljs.core.unchecked_array_for(v__$1,i);
	var len = arr.length;
	var init__$2 = (function (){var j = (0);
	var init__$2 = init__$1;
	while(true){
	if((j < len)){
	var init__$3 = (function (){var G__3444 = init__$2;
	var G__3445 = (arr[j]);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3444,G__3445) : f.call(null,G__3444,G__3445));
	})();
	if(cljs.core.reduced_QMARK_(init__$3)){
	return init__$3;
	} else {
	var G__3456 = (j + (1));
	var G__3457 = init__$3;
	j = G__3456;
	init__$2 = G__3457;
	continue;
	}
	} else {
	return init__$2;
	}
	break;
	}
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3458 = (i + len);
	var G__3459 = init__$2;
	i = G__3458;
	init__$1 = G__3459;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
	var self__ = this;
	var coll__$1 = this;
	if(typeof k === 'number'){
	return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null,k,v);
	} else {
	throw (new Error("Vector's key for assoc must be a number."));
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.integer_QMARK_(k)){
	return (((0) <= k)) && ((k < self__.cnt));
	} else {
	return false;
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt === (0))){
	return null;
	} else {
	if((self__.cnt <= (32))){
	return (new cljs.core.IndexedSeq(self__.tail,(0),null));
	} else {
	var G__3446 = coll__$1;
	var G__3447 = cljs.core.first_array_for_longvec(coll__$1);
	var G__3448 = (0);
	var G__3449 = (0);
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__3446,G__3447,G__3448,G__3449) : cljs.core.chunked_seq.call(null,G__3446,G__3447,G__3448,G__3449));

	}
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentVector(meta__$1,self__.cnt,self__.shift,self__.root,self__.tail,self__.__hash));
	});

	cljs.core.PersistentVector.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	if(((self__.cnt - cljs.core.tail_off(coll__$1)) < (32))){
	var len = self__.tail.length;
	var new_tail = (new Array((len + (1))));
	var n__5991__auto___3460 = len;
	var i_3461 = (0);
	while(true){
	if((i_3461 < n__5991__auto___3460)){
	(new_tail[i_3461] = (self__.tail[i_3461]));

	var G__3462 = (i_3461 + (1));
	i_3461 = G__3462;
	continue;
	} else {
	}
	break;
	}

	(new_tail[len] = o);

	return (new cljs.core.PersistentVector(self__.meta,(self__.cnt + (1)),self__.shift,self__.root,new_tail,null));
	} else {
	var root_overflow_QMARK_ = ((self__.cnt >>> (5)) > ((1) << self__.shift));
	var new_shift = ((root_overflow_QMARK_)?(self__.shift + (5)):self__.shift);
	var new_root = ((root_overflow_QMARK_)?(function (){var n_r = cljs.core.pv_fresh_node(null);
	cljs.core.pv_aset(n_r,(0),self__.root);

	cljs.core.pv_aset(n_r,(1),cljs.core.new_path(null,self__.shift,(new cljs.core.VectorNode(null,self__.tail))));

	return n_r;
	})():cljs.core.push_tail(coll__$1,self__.shift,self__.root,(new cljs.core.VectorNode(null,self__.tail))));
	return (new cljs.core.PersistentVector(self__.meta,(self__.cnt + (1)),new_shift,new_root,[o],null));
	}
	});

	cljs.core.PersistentVector.prototype.call = (function() {
	var G__3463 = null;
	var G__3463__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$IIndexed$_nth$arity$2(null,k);
	});
	var G__3463__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});
	G__3463 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3463__2.call(this,self__,k);
	case 3:
	return G__3463__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3463.cljs$core$IFn$_invoke$arity$2 = G__3463__2;
	G__3463.cljs$core$IFn$_invoke$arity$3 = G__3463__3;
	return G__3463;
	})()
	;

	cljs.core.PersistentVector.prototype.apply = (function (self__,args3440){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3440)));
	});

	cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$IIndexed$_nth$arity$2(null,k);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.PersistentVector.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$shift,cljs.core.cst$sym$root,cljs.core.cst$sym$tail,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentVector.cljs$lang$type = true;

	cljs.core.PersistentVector.cljs$lang$ctorStr = "cljs.core/PersistentVector";

	cljs.core.PersistentVector.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentVector");
	});

	cljs.core.__GT_PersistentVector = (function cljs$core$__GT_PersistentVector(meta,cnt,shift,root,tail,__hash){
	return (new cljs.core.PersistentVector(meta,cnt,shift,root,tail,__hash));
	});

	cljs.core.PersistentVector.EMPTY_NODE = (new cljs.core.VectorNode(null,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]));
	cljs.core.PersistentVector.EMPTY = (new cljs.core.PersistentVector(null,(0),(5),cljs.core.PersistentVector.EMPTY_NODE,[],cljs.core.empty_ordered_hash));
	cljs.core.PersistentVector.fromArray = (function (xs,no_clone){
	var l = xs.length;
	var xs__$1 = ((no_clone)?xs:cljs.core.aclone(xs));
	if((l < (32))){
	return (new cljs.core.PersistentVector(null,l,(5),cljs.core.PersistentVector.EMPTY_NODE,xs__$1,null));
	} else {
	var node = xs__$1.slice((0),(32));
	var v = (new cljs.core.PersistentVector(null,(32),(5),cljs.core.PersistentVector.EMPTY_NODE,node,null));
	var i = (32);
	var out = v.cljs$core$IEditableCollection$_as_transient$arity$1(null);
	while(true){
	if((i < l)){
	var G__3464 = (i + (1));
	var G__3465 = cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2(out,(xs__$1[i]));
	i = G__3464;
	out = G__3465;
	continue;
	} else {
	return cljs.core.persistent_BANG_(out);
	}
	break;
	}
	}
	});
	(cljs.core.PersistentVector.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Creates a new vector containing the contents of coll. JavaScript arrays
	 *   will be aliased and should not be modified.
	 */
	cljs.core.vec = (function cljs$core$vec(coll){
	if(cljs.core.array_QMARK_(coll)){
	return cljs.core.PersistentVector.fromArray(coll,true);
	} else {
	return cljs.core._persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj_BANG_,cljs.core._as_transient(cljs.core.PersistentVector.EMPTY),coll));
	}
	});
	/**
	 * Creates a new vector containing the args.
	 */
	cljs.core.vector = (function cljs$core$vector(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3467 = arguments.length;
	var i__6100__auto___3468 = (0);
	while(true){
	if((i__6100__auto___3468 < len__6099__auto___3467)){
	args__6102__auto__.push((arguments[i__6100__auto___3468]));

	var G__3469 = (i__6100__auto___3468 + (1));
	i__6100__auto___3468 = G__3469;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic = (function (args){
	if(((args instanceof cljs.core.IndexedSeq)) && ((args.i === (0)))){
	return cljs.core.PersistentVector.fromArray(args.arr,true);
	} else {
	return cljs.core.vec(args);
	}
	});

	cljs.core.vector.cljs$lang$maxFixedArity = (0);

	cljs.core.vector.cljs$lang$applyTo = (function (seq3466){
	return cljs.core.vector.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3466));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ASeq}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IChunkedNext}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IChunkedSeq}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.ChunkedSeq = (function (vec,node,i,off,meta,__hash){
	this.vec = vec;
	this.node = node;
	this.i = i;
	this.off = off;
	this.meta = meta;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32375020;
	this.cljs$lang$protocol_mask$partition1$ = 1536;
	})
	cljs.core.ChunkedSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.ChunkedSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.ChunkedSeq.prototype.indexOf = (function() {
	var G__3492 = null;
	var G__3492__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3492__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3492 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3492__1.call(this,x);
	case 2:
	return G__3492__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3492.cljs$core$IFn$_invoke$arity$1 = G__3492__1;
	G__3492.cljs$core$IFn$_invoke$arity$2 = G__3492__2;
	return G__3492;
	})()
	;

	cljs.core.ChunkedSeq.prototype.lastIndexOf = (function() {
	var G__3493 = null;
	var G__3493__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3493__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3493 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3493__1.call(this,x);
	case 2:
	return G__3493__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3493.cljs$core$IFn$_invoke$arity$1 = G__3493__1;
	G__3493.cljs$core$IFn$_invoke$arity$2 = G__3493__2;
	return G__3493;
	})()
	;

	cljs.core.ChunkedSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(((self__.off + (1)) < self__.node.length)){
	var s = (function (){var G__3470 = self__.vec;
	var G__3471 = self__.node;
	var G__3472 = self__.i;
	var G__3473 = (self__.off + (1));
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__3470,G__3471,G__3472,G__3473) : cljs.core.chunked_seq.call(null,G__3470,G__3471,G__3472,G__3473));
	})();
	if((s == null)){
	return null;
	} else {
	return s;
	}
	} else {
	return coll__$1.cljs$core$IChunkedNext$_chunked_next$arity$1(null);
	}
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2((function (){var G__3474 = self__.vec;
	var G__3475 = (self__.i + self__.off);
	var G__3476 = cljs.core.count(self__.vec);
	return (cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__3474,G__3475,G__3476) : cljs.core.subvec.call(null,G__3474,G__3475,G__3476));
	})(),f);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3((function (){var G__3477 = self__.vec;
	var G__3478 = (self__.i + self__.off);
	var G__3479 = cljs.core.count(self__.vec);
	return (cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 ? cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(G__3477,G__3478,G__3479) : cljs.core.subvec.call(null,G__3477,G__3478,G__3479));
	})(),f,start);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (self__.node[self__.off]);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(((self__.off + (1)) < self__.node.length)){
	var s = (function (){var G__3480 = self__.vec;
	var G__3481 = self__.node;
	var G__3482 = self__.i;
	var G__3483 = (self__.off + (1));
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__3480,G__3481,G__3482,G__3483) : cljs.core.chunked_seq.call(null,G__3480,G__3481,G__3482,G__3483));
	})();
	if((s == null)){
	return cljs.core.List.EMPTY;
	} else {
	return s;
	}
	} else {
	return coll__$1.cljs$core$IChunkedSeq$_chunked_rest$arity$1(null);
	}
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.array_chunk.cljs$core$IFn$_invoke$arity$2(self__.node,self__.off);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedSeq$_chunked_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var end = (self__.i + self__.node.length);
	if((end < cljs.core._count(self__.vec))){
	var G__3484 = self__.vec;
	var G__3485 = cljs.core.unchecked_array_for(self__.vec,end);
	var G__3486 = end;
	var G__3487 = (0);
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__3484,G__3485,G__3486,G__3487) : cljs.core.chunked_seq.call(null,G__3484,G__3485,G__3486,G__3487));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,m){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5(self__.vec,self__.node,self__.i,self__.off,m) : cljs.core.chunked_seq.call(null,self__.vec,self__.node,self__.i,self__.off,m));
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IChunkedNext$_chunked_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var end = (self__.i + self__.node.length);
	if((end < cljs.core._count(self__.vec))){
	var G__3488 = self__.vec;
	var G__3489 = cljs.core.unchecked_array_for(self__.vec,end);
	var G__3490 = end;
	var G__3491 = (0);
	return (cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4(G__3488,G__3489,G__3490,G__3491) : cljs.core.chunked_seq.call(null,G__3488,G__3489,G__3490,G__3491));
	} else {
	return null;
	}
	});

	cljs.core.ChunkedSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$vec,cljs.core.cst$sym$node,cljs.core.cst$sym$i,cljs.core.cst$sym$off,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ChunkedSeq.cljs$lang$type = true;

	cljs.core.ChunkedSeq.cljs$lang$ctorStr = "cljs.core/ChunkedSeq";

	cljs.core.ChunkedSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ChunkedSeq");
	});

	cljs.core.__GT_ChunkedSeq = (function cljs$core$__GT_ChunkedSeq(vec,node,i,off,meta,__hash){
	return (new cljs.core.ChunkedSeq(vec,node,i,off,meta,__hash));
	});

	(cljs.core.ChunkedSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.chunked_seq = (function cljs$core$chunked_seq(var_args){
	var args3494 = [];
	var len__6099__auto___3497 = arguments.length;
	var i__6100__auto___3498 = (0);
	while(true){
	if((i__6100__auto___3498 < len__6099__auto___3497)){
	args3494.push((arguments[i__6100__auto___3498]));

	var G__3499 = (i__6100__auto___3498 + (1));
	i__6100__auto___3498 = G__3499;
	continue;
	} else {
	}
	break;
	}

	var G__3496 = args3494.length;
	switch (G__3496) {
	case 3:
	return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 4:
	return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 5:
	return cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3494.length)].join('')));

	}
	});

	cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$3 = (function (vec,i,off){
	return (new cljs.core.ChunkedSeq(vec,cljs.core.array_for(vec,i),i,off,null,null));
	});

	cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$4 = (function (vec,node,i,off){
	return (new cljs.core.ChunkedSeq(vec,node,i,off,null,null));
	});

	cljs.core.chunked_seq.cljs$core$IFn$_invoke$arity$5 = (function (vec,node,i,off,meta){
	return (new cljs.core.ChunkedSeq(vec,node,i,off,meta,null));
	});

	cljs.core.chunked_seq.cljs$lang$maxFixedArity = 5;


	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IVector}
	 * @implements {cljs.core.IReversible}
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.Subvec = (function (meta,v,start,end,__hash){
	this.meta = meta;
	this.v = v;
	this.start = start;
	this.end = end;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 167666463;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.Subvec.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Subvec.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,key){
	var self__ = this;
	var coll__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key,cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1,key)], null);
	});

	cljs.core.Subvec.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.Subvec.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Subvec.prototype.indexOf = (function() {
	var G__3521 = null;
	var G__3521__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3521__2 = (function (x,start__$1){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start__$1);
	});
	G__3521 = function(x,start__$1){
	switch(arguments.length){
	case 1:
	return G__3521__1.call(this,x);
	case 2:
	return G__3521__2.call(this,x,start__$1);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3521.cljs$core$IFn$_invoke$arity$1 = G__3521__1;
	G__3521.cljs$core$IFn$_invoke$arity$2 = G__3521__2;
	return G__3521;
	})()
	;

	cljs.core.Subvec.prototype.lastIndexOf = (function() {
	var G__3522 = null;
	var G__3522__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3522__2 = (function (x,start__$1){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start__$1);
	});
	G__3522 = function(x,start__$1){
	switch(arguments.length){
	case 1:
	return G__3522__1.call(this,x);
	case 2:
	return G__3522__2.call(this,x,start__$1);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3522.cljs$core$IFn$_invoke$arity$1 = G__3522__1;
	G__3522.cljs$core$IFn$_invoke$arity$2 = G__3522__2;
	return G__3522;
	})()
	;

	cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.Subvec.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(typeof k === 'number'){
	return coll__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	} else {
	return not_found;
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
	var self__ = this;
	var coll__$1 = this;
	var i = self__.start;
	var j = (0);
	var init__$1 = init;
	while(true){
	if((i < self__.end)){
	var init__$2 = (function (){var G__3502 = init__$1;
	var G__3503 = j;
	var G__3504 = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v,i);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3502,G__3503,G__3504) : f.call(null,G__3502,G__3503,G__3504));
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3523 = (i + (1));
	var G__3524 = (j + (1));
	var G__3525 = init__$2;
	i = G__3523;
	j = G__3524;
	init__$1 = G__3525;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
	var self__ = this;
	var coll__$1 = this;
	if(((n < (0))) || ((self__.end <= (self__.start + n)))){
	return cljs.core.vector_index_out_of_bounds(n,(self__.end - self__.start));
	} else {
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v,(self__.start + n));
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(((n < (0))) || ((self__.end <= (self__.start + n)))){
	return not_found;
	} else {
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$3(self__.v,(self__.start + n),not_found);
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (coll,n,val){
	var self__ = this;
	var coll__$1 = this;
	var v_pos = (self__.start + n);
	if(((n < (0))) || (((self__.end + (1)) <= v_pos))){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds [0,"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(coll__$1.cljs$core$ICounted$_count$arity$1(null)),cljs.core.str.cljs$core$IFn$_invoke$arity$1("]")].join('')));
	} else {
	var G__3505 = self__.meta;
	var G__3506 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.v,v_pos,val);
	var G__3507 = self__.start;
	var G__3508 = (function (){var x__5528__auto__ = self__.end;
	var y__5529__auto__ = (v_pos + (1));
	return ((x__5528__auto__ > y__5529__auto__) ? x__5528__auto__ : y__5529__auto__);
	})();
	var G__3509 = null;
	return (cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__3505,G__3506,G__3507,G__3508,G__3509) : cljs.core.build_subvec.call(null,G__3505,G__3506,G__3507,G__3508,G__3509));
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Subvec.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.ranged_iterator(self__.v,self__.start,self__.end);
	});

	cljs.core.Subvec.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.Subvec.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.Subvec(self__.meta,self__.v,self__.start,self__.end,self__.__hash));
	});

	cljs.core.Subvec.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (self__.end - self__.start);
	});

	cljs.core.Subvec.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v,(self__.end - (1)));
	});

	cljs.core.Subvec.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.start === self__.end)){
	throw (new Error("Can't pop empty vector"));
	} else {
	var G__3510 = self__.meta;
	var G__3511 = self__.v;
	var G__3512 = self__.start;
	var G__3513 = (self__.end - (1));
	var G__3514 = null;
	return (cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__3510,G__3511,G__3512,G__3513,G__3514) : cljs.core.build_subvec.call(null,G__3510,G__3511,G__3512,G__3513,G__3514));
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(!((self__.start === self__.end))){
	return (new cljs.core.RSeq(coll__$1,((self__.end - self__.start) - (1)),null));
	} else {
	return null;
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.Subvec.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.PersistentVector.EMPTY,self__.meta);
	});

	cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(coll__$1,f);
	});

	cljs.core.Subvec.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start__$1){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(coll__$1,f,start__$1);
	});

	cljs.core.Subvec.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,key,val){
	var self__ = this;
	var coll__$1 = this;
	if(typeof key === 'number'){
	return coll__$1.cljs$core$IVector$_assoc_n$arity$3(null,key,val);
	} else {
	throw (new Error("Subvec's key for assoc must be a number."));
	}
	});

	cljs.core.Subvec.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var subvec_seq = ((function (coll__$1){
	return (function cljs$core$subvec_seq(i){
	if((i === self__.end)){
	return null;
	} else {
	return cljs.core.cons(cljs.core._nth.cljs$core$IFn$_invoke$arity$2(self__.v,i),(new cljs.core.LazySeq(null,((function (coll__$1){
	return (function (){
	return cljs$core$subvec_seq((i + (1)));
	});})(coll__$1))
	,null,null)));
	}
	});})(coll__$1))
	;
	return subvec_seq(self__.start);
	});

	cljs.core.Subvec.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(meta__$1,self__.v,self__.start,self__.end,self__.__hash) : cljs.core.build_subvec.call(null,meta__$1,self__.v,self__.start,self__.end,self__.__hash));
	});

	cljs.core.Subvec.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	var G__3516 = self__.meta;
	var G__3517 = cljs.core._assoc_n(self__.v,self__.end,o);
	var G__3518 = self__.start;
	var G__3519 = (self__.end + (1));
	var G__3520 = null;
	return (cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5 ? cljs.core.build_subvec.cljs$core$IFn$_invoke$arity$5(G__3516,G__3517,G__3518,G__3519,G__3520) : cljs.core.build_subvec.call(null,G__3516,G__3517,G__3518,G__3519,G__3520));
	});

	cljs.core.Subvec.prototype.call = (function() {
	var G__3526 = null;
	var G__3526__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$IIndexed$_nth$arity$2(null,k);
	});
	var G__3526__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});
	G__3526 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3526__2.call(this,self__,k);
	case 3:
	return G__3526__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3526.cljs$core$IFn$_invoke$arity$2 = G__3526__2;
	G__3526.cljs$core$IFn$_invoke$arity$3 = G__3526__3;
	return G__3526;
	})()
	;

	cljs.core.Subvec.prototype.apply = (function (self__,args3501){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3501)));
	});

	cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$IIndexed$_nth$arity$2(null,k);
	});

	cljs.core.Subvec.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.Subvec.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$v,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Subvec.cljs$lang$type = true;

	cljs.core.Subvec.cljs$lang$ctorStr = "cljs.core/Subvec";

	cljs.core.Subvec.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Subvec");
	});

	cljs.core.__GT_Subvec = (function cljs$core$__GT_Subvec(meta,v,start,end,__hash){
	return (new cljs.core.Subvec(meta,v,start,end,__hash));
	});

	(cljs.core.Subvec.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.build_subvec = (function cljs$core$build_subvec(meta,v,start,end,__hash){
	while(true){
	if((v instanceof cljs.core.Subvec)){
	var G__3527 = meta;
	var G__3528 = v.v;
	var G__3529 = (v.start + start);
	var G__3530 = (v.start + end);
	var G__3531 = __hash;
	meta = G__3527;
	v = G__3528;
	start = G__3529;
	end = G__3530;
	__hash = G__3531;
	continue;
	} else {
	var c = cljs.core.count(v);
	if(((start < (0))) || ((end < (0))) || ((start > c)) || ((end > c))){
	throw (new Error("Index out of bounds"));
	} else {
	}

	return (new cljs.core.Subvec(meta,v,start,end,__hash));
	}
	break;
	}
	});
	/**
	 * Returns a persistent vector of the items in vector from
	 *   start (inclusive) to end (exclusive).  If end is not supplied,
	 *   defaults to (count vector). This operation is O(1) and very fast, as
	 *   the resulting vector shares structure with the original and no
	 *   trimming is done.
	 */
	cljs.core.subvec = (function cljs$core$subvec(var_args){
	var args3532 = [];
	var len__6099__auto___3535 = arguments.length;
	var i__6100__auto___3536 = (0);
	while(true){
	if((i__6100__auto___3536 < len__6099__auto___3535)){
	args3532.push((arguments[i__6100__auto___3536]));

	var G__3537 = (i__6100__auto___3536 + (1));
	i__6100__auto___3536 = G__3537;
	continue;
	} else {
	}
	break;
	}

	var G__3534 = args3532.length;
	switch (G__3534) {
	case 2:
	return cljs.core.subvec.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3532.length)].join('')));

	}
	});

	cljs.core.subvec.cljs$core$IFn$_invoke$arity$2 = (function (v,start){
	return cljs.core.subvec.cljs$core$IFn$_invoke$arity$3(v,start,cljs.core.count(v));
	});

	cljs.core.subvec.cljs$core$IFn$_invoke$arity$3 = (function (v,start,end){
	return cljs.core.build_subvec(null,v,start,end,null);
	});

	cljs.core.subvec.cljs$lang$maxFixedArity = 3;

	cljs.core.tv_ensure_editable = (function cljs$core$tv_ensure_editable(edit,node){
	if((edit === node.edit)){
	return node;
	} else {
	return (new cljs.core.VectorNode(edit,cljs.core.aclone(node.arr)));
	}
	});
	cljs.core.tv_editable_root = (function cljs$core$tv_editable_root(node){
	return (new cljs.core.VectorNode({},cljs.core.aclone(node.arr)));
	});
	cljs.core.tv_editable_tail = (function cljs$core$tv_editable_tail(tl){
	var ret = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
	cljs.core.array_copy(tl,(0),ret,(0),tl.length);

	return ret;
	});
	cljs.core.tv_push_tail = (function cljs$core$tv_push_tail(tv,level,parent,tail_node){
	var ret = cljs.core.tv_ensure_editable(tv.root.edit,parent);
	var subidx = (((tv.cnt - (1)) >>> level) & (31));
	cljs.core.pv_aset(ret,subidx,(((level === (5)))?tail_node:(function (){var child = cljs.core.pv_aget(ret,subidx);
	if(!((child == null))){
	var G__3547 = tv;
	var G__3548 = (level - (5));
	var G__3549 = child;
	var G__3550 = tail_node;
	return (cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tv_push_tail.cljs$core$IFn$_invoke$arity$4(G__3547,G__3548,G__3549,G__3550) : cljs.core.tv_push_tail.call(null,G__3547,G__3548,G__3549,G__3550));
	} else {
	return cljs.core.new_path(tv.root.edit,(level - (5)),tail_node);
	}
	})()));

	return ret;
	});
	cljs.core.tv_pop_tail = (function cljs$core$tv_pop_tail(tv,level,node){
	var node__$1 = cljs.core.tv_ensure_editable(tv.root.edit,node);
	var subidx = (((tv.cnt - (2)) >>> level) & (31));
	if((level > (5))){
	var new_child = (function (){var G__3554 = tv;
	var G__3555 = (level - (5));
	var G__3556 = cljs.core.pv_aget(node__$1,subidx);
	return (cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tv_pop_tail.cljs$core$IFn$_invoke$arity$3(G__3554,G__3555,G__3556) : cljs.core.tv_pop_tail.call(null,G__3554,G__3555,G__3556));
	})();
	if(((new_child == null)) && ((subidx === (0)))){
	return null;
	} else {
	cljs.core.pv_aset(node__$1,subidx,new_child);

	return node__$1;
	}
	} else {
	if((subidx === (0))){
	return null;
	} else {
	cljs.core.pv_aset(node__$1,subidx,null);

	return node__$1;

	}
	}
	});
	cljs.core.unchecked_editable_array_for = (function cljs$core$unchecked_editable_array_for(tv,i){
	if((i >= cljs.core.tail_off(tv))){
	return tv.tail;
	} else {
	var root = tv.root;
	var node = root;
	var level = tv.shift;
	while(true){
	if((level > (0))){
	var G__3557 = cljs.core.tv_ensure_editable(root.edit,cljs.core.pv_aget(node,((i >>> level) & (31))));
	var G__3558 = (level - (5));
	node = G__3557;
	level = G__3558;
	continue;
	} else {
	return node.arr;
	}
	break;
	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ITransientCollection}
	 * @implements {cljs.core.ITransientVector}
	 * @implements {cljs.core.ITransientAssociative}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.TransientVector = (function (cnt,shift,root,tail){
	this.cnt = cnt;
	this.shift = shift;
	this.root = root;
	this.tail = tail;
	this.cljs$lang$protocol_mask$partition1$ = 88;
	this.cljs$lang$protocol_mask$partition0$ = 275;
	})
	cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
	var self__ = this;
	var tcoll__$1 = this;
	if(self__.root.edit){
	if(((self__.cnt - cljs.core.tail_off(tcoll__$1)) < (32))){
	(self__.tail[(self__.cnt & (31))] = o);

	self__.cnt = (self__.cnt + (1));

	return tcoll__$1;
	} else {
	var tail_node = (new cljs.core.VectorNode(self__.root.edit,self__.tail));
	var new_tail = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
	(new_tail[(0)] = o);

	self__.tail = new_tail;

	if(((self__.cnt >>> (5)) > ((1) << self__.shift))){
	var new_root_array = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
	var new_shift = (self__.shift + (5));
	(new_root_array[(0)] = self__.root);

	(new_root_array[(1)] = cljs.core.new_path(self__.root.edit,self__.shift,tail_node));

	self__.root = (new cljs.core.VectorNode(self__.root.edit,new_root_array));

	self__.shift = new_shift;

	self__.cnt = (self__.cnt + (1));

	return tcoll__$1;
	} else {
	var new_root = cljs.core.tv_push_tail(tcoll__$1,self__.shift,self__.root,tail_node);
	self__.root = new_root;

	self__.cnt = (self__.cnt + (1));

	return tcoll__$1;
	}
	}
	} else {
	throw (new Error("conj! after persistent!"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	if(self__.root.edit){
	self__.root.edit = null;

	var len = (self__.cnt - cljs.core.tail_off(tcoll__$1));
	var trimmed_tail = (new Array(len));
	cljs.core.array_copy(self__.tail,(0),trimmed_tail,(0),len);

	return (new cljs.core.PersistentVector(null,self__.cnt,self__.shift,self__.root,trimmed_tail,null));
	} else {
	throw (new Error("persistent! called twice"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
	var self__ = this;
	var tcoll__$1 = this;
	if(typeof key === 'number'){
	return tcoll__$1.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3(null,key,val);
	} else {
	throw (new Error("TransientVector's key for assoc! must be a number."));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_assoc_n_BANG_$arity$3 = (function (tcoll,n,val){
	var self__ = this;
	var tcoll__$1 = this;
	if(self__.root.edit){
	if((((0) <= n)) && ((n < self__.cnt))){
	if((cljs.core.tail_off(tcoll__$1) <= n)){
	(self__.tail[(n & (31))] = val);

	return tcoll__$1;
	} else {
	var new_root = ((function (tcoll__$1){
	return (function cljs$core$go(level,node){
	var node__$1 = cljs.core.tv_ensure_editable(self__.root.edit,node);
	if((level === (0))){
	cljs.core.pv_aset(node__$1,(n & (31)),val);

	return node__$1;
	} else {
	var subidx = ((n >>> level) & (31));
	cljs.core.pv_aset(node__$1,subidx,cljs$core$go((level - (5)),cljs.core.pv_aget(node__$1,subidx)));

	return node__$1;
	}
	});})(tcoll__$1))
	.call(null,self__.shift,self__.root);
	self__.root = new_root;

	return tcoll__$1;
	}
	} else {
	if((n === self__.cnt)){
	return tcoll__$1.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null,val);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Index "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(n),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" out of bounds for TransientVector of length"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.cnt)].join('')));

	}
	}
	} else {
	throw (new Error("assoc! after persistent!"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ITransientVector$_pop_BANG_$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	if(self__.root.edit){
	if((self__.cnt === (0))){
	throw (new Error("Can't pop empty vector"));
	} else {
	if(((1) === self__.cnt)){
	self__.cnt = (0);

	return tcoll__$1;
	} else {
	if((((self__.cnt - (1)) & (31)) > (0))){
	self__.cnt = (self__.cnt - (1));

	return tcoll__$1;
	} else {
	var new_tail = cljs.core.unchecked_editable_array_for(tcoll__$1,(self__.cnt - (2)));
	var new_root = (function (){var nr = cljs.core.tv_pop_tail(tcoll__$1,self__.shift,self__.root);
	if(!((nr == null))){
	return nr;
	} else {
	return (new cljs.core.VectorNode(self__.root.edit,[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null]));
	}
	})();
	if((((5) < self__.shift)) && ((cljs.core.pv_aget(new_root,(1)) == null))){
	var new_root__$1 = cljs.core.tv_ensure_editable(self__.root.edit,cljs.core.pv_aget(new_root,(0)));
	self__.root = new_root__$1;

	self__.shift = (self__.shift - (5));

	self__.cnt = (self__.cnt - (1));

	self__.tail = new_tail;

	return tcoll__$1;
	} else {
	self__.root = new_root;

	self__.cnt = (self__.cnt - (1));

	self__.tail = new_tail;

	return tcoll__$1;
	}

	}
	}
	}
	} else {
	throw (new Error("pop! after persistent!"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(self__.root.edit){
	return self__.cnt;
	} else {
	throw (new Error("count after persistent!"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (coll,n){
	var self__ = this;
	var coll__$1 = this;
	if(self__.root.edit){
	return (cljs.core.array_for(coll__$1,n)[(n & (31))]);
	} else {
	throw (new Error("nth after persistent!"));
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (coll,n,not_found){
	var self__ = this;
	var coll__$1 = this;
	if((((0) <= n)) && ((n < self__.cnt))){
	return coll__$1.cljs$core$IIndexed$_nth$arity$2(null,n);
	} else {
	return not_found;
	}
	});

	cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.TransientVector.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(typeof k === 'number'){
	return coll__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	} else {
	return not_found;
	}
	});

	cljs.core.TransientVector.prototype.call = (function() {
	var G__3562 = null;
	var G__3562__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__3562__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__3562 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3562__2.call(this,self__,k);
	case 3:
	return G__3562__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3562.cljs$core$IFn$_invoke$arity$2 = G__3562__2;
	G__3562.cljs$core$IFn$_invoke$arity$3 = G__3562__3;
	return G__3562;
	})()
	;

	cljs.core.TransientVector.prototype.apply = (function (self__,args3559){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3559)));
	});

	cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.TransientVector.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.TransientVector.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$shift,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$tail,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.TransientVector.cljs$lang$type = true;

	cljs.core.TransientVector.cljs$lang$ctorStr = "cljs.core/TransientVector";

	cljs.core.TransientVector.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/TransientVector");
	});

	cljs.core.__GT_TransientVector = (function cljs$core$__GT_TransientVector(cnt,shift,root,tail){
	return (new cljs.core.TransientVector(cnt,shift,root,tail));
	});


	/**
	* @constructor
	*/
	cljs.core.PersistentQueueIter = (function (fseq,riter){
	this.fseq = fseq;
	this.riter = riter;
	})
	cljs.core.PersistentQueueIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	var or__5450__auto__ = (!((self__.fseq == null))) && (cljs.core.seq(self__.fseq));
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	var and__5442__auto__ = !((self__.riter == null));
	if(and__5442__auto__){
	return self__.riter.hasNext();
	} else {
	return and__5442__auto__;
	}
	}
	});

	cljs.core.PersistentQueueIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(!((self__.fseq == null))){
	var ret = cljs.core.first(self__.fseq);
	self__.fseq = cljs.core.next(self__.fseq);

	return ret;
	} else {
	if((!((self__.riter == null))) && (self__.riter.hasNext())){
	return self__.riter.next();
	} else {
	throw (new Error("No such element"));

	}
	}
	});

	cljs.core.PersistentQueueIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.PersistentQueueIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$fseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$riter], null);
	});

	cljs.core.PersistentQueueIter.cljs$lang$type = true;

	cljs.core.PersistentQueueIter.cljs$lang$ctorStr = "cljs.core/PersistentQueueIter";

	cljs.core.PersistentQueueIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentQueueIter");
	});

	cljs.core.__GT_PersistentQueueIter = (function cljs$core$__GT_PersistentQueueIter(fseq,riter){
	return (new cljs.core.PersistentQueueIter(fseq,riter));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.PersistentQueueSeq = (function (meta,front,rear,__hash){
	this.meta = meta;
	this.front = front;
	this.rear = rear;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 31850572;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.PersistentQueueSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentQueueSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentQueueSeq.prototype.indexOf = (function() {
	var G__3563 = null;
	var G__3563__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3563__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3563 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3563__1.call(this,x);
	case 2:
	return G__3563__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3563.cljs$core$IFn$_invoke$arity$1 = G__3563__1;
	G__3563.cljs$core$IFn$_invoke$arity$2 = G__3563__2;
	return G__3563;
	})()
	;

	cljs.core.PersistentQueueSeq.prototype.lastIndexOf = (function() {
	var G__3564 = null;
	var G__3564__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3564__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3564 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3564__1.call(this,x);
	case 2:
	return G__3564__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3564.cljs$core$IFn$_invoke$arity$1 = G__3564__1;
	G__3564.cljs$core$IFn$_invoke$arity$2 = G__3564__2;
	return G__3564;
	})()
	;

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.first(self__.front);
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var temp__6736__auto__ = cljs.core.next(self__.front);
	if(temp__6736__auto__){
	var f1 = temp__6736__auto__;
	return (new cljs.core.PersistentQueueSeq(self__.meta,f1,self__.rear,null));
	} else {
	if((self__.rear == null)){
	return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
	} else {
	return (new cljs.core.PersistentQueueSeq(self__.meta,self__.rear,null,null));
	}
	}
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentQueueSeq(meta__$1,self__.front,self__.rear,self__.__hash));
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.PersistentQueueSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentQueueSeq.cljs$lang$type = true;

	cljs.core.PersistentQueueSeq.cljs$lang$ctorStr = "cljs.core/PersistentQueueSeq";

	cljs.core.PersistentQueueSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentQueueSeq");
	});

	cljs.core.__GT_PersistentQueueSeq = (function cljs$core$__GT_PersistentQueueSeq(meta,front,rear,__hash){
	return (new cljs.core.PersistentQueueSeq(meta,front,rear,__hash));
	});

	(cljs.core.PersistentQueueSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	*/
	cljs.core.PersistentQueue = (function (meta,count,front,rear,__hash){
	this.meta = meta;
	this.count = count;
	this.front = front;
	this.rear = rear;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 31858766;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.PersistentQueue.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentQueue.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentQueue.prototype.indexOf = (function() {
	var G__3565 = null;
	var G__3565__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3565__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3565 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3565__1.call(this,x);
	case 2:
	return G__3565__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3565.cljs$core$IFn$_invoke$arity$1 = G__3565__1;
	G__3565.cljs$core$IFn$_invoke$arity$2 = G__3565__2;
	return G__3565;
	})()
	;

	cljs.core.PersistentQueue.prototype.lastIndexOf = (function() {
	var G__3566 = null;
	var G__3566__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(self__.count.cljs$core$IFn$_invoke$arity$1 ? self__.count.cljs$core$IFn$_invoke$arity$1(coll) : self__.count.call(null,coll)));
	});
	var G__3566__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3566 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3566__1.call(this,x);
	case 2:
	return G__3566__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3566.cljs$core$IFn$_invoke$arity$1 = G__3566__1;
	G__3566.cljs$core$IFn$_invoke$arity$2 = G__3566__2;
	return G__3566;
	})()
	;

	cljs.core.PersistentQueue.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentQueue.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentQueueIter(self__.front,cljs.core._iterator(self__.rear)));
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentQueue(self__.meta,self__.count,self__.front,self__.rear,self__.__hash));
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.count;
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IStack$_peek$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.first(self__.front);
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IStack$_pop$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.truth_(self__.front)){
	var temp__6736__auto__ = cljs.core.next(self__.front);
	if(temp__6736__auto__){
	var f1 = temp__6736__auto__;
	return (new cljs.core.PersistentQueue(self__.meta,(self__.count - (1)),f1,self__.rear,null));
	} else {
	return (new cljs.core.PersistentQueue(self__.meta,(self__.count - (1)),cljs.core.seq(self__.rear),cljs.core.PersistentVector.EMPTY,null));
	}
	} else {
	return coll__$1;
	}
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.PersistentQueue.EMPTY,self__.meta);
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.first(self__.front);
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.rest(cljs.core.seq(coll__$1));
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var rear__$1 = cljs.core.seq(self__.rear);
	if(cljs.core.truth_((function (){var or__5450__auto__ = self__.front;
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return rear__$1;
	}
	})())){
	return (new cljs.core.PersistentQueueSeq(null,self__.front,cljs.core.seq(rear__$1),null));
	} else {
	return null;
	}
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentQueue(meta__$1,self__.count,self__.front,self__.rear,self__.__hash));
	});

	cljs.core.PersistentQueue.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.truth_(self__.front)){
	return (new cljs.core.PersistentQueue(self__.meta,(self__.count + (1)),self__.front,cljs.core.conj.cljs$core$IFn$_invoke$arity$2((function (){var or__5450__auto__ = self__.rear;
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.PersistentVector.EMPTY;
	}
	})(),o),null));
	} else {
	return (new cljs.core.PersistentQueue(self__.meta,(self__.count + (1)),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(self__.front,o),cljs.core.PersistentVector.EMPTY,null));
	}
	});

	cljs.core.PersistentQueue.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$count,cljs.core.cst$sym$front,cljs.core.cst$sym$rear,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentQueue.cljs$lang$type = true;

	cljs.core.PersistentQueue.cljs$lang$ctorStr = "cljs.core/PersistentQueue";

	cljs.core.PersistentQueue.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentQueue");
	});

	cljs.core.__GT_PersistentQueue = (function cljs$core$__GT_PersistentQueue(meta,count,front,rear,__hash){
	return (new cljs.core.PersistentQueue(meta,count,front,rear,__hash));
	});

	cljs.core.PersistentQueue.EMPTY = (new cljs.core.PersistentQueue(null,(0),null,cljs.core.PersistentVector.EMPTY,cljs.core.empty_ordered_hash));
	(cljs.core.PersistentQueue.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	*/
	cljs.core.NeverEquiv = (function (){
	this.cljs$lang$protocol_mask$partition0$ = 2097152;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.NeverEquiv.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.NeverEquiv.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (o,other){
	var self__ = this;
	var o__$1 = this;
	return false;
	});

	cljs.core.NeverEquiv.getBasis = (function (){
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.NeverEquiv.cljs$lang$type = true;

	cljs.core.NeverEquiv.cljs$lang$ctorStr = "cljs.core/NeverEquiv";

	cljs.core.NeverEquiv.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/NeverEquiv");
	});

	cljs.core.__GT_NeverEquiv = (function cljs$core$__GT_NeverEquiv(){
	return (new cljs.core.NeverEquiv());
	});

	cljs.core.never_equiv = (new cljs.core.NeverEquiv());
	/**
	 * Assumes y is a map. Returns true if x equals y, otherwise returns
	 *   false.
	 */
	cljs.core.equiv_map = (function cljs$core$equiv_map(x,y){
	return cljs.core.boolean$(((cljs.core.map_QMARK_(y))?(((cljs.core.count(x) === cljs.core.count(y)))?cljs.core.every_QMARK_((function (xkv){
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(y,cljs.core.first(xkv),cljs.core.never_equiv),cljs.core.second(xkv));
	}),x):null):null));
	});
	cljs.core.scan_array = (function cljs$core$scan_array(incr,k,array){
	var len = array.length;
	var i = (0);
	while(true){
	if((i < len)){
	if((k === (array[i]))){
	return i;
	} else {
	var G__3567 = (i + incr);
	i = G__3567;
	continue;
	}
	} else {
	return null;
	}
	break;
	}
	});
	cljs.core.obj_map_compare_keys = (function cljs$core$obj_map_compare_keys(a,b){
	var a__$1 = cljs.core.hash(a);
	var b__$1 = cljs.core.hash(b);
	if((a__$1 < b__$1)){
	return (-1);
	} else {
	if((a__$1 > b__$1)){
	return (1);
	} else {
	return (0);

	}
	}
	});
	cljs.core.obj_map__GT_hash_map = (function cljs$core$obj_map__GT_hash_map(m,k,v){
	var ks = m.keys;
	var len = ks.length;
	var so = m.strobj;
	var mm = cljs.core.meta(m);
	var i = (0);
	var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	while(true){
	if((i < len)){
	var k__$1 = (ks[i]);
	var G__3568 = (i + (1));
	var G__3569 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out,k__$1,(so[k__$1]));
	i = G__3568;
	out = G__3569;
	continue;
	} else {
	return cljs.core.with_meta(cljs.core.persistent_BANG_(cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out,k,v)),mm);
	}
	break;
	}
	});
	cljs.core.obj_clone = (function cljs$core$obj_clone(obj,ks){
	var new_obj = {};
	var l = ks.length;
	var i_3574 = (0);
	while(true){
	if((i_3574 < l)){
	var k_3575 = (ks[i_3574]);
	(new_obj[k_3575] = (obj[k_3575]));

	var G__3576 = (i_3574 + (1));
	i_3574 = G__3576;
	continue;
	} else {
	}
	break;
	}

	return new_obj;
	});

	/**
	* @constructor
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEditableCollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.IMap}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.ObjMap = (function (meta,keys,strobj,update_count,__hash){
	this.meta = meta;
	this.keys = keys;
	this.strobj = strobj;
	this.update_count = update_count;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 16123663;
	this.cljs$lang$protocol_mask$partition1$ = 4;
	})
	cljs.core.ObjMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ObjMap.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1,k)], null);
	});

	cljs.core.ObjMap.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.ObjMap.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.ObjMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	if((goog.isString(k)) && (!((cljs.core.scan_array((1),k,self__.keys) == null)))){
	return (self__.strobj[k]);
	} else {
	return not_found;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
	var self__ = this;
	var coll__$1 = this;
	var len = self__.keys.length;
	var keys__$1 = self__.keys.sort(cljs.core.obj_map_compare_keys);
	var init__$1 = init;
	while(true){
	if(cljs.core.seq(keys__$1)){
	var k = cljs.core.first(keys__$1);
	var init__$2 = (function (){var G__3579 = init__$1;
	var G__3580 = k;
	var G__3581 = (self__.strobj[k]);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3579,G__3580,G__3581) : f.call(null,G__3579,G__3580,G__3581));
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3582 = cljs.core.rest(keys__$1);
	var G__3583 = init__$2;
	keys__$1 = G__3582;
	init__$1 = G__3583;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.ObjMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.keys.length;
	});

	cljs.core.ObjMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_map(coll__$1,other);
	});

	cljs.core.ObjMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.transient$(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY,coll__$1));
	});

	cljs.core.ObjMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.ObjMap.EMPTY,self__.meta);
	});

	cljs.core.ObjMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if((goog.isString(k)) && (!((cljs.core.scan_array((1),k,self__.keys) == null)))){
	var new_keys = cljs.core.aclone(self__.keys);
	var new_strobj = cljs.core.obj_clone(self__.strobj,self__.keys);
	new_keys.splice(cljs.core.scan_array((1),k,new_keys),(1));

	delete new_strobj[k];

	return (new cljs.core.ObjMap(self__.meta,new_keys,new_strobj,(self__.update_count + (1)),null));
	} else {
	return coll__$1;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
	var self__ = this;
	var coll__$1 = this;
	if(goog.isString(k)){
	if(((self__.update_count > cljs.core.ObjMap.HASHMAP_THRESHOLD)) || ((self__.keys.length >= cljs.core.ObjMap.HASHMAP_THRESHOLD))){
	return cljs.core.obj_map__GT_hash_map(coll__$1,k,v);
	} else {
	if(!((cljs.core.scan_array((1),k,self__.keys) == null))){
	var new_strobj = cljs.core.obj_clone(self__.strobj,self__.keys);
	(new_strobj[k] = v);

	return (new cljs.core.ObjMap(self__.meta,self__.keys,new_strobj,(self__.update_count + (1)),null));
	} else {
	var new_strobj = cljs.core.obj_clone(self__.strobj,self__.keys);
	var new_keys = cljs.core.aclone(self__.keys);
	(new_strobj[k] = v);

	new_keys.push(k);

	return (new cljs.core.ObjMap(self__.meta,new_keys,new_strobj,(self__.update_count + (1)),null));
	}
	}
	} else {
	return cljs.core.obj_map__GT_hash_map(coll__$1,k,v);
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if((goog.isString(k)) && (!((cljs.core.scan_array((1),k,self__.keys) == null)))){
	return true;
	} else {
	return false;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.keys.length > (0))){
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (coll__$1){
	return (function (p1__3577_SHARP_){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[p1__3577_SHARP_,(self__.strobj[p1__3577_SHARP_])],null));
	});})(coll__$1))
	,self__.keys.sort(cljs.core.obj_map_compare_keys));
	} else {
	return null;
	}
	});

	cljs.core.ObjMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.ObjMap(meta__$1,self__.keys,self__.strobj,self__.update_count,self__.__hash));
	});

	cljs.core.ObjMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.vector_QMARK_(entry)){
	return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(1)));
	} else {
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,coll__$1,entry);
	}
	});

	cljs.core.ObjMap.prototype.call = (function() {
	var G__3584 = null;
	var G__3584__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__3584__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__3584 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3584__2.call(this,self__,k);
	case 3:
	return G__3584__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3584.cljs$core$IFn$_invoke$arity$2 = G__3584__2;
	G__3584.cljs$core$IFn$_invoke$arity$3 = G__3584__3;
	return G__3584;
	})()
	;

	cljs.core.ObjMap.prototype.apply = (function (self__,args3578){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3578)));
	});

	cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.ObjMap.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.ObjMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$keys,cljs.core.cst$sym$strobj,cljs.core.cst$sym$update_DASH_count,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ObjMap.cljs$lang$type = true;

	cljs.core.ObjMap.cljs$lang$ctorStr = "cljs.core/ObjMap";

	cljs.core.ObjMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ObjMap");
	});

	cljs.core.__GT_ObjMap = (function cljs$core$__GT_ObjMap(meta,keys,strobj,update_count,__hash){
	return (new cljs.core.ObjMap(meta,keys,strobj,update_count,__hash));
	});

	cljs.core.ObjMap.EMPTY = (new cljs.core.ObjMap(null,[],{},(0),cljs.core.empty_unordered_hash));
	cljs.core.ObjMap.HASHMAP_THRESHOLD = (8);
	cljs.core.ObjMap.fromObject = (function (ks,obj){
	return (new cljs.core.ObjMap(null,ks,obj,(0),null));
	});

	/**
	* @constructor
	*/
	cljs.core.RecordIter = (function (i,record,base_count,fields,ext_map_iter){
	this.i = i;
	this.record = record;
	this.base_count = base_count;
	this.fields = fields;
	this.ext_map_iter = ext_map_iter;
	})
	cljs.core.RecordIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	var or__5450__auto__ = (self__.i < self__.base_count);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return self__.ext_map_iter.hasNext();
	}
	});

	cljs.core.RecordIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if((self__.i < self__.base_count)){
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(self__.fields,self__.i);
	self__.i = (self__.i + (1));

	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [k,cljs.core._lookup.cljs$core$IFn$_invoke$arity$2(self__.record,k)], null);
	} else {
	return self__.ext_map_iter.next();
	}
	});

	cljs.core.RecordIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.RecordIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$record,cljs.core.cst$sym$base_DASH_count,cljs.core.cst$sym$fields,cljs.core.cst$sym$ext_DASH_map_DASH_iter], null);
	});

	cljs.core.RecordIter.cljs$lang$type = true;

	cljs.core.RecordIter.cljs$lang$ctorStr = "cljs.core/RecordIter";

	cljs.core.RecordIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/RecordIter");
	});

	cljs.core.__GT_RecordIter = (function cljs$core$__GT_RecordIter(i,record,base_count,fields,ext_map_iter){
	return (new cljs.core.RecordIter(i,record,base_count,fields,ext_map_iter));
	});


	/**
	* @constructor
	*/
	cljs.core.ES6EntriesIterator = (function (s){
	this.s = s;
	})
	cljs.core.ES6EntriesIterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(!((self__.s == null))){
	var vec__3587 = cljs.core.first(self__.s);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3587,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3587,(1),null);
	self__.s = cljs.core.next(self__.s);

	return ({"value": [k,v], "done": false});
	} else {
	return ({"value": null, "done": true});
	}
	});

	cljs.core.ES6EntriesIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ES6EntriesIterator.cljs$lang$type = true;

	cljs.core.ES6EntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6EntriesIterator";

	cljs.core.ES6EntriesIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ES6EntriesIterator");
	});

	cljs.core.__GT_ES6EntriesIterator = (function cljs$core$__GT_ES6EntriesIterator(s){
	return (new cljs.core.ES6EntriesIterator(s));
	});

	cljs.core.es6_entries_iterator = (function cljs$core$es6_entries_iterator(coll){
	return (new cljs.core.ES6EntriesIterator(cljs.core.seq(coll)));
	});

	/**
	* @constructor
	*/
	cljs.core.ES6SetEntriesIterator = (function (s){
	this.s = s;
	})
	cljs.core.ES6SetEntriesIterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(!((self__.s == null))){
	var x = cljs.core.first(self__.s);
	self__.s = cljs.core.next(self__.s);

	return ({"value": [x,x], "done": false});
	} else {
	return ({"value": null, "done": true});
	}
	});

	cljs.core.ES6SetEntriesIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$s,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ES6SetEntriesIterator.cljs$lang$type = true;

	cljs.core.ES6SetEntriesIterator.cljs$lang$ctorStr = "cljs.core/ES6SetEntriesIterator";

	cljs.core.ES6SetEntriesIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ES6SetEntriesIterator");
	});

	cljs.core.__GT_ES6SetEntriesIterator = (function cljs$core$__GT_ES6SetEntriesIterator(s){
	return (new cljs.core.ES6SetEntriesIterator(s));
	});

	cljs.core.es6_set_entries_iterator = (function cljs$core$es6_set_entries_iterator(coll){
	return (new cljs.core.ES6SetEntriesIterator(cljs.core.seq(coll)));
	});
	cljs.core.array_index_of_nil_QMARK_ = (function cljs$core$array_index_of_nil_QMARK_(arr){
	var len = arr.length;
	var i = (0);
	while(true){
	if((len <= i)){
	return (-1);
	} else {
	if(((arr[i]) == null)){
	return i;
	} else {
	var G__3590 = (i + (2));
	i = G__3590;
	continue;

	}
	}
	break;
	}
	});
	cljs.core.array_index_of_keyword_QMARK_ = (function cljs$core$array_index_of_keyword_QMARK_(arr,k){
	var len = arr.length;
	var kstr = k.fqn;
	var i = (0);
	while(true){
	if((len <= i)){
	return (-1);
	} else {
	if((((arr[i]) instanceof cljs.core.Keyword)) && ((kstr === (arr[i]).fqn))){
	return i;
	} else {
	var G__3591 = (i + (2));
	i = G__3591;
	continue;

	}
	}
	break;
	}
	});
	cljs.core.array_index_of_symbol_QMARK_ = (function cljs$core$array_index_of_symbol_QMARK_(arr,k){
	var len = arr.length;
	var kstr = k.str;
	var i = (0);
	while(true){
	if((len <= i)){
	return (-1);
	} else {
	if((((arr[i]) instanceof cljs.core.Symbol)) && ((kstr === (arr[i]).str))){
	return i;
	} else {
	var G__3592 = (i + (2));
	i = G__3592;
	continue;

	}
	}
	break;
	}
	});
	cljs.core.array_index_of_identical_QMARK_ = (function cljs$core$array_index_of_identical_QMARK_(arr,k){
	var len = arr.length;
	var i = (0);
	while(true){
	if((len <= i)){
	return (-1);
	} else {
	if((k === (arr[i]))){
	return i;
	} else {
	var G__3593 = (i + (2));
	i = G__3593;
	continue;

	}
	}
	break;
	}
	});
	cljs.core.array_index_of_equiv_QMARK_ = (function cljs$core$array_index_of_equiv_QMARK_(arr,k){
	var len = arr.length;
	var i = (0);
	while(true){
	if((len <= i)){
	return (-1);
	} else {
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k,(arr[i]))){
	return i;
	} else {
	var G__3594 = (i + (2));
	i = G__3594;
	continue;

	}
	}
	break;
	}
	});
	cljs.core.array_index_of = (function cljs$core$array_index_of(arr,k){
	if((k instanceof cljs.core.Keyword)){
	return cljs.core.array_index_of_keyword_QMARK_(arr,k);
	} else {
	if((goog.isString(k)) || (typeof k === 'number')){
	return cljs.core.array_index_of_identical_QMARK_(arr,k);
	} else {
	if((k instanceof cljs.core.Symbol)){
	return cljs.core.array_index_of_symbol_QMARK_(arr,k);
	} else {
	if((k == null)){
	return cljs.core.array_index_of_nil_QMARK_(arr);
	} else {
	return cljs.core.array_index_of_equiv_QMARK_(arr,k);

	}
	}
	}
	}
	});
	cljs.core.array_map_index_of = (function cljs$core$array_map_index_of(m,k){
	return cljs.core.array_index_of(m.arr,k);
	});
	cljs.core.array_extend_kv = (function cljs$core$array_extend_kv(arr,k,v){
	var l = arr.length;
	var narr = (new Array((l + (2))));
	var i_3595 = (0);
	while(true){
	if((i_3595 < l)){
	(narr[i_3595] = (arr[i_3595]));

	var G__3596 = (i_3595 + (1));
	i_3595 = G__3596;
	continue;
	} else {
	}
	break;
	}

	(narr[l] = k);

	(narr[(l + (1))] = v);

	return narr;
	});
	cljs.core.array_map_extend_kv = (function cljs$core$array_map_extend_kv(m,k,v){
	return cljs.core.array_extend_kv(m.arr,k,v);
	});

	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IVector}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IMapEntry}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.MapEntry = (function (key,val,__hash){
	this.key = key;
	this.val = val;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32402207;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.MapEntry.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.MapEntry.prototype.cljs$core$IFind$_find$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	if((k === (0))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),self__.key], null);
	} else {
	if((k === (1))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),self__.val], null);
	} else {
	return null;

	}
	}
	});

	cljs.core.MapEntry.prototype.indexOf = (function() {
	var G__3598 = null;
	var G__3598__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3598__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3598 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3598__1.call(this,x);
	case 2:
	return G__3598__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3598.cljs$core$IFn$_invoke$arity$1 = G__3598__1;
	G__3598.cljs$core$IFn$_invoke$arity$2 = G__3598__2;
	return G__3598;
	})()
	;

	cljs.core.MapEntry.prototype.lastIndexOf = (function() {
	var G__3599 = null;
	var G__3599__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3599__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3599 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3599__1.call(this,x);
	case 2:
	return G__3599__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3599.cljs$core$IFn$_invoke$arity$1 = G__3599__1;
	G__3599.cljs$core$IFn$_invoke$arity$2 = G__3599__2;
	return G__3599;
	})()
	;

	cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,null);
	});

	cljs.core.MapEntry.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (node,k,not_found){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (node,n){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	throw (new Error("Index out of bounds"));

	}
	}
	});

	cljs.core.MapEntry.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (node,n,not_found){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	return not_found;

	}
	}
	});

	cljs.core.MapEntry.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (node,n,v){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null).cljs$core$IVector$_assoc_n$arity$3(null,n,v);
	});

	cljs.core.MapEntry.prototype.cljs$core$IMeta$_meta$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return null;
	});

	cljs.core.MapEntry.prototype.cljs$core$ICounted$_count$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return (2);
	});

	cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.key;
	});

	cljs.core.MapEntry.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.MapEntry.prototype.cljs$core$IStack$_peek$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.MapEntry.prototype.cljs$core$IStack$_pop$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
	});

	cljs.core.MapEntry.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.MapEntry.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.MapEntry.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (node,f){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1,f);
	});

	cljs.core.MapEntry.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (node,f,start){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1,f,start);
	});

	cljs.core.MapEntry.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (node,k,v){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),k,v);
	});

	cljs.core.MapEntry.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return ((k === (0))) || ((k === (1)));
	});

	cljs.core.MapEntry.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	var x__5940__auto__ = self__.key;
	return cljs.core._conj((function (){var x__5940__auto____$1 = self__.val;
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto____$1);
	})(),x__5940__auto__);
	});

	cljs.core.MapEntry.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (node,meta){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),meta);
	});

	cljs.core.MapEntry.prototype.cljs$core$ICollection$_conj$arity$2 = (function (node,o){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val,o], null);
	});

	cljs.core.MapEntry.prototype.call = (function() {
	var G__3600 = null;
	var G__3600__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});
	var G__3600__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});
	G__3600 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3600__2.call(this,self__,k);
	case 3:
	return G__3600__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3600.cljs$core$IFn$_invoke$arity$2 = G__3600__2;
	G__3600.cljs$core$IFn$_invoke$arity$3 = G__3600__3;
	return G__3600;
	})()
	;

	cljs.core.MapEntry.prototype.apply = (function (self__,args3597){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3597)));
	});

	cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});

	cljs.core.MapEntry.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.MapEntry.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.MapEntry.cljs$lang$type = true;

	cljs.core.MapEntry.cljs$lang$ctorStr = "cljs.core/MapEntry";

	cljs.core.MapEntry.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/MapEntry");
	});

	cljs.core.__GT_MapEntry = (function cljs$core$__GT_MapEntry(key,val,__hash){
	return (new cljs.core.MapEntry(key,val,__hash));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.PersistentArrayMapSeq = (function (arr,i,_meta){
	this.arr = arr;
	this.i = i;
	this._meta = _meta;
	this.cljs$lang$protocol_mask$partition0$ = 32374990;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.PersistentArrayMapSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentArrayMapSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentArrayMapSeq.prototype.indexOf = (function() {
	var G__3601 = null;
	var G__3601__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3601__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3601 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3601__1.call(this,x);
	case 2:
	return G__3601__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3601.cljs$core$IFn$_invoke$arity$1 = G__3601__1;
	G__3601.cljs$core$IFn$_invoke$arity$2 = G__3601__2;
	return G__3601;
	})()
	;

	cljs.core.PersistentArrayMapSeq.prototype.lastIndexOf = (function() {
	var G__3602 = null;
	var G__3602__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3602__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3602 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3602__1.call(this,x);
	case 2:
	return G__3602__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3602.cljs$core$IFn$_invoke$arity$1 = G__3602__1;
	G__3602.cljs$core$IFn$_invoke$arity$2 = G__3602__2;
	return G__3602;
	})()
	;

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__._meta;
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.i < (self__.arr.length - (2)))){
	return (new cljs.core.PersistentArrayMapSeq(self__.arr,(self__.i + (2)),self__._meta));
	} else {
	return null;
	}
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return ((self__.arr.length - self__.i) / (2));
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.hash_ordered_coll(coll__$1);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__._meta);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(self__.arr[self__.i]),(self__.arr[(self__.i + (1))])], null);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.i < (self__.arr.length - (2)))){
	return (new cljs.core.PersistentArrayMapSeq(self__.arr,(self__.i + (2)),self__._meta));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,new_meta){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentArrayMapSeq(self__.arr,self__.i,new_meta));
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.PersistentArrayMapSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.cst$sym$i,cljs.core.cst$sym$_meta], null);
	});

	cljs.core.PersistentArrayMapSeq.cljs$lang$type = true;

	cljs.core.PersistentArrayMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapSeq";

	cljs.core.PersistentArrayMapSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentArrayMapSeq");
	});

	cljs.core.__GT_PersistentArrayMapSeq = (function cljs$core$__GT_PersistentArrayMapSeq(arr,i,_meta){
	return (new cljs.core.PersistentArrayMapSeq(arr,i,_meta));
	});

	(cljs.core.PersistentArrayMapSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.persistent_array_map_seq = (function cljs$core$persistent_array_map_seq(arr,i,_meta){
	if((i <= (arr.length - (2)))){
	return (new cljs.core.PersistentArrayMapSeq(arr,i,_meta));
	} else {
	return null;
	}
	});


	/**
	* @constructor
	*/
	cljs.core.PersistentArrayMapIterator = (function (arr,i,cnt){
	this.arr = arr;
	this.i = i;
	this.cnt = cnt;
	})
	cljs.core.PersistentArrayMapIterator.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return (self__.i < self__.cnt);
	});

	cljs.core.PersistentArrayMapIterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var ret = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(self__.arr[self__.i]),(self__.arr[(self__.i + (1))])], null);
	self__.i = (self__.i + (2));

	return ret;
	});

	cljs.core.PersistentArrayMapIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$cnt], null);
	});

	cljs.core.PersistentArrayMapIterator.cljs$lang$type = true;

	cljs.core.PersistentArrayMapIterator.cljs$lang$ctorStr = "cljs.core/PersistentArrayMapIterator";

	cljs.core.PersistentArrayMapIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentArrayMapIterator");
	});

	cljs.core.__GT_PersistentArrayMapIterator = (function cljs$core$__GT_PersistentArrayMapIterator(arr,i,cnt){
	return (new cljs.core.PersistentArrayMapIterator(arr,i,cnt));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEditableCollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.IMap}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.PersistentArrayMap = (function (meta,cnt,arr,__hash){
	this.meta = meta;
	this.cnt = cnt;
	this.arr = arr;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 16647951;
	this.cljs$lang$protocol_mask$partition1$ = 8196;
	})
	cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentArrayMap.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	var idx = cljs.core.array_map_index_of(coll__$1,k);
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(self__.arr[idx]),cljs.core.get.cljs$core$IFn$_invoke$arity$2(coll__$1,k)], null);
	});

	cljs.core.PersistentArrayMap.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentArrayMap.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentArrayMap.prototype.keys = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null,coll)));
	});

	cljs.core.PersistentArrayMap.prototype.entries = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentArrayMap.prototype.values = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null,coll)));
	});

	cljs.core.PersistentArrayMap.prototype.has = (function (k){
	var self__ = this;
	var coll = this;
	return cljs.core.contains_QMARK_(coll,k);
	});

	cljs.core.PersistentArrayMap.prototype.get = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentArrayMap.prototype.forEach = (function (f){
	var self__ = this;
	var coll = this;
	var seq__3604 = cljs.core.seq(coll);
	var chunk__3605 = null;
	var count__3606 = (0);
	var i__3607 = (0);
	while(true){
	if((i__3607 < count__3606)){
	var vec__3608 = chunk__3605.cljs$core$IIndexed$_nth$arity$2(null,i__3607);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3608,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3608,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3621 = seq__3604;
	var G__3622 = chunk__3605;
	var G__3623 = count__3606;
	var G__3624 = (i__3607 + (1));
	seq__3604 = G__3621;
	chunk__3605 = G__3622;
	count__3606 = G__3623;
	i__3607 = G__3624;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__3604);
	if(temp__6738__auto__){
	var seq__3604__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__3604__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__3604__$1);
	var G__3625 = cljs.core.chunk_rest(seq__3604__$1);
	var G__3626 = c__5929__auto__;
	var G__3627 = cljs.core.count(c__5929__auto__);
	var G__3628 = (0);
	seq__3604 = G__3625;
	chunk__3605 = G__3626;
	count__3606 = G__3627;
	i__3607 = G__3628;
	continue;
	} else {
	var vec__3611 = cljs.core.first(seq__3604__$1);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3611,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3611,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3629 = cljs.core.next(seq__3604__$1);
	var G__3630 = null;
	var G__3631 = (0);
	var G__3632 = (0);
	seq__3604 = G__3629;
	chunk__3605 = G__3630;
	count__3606 = G__3631;
	i__3607 = G__3632;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	var idx = cljs.core.array_map_index_of(coll__$1,k);
	if((idx === (-1))){
	return not_found;
	} else {
	return (self__.arr[(idx + (1))]);
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
	var self__ = this;
	var coll__$1 = this;
	var len = self__.arr.length;
	var i = (0);
	var init__$1 = init;
	while(true){
	if((i < len)){
	var init__$2 = (function (){var G__3614 = init__$1;
	var G__3615 = (self__.arr[i]);
	var G__3616 = (self__.arr[(i + (1))]);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3614,G__3615,G__3616) : f.call(null,G__3614,G__3615,G__3616));
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3633 = (i + (2));
	var G__3634 = init__$2;
	i = G__3633;
	init__$1 = G__3634;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentArrayMap.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return (new cljs.core.PersistentArrayMapIterator(self__.arr,(0),(self__.cnt * (2))));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentArrayMap(self__.meta,self__.cnt,self__.arr,self__.__hash));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.cnt;
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	if(((!((other == null)))?((((other.cljs$lang$protocol_mask$partition0$ & (1024))) || ((cljs.core.PROTOCOL_SENTINEL === other.cljs$core$IMap$)))?true:false):false)){
	var alen = self__.arr.length;
	var other__$1 = other;
	if((self__.cnt === other__$1.cljs$core$ICounted$_count$arity$1(null))){
	var i = (0);
	while(true){
	if((i < alen)){
	var v = other__$1.cljs$core$ILookup$_lookup$arity$3(null,(self__.arr[i]),cljs.core.lookup_sentinel);
	if(!((v === cljs.core.lookup_sentinel))){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((self__.arr[(i + (1))]),v)){
	var G__3635 = (i + (2));
	i = G__3635;
	continue;
	} else {
	return false;
	}
	} else {
	return false;
	}
	} else {
	return true;
	}
	break;
	}
	} else {
	return false;
	}
	} else {
	return cljs.core.equiv_map(coll__$1,other);
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.TransientArrayMap({},self__.arr.length,cljs.core.aclone(self__.arr)));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._with_meta(cljs.core.PersistentArrayMap.EMPTY,self__.meta);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	var idx = cljs.core.array_map_index_of(coll__$1,k);
	if((idx >= (0))){
	var len = self__.arr.length;
	var new_len = (len - (2));
	if((new_len === (0))){
	return coll__$1.cljs$core$IEmptyableCollection$_empty$arity$1(null);
	} else {
	var new_arr = (new Array(new_len));
	var s = (0);
	var d = (0);
	while(true){
	if((s >= len)){
	return (new cljs.core.PersistentArrayMap(self__.meta,(self__.cnt - (1)),new_arr,null));
	} else {
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(k,(self__.arr[s]))){
	var G__3636 = (s + (2));
	var G__3637 = d;
	s = G__3636;
	d = G__3637;
	continue;
	} else {
	(new_arr[d] = (self__.arr[s]));

	(new_arr[(d + (1))] = (self__.arr[(s + (1))]));

	var G__3638 = (s + (2));
	var G__3639 = (d + (2));
	s = G__3638;
	d = G__3639;
	continue;

	}
	}
	break;
	}
	}
	} else {
	return coll__$1;
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
	var self__ = this;
	var coll__$1 = this;
	var idx = cljs.core.array_map_index_of(coll__$1,k);
	if((idx === (-1))){
	if((self__.cnt < cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD)){
	var arr__$1 = cljs.core.array_map_extend_kv(coll__$1,k,v);
	return (new cljs.core.PersistentArrayMap(self__.meta,(self__.cnt + (1)),arr__$1,null));
	} else {
	return cljs.core._with_meta(cljs.core._assoc(cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentHashMap.EMPTY,coll__$1),k,v),self__.meta);
	}
	} else {
	if((v === (self__.arr[(idx + (1))]))){
	return coll__$1;
	} else {
	var arr__$1 = (function (){var G__3620 = cljs.core.aclone(self__.arr);
	(G__3620[(idx + (1))] = v);

	return G__3620;
	})();
	return (new cljs.core.PersistentArrayMap(self__.meta,self__.cnt,arr__$1,null));

	}
	}
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return !((cljs.core.array_map_index_of(coll__$1,k) === (-1)));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.persistent_array_map_seq(self__.arr,(0),null);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentArrayMap(meta__$1,self__.cnt,self__.arr,self__.__hash));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.vector_QMARK_(entry)){
	return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(1)));
	} else {
	var ret = coll__$1;
	var es = cljs.core.seq(entry);
	while(true){
	if((es == null)){
	return ret;
	} else {
	var e = cljs.core.first(es);
	if(cljs.core.vector_QMARK_(e)){
	var G__3640 = ret.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(1)));
	var G__3641 = cljs.core.next(es);
	ret = G__3640;
	es = G__3641;
	continue;
	} else {
	throw (new Error("conj on a map takes map entries or seqables of map entries"));
	}
	}
	break;
	}
	}
	});

	cljs.core.PersistentArrayMap.prototype.call = (function() {
	var G__3642 = null;
	var G__3642__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__3642__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__3642 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3642__2.call(this,self__,k);
	case 3:
	return G__3642__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3642.cljs$core$IFn$_invoke$arity$2 = G__3642__2;
	G__3642.cljs$core$IFn$_invoke$arity$3 = G__3642__3;
	return G__3642;
	})()
	;

	cljs.core.PersistentArrayMap.prototype.apply = (function (self__,args3603){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3603)));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentArrayMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentArrayMap.cljs$lang$type = true;

	cljs.core.PersistentArrayMap.cljs$lang$ctorStr = "cljs.core/PersistentArrayMap";

	cljs.core.PersistentArrayMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentArrayMap");
	});

	cljs.core.__GT_PersistentArrayMap = (function cljs$core$__GT_PersistentArrayMap(meta,cnt,arr,__hash){
	return (new cljs.core.PersistentArrayMap(meta,cnt,arr,__hash));
	});

	cljs.core.PersistentArrayMap.EMPTY = (new cljs.core.PersistentArrayMap(null,(0),[],cljs.core.empty_unordered_hash));
	cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD = (8);
	cljs.core.PersistentArrayMap.fromArray = (function (arr,no_clone,no_check){
	var arr__$1 = ((no_clone)?arr:cljs.core.aclone(arr));
	var arr__$2 = ((no_check)?arr__$1:(function (){var ret = [];
	var i_3643 = (0);
	while(true){
	if((i_3643 < arr__$1.length)){
	var k_3644 = (arr__$1[i_3643]);
	var v_3645 = (arr__$1[(i_3643 + (1))]);
	var idx_3646 = cljs.core.array_index_of(ret,k_3644);
	if((idx_3646 === (-1))){
	ret.push(k_3644);

	ret.push(v_3645);
	} else {
	}

	var G__3647 = (i_3643 + (2));
	i_3643 = G__3647;
	continue;
	} else {
	}
	break;
	}

	return ret;
	})());
	var cnt = (arr__$2.length / (2));
	return (new cljs.core.PersistentArrayMap(null,cnt,arr__$2,null));
	});
	cljs.core.PersistentArrayMap.createWithCheck = (function (arr){
	var ret = [];
	var i_3649 = (0);
	while(true){
	if((i_3649 < arr.length)){
	var k_3650 = (arr[i_3649]);
	var v_3651 = (arr[(i_3649 + (1))]);
	var idx_3652 = cljs.core.array_index_of(ret,k_3650);
	if((idx_3652 === (-1))){
	var G__3648_3653 = ret;
	G__3648_3653.push(k_3650);

	G__3648_3653.push(v_3651);

	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(k_3650)].join('')));
	}

	var G__3654 = (i_3649 + (2));
	i_3649 = G__3654;
	continue;
	} else {
	}
	break;
	}

	var cnt = (arr.length / (2));
	return (new cljs.core.PersistentArrayMap(null,cnt,arr,null));
	});
	cljs.core.PersistentArrayMap.createAsIfByAssoc = (function (arr){
	var ret = [];
	var i_3656 = (0);
	while(true){
	if((i_3656 < arr.length)){
	var k_3657 = (arr[i_3656]);
	var v_3658 = (arr[(i_3656 + (1))]);
	var idx_3659 = cljs.core.array_index_of(ret,k_3657);
	if((idx_3659 === (-1))){
	var G__3655_3660 = ret;
	G__3655_3660.push(k_3657);

	G__3655_3660.push(v_3658);

	} else {
	(ret[(idx_3659 + (1))] = v_3658);
	}

	var G__3661 = (i_3656 + (2));
	i_3656 = G__3661;
	continue;
	} else {
	}
	break;
	}

	return (new cljs.core.PersistentArrayMap(null,(ret.length / (2)),ret,null));
	});
	(cljs.core.PersistentArrayMap.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.ITransientMap}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ITransientCollection}
	 * @implements {cljs.core.ITransientAssociative}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.TransientArrayMap = (function (editable_QMARK_,len,arr){
	this.editable_QMARK_ = editable_QMARK_;
	this.len = len;
	this.arr = arr;
	this.cljs$lang$protocol_mask$partition0$ = 258;
	this.cljs$lang$protocol_mask$partition1$ = 56;
	})
	cljs.core.TransientArrayMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	return cljs.core.quot(self__.len,(2));
	} else {
	throw (new Error("count after persistent!"));
	}
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,k){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,k,not_found){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	var idx = cljs.core.array_map_index_of(tcoll__$1,k);
	if((idx === (-1))){
	return not_found;
	} else {
	return (self__.arr[(idx + (1))]);
	}
	} else {
	throw (new Error("lookup after persistent!"));
	}
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	if(((!((o == null)))?((((o.cljs$lang$protocol_mask$partition0$ & (2048))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$)))?true:(((!o.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry,o):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry,o))){
	return tcoll__$1.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null,(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null,o)),(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null,o)));
	} else {
	var es = cljs.core.seq(o);
	var tcoll__$2 = tcoll__$1;
	while(true){
	var temp__6736__auto__ = cljs.core.first(es);
	if(cljs.core.truth_(temp__6736__auto__)){
	var e = temp__6736__auto__;
	var G__3664 = cljs.core.next(es);
	var G__3665 = tcoll__$2.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null,(cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null,e)),(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null,e)));
	es = G__3664;
	tcoll__$2 = G__3665;
	continue;
	} else {
	return tcoll__$2;
	}
	break;
	}
	}
	} else {
	throw (new Error("conj! after persistent!"));
	}
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	self__.editable_QMARK_ = false;

	return (new cljs.core.PersistentArrayMap(null,cljs.core.quot(self__.len,(2)),self__.arr,null));
	} else {
	throw (new Error("persistent! called twice"));
	}
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	var idx = cljs.core.array_map_index_of(tcoll__$1,key);
	if((idx === (-1))){
	if(((self__.len + (2)) <= ((2) * cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD))){
	self__.len = (self__.len + (2));

	self__.arr.push(key);

	self__.arr.push(val);

	return tcoll__$1;
	} else {
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3((cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2 ? cljs.core.array__GT_transient_hash_map.cljs$core$IFn$_invoke$arity$2(self__.len,self__.arr) : cljs.core.array__GT_transient_hash_map.call(null,self__.len,self__.arr)),key,val);
	}
	} else {
	if((val === (self__.arr[(idx + (1))]))){
	return tcoll__$1;
	} else {
	(self__.arr[(idx + (1))] = val);

	return tcoll__$1;
	}
	}
	} else {
	throw (new Error("assoc! after persistent!"));
	}
	});

	cljs.core.TransientArrayMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = (function (tcoll,key){
	var self__ = this;
	var tcoll__$1 = this;
	if(cljs.core.truth_(self__.editable_QMARK_)){
	var idx = cljs.core.array_map_index_of(tcoll__$1,key);
	if((idx >= (0))){
	(self__.arr[idx] = (self__.arr[(self__.len - (2))]));

	(self__.arr[(idx + (1))] = (self__.arr[(self__.len - (1))]));

	var G__3663_3666 = self__.arr;
	G__3663_3666.pop();

	G__3663_3666.pop();


	self__.len = (self__.len - (2));
	} else {
	}

	return tcoll__$1;
	} else {
	throw (new Error("dissoc! after persistent!"));
	}
	});

	cljs.core.TransientArrayMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$editable_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$len,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$arr], null);
	});

	cljs.core.TransientArrayMap.cljs$lang$type = true;

	cljs.core.TransientArrayMap.cljs$lang$ctorStr = "cljs.core/TransientArrayMap";

	cljs.core.TransientArrayMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/TransientArrayMap");
	});

	cljs.core.__GT_TransientArrayMap = (function cljs$core$__GT_TransientArrayMap(editable_QMARK_,len,arr){
	return (new cljs.core.TransientArrayMap(editable_QMARK_,len,arr));
	});

	cljs.core.array__GT_transient_hash_map = (function cljs$core$array__GT_transient_hash_map(len,arr){
	var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	var i = (0);
	while(true){
	if((i < len)){
	var G__3667 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out,(arr[i]),(arr[(i + (1))]));
	var G__3668 = (i + (2));
	out = G__3667;
	i = G__3668;
	continue;
	} else {
	return out;
	}
	break;
	}
	});

	/**
	* @constructor
	*/
	cljs.core.Box = (function (val){
	this.val = val;
	})

	cljs.core.Box.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Box.cljs$lang$type = true;

	cljs.core.Box.cljs$lang$ctorStr = "cljs.core/Box";

	cljs.core.Box.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Box");
	});

	cljs.core.__GT_Box = (function cljs$core$__GT_Box(val){
	return (new cljs.core.Box(val));
	});






	cljs.core.key_test = (function cljs$core$key_test(key,other){
	if((key === other)){
	return true;
	} else {
	if(cljs.core.keyword_identical_QMARK_(key,other)){
	return true;
	} else {
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(key,other);

	}
	}
	});
	cljs.core.mask = (function cljs$core$mask(hash,shift){
	return ((hash >>> shift) & (31));
	});
	cljs.core.clone_and_set = (function cljs$core$clone_and_set(var_args){
	var args3669 = [];
	var len__6099__auto___3674 = arguments.length;
	var i__6100__auto___3675 = (0);
	while(true){
	if((i__6100__auto___3675 < len__6099__auto___3674)){
	args3669.push((arguments[i__6100__auto___3675]));

	var G__3676 = (i__6100__auto___3675 + (1));
	i__6100__auto___3675 = G__3676;
	continue;
	} else {
	}
	break;
	}

	var G__3671 = args3669.length;
	switch (G__3671) {
	case 3:
	return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 5:
	return cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3669.length)].join('')));

	}
	});

	cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3 = (function (arr,i,a){
	var G__3672 = cljs.core.aclone(arr);
	(G__3672[i] = a);

	return G__3672;
	});

	cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5 = (function (arr,i,a,j,b){
	var G__3673 = cljs.core.aclone(arr);
	(G__3673[i] = a);

	(G__3673[j] = b);

	return G__3673;
	});

	cljs.core.clone_and_set.cljs$lang$maxFixedArity = 5;

	cljs.core.remove_pair = (function cljs$core$remove_pair(arr,i){
	var new_arr = (new Array((arr.length - (2))));
	cljs.core.array_copy(arr,(0),new_arr,(0),((2) * i));

	cljs.core.array_copy(arr,((2) * (i + (1))),new_arr,((2) * i),(new_arr.length - ((2) * i)));

	return new_arr;
	});
	cljs.core.bitmap_indexed_node_index = (function cljs$core$bitmap_indexed_node_index(bitmap,bit){
	return cljs.core.bit_count((bitmap & (bit - (1))));
	});
	cljs.core.bitpos = (function cljs$core$bitpos(hash,shift){
	return ((1) << ((hash >>> shift) & 0x01f));
	});
	cljs.core.edit_and_set = (function cljs$core$edit_and_set(var_args){
	var args3678 = [];
	var len__6099__auto___3681 = arguments.length;
	var i__6100__auto___3682 = (0);
	while(true){
	if((i__6100__auto___3682 < len__6099__auto___3681)){
	args3678.push((arguments[i__6100__auto___3682]));

	var G__3683 = (i__6100__auto___3682 + (1));
	i__6100__auto___3682 = G__3683;
	continue;
	} else {
	}
	break;
	}

	var G__3680 = args3678.length;
	switch (G__3680) {
	case 4:
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	case 6:
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3678.length)].join('')));

	}
	});

	cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4 = (function (inode,edit,i,a){
	var editable = inode.ensure_editable(edit);
	(editable.arr[i] = a);

	return editable;
	});

	cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6 = (function (inode,edit,i,a,j,b){
	var editable = inode.ensure_editable(edit);
	(editable.arr[i] = a);

	(editable.arr[j] = b);

	return editable;
	});

	cljs.core.edit_and_set.cljs$lang$maxFixedArity = 6;

	cljs.core.inode_kv_reduce = (function cljs$core$inode_kv_reduce(arr,f,init){
	var len = arr.length;
	var i = (0);
	var init__$1 = init;
	while(true){
	if((i < len)){
	var init__$2 = (function (){var k = (arr[i]);
	if(!((k == null))){
	var G__3688 = init__$1;
	var G__3689 = k;
	var G__3690 = (arr[(i + (1))]);
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3688,G__3689,G__3690) : f.call(null,G__3688,G__3689,G__3690));
	} else {
	var node = (arr[(i + (1))]);
	if(!((node == null))){
	return node.kv_reduce(f,init__$1);
	} else {
	return init__$1;
	}
	}
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3691 = (i + (2));
	var G__3692 = init__$2;
	i = G__3691;
	init__$1 = G__3692;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	/**
	* @constructor
	*/
	cljs.core.NodeIterator = (function (arr,i,next_entry,next_iter){
	this.arr = arr;
	this.i = i;
	this.next_entry = next_entry;
	this.next_iter = next_iter;
	})
	cljs.core.NodeIterator.prototype.advance = (function (){
	var self__ = this;
	var this$ = this;
	var len = self__.arr.length;
	while(true){
	if((self__.i < len)){
	var key = (self__.arr[self__.i]);
	var node_or_val = (self__.arr[(self__.i + (1))]);
	var found = ((!((key == null)))?self__.next_entry = new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key,node_or_val], null):((!((node_or_val == null)))?(function (){var new_iter = cljs.core._iterator(node_or_val);
	if(new_iter.hasNext()){
	return self__.next_iter = new_iter;
	} else {
	return false;
	}
	})():false
	));
	self__.i = (self__.i + (2));

	if(found){
	return true;
	} else {
	continue;
	}
	} else {
	return false;
	}
	break;
	}
	});

	cljs.core.NodeIterator.prototype.hasNext = (function (){
	var self__ = this;
	var this$ = this;
	var or__5450__auto__ = !((self__.next_entry == null));
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = !((self__.next_iter == null));
	if(or__5450__auto____$1){
	return or__5450__auto____$1;
	} else {
	return this$.advance();
	}
	}
	});

	cljs.core.NodeIterator.prototype.next = (function (){
	var self__ = this;
	var this$ = this;
	if(!((self__.next_entry == null))){
	var ret = self__.next_entry;
	self__.next_entry = null;

	return ret;
	} else {
	if(!((self__.next_iter == null))){
	var ret = self__.next_iter.next();
	if(self__.next_iter.hasNext()){
	} else {
	self__.next_iter = null;
	}

	return ret;
	} else {
	if(this$.advance()){
	return this$.next();
	} else {
	throw (new Error("No such element"));

	}
	}
	}
	});

	cljs.core.NodeIterator.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.NodeIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_entry,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.NodeIterator.cljs$lang$type = true;

	cljs.core.NodeIterator.cljs$lang$ctorStr = "cljs.core/NodeIterator";

	cljs.core.NodeIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/NodeIterator");
	});

	cljs.core.__GT_NodeIterator = (function cljs$core$__GT_NodeIterator(arr,i,next_entry,next_iter){
	return (new cljs.core.NodeIterator(arr,i,next_entry,next_iter));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IIterable}
	*/
	cljs.core.BitmapIndexedNode = (function (edit,bitmap,arr){
	this.edit = edit;
	this.bitmap = bitmap;
	this.arr = arr;
	})
	cljs.core.BitmapIndexedNode.prototype.ensure_editable = (function (e){
	var self__ = this;
	var inode = this;
	if((e === self__.edit)){
	return inode;
	} else {
	var n = cljs.core.bit_count(self__.bitmap);
	var new_arr = (new Array((((n < (0)))?(4):((2) * (n + (1))))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),((2) * n));

	return (new cljs.core.BitmapIndexedNode(e,self__.bitmap,new_arr));
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_without_BANG_ = (function (edit__$1,shift,hash,key,removed_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	if(((self__.bitmap & bit) === (0))){
	return inode;
	} else {
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	var n = val_or_node.inode_without_BANG_(edit__$1,(shift + (5)),hash,key,removed_leaf_QMARK_);
	if((n === val_or_node)){
	return inode;
	} else {
	if(!((n == null))){
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,(((2) * idx) + (1)),n);
	} else {
	if((self__.bitmap === bit)){
	return null;
	} else {
	return inode.edit_and_remove_pair(edit__$1,bit,idx);

	}
	}
	}
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	removed_leaf_QMARK_.val = true;

	return inode.edit_and_remove_pair(edit__$1,bit,idx);
	} else {
	return inode;

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.edit_and_remove_pair = (function (e,bit,i){
	var self__ = this;
	var inode = this;
	if((self__.bitmap === bit)){
	return null;
	} else {
	var editable = inode.ensure_editable(e);
	var earr = editable.arr;
	var len = earr.length;
	editable.bitmap = (bit ^ editable.bitmap);

	cljs.core.array_copy(earr,((2) * (i + (1))),earr,((2) * i),(len - ((2) * (i + (1)))));

	(earr[(len - (2))] = null);

	(earr[(len - (1))] = null);

	return editable;
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_seq = (function (){
	var self__ = this;
	var inode = this;
	return (cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null,self__.arr));
	});

	cljs.core.BitmapIndexedNode.prototype.kv_reduce = (function (f,init){
	var self__ = this;
	var inode = this;
	return cljs.core.inode_kv_reduce(self__.arr,f,init);
	});

	cljs.core.BitmapIndexedNode.prototype.inode_lookup = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	if(((self__.bitmap & bit) === (0))){
	return not_found;
	} else {
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	return val_or_node.inode_lookup((shift + (5)),hash,key,not_found);
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	return val_or_node;
	} else {
	return not_found;

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_assoc_BANG_ = (function (edit__$1,shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	if(((self__.bitmap & bit) === (0))){
	var n = cljs.core.bit_count(self__.bitmap);
	if((((2) * n) < self__.arr.length)){
	var editable = inode.ensure_editable(edit__$1);
	var earr = editable.arr;
	added_leaf_QMARK_.val = true;

	cljs.core.array_copy_downward(earr,((2) * idx),earr,((2) * (idx + (1))),((2) * (n - idx)));

	(earr[((2) * idx)] = key);

	(earr[(((2) * idx) + (1))] = val);

	editable.bitmap = (editable.bitmap | bit);

	return editable;
	} else {
	if((n >= (16))){
	var nodes = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
	var jdx = ((hash >>> shift) & 0x01f);
	(nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1,(shift + (5)),hash,key,val,added_leaf_QMARK_));

	var i_3706 = (0);
	var j_3707 = (0);
	while(true){
	if((i_3706 < (32))){
	if((((self__.bitmap >>> i_3706) & (1)) === (0))){
	var G__3708 = (i_3706 + (1));
	var G__3709 = j_3707;
	i_3706 = G__3708;
	j_3707 = G__3709;
	continue;
	} else {
	(nodes[i_3706] = ((!(((self__.arr[j_3707]) == null)))?cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1,(shift + (5)),cljs.core.hash((self__.arr[j_3707])),(self__.arr[j_3707]),(self__.arr[(j_3707 + (1))]),added_leaf_QMARK_):(self__.arr[(j_3707 + (1))])));

	var G__3710 = (i_3706 + (1));
	var G__3711 = (j_3707 + (2));
	i_3706 = G__3710;
	j_3707 = G__3711;
	continue;
	}
	} else {
	}
	break;
	}

	return (new cljs.core.ArrayNode(edit__$1,(n + (1)),nodes));
	} else {
	var new_arr = (new Array(((2) * (n + (4)))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),((2) * idx));

	(new_arr[((2) * idx)] = key);

	(new_arr[(((2) * idx) + (1))] = val);

	cljs.core.array_copy(self__.arr,((2) * idx),new_arr,((2) * (idx + (1))),((2) * (n - idx)));

	added_leaf_QMARK_.val = true;

	var editable = inode.ensure_editable(edit__$1);
	editable.arr = new_arr;

	editable.bitmap = (editable.bitmap | bit);

	return editable;

	}
	}
	} else {
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	var n = val_or_node.inode_assoc_BANG_(edit__$1,(shift + (5)),hash,key,val,added_leaf_QMARK_);
	if((n === val_or_node)){
	return inode;
	} else {
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,(((2) * idx) + (1)),n);
	}
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	if((val === val_or_node)){
	return inode;
	} else {
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,(((2) * idx) + (1)),val);
	}
	} else {
	added_leaf_QMARK_.val = true;

	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode,edit__$1,((2) * idx),null,(((2) * idx) + (1)),(function (){var G__3693 = edit__$1;
	var G__3694 = (shift + (5));
	var G__3695 = key_or_nil;
	var G__3696 = val_or_node;
	var G__3697 = hash;
	var G__3698 = key;
	var G__3699 = val;
	return (cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$7(G__3693,G__3694,G__3695,G__3696,G__3697,G__3698,G__3699) : cljs.core.create_node.call(null,G__3693,G__3694,G__3695,G__3696,G__3697,G__3698,G__3699));
	})());

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	if(((self__.bitmap & bit) === (0))){
	var n = cljs.core.bit_count(self__.bitmap);
	if((n >= (16))){
	var nodes = [null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null];
	var jdx = ((hash >>> shift) & 0x01f);
	(nodes[jdx] = cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + (5)),hash,key,val,added_leaf_QMARK_));

	var i_3712 = (0);
	var j_3713 = (0);
	while(true){
	if((i_3712 < (32))){
	if((((self__.bitmap >>> i_3712) & (1)) === (0))){
	var G__3714 = (i_3712 + (1));
	var G__3715 = j_3713;
	i_3712 = G__3714;
	j_3713 = G__3715;
	continue;
	} else {
	(nodes[i_3712] = ((!(((self__.arr[j_3713]) == null)))?cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + (5)),cljs.core.hash((self__.arr[j_3713])),(self__.arr[j_3713]),(self__.arr[(j_3713 + (1))]),added_leaf_QMARK_):(self__.arr[(j_3713 + (1))])));

	var G__3716 = (i_3712 + (1));
	var G__3717 = (j_3713 + (2));
	i_3712 = G__3716;
	j_3713 = G__3717;
	continue;
	}
	} else {
	}
	break;
	}

	return (new cljs.core.ArrayNode(null,(n + (1)),nodes));
	} else {
	var new_arr = (new Array(((2) * (n + (1)))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),((2) * idx));

	(new_arr[((2) * idx)] = key);

	(new_arr[(((2) * idx) + (1))] = val);

	cljs.core.array_copy(self__.arr,((2) * idx),new_arr,((2) * (idx + (1))),((2) * (n - idx)));

	added_leaf_QMARK_.val = true;

	return (new cljs.core.BitmapIndexedNode(null,(self__.bitmap | bit),new_arr));
	}
	} else {
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	var n = val_or_node.inode_assoc((shift + (5)),hash,key,val,added_leaf_QMARK_);
	if((n === val_or_node)){
	return inode;
	} else {
	return (new cljs.core.BitmapIndexedNode(null,self__.bitmap,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,(((2) * idx) + (1)),n)));
	}
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	if((val === val_or_node)){
	return inode;
	} else {
	return (new cljs.core.BitmapIndexedNode(null,self__.bitmap,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,(((2) * idx) + (1)),val)));
	}
	} else {
	added_leaf_QMARK_.val = true;

	return (new cljs.core.BitmapIndexedNode(null,self__.bitmap,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$5(self__.arr,((2) * idx),null,(((2) * idx) + (1)),(function (){var G__3700 = (shift + (5));
	var G__3701 = key_or_nil;
	var G__3702 = val_or_node;
	var G__3703 = hash;
	var G__3704 = key;
	var G__3705 = val;
	return (cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 ? cljs.core.create_node.cljs$core$IFn$_invoke$arity$6(G__3700,G__3701,G__3702,G__3703,G__3704,G__3705) : cljs.core.create_node.call(null,G__3700,G__3701,G__3702,G__3703,G__3704,G__3705));
	})())));

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_find = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	if(((self__.bitmap & bit) === (0))){
	return not_found;
	} else {
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	return val_or_node.inode_find((shift + (5)),hash,key,not_found);
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [key_or_nil,val_or_node], null);
	} else {
	return not_found;

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.inode_without = (function (shift,hash,key){
	var self__ = this;
	var inode = this;
	var bit = (1 << ((hash >>> shift) & 0x01f));
	if(((self__.bitmap & bit) === (0))){
	return inode;
	} else {
	var idx = cljs.core.bitmap_indexed_node_index(self__.bitmap,bit);
	var key_or_nil = (self__.arr[((2) * idx)]);
	var val_or_node = (self__.arr[(((2) * idx) + (1))]);
	if((key_or_nil == null)){
	var n = val_or_node.inode_without((shift + (5)),hash,key);
	if((n === val_or_node)){
	return inode;
	} else {
	if(!((n == null))){
	return (new cljs.core.BitmapIndexedNode(null,self__.bitmap,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,(((2) * idx) + (1)),n)));
	} else {
	if((self__.bitmap === bit)){
	return null;
	} else {
	return (new cljs.core.BitmapIndexedNode(null,(self__.bitmap ^ bit),cljs.core.remove_pair(self__.arr,idx)));

	}
	}
	}
	} else {
	if(cljs.core.key_test(key,key_or_nil)){
	return (new cljs.core.BitmapIndexedNode(null,(self__.bitmap ^ bit),cljs.core.remove_pair(self__.arr,idx)));
	} else {
	return inode;

	}
	}
	}
	});

	cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.BitmapIndexedNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.NodeIterator(self__.arr,(0),null,null));
	});

	cljs.core.BitmapIndexedNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$bitmap,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.BitmapIndexedNode.cljs$lang$type = true;

	cljs.core.BitmapIndexedNode.cljs$lang$ctorStr = "cljs.core/BitmapIndexedNode";

	cljs.core.BitmapIndexedNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/BitmapIndexedNode");
	});

	cljs.core.__GT_BitmapIndexedNode = (function cljs$core$__GT_BitmapIndexedNode(edit,bitmap,arr){
	return (new cljs.core.BitmapIndexedNode(edit,bitmap,arr));
	});

	cljs.core.BitmapIndexedNode.EMPTY = (new cljs.core.BitmapIndexedNode(null,(0),[]));
	cljs.core.pack_array_node = (function cljs$core$pack_array_node(array_node,edit,idx){
	var arr = array_node.arr;
	var len = arr.length;
	var new_arr = (new Array(((2) * (array_node.cnt - (1)))));
	var i = (0);
	var j = (1);
	var bitmap = (0);
	while(true){
	if((i < len)){
	if((!((i === idx))) && (!(((arr[i]) == null)))){
	(new_arr[j] = (arr[i]));

	var G__3718 = (i + (1));
	var G__3719 = (j + (2));
	var G__3720 = (bitmap | ((1) << i));
	i = G__3718;
	j = G__3719;
	bitmap = G__3720;
	continue;
	} else {
	var G__3721 = (i + (1));
	var G__3722 = j;
	var G__3723 = bitmap;
	i = G__3721;
	j = G__3722;
	bitmap = G__3723;
	continue;
	}
	} else {
	return (new cljs.core.BitmapIndexedNode(edit,bitmap,new_arr));
	}
	break;
	}
	});

	/**
	* @constructor
	*/
	cljs.core.ArrayNodeIterator = (function (arr,i,next_iter){
	this.arr = arr;
	this.i = i;
	this.next_iter = next_iter;
	})
	cljs.core.ArrayNodeIterator.prototype.hasNext = (function (){
	var self__ = this;
	var this$ = this;
	var len = self__.arr.length;
	while(true){
	if(!((!((self__.next_iter == null))) && (self__.next_iter.hasNext()))){
	if((self__.i < len)){
	var node = (self__.arr[self__.i]);
	self__.i = (self__.i + (1));

	if(!((node == null))){
	self__.next_iter = cljs.core._iterator(node);
	} else {
	}

	continue;
	} else {
	return false;
	}
	} else {
	return true;
	}
	break;
	}
	});

	cljs.core.ArrayNodeIterator.prototype.next = (function (){
	var self__ = this;
	var this$ = this;
	if(this$.hasNext()){
	return self__.next_iter.next();
	} else {
	throw (new Error("No such element"));
	}
	});

	cljs.core.ArrayNodeIterator.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.ArrayNodeIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$arr,cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$next_DASH_iter,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ArrayNodeIterator.cljs$lang$type = true;

	cljs.core.ArrayNodeIterator.cljs$lang$ctorStr = "cljs.core/ArrayNodeIterator";

	cljs.core.ArrayNodeIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayNodeIterator");
	});

	cljs.core.__GT_ArrayNodeIterator = (function cljs$core$__GT_ArrayNodeIterator(arr,i,next_iter){
	return (new cljs.core.ArrayNodeIterator(arr,i,next_iter));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IIterable}
	*/
	cljs.core.ArrayNode = (function (edit,cnt,arr){
	this.edit = edit;
	this.cnt = cnt;
	this.arr = arr;
	})
	cljs.core.ArrayNode.prototype.ensure_editable = (function (e){
	var self__ = this;
	var inode = this;
	if((e === self__.edit)){
	return inode;
	} else {
	return (new cljs.core.ArrayNode(e,self__.cnt,cljs.core.aclone(self__.arr)));
	}
	});

	cljs.core.ArrayNode.prototype.inode_without_BANG_ = (function (edit__$1,shift,hash,key,removed_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if((node == null)){
	return inode;
	} else {
	var n = node.inode_without_BANG_(edit__$1,(shift + (5)),hash,key,removed_leaf_QMARK_);
	if((n === node)){
	return inode;
	} else {
	if((n == null)){
	if((self__.cnt <= (8))){
	return cljs.core.pack_array_node(inode,edit__$1,idx);
	} else {
	var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,idx,n);
	editable.cnt = (editable.cnt - (1));

	return editable;
	}
	} else {
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,idx,n);

	}
	}
	}
	});

	cljs.core.ArrayNode.prototype.inode_seq = (function (){
	var self__ = this;
	var inode = this;
	return (cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_array_node_seq.call(null,self__.arr));
	});

	cljs.core.ArrayNode.prototype.kv_reduce = (function (f,init){
	var self__ = this;
	var inode = this;
	var len = self__.arr.length;
	var i = (0);
	var init__$1 = init;
	while(true){
	if((i < len)){
	var node = (self__.arr[i]);
	if(!((node == null))){
	var init__$2 = node.kv_reduce(f,init__$1);
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var G__3724 = (i + (1));
	var G__3725 = init__$2;
	i = G__3724;
	init__$1 = G__3725;
	continue;
	}
	} else {
	var G__3726 = (i + (1));
	var G__3727 = init__$1;
	i = G__3726;
	init__$1 = G__3727;
	continue;
	}
	} else {
	return init__$1;
	}
	break;
	}
	});

	cljs.core.ArrayNode.prototype.inode_lookup = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if(!((node == null))){
	return node.inode_lookup((shift + (5)),hash,key,not_found);
	} else {
	return not_found;
	}
	});

	cljs.core.ArrayNode.prototype.inode_assoc_BANG_ = (function (edit__$1,shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if((node == null)){
	var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,idx,cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit__$1,(shift + (5)),hash,key,val,added_leaf_QMARK_));
	editable.cnt = (editable.cnt + (1));

	return editable;
	} else {
	var n = node.inode_assoc_BANG_(edit__$1,(shift + (5)),hash,key,val,added_leaf_QMARK_);
	if((n === node)){
	return inode;
	} else {
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,idx,n);
	}
	}
	});

	cljs.core.ArrayNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if((node == null)){
	return (new cljs.core.ArrayNode(null,(self__.cnt + (1)),cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,idx,cljs.core.BitmapIndexedNode.EMPTY.inode_assoc((shift + (5)),hash,key,val,added_leaf_QMARK_))));
	} else {
	var n = node.inode_assoc((shift + (5)),hash,key,val,added_leaf_QMARK_);
	if((n === node)){
	return inode;
	} else {
	return (new cljs.core.ArrayNode(null,self__.cnt,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,idx,n)));
	}
	}
	});

	cljs.core.ArrayNode.prototype.inode_find = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if(!((node == null))){
	return node.inode_find((shift + (5)),hash,key,not_found);
	} else {
	return not_found;
	}
	});

	cljs.core.ArrayNode.prototype.inode_without = (function (shift,hash,key){
	var self__ = this;
	var inode = this;
	var idx = ((hash >>> shift) & 0x01f);
	var node = (self__.arr[idx]);
	if(!((node == null))){
	var n = node.inode_without((shift + (5)),hash,key);
	if((n === node)){
	return inode;
	} else {
	if((n == null)){
	if((self__.cnt <= (8))){
	return cljs.core.pack_array_node(inode,null,idx);
	} else {
	return (new cljs.core.ArrayNode(null,(self__.cnt - (1)),cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,idx,n)));
	}
	} else {
	return (new cljs.core.ArrayNode(null,self__.cnt,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,idx,n)));

	}
	}
	} else {
	return inode;
	}
	});

	cljs.core.ArrayNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ArrayNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.ArrayNodeIterator(self__.arr,(0),null));
	});

	cljs.core.ArrayNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ArrayNode.cljs$lang$type = true;

	cljs.core.ArrayNode.cljs$lang$ctorStr = "cljs.core/ArrayNode";

	cljs.core.ArrayNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayNode");
	});

	cljs.core.__GT_ArrayNode = (function cljs$core$__GT_ArrayNode(edit,cnt,arr){
	return (new cljs.core.ArrayNode(edit,cnt,arr));
	});

	cljs.core.hash_collision_node_find_index = (function cljs$core$hash_collision_node_find_index(arr,cnt,key){
	var lim = ((2) * cnt);
	var i = (0);
	while(true){
	if((i < lim)){
	if(cljs.core.key_test(key,(arr[i]))){
	return i;
	} else {
	var G__3728 = (i + (2));
	i = G__3728;
	continue;
	}
	} else {
	return (-1);
	}
	break;
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IIterable}
	*/
	cljs.core.HashCollisionNode = (function (edit,collision_hash,cnt,arr){
	this.edit = edit;
	this.collision_hash = collision_hash;
	this.cnt = cnt;
	this.arr = arr;
	})
	cljs.core.HashCollisionNode.prototype.ensure_editable = (function (e){
	var self__ = this;
	var inode = this;
	if((e === self__.edit)){
	return inode;
	} else {
	var new_arr = (new Array(((2) * (self__.cnt + (1)))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),((2) * self__.cnt));

	return (new cljs.core.HashCollisionNode(e,self__.collision_hash,self__.cnt,new_arr));
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_without_BANG_ = (function (edit__$1,shift,hash,key,removed_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx === (-1))){
	return inode;
	} else {
	removed_leaf_QMARK_.val = true;

	if((self__.cnt === (1))){
	return null;
	} else {
	var editable = inode.ensure_editable(edit__$1);
	var earr = editable.arr;
	(earr[idx] = (earr[(((2) * self__.cnt) - (2))]));

	(earr[(idx + (1))] = (earr[(((2) * self__.cnt) - (1))]));

	(earr[(((2) * self__.cnt) - (1))] = null);

	(earr[(((2) * self__.cnt) - (2))] = null);

	editable.cnt = (editable.cnt - (1));

	return editable;
	}
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_seq = (function (){
	var self__ = this;
	var inode = this;
	return (cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1(self__.arr) : cljs.core.create_inode_seq.call(null,self__.arr));
	});

	cljs.core.HashCollisionNode.prototype.kv_reduce = (function (f,init){
	var self__ = this;
	var inode = this;
	return cljs.core.inode_kv_reduce(self__.arr,f,init);
	});

	cljs.core.HashCollisionNode.prototype.inode_lookup = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx < (0))){
	return not_found;
	} else {
	if(cljs.core.key_test(key,(self__.arr[idx]))){
	return (self__.arr[(idx + (1))]);
	} else {
	return not_found;

	}
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_assoc_BANG_ = (function (edit__$1,shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	if((hash === self__.collision_hash)){
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx === (-1))){
	if((self__.arr.length > ((2) * self__.cnt))){
	var editable = cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$6(inode,edit__$1,((2) * self__.cnt),key,(((2) * self__.cnt) + (1)),val);
	added_leaf_QMARK_.val = true;

	editable.cnt = (editable.cnt + (1));

	return editable;
	} else {
	var len = self__.arr.length;
	var new_arr = (new Array((len + (2))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),len);

	(new_arr[len] = key);

	(new_arr[(len + (1))] = val);

	added_leaf_QMARK_.val = true;

	return inode.ensure_editable_array(edit__$1,(self__.cnt + (1)),new_arr);
	}
	} else {
	if(((self__.arr[(idx + (1))]) === val)){
	return inode;
	} else {
	return cljs.core.edit_and_set.cljs$core$IFn$_invoke$arity$4(inode,edit__$1,(idx + (1)),val);
	}
	}
	} else {
	return (new cljs.core.BitmapIndexedNode(edit__$1,(1 << ((self__.collision_hash >>> shift) & 0x01f)),[null,inode,null,null])).inode_assoc_BANG_(edit__$1,shift,hash,key,val,added_leaf_QMARK_);
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_assoc = (function (shift,hash,key,val,added_leaf_QMARK_){
	var self__ = this;
	var inode = this;
	if((hash === self__.collision_hash)){
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx === (-1))){
	var len = ((2) * self__.cnt);
	var new_arr = (new Array((len + (2))));
	cljs.core.array_copy(self__.arr,(0),new_arr,(0),len);

	(new_arr[len] = key);

	(new_arr[(len + (1))] = val);

	added_leaf_QMARK_.val = true;

	return (new cljs.core.HashCollisionNode(null,self__.collision_hash,(self__.cnt + (1)),new_arr));
	} else {
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((self__.arr[(idx + (1))]),val)){
	return inode;
	} else {
	return (new cljs.core.HashCollisionNode(null,self__.collision_hash,self__.cnt,cljs.core.clone_and_set.cljs$core$IFn$_invoke$arity$3(self__.arr,(idx + (1)),val)));
	}
	}
	} else {
	return (new cljs.core.BitmapIndexedNode(null,(1 << ((self__.collision_hash >>> shift) & 0x01f)),[null,inode])).inode_assoc(shift,hash,key,val,added_leaf_QMARK_);
	}
	});

	cljs.core.HashCollisionNode.prototype.ensure_editable_array = (function (e,count,array){
	var self__ = this;
	var inode = this;
	if((e === self__.edit)){
	self__.arr = array;

	self__.cnt = count;

	return inode;
	} else {
	return (new cljs.core.HashCollisionNode(self__.edit,self__.collision_hash,count,array));
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_find = (function (shift,hash,key,not_found){
	var self__ = this;
	var inode = this;
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx < (0))){
	return not_found;
	} else {
	if(cljs.core.key_test(key,(self__.arr[idx]))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(self__.arr[idx]),(self__.arr[(idx + (1))])], null);
	} else {
	return not_found;

	}
	}
	});

	cljs.core.HashCollisionNode.prototype.inode_without = (function (shift,hash,key){
	var self__ = this;
	var inode = this;
	var idx = cljs.core.hash_collision_node_find_index(self__.arr,self__.cnt,key);
	if((idx === (-1))){
	return inode;
	} else {
	if((self__.cnt === (1))){
	return null;
	} else {
	return (new cljs.core.HashCollisionNode(null,self__.collision_hash,(self__.cnt - (1)),cljs.core.remove_pair(self__.arr,cljs.core.quot(idx,(2)))));

	}
	}
	});

	cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.HashCollisionNode.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.NodeIterator(self__.arr,(0),null,null));
	});

	cljs.core.HashCollisionNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 4, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$edit,cljs.core.with_meta(cljs.core.cst$sym$collision_DASH_hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$cnt,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.HashCollisionNode.cljs$lang$type = true;

	cljs.core.HashCollisionNode.cljs$lang$ctorStr = "cljs.core/HashCollisionNode";

	cljs.core.HashCollisionNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/HashCollisionNode");
	});

	cljs.core.__GT_HashCollisionNode = (function cljs$core$__GT_HashCollisionNode(edit,collision_hash,cnt,arr){
	return (new cljs.core.HashCollisionNode(edit,collision_hash,cnt,arr));
	});

	cljs.core.create_node = (function cljs$core$create_node(var_args){
	var args3729 = [];
	var len__6099__auto___3732 = arguments.length;
	var i__6100__auto___3733 = (0);
	while(true){
	if((i__6100__auto___3733 < len__6099__auto___3732)){
	args3729.push((arguments[i__6100__auto___3733]));

	var G__3734 = (i__6100__auto___3733 + (1));
	i__6100__auto___3733 = G__3734;
	continue;
	} else {
	}
	break;
	}

	var G__3731 = args3729.length;
	switch (G__3731) {
	case 6:
	return cljs.core.create_node.cljs$core$IFn$_invoke$arity$6((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]));

	break;
	case 7:
	return cljs.core.create_node.cljs$core$IFn$_invoke$arity$7((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]),(arguments[(5)]),(arguments[(6)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3729.length)].join('')));

	}
	});

	cljs.core.create_node.cljs$core$IFn$_invoke$arity$6 = (function (shift,key1,val1,key2hash,key2,val2){
	var key1hash = cljs.core.hash(key1);
	if((key1hash === key2hash)){
	return (new cljs.core.HashCollisionNode(null,key1hash,(2),[key1,val1,key2,val2]));
	} else {
	var added_leaf_QMARK_ = (new cljs.core.Box(false));
	return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc(shift,key1hash,key1,val1,added_leaf_QMARK_).inode_assoc(shift,key2hash,key2,val2,added_leaf_QMARK_);
	}
	});

	cljs.core.create_node.cljs$core$IFn$_invoke$arity$7 = (function (edit,shift,key1,val1,key2hash,key2,val2){
	var key1hash = cljs.core.hash(key1);
	if((key1hash === key2hash)){
	return (new cljs.core.HashCollisionNode(null,key1hash,(2),[key1,val1,key2,val2]));
	} else {
	var added_leaf_QMARK_ = (new cljs.core.Box(false));
	return cljs.core.BitmapIndexedNode.EMPTY.inode_assoc_BANG_(edit,shift,key1hash,key1,val1,added_leaf_QMARK_).inode_assoc_BANG_(edit,shift,key2hash,key2,val2,added_leaf_QMARK_);
	}
	});

	cljs.core.create_node.cljs$lang$maxFixedArity = 7;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.NodeSeq = (function (meta,nodes,i,s,__hash){
	this.meta = meta;
	this.nodes = nodes;
	this.i = i;
	this.s = s;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32374860;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.NodeSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.NodeSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.NodeSeq.prototype.indexOf = (function() {
	var G__3742 = null;
	var G__3742__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3742__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3742 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3742__1.call(this,x);
	case 2:
	return G__3742__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3742.cljs$core$IFn$_invoke$arity$1 = G__3742__1;
	G__3742.cljs$core$IFn$_invoke$arity$2 = G__3742__2;
	return G__3742;
	})()
	;

	cljs.core.NodeSeq.prototype.lastIndexOf = (function() {
	var G__3743 = null;
	var G__3743__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3743__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3743 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3743__1.call(this,x);
	case 2:
	return G__3743__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3743.cljs$core$IFn$_invoke$arity$1 = G__3743__1;
	G__3743.cljs$core$IFn$_invoke$arity$2 = G__3743__2;
	return G__3743;
	})()
	;

	cljs.core.NodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.NodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.NodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.NodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.NodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.NodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.s == null)){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(self__.nodes[self__.i]),(self__.nodes[(self__.i + (1))])], null);
	} else {
	return cljs.core.first(self__.s);
	}
	});

	cljs.core.NodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var ret = (((self__.s == null))?(function (){var G__3736 = self__.nodes;
	var G__3737 = (self__.i + (2));
	var G__3738 = null;
	return (cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__3736,G__3737,G__3738) : cljs.core.create_inode_seq.call(null,G__3736,G__3737,G__3738));
	})():(function (){var G__3739 = self__.nodes;
	var G__3740 = self__.i;
	var G__3741 = cljs.core.next(self__.s);
	return (cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 ? cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(G__3739,G__3740,G__3741) : cljs.core.create_inode_seq.call(null,G__3739,G__3740,G__3741));
	})());
	if(!((ret == null))){
	return ret;
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.NodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1;
	});

	cljs.core.NodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.NodeSeq(meta__$1,self__.nodes,self__.i,self__.s,self__.__hash));
	});

	cljs.core.NodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.NodeSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.NodeSeq.cljs$lang$type = true;

	cljs.core.NodeSeq.cljs$lang$ctorStr = "cljs.core/NodeSeq";

	cljs.core.NodeSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/NodeSeq");
	});

	cljs.core.__GT_NodeSeq = (function cljs$core$__GT_NodeSeq(meta,nodes,i,s,__hash){
	return (new cljs.core.NodeSeq(meta,nodes,i,s,__hash));
	});

	(cljs.core.NodeSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.create_inode_seq = (function cljs$core$create_inode_seq(var_args){
	var args3744 = [];
	var len__6099__auto___3747 = arguments.length;
	var i__6100__auto___3748 = (0);
	while(true){
	if((i__6100__auto___3748 < len__6099__auto___3747)){
	args3744.push((arguments[i__6100__auto___3748]));

	var G__3749 = (i__6100__auto___3748 + (1));
	i__6100__auto___3748 = G__3749;
	continue;
	} else {
	}
	break;
	}

	var G__3746 = args3744.length;
	switch (G__3746) {
	case 1:
	return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 3:
	return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3744.length)].join('')));

	}
	});

	cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$1 = (function (nodes){
	return cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3(nodes,(0),null);
	});

	cljs.core.create_inode_seq.cljs$core$IFn$_invoke$arity$3 = (function (nodes,i,s){
	if((s == null)){
	var len = nodes.length;
	var j = i;
	while(true){
	if((j < len)){
	if(!(((nodes[j]) == null))){
	return (new cljs.core.NodeSeq(null,nodes,j,null,null));
	} else {
	var temp__6736__auto__ = (nodes[(j + (1))]);
	if(cljs.core.truth_(temp__6736__auto__)){
	var node = temp__6736__auto__;
	var temp__6736__auto____$1 = node.inode_seq();
	if(cljs.core.truth_(temp__6736__auto____$1)){
	var node_seq = temp__6736__auto____$1;
	return (new cljs.core.NodeSeq(null,nodes,(j + (2)),node_seq,null));
	} else {
	var G__3751 = (j + (2));
	j = G__3751;
	continue;
	}
	} else {
	var G__3752 = (j + (2));
	j = G__3752;
	continue;
	}
	}
	} else {
	return null;
	}
	break;
	}
	} else {
	return (new cljs.core.NodeSeq(null,nodes,i,s,null));
	}
	});

	cljs.core.create_inode_seq.cljs$lang$maxFixedArity = 3;


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.ArrayNodeSeq = (function (meta,nodes,i,s,__hash){
	this.meta = meta;
	this.nodes = nodes;
	this.i = i;
	this.s = s;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32374860;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.ArrayNodeSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.ArrayNodeSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.ArrayNodeSeq.prototype.indexOf = (function() {
	var G__3757 = null;
	var G__3757__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3757__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3757 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3757__1.call(this,x);
	case 2:
	return G__3757__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3757.cljs$core$IFn$_invoke$arity$1 = G__3757__1;
	G__3757.cljs$core$IFn$_invoke$arity$2 = G__3757__2;
	return G__3757;
	})()
	;

	cljs.core.ArrayNodeSeq.prototype.lastIndexOf = (function() {
	var G__3758 = null;
	var G__3758__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3758__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3758 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3758__1.call(this,x);
	case 2:
	return G__3758__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3758.cljs$core$IFn$_invoke$arity$1 = G__3758__1;
	G__3758.cljs$core$IFn$_invoke$arity$2 = G__3758__2;
	return G__3758;
	})()
	;

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.first(self__.s);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var ret = (function (){var G__3753 = null;
	var G__3754 = self__.nodes;
	var G__3755 = self__.i;
	var G__3756 = cljs.core.next(self__.s);
	return (cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 ? cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(G__3753,G__3754,G__3755,G__3756) : cljs.core.create_array_node_seq.call(null,G__3753,G__3754,G__3755,G__3756));
	})();
	if(!((ret == null))){
	return ret;
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1;
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.ArrayNodeSeq(meta__$1,self__.nodes,self__.i,self__.s,self__.__hash));
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.ArrayNodeSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$nodes,cljs.core.cst$sym$i,cljs.core.cst$sym$s,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ArrayNodeSeq.cljs$lang$type = true;

	cljs.core.ArrayNodeSeq.cljs$lang$ctorStr = "cljs.core/ArrayNodeSeq";

	cljs.core.ArrayNodeSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayNodeSeq");
	});

	cljs.core.__GT_ArrayNodeSeq = (function cljs$core$__GT_ArrayNodeSeq(meta,nodes,i,s,__hash){
	return (new cljs.core.ArrayNodeSeq(meta,nodes,i,s,__hash));
	});

	(cljs.core.ArrayNodeSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.create_array_node_seq = (function cljs$core$create_array_node_seq(var_args){
	var args3759 = [];
	var len__6099__auto___3762 = arguments.length;
	var i__6100__auto___3763 = (0);
	while(true){
	if((i__6100__auto___3763 < len__6099__auto___3762)){
	args3759.push((arguments[i__6100__auto___3763]));

	var G__3764 = (i__6100__auto___3763 + (1));
	i__6100__auto___3763 = G__3764;
	continue;
	} else {
	}
	break;
	}

	var G__3761 = args3759.length;
	switch (G__3761) {
	case 1:
	return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 4:
	return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args3759.length)].join('')));

	}
	});

	cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$1 = (function (nodes){
	return cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4(null,nodes,(0),null);
	});

	cljs.core.create_array_node_seq.cljs$core$IFn$_invoke$arity$4 = (function (meta,nodes,i,s){
	if((s == null)){
	var len = nodes.length;
	var j = i;
	while(true){
	if((j < len)){
	var temp__6736__auto__ = (nodes[j]);
	if(cljs.core.truth_(temp__6736__auto__)){
	var nj = temp__6736__auto__;
	var temp__6736__auto____$1 = nj.inode_seq();
	if(cljs.core.truth_(temp__6736__auto____$1)){
	var ns = temp__6736__auto____$1;
	return (new cljs.core.ArrayNodeSeq(meta,nodes,(j + (1)),ns,null));
	} else {
	var G__3766 = (j + (1));
	j = G__3766;
	continue;
	}
	} else {
	var G__3767 = (j + (1));
	j = G__3767;
	continue;
	}
	} else {
	return null;
	}
	break;
	}
	} else {
	return (new cljs.core.ArrayNodeSeq(meta,nodes,i,s,null));
	}
	});

	cljs.core.create_array_node_seq.cljs$lang$maxFixedArity = 4;


	/**
	* @constructor
	*/
	cljs.core.HashMapIter = (function (nil_val,root_iter,seen){
	this.nil_val = nil_val;
	this.root_iter = root_iter;
	this.seen = seen;
	})
	cljs.core.HashMapIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return (!(self__.seen)) || (self__.root_iter.hasNext());
	});

	cljs.core.HashMapIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(!(self__.seen)){
	self__.seen = true;

	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,self__.nil_val], null);
	} else {
	return self__.root_iter.next();
	}
	});

	cljs.core.HashMapIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.HashMapIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$nil_DASH_val,cljs.core.cst$sym$root_DASH_iter,cljs.core.with_meta(cljs.core.cst$sym$seen,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.HashMapIter.cljs$lang$type = true;

	cljs.core.HashMapIter.cljs$lang$ctorStr = "cljs.core/HashMapIter";

	cljs.core.HashMapIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/HashMapIter");
	});

	cljs.core.__GT_HashMapIter = (function cljs$core$__GT_HashMapIter(nil_val,root_iter,seen){
	return (new cljs.core.HashMapIter(nil_val,root_iter,seen));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEditableCollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.IMap}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.PersistentHashMap = (function (meta,cnt,root,has_nil_QMARK_,nil_val,__hash){
	this.meta = meta;
	this.cnt = cnt;
	this.root = root;
	this.has_nil_QMARK_ = has_nil_QMARK_;
	this.nil_val = nil_val;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 16123663;
	this.cljs$lang$protocol_mask$partition1$ = 8196;
	})
	cljs.core.PersistentHashMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentHashMap.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if(self__.has_nil_QMARK_){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,self__.nil_val], null);
	} else {
	return self__.root.inode_find((0),cljs.core.hash(k),k,null);
	}
	});

	cljs.core.PersistentHashMap.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentHashMap.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentHashMap.prototype.keys = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null,coll)));
	});

	cljs.core.PersistentHashMap.prototype.entries = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentHashMap.prototype.values = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null,coll)));
	});

	cljs.core.PersistentHashMap.prototype.has = (function (k){
	var self__ = this;
	var coll = this;
	return cljs.core.contains_QMARK_(coll,k);
	});

	cljs.core.PersistentHashMap.prototype.get = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentHashMap.prototype.forEach = (function (f){
	var self__ = this;
	var coll = this;
	var seq__3769 = cljs.core.seq(coll);
	var chunk__3770 = null;
	var count__3771 = (0);
	var i__3772 = (0);
	while(true){
	if((i__3772 < count__3771)){
	var vec__3773 = chunk__3770.cljs$core$IIndexed$_nth$arity$2(null,i__3772);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3773,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3773,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3781 = seq__3769;
	var G__3782 = chunk__3770;
	var G__3783 = count__3771;
	var G__3784 = (i__3772 + (1));
	seq__3769 = G__3781;
	chunk__3770 = G__3782;
	count__3771 = G__3783;
	i__3772 = G__3784;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__3769);
	if(temp__6738__auto__){
	var seq__3769__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__3769__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__3769__$1);
	var G__3785 = cljs.core.chunk_rest(seq__3769__$1);
	var G__3786 = c__5929__auto__;
	var G__3787 = cljs.core.count(c__5929__auto__);
	var G__3788 = (0);
	seq__3769 = G__3785;
	chunk__3770 = G__3786;
	count__3771 = G__3787;
	i__3772 = G__3788;
	continue;
	} else {
	var vec__3776 = cljs.core.first(seq__3769__$1);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3776,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3776,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3789 = cljs.core.next(seq__3769__$1);
	var G__3790 = null;
	var G__3791 = (0);
	var G__3792 = (0);
	seq__3769 = G__3789;
	chunk__3770 = G__3790;
	count__3771 = G__3791;
	i__3772 = G__3792;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	if((k == null)){
	if(self__.has_nil_QMARK_){
	return self__.nil_val;
	} else {
	return not_found;
	}
	} else {
	if((self__.root == null)){
	return not_found;
	} else {
	return self__.root.inode_lookup((0),cljs.core.hash(k),k,not_found);

	}
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
	var self__ = this;
	var coll__$1 = this;
	var init__$1 = ((self__.has_nil_QMARK_)?(f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(init,null,self__.nil_val) : f.call(null,init,null,self__.nil_val)):init);
	if(cljs.core.reduced_QMARK_(init__$1)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null,init__$1));
	} else {
	if(!((self__.root == null))){
	return self__.root.kv_reduce(f,init__$1);
	} else {
	return init__$1;

	}
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentHashMap.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var root_iter = ((self__.root)?cljs.core._iterator(self__.root):cljs.core.nil_iter());
	if(self__.has_nil_QMARK_){
	return (new cljs.core.HashMapIter(self__.nil_val,root_iter,false));
	} else {
	return root_iter;
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentHashMap(self__.meta,self__.cnt,self__.root,self__.has_nil_QMARK_,self__.nil_val,self__.__hash));
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.cnt;
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_map(coll__$1,other);
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.TransientHashMap({},self__.root,self__.cnt,self__.has_nil_QMARK_,self__.nil_val));
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._with_meta(cljs.core.PersistentHashMap.EMPTY,self__.meta);
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if((k == null)){
	if(self__.has_nil_QMARK_){
	return (new cljs.core.PersistentHashMap(self__.meta,(self__.cnt - (1)),self__.root,false,null,null));
	} else {
	return coll__$1;
	}
	} else {
	if((self__.root == null)){
	return coll__$1;
	} else {
	var new_root = self__.root.inode_without((0),cljs.core.hash(k),k);
	if((new_root === self__.root)){
	return coll__$1;
	} else {
	return (new cljs.core.PersistentHashMap(self__.meta,(self__.cnt - (1)),new_root,self__.has_nil_QMARK_,self__.nil_val,null));
	}

	}
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
	var self__ = this;
	var coll__$1 = this;
	if((k == null)){
	if((self__.has_nil_QMARK_) && ((v === self__.nil_val))){
	return coll__$1;
	} else {
	return (new cljs.core.PersistentHashMap(self__.meta,((self__.has_nil_QMARK_)?self__.cnt:(self__.cnt + (1))),self__.root,true,v,null));
	}
	} else {
	var added_leaf_QMARK_ = (new cljs.core.Box(false));
	var new_root = (((self__.root == null))?cljs.core.BitmapIndexedNode.EMPTY:self__.root).inode_assoc((0),cljs.core.hash(k),k,v,added_leaf_QMARK_);
	if((new_root === self__.root)){
	return coll__$1;
	} else {
	return (new cljs.core.PersistentHashMap(self__.meta,((added_leaf_QMARK_.val)?(self__.cnt + (1)):self__.cnt),new_root,self__.has_nil_QMARK_,self__.nil_val,null));
	}
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	if((k == null)){
	return self__.has_nil_QMARK_;
	} else {
	if((self__.root == null)){
	return false;
	} else {
	return !((self__.root.inode_lookup((0),cljs.core.hash(k),k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel));

	}
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	var s = ((!((self__.root == null)))?self__.root.inode_seq():null);
	if(self__.has_nil_QMARK_){
	return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [null,self__.nil_val], null),s);
	} else {
	return s;
	}
	} else {
	return null;
	}
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentHashMap(meta__$1,self__.cnt,self__.root,self__.has_nil_QMARK_,self__.nil_val,self__.__hash));
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.vector_QMARK_(entry)){
	return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(1)));
	} else {
	var ret = coll__$1;
	var es = cljs.core.seq(entry);
	while(true){
	if((es == null)){
	return ret;
	} else {
	var e = cljs.core.first(es);
	if(cljs.core.vector_QMARK_(e)){
	var G__3793 = ret.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(1)));
	var G__3794 = cljs.core.next(es);
	ret = G__3793;
	es = G__3794;
	continue;
	} else {
	throw (new Error("conj on a map takes map entries or seqables of map entries"));
	}
	}
	break;
	}
	}
	});

	cljs.core.PersistentHashMap.prototype.call = (function() {
	var G__3795 = null;
	var G__3795__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__3795__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__3795 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3795__2.call(this,self__,k);
	case 3:
	return G__3795__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3795.cljs$core$IFn$_invoke$arity$2 = G__3795__2;
	G__3795.cljs$core$IFn$_invoke$arity$3 = G__3795__3;
	return G__3795;
	})()
	;

	cljs.core.PersistentHashMap.prototype.apply = (function (self__,args3768){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3768)));
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentHashMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 6, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$cnt,cljs.core.cst$sym$root,cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$nil_DASH_val,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentHashMap.cljs$lang$type = true;

	cljs.core.PersistentHashMap.cljs$lang$ctorStr = "cljs.core/PersistentHashMap";

	cljs.core.PersistentHashMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentHashMap");
	});

	cljs.core.__GT_PersistentHashMap = (function cljs$core$__GT_PersistentHashMap(meta,cnt,root,has_nil_QMARK_,nil_val,__hash){
	return (new cljs.core.PersistentHashMap(meta,cnt,root,has_nil_QMARK_,nil_val,__hash));
	});

	cljs.core.PersistentHashMap.EMPTY = (new cljs.core.PersistentHashMap(null,(0),null,false,null,cljs.core.empty_unordered_hash));
	cljs.core.PersistentHashMap.fromArray = (function (arr,no_clone){
	var arr__$1 = ((no_clone)?arr:cljs.core.aclone(arr));
	var len = arr__$1.length;
	var i = (0);
	var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	while(true){
	if((i < len)){
	var G__3796 = (i + (2));
	var G__3797 = cljs.core._assoc_BANG_(ret,(arr__$1[i]),(arr__$1[(i + (1))]));
	i = G__3796;
	ret = G__3797;
	continue;
	} else {
	return cljs.core._persistent_BANG_(ret);
	}
	break;
	}
	});
	cljs.core.PersistentHashMap.fromArrays = (function (ks,vs){
	var len = ks.length;
	var i = (0);
	var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	while(true){
	if((i < len)){
	var G__3798 = (i + (1));
	var G__3799 = out.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3(null,(ks[i]),(vs[i]));
	i = G__3798;
	out = G__3799;
	continue;
	} else {
	return cljs.core.persistent_BANG_(out);
	}
	break;
	}
	});
	cljs.core.PersistentHashMap.createWithCheck = (function (arr){
	var len = arr.length;
	var ret = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	var i_3800 = (0);
	while(true){
	if((i_3800 < len)){
	cljs.core._assoc_BANG_(ret,(arr[i_3800]),(arr[(i_3800 + (1))]));

	if(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core._count(ret),((i_3800 / (2)) + (1)))){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1((arr[i_3800]))].join('')));
	} else {
	var G__3801 = (i_3800 + (2));
	i_3800 = G__3801;
	continue;
	}
	} else {
	}
	break;
	}

	return cljs.core._persistent_BANG_(ret);
	});
	(cljs.core.PersistentHashMap.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.ITransientMap}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ITransientCollection}
	 * @implements {cljs.core.ITransientAssociative}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.TransientHashMap = (function (edit,root,count,has_nil_QMARK_,nil_val){
	this.edit = edit;
	this.root = root;
	this.count = count;
	this.has_nil_QMARK_ = has_nil_QMARK_;
	this.nil_val = nil_val;
	this.cljs$lang$protocol_mask$partition0$ = 258;
	this.cljs$lang$protocol_mask$partition1$ = 56;
	})
	cljs.core.TransientHashMap.prototype.conj_BANG_ = (function (o){
	var self__ = this;
	var tcoll = this;
	if(self__.edit){
	if(((!((o == null)))?((((o.cljs$lang$protocol_mask$partition0$ & (2048))) || ((cljs.core.PROTOCOL_SENTINEL === o.cljs$core$IMapEntry$)))?true:(((!o.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry,o):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IMapEntry,o))){
	return tcoll.assoc_BANG_((cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.key.call(null,o)),(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(o) : cljs.core.val.call(null,o)));
	} else {
	var es = cljs.core.seq(o);
	var tcoll__$1 = tcoll;
	while(true){
	var temp__6736__auto__ = cljs.core.first(es);
	if(cljs.core.truth_(temp__6736__auto__)){
	var e = temp__6736__auto__;
	var G__3803 = cljs.core.next(es);
	var G__3804 = tcoll__$1.assoc_BANG_((cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.key.call(null,e)),(cljs.core.val.cljs$core$IFn$_invoke$arity$1 ? cljs.core.val.cljs$core$IFn$_invoke$arity$1(e) : cljs.core.val.call(null,e)));
	es = G__3803;
	tcoll__$1 = G__3804;
	continue;
	} else {
	return tcoll__$1;
	}
	break;
	}
	}
	} else {
	throw (new Error("conj! after persistent"));
	}
	});

	cljs.core.TransientHashMap.prototype.assoc_BANG_ = (function (k,v){
	var self__ = this;
	var tcoll = this;
	if(self__.edit){
	if((k == null)){
	if((self__.nil_val === v)){
	} else {
	self__.nil_val = v;
	}

	if(self__.has_nil_QMARK_){
	} else {
	self__.count = (self__.count + (1));

	self__.has_nil_QMARK_ = true;
	}

	return tcoll;
	} else {
	var added_leaf_QMARK_ = (new cljs.core.Box(false));
	var node = (((self__.root == null))?cljs.core.BitmapIndexedNode.EMPTY:self__.root).inode_assoc_BANG_(self__.edit,(0),cljs.core.hash(k),k,v,added_leaf_QMARK_);
	if((node === self__.root)){
	} else {
	self__.root = node;
	}

	if(added_leaf_QMARK_.val){
	self__.count = (self__.count + (1));
	} else {
	}

	return tcoll;
	}
	} else {
	throw (new Error("assoc! after persistent!"));
	}
	});

	cljs.core.TransientHashMap.prototype.without_BANG_ = (function (k){
	var self__ = this;
	var tcoll = this;
	if(self__.edit){
	if((k == null)){
	if(self__.has_nil_QMARK_){
	self__.has_nil_QMARK_ = false;

	self__.nil_val = null;

	self__.count = (self__.count - (1));

	return tcoll;
	} else {
	return tcoll;
	}
	} else {
	if((self__.root == null)){
	return tcoll;
	} else {
	var removed_leaf_QMARK_ = (new cljs.core.Box(false));
	var node = self__.root.inode_without_BANG_(self__.edit,(0),cljs.core.hash(k),k,removed_leaf_QMARK_);
	if((node === self__.root)){
	} else {
	self__.root = node;
	}

	if(removed_leaf_QMARK_.val){
	self__.count = (self__.count - (1));
	} else {
	}

	return tcoll;
	}
	}
	} else {
	throw (new Error("dissoc! after persistent!"));
	}
	});

	cljs.core.TransientHashMap.prototype.persistent_BANG_ = (function (){
	var self__ = this;
	var tcoll = this;
	if(self__.edit){
	self__.edit = null;

	return (new cljs.core.PersistentHashMap(null,self__.count,self__.root,self__.has_nil_QMARK_,self__.nil_val,null));
	} else {
	throw (new Error("persistent! called twice"));
	}
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if(self__.edit){
	return self__.count;
	} else {
	throw (new Error("count after persistent!"));
	}
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,k){
	var self__ = this;
	var tcoll__$1 = this;
	if((k == null)){
	if(self__.has_nil_QMARK_){
	return self__.nil_val;
	} else {
	return null;
	}
	} else {
	if((self__.root == null)){
	return null;
	} else {
	return self__.root.inode_lookup((0),cljs.core.hash(k),k);
	}
	}
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,k,not_found){
	var self__ = this;
	var tcoll__$1 = this;
	if((k == null)){
	if(self__.has_nil_QMARK_){
	return self__.nil_val;
	} else {
	return not_found;
	}
	} else {
	if((self__.root == null)){
	return not_found;
	} else {
	return self__.root.inode_lookup((0),cljs.core.hash(k),k,not_found);
	}
	}
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,val){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.conj_BANG_(val);
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.persistent_BANG_();
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ITransientAssociative$_assoc_BANG_$arity$3 = (function (tcoll,key,val){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.assoc_BANG_(key,val);
	});

	cljs.core.TransientHashMap.prototype.cljs$core$ITransientMap$_dissoc_BANG_$arity$2 = (function (tcoll,key){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.without_BANG_(key);
	});

	cljs.core.TransientHashMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$edit,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$root,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$count,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$has_DASH_nil_QMARK_,new cljs.core.PersistentArrayMap(null, 2, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean,cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$nil_DASH_val,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.TransientHashMap.cljs$lang$type = true;

	cljs.core.TransientHashMap.cljs$lang$ctorStr = "cljs.core/TransientHashMap";

	cljs.core.TransientHashMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/TransientHashMap");
	});

	cljs.core.__GT_TransientHashMap = (function cljs$core$__GT_TransientHashMap(edit,root,count,has_nil_QMARK_,nil_val){
	return (new cljs.core.TransientHashMap(edit,root,count,has_nil_QMARK_,nil_val));
	});

	cljs.core.tree_map_seq_push = (function cljs$core$tree_map_seq_push(node,stack,ascending_QMARK_){
	var t = node;
	var stack__$1 = stack;
	while(true){
	if(!((t == null))){
	var G__3805 = ((ascending_QMARK_)?t.left:t.right);
	var G__3806 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack__$1,t);
	t = G__3805;
	stack__$1 = G__3806;
	continue;
	} else {
	return stack__$1;
	}
	break;
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.PersistentTreeMapSeq = (function (meta,stack,ascending_QMARK_,cnt,__hash){
	this.meta = meta;
	this.stack = stack;
	this.ascending_QMARK_ = ascending_QMARK_;
	this.cnt = cnt;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32374862;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.PersistentTreeMapSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentTreeMapSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentTreeMapSeq.prototype.indexOf = (function() {
	var G__3807 = null;
	var G__3807__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3807__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3807 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3807__1.call(this,x);
	case 2:
	return G__3807__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3807.cljs$core$IFn$_invoke$arity$1 = G__3807__1;
	G__3807.cljs$core$IFn$_invoke$arity$2 = G__3807__2;
	return G__3807;
	})()
	;

	cljs.core.PersistentTreeMapSeq.prototype.lastIndexOf = (function() {
	var G__3808 = null;
	var G__3808__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3808__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3808 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3808__1.call(this,x);
	case 2:
	return G__3808__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3808.cljs$core$IFn$_invoke$arity$1 = G__3808__1;
	G__3808.cljs$core$IFn$_invoke$arity$2 = G__3808__2;
	return G__3808;
	})()
	;

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt < (0))){
	return (cljs.core.count(cljs.core.next(coll__$1)) + (1));
	} else {
	return self__.cnt;
	}
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core.peek(self__.stack);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	var t = cljs.core.first(self__.stack);
	var next_stack = cljs.core.tree_map_seq_push(((self__.ascending_QMARK_)?t.right:t.left),cljs.core.next(self__.stack),self__.ascending_QMARK_);
	if(!((next_stack == null))){
	return (new cljs.core.PersistentTreeMapSeq(null,next_stack,self__.ascending_QMARK_,(self__.cnt - (1)),null));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1;
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeMapSeq(meta__$1,self__.stack,self__.ascending_QMARK_,self__.cnt,self__.__hash));
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.PersistentTreeMapSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$stack,cljs.core.with_meta(cljs.core.cst$sym$ascending_QMARK_,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$boolean], null)),cljs.core.cst$sym$cnt,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentTreeMapSeq.cljs$lang$type = true;

	cljs.core.PersistentTreeMapSeq.cljs$lang$ctorStr = "cljs.core/PersistentTreeMapSeq";

	cljs.core.PersistentTreeMapSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentTreeMapSeq");
	});

	cljs.core.__GT_PersistentTreeMapSeq = (function cljs$core$__GT_PersistentTreeMapSeq(meta,stack,ascending_QMARK_,cnt,__hash){
	return (new cljs.core.PersistentTreeMapSeq(meta,stack,ascending_QMARK_,cnt,__hash));
	});

	(cljs.core.PersistentTreeMapSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.create_tree_map_seq = (function cljs$core$create_tree_map_seq(tree,ascending_QMARK_,cnt){
	return (new cljs.core.PersistentTreeMapSeq(null,cljs.core.tree_map_seq_push(tree,null,ascending_QMARK_),ascending_QMARK_,cnt,null));
	});

	cljs.core.balance_left = (function cljs$core$balance_left(key,val,ins,right){
	if((ins instanceof cljs.core.RedNode)){
	if((ins.left instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(ins.key,ins.val,ins.left.blacken(),(new cljs.core.BlackNode(key,val,ins.right,right,null)),null));
	} else {
	if((ins.right instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(ins.right.key,ins.right.val,(new cljs.core.BlackNode(ins.key,ins.val,ins.left,ins.right.left,null)),(new cljs.core.BlackNode(key,val,ins.right.right,right,null)),null));
	} else {
	return (new cljs.core.BlackNode(key,val,ins,right,null));

	}
	}
	} else {
	return (new cljs.core.BlackNode(key,val,ins,right,null));
	}
	});
	cljs.core.balance_right = (function cljs$core$balance_right(key,val,left,ins){
	if((ins instanceof cljs.core.RedNode)){
	if((ins.right instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(ins.key,ins.val,(new cljs.core.BlackNode(key,val,left,ins.left,null)),ins.right.blacken(),null));
	} else {
	if((ins.left instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(ins.left.key,ins.left.val,(new cljs.core.BlackNode(key,val,left,ins.left.left,null)),(new cljs.core.BlackNode(ins.key,ins.val,ins.left.right,ins.right,null)),null));
	} else {
	return (new cljs.core.BlackNode(key,val,left,ins,null));

	}
	}
	} else {
	return (new cljs.core.BlackNode(key,val,left,ins,null));
	}
	});
	cljs.core.balance_left_del = (function cljs$core$balance_left_del(key,val,del,right){
	if((del instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(key,val,del.blacken(),right,null));
	} else {
	if((right instanceof cljs.core.BlackNode)){
	return cljs.core.balance_right(key,val,del,right.redden());
	} else {
	if(((right instanceof cljs.core.RedNode)) && ((right.left instanceof cljs.core.BlackNode))){
	return (new cljs.core.RedNode(right.left.key,right.left.val,(new cljs.core.BlackNode(key,val,del,right.left.left,null)),cljs.core.balance_right(right.key,right.val,right.left.right,right.right.redden()),null));
	} else {
	throw (new Error("red-black tree invariant violation"));

	}
	}
	}
	});
	cljs.core.balance_right_del = (function cljs$core$balance_right_del(key,val,left,del){
	if((del instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(key,val,left,del.blacken(),null));
	} else {
	if((left instanceof cljs.core.BlackNode)){
	return cljs.core.balance_left(key,val,left.redden(),del);
	} else {
	if(((left instanceof cljs.core.RedNode)) && ((left.right instanceof cljs.core.BlackNode))){
	return (new cljs.core.RedNode(left.right.key,left.right.val,cljs.core.balance_left(left.key,left.val,left.left.redden(),left.right.left),(new cljs.core.BlackNode(key,val,left.right.right,del,null)),null));
	} else {
	throw (new Error("red-black tree invariant violation"));

	}
	}
	}
	});
	cljs.core.tree_map_kv_reduce = (function cljs$core$tree_map_kv_reduce(node,f,init){
	var init__$1 = ((!((node.left == null)))?(function (){var G__3818 = node.left;
	var G__3819 = f;
	var G__3820 = init;
	return (cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__3818,G__3819,G__3820) : cljs.core.tree_map_kv_reduce.call(null,G__3818,G__3819,G__3820));
	})():init);
	if(cljs.core.reduced_QMARK_(init__$1)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$1) : cljs.core.deref.call(null,init__$1));
	} else {
	var init__$2 = (function (){var G__3821 = init__$1;
	var G__3822 = node.key;
	var G__3823 = node.val;
	return (f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(G__3821,G__3822,G__3823) : f.call(null,G__3821,G__3822,G__3823));
	})();
	if(cljs.core.reduced_QMARK_(init__$2)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$2) : cljs.core.deref.call(null,init__$2));
	} else {
	var init__$3 = ((!((node.right == null)))?(function (){var G__3824 = node.right;
	var G__3825 = f;
	var G__3826 = init__$2;
	return (cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3 ? cljs.core.tree_map_kv_reduce.cljs$core$IFn$_invoke$arity$3(G__3824,G__3825,G__3826) : cljs.core.tree_map_kv_reduce.call(null,G__3824,G__3825,G__3826));
	})():init__$2);
	if(cljs.core.reduced_QMARK_(init__$3)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init__$3) : cljs.core.deref.call(null,init__$3));
	} else {
	return init__$3;
	}
	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IVector}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IMapEntry}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.BlackNode = (function (key,val,left,right,__hash){
	this.key = key;
	this.val = val;
	this.left = left;
	this.right = right;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32402207;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.BlackNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.BlackNode.prototype.cljs$core$IFind$_find$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	if((k === (0))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),self__.key], null);
	} else {
	if((k === (1))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),self__.val], null);
	} else {
	return null;

	}
	}
	});

	cljs.core.BlackNode.prototype.lastIndexOf = (function() {
	var G__3828 = null;
	var G__3828__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3828__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3828 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3828__1.call(this,x);
	case 2:
	return G__3828__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3828.cljs$core$IFn$_invoke$arity$1 = G__3828__1;
	G__3828.cljs$core$IFn$_invoke$arity$2 = G__3828__2;
	return G__3828;
	})()
	;

	cljs.core.BlackNode.prototype.indexOf = (function() {
	var G__3829 = null;
	var G__3829__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3829__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3829 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3829__1.call(this,x);
	case 2:
	return G__3829__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3829.cljs$core$IFn$_invoke$arity$1 = G__3829__1;
	G__3829.cljs$core$IFn$_invoke$arity$2 = G__3829__2;
	return G__3829;
	})()
	;

	cljs.core.BlackNode.prototype.add_right = (function (ins){
	var self__ = this;
	var node = this;
	return ins.balance_right(node);
	});

	cljs.core.BlackNode.prototype.redden = (function (){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(self__.key,self__.val,self__.left,self__.right,null));
	});

	cljs.core.BlackNode.prototype.blacken = (function (){
	var self__ = this;
	var node = this;
	return node;
	});

	cljs.core.BlackNode.prototype.add_left = (function (ins){
	var self__ = this;
	var node = this;
	return ins.balance_left(node);
	});

	cljs.core.BlackNode.prototype.replace = (function (key__$1,val__$1,left__$1,right__$1){
	var self__ = this;
	var node = this;
	return (new cljs.core.BlackNode(key__$1,val__$1,left__$1,right__$1,null));
	});

	cljs.core.BlackNode.prototype.balance_left = (function (parent){
	var self__ = this;
	var node = this;
	return (new cljs.core.BlackNode(parent.key,parent.val,node,parent.right,null));
	});

	cljs.core.BlackNode.prototype.balance_right = (function (parent){
	var self__ = this;
	var node = this;
	return (new cljs.core.BlackNode(parent.key,parent.val,parent.left,node,null));
	});

	cljs.core.BlackNode.prototype.remove_left = (function (del){
	var self__ = this;
	var node = this;
	return cljs.core.balance_left_del(self__.key,self__.val,del,self__.right);
	});

	cljs.core.BlackNode.prototype.kv_reduce = (function (f,init){
	var self__ = this;
	var node = this;
	return cljs.core.tree_map_kv_reduce(node,f,init);
	});

	cljs.core.BlackNode.prototype.remove_right = (function (del){
	var self__ = this;
	var node = this;
	return cljs.core.balance_right_del(self__.key,self__.val,self__.left,del);
	});

	cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,null);
	});

	cljs.core.BlackNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (node,k,not_found){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (node,n){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	throw (new Error("Index out of bounds"));

	}
	}
	});

	cljs.core.BlackNode.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (node,n,not_found){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	return not_found;

	}
	}
	});

	cljs.core.BlackNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (node,n,v){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null).cljs$core$IVector$_assoc_n$arity$3(null,n,v);
	});

	cljs.core.BlackNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return null;
	});

	cljs.core.BlackNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return (2);
	});

	cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.key;
	});

	cljs.core.BlackNode.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.BlackNode.prototype.cljs$core$IStack$_peek$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.BlackNode.prototype.cljs$core$IStack$_pop$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
	});

	cljs.core.BlackNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.BlackNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.BlackNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (node,f){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1,f);
	});

	cljs.core.BlackNode.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (node,f,start){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1,f,start);
	});

	cljs.core.BlackNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (node,k,v){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),k,v);
	});

	cljs.core.BlackNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return ((k === (0))) || ((k === (1)));
	});

	cljs.core.BlackNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	var x__5940__auto__ = self__.key;
	return cljs.core._conj((function (){var x__5940__auto____$1 = self__.val;
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto____$1);
	})(),x__5940__auto__);
	});

	cljs.core.BlackNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (node,meta){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),meta);
	});

	cljs.core.BlackNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (node,o){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val,o], null);
	});

	cljs.core.BlackNode.prototype.call = (function() {
	var G__3830 = null;
	var G__3830__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});
	var G__3830__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});
	G__3830 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3830__2.call(this,self__,k);
	case 3:
	return G__3830__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3830.cljs$core$IFn$_invoke$arity$2 = G__3830__2;
	G__3830.cljs$core$IFn$_invoke$arity$3 = G__3830__3;
	return G__3830;
	})()
	;

	cljs.core.BlackNode.prototype.apply = (function (self__,args3827){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3827)));
	});

	cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});

	cljs.core.BlackNode.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.BlackNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.BlackNode.cljs$lang$type = true;

	cljs.core.BlackNode.cljs$lang$ctorStr = "cljs.core/BlackNode";

	cljs.core.BlackNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/BlackNode");
	});

	cljs.core.__GT_BlackNode = (function cljs$core$__GT_BlackNode(key,val,left,right,__hash){
	return (new cljs.core.BlackNode(key,val,left,right,__hash));
	});

	(cljs.core.BlackNode.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IVector}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.IStack}
	 * @implements {cljs.core.IMapEntry}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.ILookup}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.RedNode = (function (key,val,left,right,__hash){
	this.key = key;
	this.val = val;
	this.left = left;
	this.right = right;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32402207;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.RedNode.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.RedNode.prototype.cljs$core$IFind$_find$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	if((k === (0))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(0),self__.key], null);
	} else {
	if((k === (1))){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(1),self__.val], null);
	} else {
	return null;

	}
	}
	});

	cljs.core.RedNode.prototype.lastIndexOf = (function() {
	var G__3832 = null;
	var G__3832__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3832__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3832 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3832__1.call(this,x);
	case 2:
	return G__3832__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3832.cljs$core$IFn$_invoke$arity$1 = G__3832__1;
	G__3832.cljs$core$IFn$_invoke$arity$2 = G__3832__2;
	return G__3832;
	})()
	;

	cljs.core.RedNode.prototype.indexOf = (function() {
	var G__3833 = null;
	var G__3833__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3833__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3833 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3833__1.call(this,x);
	case 2:
	return G__3833__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3833.cljs$core$IFn$_invoke$arity$1 = G__3833__1;
	G__3833.cljs$core$IFn$_invoke$arity$2 = G__3833__2;
	return G__3833;
	})()
	;

	cljs.core.RedNode.prototype.add_right = (function (ins){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(self__.key,self__.val,self__.left,ins,null));
	});

	cljs.core.RedNode.prototype.redden = (function (){
	var self__ = this;
	var node = this;
	throw (new Error("red-black tree invariant violation"));
	});

	cljs.core.RedNode.prototype.blacken = (function (){
	var self__ = this;
	var node = this;
	return (new cljs.core.BlackNode(self__.key,self__.val,self__.left,self__.right,null));
	});

	cljs.core.RedNode.prototype.add_left = (function (ins){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(self__.key,self__.val,ins,self__.right,null));
	});

	cljs.core.RedNode.prototype.replace = (function (key__$1,val__$1,left__$1,right__$1){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(key__$1,val__$1,left__$1,right__$1,null));
	});

	cljs.core.RedNode.prototype.balance_left = (function (parent){
	var self__ = this;
	var node = this;
	if((self__.left instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(self__.key,self__.val,self__.left.blacken(),(new cljs.core.BlackNode(parent.key,parent.val,self__.right,parent.right,null)),null));
	} else {
	if((self__.right instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(self__.right.key,self__.right.val,(new cljs.core.BlackNode(self__.key,self__.val,self__.left,self__.right.left,null)),(new cljs.core.BlackNode(parent.key,parent.val,self__.right.right,parent.right,null)),null));
	} else {
	return (new cljs.core.BlackNode(parent.key,parent.val,node,parent.right,null));

	}
	}
	});

	cljs.core.RedNode.prototype.balance_right = (function (parent){
	var self__ = this;
	var node = this;
	if((self__.right instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(self__.key,self__.val,(new cljs.core.BlackNode(parent.key,parent.val,parent.left,self__.left,null)),self__.right.blacken(),null));
	} else {
	if((self__.left instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(self__.left.key,self__.left.val,(new cljs.core.BlackNode(parent.key,parent.val,parent.left,self__.left.left,null)),(new cljs.core.BlackNode(self__.key,self__.val,self__.left.right,self__.right,null)),null));
	} else {
	return (new cljs.core.BlackNode(parent.key,parent.val,parent.left,node,null));

	}
	}
	});

	cljs.core.RedNode.prototype.remove_left = (function (del){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(self__.key,self__.val,del,self__.right,null));
	});

	cljs.core.RedNode.prototype.kv_reduce = (function (f,init){
	var self__ = this;
	var node = this;
	return cljs.core.tree_map_kv_reduce(node,f,init);
	});

	cljs.core.RedNode.prototype.remove_right = (function (del){
	var self__ = this;
	var node = this;
	return (new cljs.core.RedNode(self__.key,self__.val,self__.left,del,null));
	});

	cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,null);
	});

	cljs.core.RedNode.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (node,k,not_found){
	var self__ = this;
	var node__$1 = this;
	return node__$1.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (node,n){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	throw (new Error("Index out of bounds"));

	}
	}
	});

	cljs.core.RedNode.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (node,n,not_found){
	var self__ = this;
	var node__$1 = this;
	if((n === (0))){
	return self__.key;
	} else {
	if((n === (1))){
	return self__.val;
	} else {
	return not_found;

	}
	}
	});

	cljs.core.RedNode.prototype.cljs$core$IVector$_assoc_n$arity$3 = (function (node,n,v){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null).cljs$core$IVector$_assoc_n$arity$3(null,n,v);
	});

	cljs.core.RedNode.prototype.cljs$core$IMeta$_meta$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return null;
	});

	cljs.core.RedNode.prototype.cljs$core$ICounted$_count$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return (2);
	});

	cljs.core.RedNode.prototype.cljs$core$IMapEntry$_key$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.key;
	});

	cljs.core.RedNode.prototype.cljs$core$IMapEntry$_val$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.RedNode.prototype.cljs$core$IStack$_peek$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return self__.val;
	});

	cljs.core.RedNode.prototype.cljs$core$IStack$_pop$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key], null);
	});

	cljs.core.RedNode.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.RedNode.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.RedNode.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.PersistentVector.EMPTY;
	});

	cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (node,f){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(node__$1,f);
	});

	cljs.core.RedNode.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (node,f,start){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$3(node__$1,f,start);
	});

	cljs.core.RedNode.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (node,k,v){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),k,v);
	});

	cljs.core.RedNode.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (node,k){
	var self__ = this;
	var node__$1 = this;
	return ((k === (0))) || ((k === (1)));
	});

	cljs.core.RedNode.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (node){
	var self__ = this;
	var node__$1 = this;
	var x__5940__auto__ = self__.key;
	return cljs.core._conj((function (){var x__5940__auto____$1 = self__.val;
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto____$1);
	})(),x__5940__auto__);
	});

	cljs.core.RedNode.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (node,meta){
	var self__ = this;
	var node__$1 = this;
	return cljs.core.with_meta(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val], null),meta);
	});

	cljs.core.RedNode.prototype.cljs$core$ICollection$_conj$arity$2 = (function (node,o){
	var self__ = this;
	var node__$1 = this;
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [self__.key,self__.val,o], null);
	});

	cljs.core.RedNode.prototype.call = (function() {
	var G__3834 = null;
	var G__3834__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});
	var G__3834__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var node = self____$1;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});
	G__3834 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3834__2.call(this,self__,k);
	case 3:
	return G__3834__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3834.cljs$core$IFn$_invoke$arity$2 = G__3834__2;
	G__3834.cljs$core$IFn$_invoke$arity$3 = G__3834__3;
	return G__3834;
	})()
	;

	cljs.core.RedNode.prototype.apply = (function (self__,args3831){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3831)));
	});

	cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$2(null,k);
	});

	cljs.core.RedNode.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var node = this;
	return node.cljs$core$IIndexed$_nth$arity$3(null,k,not_found);
	});

	cljs.core.RedNode.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$key,cljs.core.cst$sym$val,cljs.core.cst$sym$left,cljs.core.cst$sym$right,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.RedNode.cljs$lang$type = true;

	cljs.core.RedNode.cljs$lang$ctorStr = "cljs.core/RedNode";

	cljs.core.RedNode.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/RedNode");
	});

	cljs.core.__GT_RedNode = (function cljs$core$__GT_RedNode(key,val,left,right,__hash){
	return (new cljs.core.RedNode(key,val,left,right,__hash));
	});

	(cljs.core.RedNode.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.tree_map_add = (function cljs$core$tree_map_add(comp,tree,k,v,found){
	if((tree == null)){
	return (new cljs.core.RedNode(k,v,null,null,null));
	} else {
	var c = (function (){var G__3847 = k;
	var G__3848 = tree.key;
	return (comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__3847,G__3848) : comp.call(null,G__3847,G__3848));
	})();
	if((c === (0))){
	(found[(0)] = tree);

	return null;
	} else {
	if((c < (0))){
	var ins = (function (){var G__3849 = comp;
	var G__3850 = tree.left;
	var G__3851 = k;
	var G__3852 = v;
	var G__3853 = found;
	return (cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__3849,G__3850,G__3851,G__3852,G__3853) : cljs.core.tree_map_add.call(null,G__3849,G__3850,G__3851,G__3852,G__3853));
	})();
	if(!((ins == null))){
	return tree.add_left(ins);
	} else {
	return null;
	}
	} else {
	var ins = (function (){var G__3854 = comp;
	var G__3855 = tree.right;
	var G__3856 = k;
	var G__3857 = v;
	var G__3858 = found;
	return (cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5 ? cljs.core.tree_map_add.cljs$core$IFn$_invoke$arity$5(G__3854,G__3855,G__3856,G__3857,G__3858) : cljs.core.tree_map_add.call(null,G__3854,G__3855,G__3856,G__3857,G__3858));
	})();
	if(!((ins == null))){
	return tree.add_right(ins);
	} else {
	return null;
	}

	}
	}
	}
	});
	cljs.core.tree_map_append = (function cljs$core$tree_map_append(left,right){
	if((left == null)){
	return right;
	} else {
	if((right == null)){
	return left;
	} else {
	if((left instanceof cljs.core.RedNode)){
	if((right instanceof cljs.core.RedNode)){
	var app = (function (){var G__3867 = left.right;
	var G__3868 = right.left;
	return (cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3867,G__3868) : cljs.core.tree_map_append.call(null,G__3867,G__3868));
	})();
	if((app instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(app.key,app.val,(new cljs.core.RedNode(left.key,left.val,left.left,app.left,null)),(new cljs.core.RedNode(right.key,right.val,app.right,right.right,null)),null));
	} else {
	return (new cljs.core.RedNode(left.key,left.val,left.left,(new cljs.core.RedNode(right.key,right.val,app,right.right,null)),null));
	}
	} else {
	return (new cljs.core.RedNode(left.key,left.val,left.left,(function (){var G__3869 = left.right;
	var G__3870 = right;
	return (cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3869,G__3870) : cljs.core.tree_map_append.call(null,G__3869,G__3870));
	})(),null));
	}
	} else {
	if((right instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(right.key,right.val,(function (){var G__3871 = left;
	var G__3872 = right.left;
	return (cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3871,G__3872) : cljs.core.tree_map_append.call(null,G__3871,G__3872));
	})(),right.right,null));
	} else {
	var app = (function (){var G__3873 = left.right;
	var G__3874 = right.left;
	return (cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2 ? cljs.core.tree_map_append.cljs$core$IFn$_invoke$arity$2(G__3873,G__3874) : cljs.core.tree_map_append.call(null,G__3873,G__3874));
	})();
	if((app instanceof cljs.core.RedNode)){
	return (new cljs.core.RedNode(app.key,app.val,(new cljs.core.BlackNode(left.key,left.val,left.left,app.left,null)),(new cljs.core.BlackNode(right.key,right.val,app.right,right.right,null)),null));
	} else {
	return cljs.core.balance_left_del(left.key,left.val,left.left,(new cljs.core.BlackNode(right.key,right.val,app,right.right,null)));
	}

	}
	}
	}
	}
	});
	cljs.core.tree_map_remove = (function cljs$core$tree_map_remove(comp,tree,k,found){
	if(!((tree == null))){
	var c = (function (){var G__3885 = k;
	var G__3886 = tree.key;
	return (comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__3885,G__3886) : comp.call(null,G__3885,G__3886));
	})();
	if((c === (0))){
	(found[(0)] = tree);

	return cljs.core.tree_map_append(tree.left,tree.right);
	} else {
	if((c < (0))){
	var del = (function (){var G__3887 = comp;
	var G__3888 = tree.left;
	var G__3889 = k;
	var G__3890 = found;
	return (cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__3887,G__3888,G__3889,G__3890) : cljs.core.tree_map_remove.call(null,G__3887,G__3888,G__3889,G__3890));
	})();
	if((!((del == null))) || (!(((found[(0)]) == null)))){
	if((tree.left instanceof cljs.core.BlackNode)){
	return cljs.core.balance_left_del(tree.key,tree.val,del,tree.right);
	} else {
	return (new cljs.core.RedNode(tree.key,tree.val,del,tree.right,null));
	}
	} else {
	return null;
	}
	} else {
	var del = (function (){var G__3891 = comp;
	var G__3892 = tree.right;
	var G__3893 = k;
	var G__3894 = found;
	return (cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_remove.cljs$core$IFn$_invoke$arity$4(G__3891,G__3892,G__3893,G__3894) : cljs.core.tree_map_remove.call(null,G__3891,G__3892,G__3893,G__3894));
	})();
	if((!((del == null))) || (!(((found[(0)]) == null)))){
	if((tree.right instanceof cljs.core.BlackNode)){
	return cljs.core.balance_right_del(tree.key,tree.val,tree.left,del);
	} else {
	return (new cljs.core.RedNode(tree.key,tree.val,tree.left,del,null));
	}
	} else {
	return null;
	}

	}
	}
	} else {
	return null;
	}
	});
	cljs.core.tree_map_replace = (function cljs$core$tree_map_replace(comp,tree,k,v){
	var tk = tree.key;
	var c = (comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(k,tk) : comp.call(null,k,tk));
	if((c === (0))){
	return tree.replace(tk,v,tree.left,tree.right);
	} else {
	if((c < (0))){
	return tree.replace(tk,tree.val,(function (){var G__3903 = comp;
	var G__3904 = tree.left;
	var G__3905 = k;
	var G__3906 = v;
	return (cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__3903,G__3904,G__3905,G__3906) : cljs.core.tree_map_replace.call(null,G__3903,G__3904,G__3905,G__3906));
	})(),tree.right);
	} else {
	return tree.replace(tk,tree.val,tree.left,(function (){var G__3907 = comp;
	var G__3908 = tree.right;
	var G__3909 = k;
	var G__3910 = v;
	return (cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4 ? cljs.core.tree_map_replace.cljs$core$IFn$_invoke$arity$4(G__3907,G__3908,G__3909,G__3910) : cljs.core.tree_map_replace.call(null,G__3907,G__3908,G__3909,G__3910));
	})());

	}
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IReversible}
	 * @implements {cljs.core.IKVReduce}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IFind}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISorted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IAssociative}
	 * @implements {cljs.core.IMap}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.PersistentTreeMap = (function (comp,tree,cnt,meta,__hash){
	this.comp = comp;
	this.tree = tree;
	this.cnt = cnt;
	this.meta = meta;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 418776847;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentTreeMap.prototype.cljs$core$IFind$_find$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.entry_at(k);
	});

	cljs.core.PersistentTreeMap.prototype.forEach = (function (f){
	var self__ = this;
	var coll = this;
	var seq__3912 = cljs.core.seq(coll);
	var chunk__3913 = null;
	var count__3914 = (0);
	var i__3915 = (0);
	while(true){
	if((i__3915 < count__3914)){
	var vec__3916 = chunk__3913.cljs$core$IIndexed$_nth$arity$2(null,i__3915);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3916,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3916,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3926 = seq__3912;
	var G__3927 = chunk__3913;
	var G__3928 = count__3914;
	var G__3929 = (i__3915 + (1));
	seq__3912 = G__3926;
	chunk__3913 = G__3927;
	count__3914 = G__3928;
	i__3915 = G__3929;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__3912);
	if(temp__6738__auto__){
	var seq__3912__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__3912__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__3912__$1);
	var G__3930 = cljs.core.chunk_rest(seq__3912__$1);
	var G__3931 = c__5929__auto__;
	var G__3932 = cljs.core.count(c__5929__auto__);
	var G__3933 = (0);
	seq__3912 = G__3930;
	chunk__3913 = G__3931;
	count__3914 = G__3932;
	i__3915 = G__3933;
	continue;
	} else {
	var vec__3919 = cljs.core.first(seq__3912__$1);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3919,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__3919,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__3934 = cljs.core.next(seq__3912__$1);
	var G__3935 = null;
	var G__3936 = (0);
	var G__3937 = (0);
	seq__3912 = G__3934;
	chunk__3913 = G__3935;
	count__3914 = G__3936;
	i__3915 = G__3937;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.PersistentTreeMap.prototype.get = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentTreeMap.prototype.entries = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_entries_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentTreeMap.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentTreeMap.prototype.keys = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.keys.cljs$core$IFn$_invoke$arity$1 ? cljs.core.keys.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.keys.call(null,coll)));
	});

	cljs.core.PersistentTreeMap.prototype.values = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator((cljs.core.vals.cljs$core$IFn$_invoke$arity$1 ? cljs.core.vals.cljs$core$IFn$_invoke$arity$1(coll) : cljs.core.vals.call(null,coll)));
	});

	cljs.core.PersistentTreeMap.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentTreeMap.prototype.entry_at = (function (k){
	var self__ = this;
	var coll = this;
	var t = self__.tree;
	while(true){
	if(!((t == null))){
	var c = (function (){var G__3922 = k;
	var G__3923 = t.key;
	return (self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__3922,G__3923) : self__.comp.call(null,G__3922,G__3923));
	})();
	if((c === (0))){
	return t;
	} else {
	if((c < (0))){
	var G__3938 = t.left;
	t = G__3938;
	continue;
	} else {
	var G__3939 = t.right;
	t = G__3939;
	continue;

	}
	}
	} else {
	return null;
	}
	break;
	}
	});

	cljs.core.PersistentTreeMap.prototype.has = (function (k){
	var self__ = this;
	var coll = this;
	return cljs.core.contains_QMARK_(coll,k);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,k,null);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,k,not_found){
	var self__ = this;
	var coll__$1 = this;
	var n = coll__$1.entry_at(k);
	if(!((n == null))){
	return n.val;
	} else {
	return not_found;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IKVReduce$_kv_reduce$arity$3 = (function (coll,f,init){
	var self__ = this;
	var coll__$1 = this;
	if(!((self__.tree == null))){
	return cljs.core.tree_map_kv_reduce(self__.tree,f,init);
	} else {
	return init;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentTreeMap(self__.comp,self__.tree,self__.cnt,self__.meta,self__.__hash));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.cnt;
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	return cljs.core.create_tree_map_seq(self__.tree,false,self__.cnt);
	} else {
	return null;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_map(coll__$1,other);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeMap(self__.comp,null,(0),self__.meta,(0)));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IMap$_dissoc$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	var found = [null];
	var t = cljs.core.tree_map_remove(self__.comp,self__.tree,k,found);
	if((t == null)){
	if((cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found,(0)) == null)){
	return coll__$1;
	} else {
	return (new cljs.core.PersistentTreeMap(self__.comp,null,(0),self__.meta,null));
	}
	} else {
	return (new cljs.core.PersistentTreeMap(self__.comp,t.blacken(),(self__.cnt - (1)),self__.meta,null));
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_assoc$arity$3 = (function (coll,k,v){
	var self__ = this;
	var coll__$1 = this;
	var found = [null];
	var t = cljs.core.tree_map_add(self__.comp,self__.tree,k,v,found);
	if((t == null)){
	var found_node = cljs.core.nth.cljs$core$IFn$_invoke$arity$2(found,(0));
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(v,found_node.val)){
	return coll__$1;
	} else {
	return (new cljs.core.PersistentTreeMap(self__.comp,cljs.core.tree_map_replace(self__.comp,self__.tree,k,v),self__.cnt,self__.meta,null));
	}
	} else {
	return (new cljs.core.PersistentTreeMap(self__.comp,t.blacken(),(self__.cnt + (1)),self__.meta,null));
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IAssociative$_contains_key_QMARK_$arity$2 = (function (coll,k){
	var self__ = this;
	var coll__$1 = this;
	return !((coll__$1.entry_at(k) == null));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	return cljs.core.create_tree_map_seq(self__.tree,true,self__.cnt);
	} else {
	return null;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeMap(self__.comp,self__.tree,self__.cnt,meta__$1,self__.__hash));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core.vector_QMARK_(entry)){
	return coll__$1.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(entry,(1)));
	} else {
	var ret = coll__$1;
	var es = cljs.core.seq(entry);
	while(true){
	if((es == null)){
	return ret;
	} else {
	var e = cljs.core.first(es);
	if(cljs.core.vector_QMARK_(e)){
	var G__3940 = ret.cljs$core$IAssociative$_assoc$arity$3(null,cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(0)),cljs.core._nth.cljs$core$IFn$_invoke$arity$2(e,(1)));
	var G__3941 = cljs.core.next(es);
	ret = G__3940;
	es = G__3941;
	continue;
	} else {
	throw (new Error("conj on a map takes map entries or seqables of map entries"));
	}
	}
	break;
	}
	}
	});

	cljs.core.PersistentTreeMap.prototype.call = (function() {
	var G__3942 = null;
	var G__3942__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__3942__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__3942 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__3942__2.call(this,self__,k);
	case 3:
	return G__3942__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3942.cljs$core$IFn$_invoke$arity$2 = G__3942__2;
	G__3942.cljs$core$IFn$_invoke$arity$3 = G__3942__3;
	return G__3942;
	})()
	;

	cljs.core.PersistentTreeMap.prototype.apply = (function (self__,args3911){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args3911)));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = (function (coll,ascending_QMARK_){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	return cljs.core.create_tree_map_seq(self__.tree,ascending_QMARK_,self__.cnt);
	} else {
	return null;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = (function (coll,k,ascending_QMARK_){
	var self__ = this;
	var coll__$1 = this;
	if((self__.cnt > (0))){
	var stack = null;
	var t = self__.tree;
	while(true){
	if(!((t == null))){
	var c = (function (){var G__3924 = k;
	var G__3925 = t.key;
	return (self__.comp.cljs$core$IFn$_invoke$arity$2 ? self__.comp.cljs$core$IFn$_invoke$arity$2(G__3924,G__3925) : self__.comp.call(null,G__3924,G__3925));
	})();
	if((c === (0))){
	return (new cljs.core.PersistentTreeMapSeq(null,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,t),ascending_QMARK_,(-1),null));
	} else {
	if(cljs.core.truth_(ascending_QMARK_)){
	if((c < (0))){
	var G__3943 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,t);
	var G__3944 = t.left;
	stack = G__3943;
	t = G__3944;
	continue;
	} else {
	var G__3945 = stack;
	var G__3946 = t.right;
	stack = G__3945;
	t = G__3946;
	continue;
	}
	} else {
	if((c > (0))){
	var G__3947 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(stack,t);
	var G__3948 = t.right;
	stack = G__3947;
	t = G__3948;
	continue;
	} else {
	var G__3949 = stack;
	var G__3950 = t.left;
	stack = G__3949;
	t = G__3950;
	continue;
	}

	}
	}
	} else {
	if((stack == null)){
	return null;
	} else {
	return (new cljs.core.PersistentTreeMapSeq(null,stack,ascending_QMARK_,(-1),null));
	}
	}
	break;
	}
	} else {
	return null;
	}
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_entry_key$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.key.cljs$core$IFn$_invoke$arity$1 ? cljs.core.key.cljs$core$IFn$_invoke$arity$1(entry) : cljs.core.key.call(null,entry));
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$ISorted$_comparator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.comp;
	});

	cljs.core.PersistentTreeMap.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$comp,cljs.core.cst$sym$tree,cljs.core.cst$sym$cnt,cljs.core.cst$sym$meta,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentTreeMap.cljs$lang$type = true;

	cljs.core.PersistentTreeMap.cljs$lang$ctorStr = "cljs.core/PersistentTreeMap";

	cljs.core.PersistentTreeMap.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentTreeMap");
	});

	cljs.core.__GT_PersistentTreeMap = (function cljs$core$__GT_PersistentTreeMap(comp,tree,cnt,meta,__hash){
	return (new cljs.core.PersistentTreeMap(comp,tree,cnt,meta,__hash));
	});

	cljs.core.PersistentTreeMap.EMPTY = (new cljs.core.PersistentTreeMap(cljs.core.compare,null,(0),null,cljs.core.empty_unordered_hash));
	(cljs.core.PersistentTreeMap.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * keyval => key val
	 *   Returns a new hash map with supplied mappings.
	 */
	cljs.core.hash_map = (function cljs$core$hash_map(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3952 = arguments.length;
	var i__6100__auto___3953 = (0);
	while(true){
	if((i__6100__auto___3953 < len__6099__auto___3952)){
	args__6102__auto__.push((arguments[i__6100__auto___3953]));

	var G__3954 = (i__6100__auto___3953 + (1));
	i__6100__auto___3953 = G__3954;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic = (function (keyvals){
	var in$ = cljs.core.seq(keyvals);
	var out = cljs.core.transient$(cljs.core.PersistentHashMap.EMPTY);
	while(true){
	if(in$){
	var G__3955 = cljs.core.nnext(in$);
	var G__3956 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(out,cljs.core.first(in$),cljs.core.second(in$));
	in$ = G__3955;
	out = G__3956;
	continue;
	} else {
	return cljs.core.persistent_BANG_(out);
	}
	break;
	}
	});

	cljs.core.hash_map.cljs$lang$maxFixedArity = (0);

	cljs.core.hash_map.cljs$lang$applyTo = (function (seq3951){
	return cljs.core.hash_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3951));
	});

	/**
	 * keyval => key val
	 *   Returns a new array map with supplied mappings.
	 */
	cljs.core.array_map = (function cljs$core$array_map(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3958 = arguments.length;
	var i__6100__auto___3959 = (0);
	while(true){
	if((i__6100__auto___3959 < len__6099__auto___3958)){
	args__6102__auto__.push((arguments[i__6100__auto___3959]));

	var G__3960 = (i__6100__auto___3959 + (1));
	i__6100__auto___3959 = G__3960;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic = (function (keyvals){
	var arr = ((((keyvals instanceof cljs.core.IndexedSeq)) && ((keyvals.i === (0))))?keyvals.arr:cljs.core.into_array.cljs$core$IFn$_invoke$arity$1(keyvals));
	return cljs.core.PersistentArrayMap.createAsIfByAssoc(arr);
	});

	cljs.core.array_map.cljs$lang$maxFixedArity = (0);

	cljs.core.array_map.cljs$lang$applyTo = (function (seq3957){
	return cljs.core.array_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3957));
	});

	/**
	 * keyval => key val
	 *   Returns a new object map with supplied mappings.
	 */
	cljs.core.obj_map = (function cljs$core$obj_map(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3964 = arguments.length;
	var i__6100__auto___3965 = (0);
	while(true){
	if((i__6100__auto___3965 < len__6099__auto___3964)){
	args__6102__auto__.push((arguments[i__6100__auto___3965]));

	var G__3966 = (i__6100__auto___3965 + (1));
	i__6100__auto___3965 = G__3966;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic = (function (keyvals){
	var ks = [];
	var obj = {};
	var kvs = cljs.core.seq(keyvals);
	while(true){
	if(kvs){
	ks.push(cljs.core.first(kvs));

	(obj[cljs.core.first(kvs)] = cljs.core.second(kvs));

	var G__3967 = cljs.core.nnext(kvs);
	kvs = G__3967;
	continue;
	} else {
	return cljs.core.ObjMap.fromObject(ks,obj);
	}
	break;
	}
	});

	cljs.core.obj_map.cljs$lang$maxFixedArity = (0);

	cljs.core.obj_map.cljs$lang$applyTo = (function (seq3961){
	return cljs.core.obj_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3961));
	});

	/**
	 * keyval => key val
	 *   Returns a new sorted map with supplied mappings.
	 */
	cljs.core.sorted_map = (function cljs$core$sorted_map(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3969 = arguments.length;
	var i__6100__auto___3970 = (0);
	while(true){
	if((i__6100__auto___3970 < len__6099__auto___3969)){
	args__6102__auto__.push((arguments[i__6100__auto___3970]));

	var G__3971 = (i__6100__auto___3970 + (1));
	i__6100__auto___3970 = G__3971;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic = (function (keyvals){
	var in$ = cljs.core.seq(keyvals);
	var out = cljs.core.PersistentTreeMap.EMPTY;
	while(true){
	if(in$){
	var G__3972 = cljs.core.nnext(in$);
	var G__3973 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out,cljs.core.first(in$),cljs.core.second(in$));
	in$ = G__3972;
	out = G__3973;
	continue;
	} else {
	return out;
	}
	break;
	}
	});

	cljs.core.sorted_map.cljs$lang$maxFixedArity = (0);

	cljs.core.sorted_map.cljs$lang$applyTo = (function (seq3968){
	return cljs.core.sorted_map.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3968));
	});

	/**
	 * keyval => key val
	 *   Returns a new sorted map with supplied mappings, using the supplied comparator.
	 */
	cljs.core.sorted_map_by = (function cljs$core$sorted_map_by(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3976 = arguments.length;
	var i__6100__auto___3977 = (0);
	while(true){
	if((i__6100__auto___3977 < len__6099__auto___3976)){
	args__6102__auto__.push((arguments[i__6100__auto___3977]));

	var G__3978 = (i__6100__auto___3977 + (1));
	i__6100__auto___3977 = G__3978;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((1) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((1)),(0),null)):null);
	return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6103__auto__);
	});

	cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic = (function (comparator,keyvals){
	var in$ = cljs.core.seq(keyvals);
	var out = (new cljs.core.PersistentTreeMap(cljs.core.fn__GT_comparator(comparator),null,(0),null,(0)));
	while(true){
	if(in$){
	var G__3979 = cljs.core.nnext(in$);
	var G__3980 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(out,cljs.core.first(in$),cljs.core.second(in$));
	in$ = G__3979;
	out = G__3980;
	continue;
	} else {
	return out;
	}
	break;
	}
	});

	cljs.core.sorted_map_by.cljs$lang$maxFixedArity = (1);

	cljs.core.sorted_map_by.cljs$lang$applyTo = (function (seq3974){
	var G__3975 = cljs.core.first(seq3974);
	var seq3974__$1 = cljs.core.next(seq3974);
	return cljs.core.sorted_map_by.cljs$core$IFn$_invoke$arity$variadic(G__3975,seq3974__$1);
	});


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.KeySeq = (function (mseq,_meta){
	this.mseq = mseq;
	this._meta = _meta;
	this.cljs$lang$protocol_mask$partition0$ = 32374988;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.KeySeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.KeySeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.KeySeq.prototype.indexOf = (function() {
	var G__3983 = null;
	var G__3983__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3983__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3983 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3983__1.call(this,x);
	case 2:
	return G__3983__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3983.cljs$core$IFn$_invoke$arity$1 = G__3983__1;
	G__3983.cljs$core$IFn$_invoke$arity$2 = G__3983__2;
	return G__3983;
	})()
	;

	cljs.core.KeySeq.prototype.lastIndexOf = (function() {
	var G__3984 = null;
	var G__3984__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3984__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3984 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3984__1.call(this,x);
	case 2:
	return G__3984__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3984.cljs$core$IFn$_invoke$arity$1 = G__3984__1;
	G__3984.cljs$core$IFn$_invoke$arity$2 = G__3984__2;
	return G__3984;
	})()
	;

	cljs.core.KeySeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__._meta;
	});

	cljs.core.KeySeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var nseq = ((((!((self__.mseq == null)))?((((self__.mseq.cljs$lang$protocol_mask$partition0$ & (128))) || ((cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$)))?true:(((!self__.mseq.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq):false)):cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq)))?self__.mseq.cljs$core$INext$_next$arity$1(null):cljs.core.next(self__.mseq));
	if((nseq == null)){
	return null;
	} else {
	return (new cljs.core.KeySeq(nseq,self__._meta));
	}
	});

	cljs.core.KeySeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.hash_ordered_coll(coll__$1);
	});

	cljs.core.KeySeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.KeySeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__._meta);
	});

	cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.KeySeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.KeySeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
	return me.cljs$core$IMapEntry$_key$arity$1(null);
	});

	cljs.core.KeySeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var nseq = ((((!((self__.mseq == null)))?((((self__.mseq.cljs$lang$protocol_mask$partition0$ & (128))) || ((cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$)))?true:(((!self__.mseq.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq):false)):cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq)))?self__.mseq.cljs$core$INext$_next$arity$1(null):cljs.core.next(self__.mseq));
	if(!((nseq == null))){
	return (new cljs.core.KeySeq(nseq,self__._meta));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.KeySeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.KeySeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,new_meta){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.KeySeq(self__.mseq,new_meta));
	});

	cljs.core.KeySeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.KeySeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null);
	});

	cljs.core.KeySeq.cljs$lang$type = true;

	cljs.core.KeySeq.cljs$lang$ctorStr = "cljs.core/KeySeq";

	cljs.core.KeySeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/KeySeq");
	});

	cljs.core.__GT_KeySeq = (function cljs$core$__GT_KeySeq(mseq,_meta){
	return (new cljs.core.KeySeq(mseq,_meta));
	});

	(cljs.core.KeySeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns a sequence of the map's keys.
	 */
	cljs.core.keys = (function cljs$core$keys(hash_map){
	var temp__6738__auto__ = cljs.core.seq(hash_map);
	if(temp__6738__auto__){
	var mseq = temp__6738__auto__;
	return (new cljs.core.KeySeq(mseq,null));
	} else {
	return null;
	}
	});
	/**
	 * Returns the key of the map entry.
	 */
	cljs.core.key = (function cljs$core$key(map_entry){
	return cljs.core._key(map_entry);
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.ValSeq = (function (mseq,_meta){
	this.mseq = mseq;
	this._meta = _meta;
	this.cljs$lang$protocol_mask$partition0$ = 32374988;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.ValSeq.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.ValSeq.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.ValSeq.prototype.indexOf = (function() {
	var G__3987 = null;
	var G__3987__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__3987__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3987 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3987__1.call(this,x);
	case 2:
	return G__3987__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3987.cljs$core$IFn$_invoke$arity$1 = G__3987__1;
	G__3987.cljs$core$IFn$_invoke$arity$2 = G__3987__2;
	return G__3987;
	})()
	;

	cljs.core.ValSeq.prototype.lastIndexOf = (function() {
	var G__3988 = null;
	var G__3988__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__3988__2 = (function (x,start){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start);
	});
	G__3988 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__3988__1.call(this,x);
	case 2:
	return G__3988__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__3988.cljs$core$IFn$_invoke$arity$1 = G__3988__1;
	G__3988.cljs$core$IFn$_invoke$arity$2 = G__3988__2;
	return G__3988;
	})()
	;

	cljs.core.ValSeq.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__._meta;
	});

	cljs.core.ValSeq.prototype.cljs$core$INext$_next$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var nseq = ((((!((self__.mseq == null)))?((((self__.mseq.cljs$lang$protocol_mask$partition0$ & (128))) || ((cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$)))?true:(((!self__.mseq.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq):false)):cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq)))?self__.mseq.cljs$core$INext$_next$arity$1(null):cljs.core.next(self__.mseq));
	if((nseq == null)){
	return null;
	} else {
	return (new cljs.core.ValSeq(nseq,self__._meta));
	}
	});

	cljs.core.ValSeq.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.hash_ordered_coll(coll__$1);
	});

	cljs.core.ValSeq.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.equiv_sequential(coll__$1,other);
	});

	cljs.core.ValSeq.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__._meta);
	});

	cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (coll,f){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$2(f,coll__$1);
	});

	cljs.core.ValSeq.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (coll,f,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.seq_reduce.cljs$core$IFn$_invoke$arity$3(f,start,coll__$1);
	});

	cljs.core.ValSeq.prototype.cljs$core$ISeq$_first$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var me = self__.mseq.cljs$core$ISeq$_first$arity$1(null);
	return me.cljs$core$IMapEntry$_val$arity$1(null);
	});

	cljs.core.ValSeq.prototype.cljs$core$ISeq$_rest$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var nseq = ((((!((self__.mseq == null)))?((((self__.mseq.cljs$lang$protocol_mask$partition0$ & (128))) || ((cljs.core.PROTOCOL_SENTINEL === self__.mseq.cljs$core$INext$)))?true:(((!self__.mseq.cljs$lang$protocol_mask$partition0$))?cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq):false)):cljs.core.native_satisfies_QMARK_(cljs.core.INext,self__.mseq)))?self__.mseq.cljs$core$INext$_next$arity$1(null):cljs.core.next(self__.mseq));
	if(!((nseq == null))){
	return (new cljs.core.ValSeq(nseq,self__._meta));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.ValSeq.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1;
	});

	cljs.core.ValSeq.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,new_meta){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.ValSeq(self__.mseq,new_meta));
	});

	cljs.core.ValSeq.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.cons(o,coll__$1);
	});

	cljs.core.ValSeq.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$mseq,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$tag,cljs.core.cst$sym$not_DASH_native], null)),cljs.core.cst$sym$_meta], null);
	});

	cljs.core.ValSeq.cljs$lang$type = true;

	cljs.core.ValSeq.cljs$lang$ctorStr = "cljs.core/ValSeq";

	cljs.core.ValSeq.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ValSeq");
	});

	cljs.core.__GT_ValSeq = (function cljs$core$__GT_ValSeq(mseq,_meta){
	return (new cljs.core.ValSeq(mseq,_meta));
	});

	(cljs.core.ValSeq.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns a sequence of the map's values.
	 */
	cljs.core.vals = (function cljs$core$vals(hash_map){
	var temp__6738__auto__ = cljs.core.seq(hash_map);
	if(temp__6738__auto__){
	var mseq = temp__6738__auto__;
	return (new cljs.core.ValSeq(mseq,null));
	} else {
	return null;
	}
	});
	/**
	 * Returns the value in the map entry.
	 */
	cljs.core.val = (function cljs$core$val(map_entry){
	return cljs.core._val(map_entry);
	});
	/**
	 * Returns a map that consists of the rest of the maps conj-ed onto
	 *   the first.  If a key occurs in more than one map, the mapping from
	 *   the latter (left-to-right) will be the mapping in the result.
	 */
	cljs.core.merge = (function cljs$core$merge(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3992 = arguments.length;
	var i__6100__auto___3993 = (0);
	while(true){
	if((i__6100__auto___3993 < len__6099__auto___3992)){
	args__6102__auto__.push((arguments[i__6100__auto___3993]));

	var G__3994 = (i__6100__auto___3993 + (1));
	i__6100__auto___3993 = G__3994;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic = (function (maps){
	if(cljs.core.truth_(cljs.core.some(cljs.core.identity,maps))){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2((function (p1__3989_SHARP_,p2__3990_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2((function (){var or__5450__auto__ = p1__3989_SHARP_;
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.PersistentArrayMap.EMPTY;
	}
	})(),p2__3990_SHARP_);
	}),maps);
	} else {
	return null;
	}
	});

	cljs.core.merge.cljs$lang$maxFixedArity = (0);

	cljs.core.merge.cljs$lang$applyTo = (function (seq3991){
	return cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq3991));
	});

	/**
	 * Returns a map that consists of the rest of the maps conj-ed onto
	 *   the first.  If a key occurs in more than one map, the mapping(s)
	 *   from the latter (left-to-right) will be combined with the mapping in
	 *   the result by calling (f val-in-result val-in-latter).
	 */
	cljs.core.merge_with = (function cljs$core$merge_with(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___3999 = arguments.length;
	var i__6100__auto___4000 = (0);
	while(true){
	if((i__6100__auto___4000 < len__6099__auto___3999)){
	args__6102__auto__.push((arguments[i__6100__auto___4000]));

	var G__4001 = (i__6100__auto___4000 + (1));
	i__6100__auto___4000 = G__4001;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((1) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((1)),(0),null)):null);
	return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6103__auto__);
	});

	cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic = (function (f,maps){
	if(cljs.core.truth_(cljs.core.some(cljs.core.identity,maps))){
	var merge_entry = (function (m,e){
	var k = cljs.core.first(e);
	var v = cljs.core.second(e);
	if(cljs.core.contains_QMARK_(m,k)){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,(function (){var G__3997 = cljs.core.get.cljs$core$IFn$_invoke$arity$2(m,k);
	var G__3998 = v;
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__3997,G__3998) : f.call(null,G__3997,G__3998));
	})());
	} else {
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,k,v);
	}
	});
	var merge2 = ((function (merge_entry){
	return (function (m1,m2){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(merge_entry,(function (){var or__5450__auto__ = m1;
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.PersistentArrayMap.EMPTY;
	}
	})(),cljs.core.seq(m2));
	});})(merge_entry))
	;
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$2(merge2,maps);
	} else {
	return null;
	}
	});

	cljs.core.merge_with.cljs$lang$maxFixedArity = (1);

	cljs.core.merge_with.cljs$lang$applyTo = (function (seq3995){
	var G__3996 = cljs.core.first(seq3995);
	var seq3995__$1 = cljs.core.next(seq3995);
	return cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic(G__3996,seq3995__$1);
	});

	/**
	 * Returns a map containing only those entries in map whose key is in keys
	 */
	cljs.core.select_keys = (function cljs$core$select_keys(map,keyseq){
	var ret = cljs.core.PersistentArrayMap.EMPTY;
	var keys = cljs.core.seq(keyseq);
	while(true){
	if(keys){
	var key = cljs.core.first(keys);
	var entry = cljs.core.get.cljs$core$IFn$_invoke$arity$3(map,key,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found);
	var G__4002 = ((cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(entry,cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,key,entry):ret);
	var G__4003 = cljs.core.next(keys);
	ret = G__4002;
	keys = G__4003;
	continue;
	} else {
	return cljs.core.with_meta(ret,cljs.core.meta(map));
	}
	break;
	}
	});

	/**
	* @constructor
	*/
	cljs.core.HashSetIter = (function (iter){
	this.iter = iter;
	})
	cljs.core.HashSetIter.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	return self__.iter.hasNext();
	});

	cljs.core.HashSetIter.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	if(self__.iter.hasNext()){
	return (self__.iter.next().tail[(0)]);
	} else {
	throw (new Error("No such element"));
	}
	});

	cljs.core.HashSetIter.prototype.remove = (function (){
	var self__ = this;
	var _ = this;
	return (new Error("Unsupported operation"));
	});

	cljs.core.HashSetIter.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$iter], null);
	});

	cljs.core.HashSetIter.cljs$lang$type = true;

	cljs.core.HashSetIter.cljs$lang$ctorStr = "cljs.core/HashSetIter";

	cljs.core.HashSetIter.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/HashSetIter");
	});

	cljs.core.__GT_HashSetIter = (function cljs$core$__GT_HashSetIter(iter){
	return (new cljs.core.HashSetIter(iter));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEditableCollection}
	 * @implements {cljs.core.ISet}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.PersistentHashSet = (function (meta,hash_map,__hash){
	this.meta = meta;
	this.hash_map = hash_map;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 15077647;
	this.cljs$lang$protocol_mask$partition1$ = 8196;
	})
	cljs.core.PersistentHashSet.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentHashSet.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentHashSet.prototype.keys = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentHashSet.prototype.entries = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentHashSet.prototype.values = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentHashSet.prototype.has = (function (k){
	var self__ = this;
	var coll = this;
	return cljs.core.contains_QMARK_(coll,k);
	});

	cljs.core.PersistentHashSet.prototype.forEach = (function (f){
	var self__ = this;
	var coll = this;
	var seq__4006 = cljs.core.seq(coll);
	var chunk__4007 = null;
	var count__4008 = (0);
	var i__4009 = (0);
	while(true){
	if((i__4009 < count__4008)){
	var vec__4010 = chunk__4007.cljs$core$IIndexed$_nth$arity$2(null,i__4009);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4010,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4010,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__4016 = seq__4006;
	var G__4017 = chunk__4007;
	var G__4018 = count__4008;
	var G__4019 = (i__4009 + (1));
	seq__4006 = G__4016;
	chunk__4007 = G__4017;
	count__4008 = G__4018;
	i__4009 = G__4019;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__4006);
	if(temp__6738__auto__){
	var seq__4006__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__4006__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__4006__$1);
	var G__4020 = cljs.core.chunk_rest(seq__4006__$1);
	var G__4021 = c__5929__auto__;
	var G__4022 = cljs.core.count(c__5929__auto__);
	var G__4023 = (0);
	seq__4006 = G__4020;
	chunk__4007 = G__4021;
	count__4008 = G__4022;
	i__4009 = G__4023;
	continue;
	} else {
	var vec__4013 = cljs.core.first(seq__4006__$1);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4013,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4013,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__4024 = cljs.core.next(seq__4006__$1);
	var G__4025 = null;
	var G__4026 = (0);
	var G__4027 = (0);
	seq__4006 = G__4024;
	chunk__4007 = G__4025;
	count__4008 = G__4026;
	i__4009 = G__4027;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,v){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,v,null);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,v,not_found){
	var self__ = this;
	var coll__$1 = this;
	if(cljs.core._contains_key_QMARK_(self__.hash_map,v)){
	return v;
	} else {
	return not_found;
	}
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentHashSet.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.HashSetIter(cljs.core._iterator(self__.hash_map)));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentHashSet(self__.meta,self__.hash_map,self__.__hash));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._count(self__.hash_map);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.set_QMARK_(other)) && ((cljs.core.count(coll__$1) === cljs.core.count(other))) && (cljs.core.every_QMARK_(((function (coll__$1){
	return (function (p1__4004_SHARP_){
	return cljs.core.contains_QMARK_(coll__$1,p1__4004_SHARP_);
	});})(coll__$1))
	,other));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IEditableCollection$_as_transient$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.TransientHashSet(cljs.core._as_transient(self__.hash_map)));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.with_meta(cljs.core.PersistentHashSet.EMPTY,self__.meta);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ISet$_disjoin$arity$2 = (function (coll,v){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentHashSet(self__.meta,cljs.core._dissoc(self__.hash_map,v),null));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.keys(self__.hash_map);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentHashSet(meta__$1,self__.hash_map,self__.__hash));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentHashSet(self__.meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.hash_map,o,null),null));
	});

	cljs.core.PersistentHashSet.prototype.call = (function() {
	var G__4028 = null;
	var G__4028__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__4028__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__4028 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__4028__2.call(this,self__,k);
	case 3:
	return G__4028__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4028.cljs$core$IFn$_invoke$arity$2 = G__4028__2;
	G__4028.cljs$core$IFn$_invoke$arity$3 = G__4028__3;
	return G__4028;
	})()
	;

	cljs.core.PersistentHashSet.prototype.apply = (function (self__,args4005){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args4005)));
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentHashSet.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$hash_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentHashSet.cljs$lang$type = true;

	cljs.core.PersistentHashSet.cljs$lang$ctorStr = "cljs.core/PersistentHashSet";

	cljs.core.PersistentHashSet.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentHashSet");
	});

	cljs.core.__GT_PersistentHashSet = (function cljs$core$__GT_PersistentHashSet(meta,hash_map,__hash){
	return (new cljs.core.PersistentHashSet(meta,hash_map,__hash));
	});

	cljs.core.PersistentHashSet.EMPTY = (new cljs.core.PersistentHashSet(null,cljs.core.PersistentArrayMap.EMPTY,cljs.core.empty_unordered_hash));
	cljs.core.PersistentHashSet.fromArray = (function (items,no_clone){
	var len = items.length;
	if((len <= cljs.core.PersistentArrayMap.HASHMAP_THRESHOLD)){
	var arr = ((no_clone)?items:cljs.core.aclone(items));
	var i = (0);
	var out = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
	while(true){
	if((i < len)){
	var G__4029 = (i + (1));
	var G__4030 = cljs.core._assoc_BANG_(out,(items[i]),null);
	i = G__4029;
	out = G__4030;
	continue;
	} else {
	return (new cljs.core.PersistentHashSet(null,cljs.core._persistent_BANG_(out),null));
	}
	break;
	}
	} else {
	var i = (0);
	var out = cljs.core.transient$(cljs.core.PersistentHashSet.EMPTY);
	while(true){
	if((i < len)){
	var G__4031 = (i + (1));
	var G__4032 = cljs.core._conj_BANG_(out,(items[i]));
	i = G__4031;
	out = G__4032;
	continue;
	} else {
	return cljs.core._persistent_BANG_(out);
	}
	break;
	}
	}
	});
	cljs.core.PersistentHashSet.createWithCheck = (function (items){
	var len = items.length;
	var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
	var n__5991__auto___4033 = len;
	var i_4034 = (0);
	while(true){
	if((i_4034 < n__5991__auto___4033)){
	cljs.core._conj_BANG_(t,(items[i_4034]));

	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.count(t),(i_4034 + (1)))){
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Duplicate key: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1((items[i_4034]))].join('')));
	}

	var G__4035 = (i_4034 + (1));
	i_4034 = G__4035;
	continue;
	} else {
	}
	break;
	}

	return cljs.core._persistent_BANG_(t);
	});
	cljs.core.PersistentHashSet.createAsIfByAssoc = (function (items){
	var len = items.length;
	var t = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
	var n__5991__auto___4036 = len;
	var i_4037 = (0);
	while(true){
	if((i_4037 < n__5991__auto___4036)){
	cljs.core._conj_BANG_(t,(items[i_4037]));

	var G__4038 = (i_4037 + (1));
	i_4037 = G__4038;
	continue;
	} else {
	}
	break;
	}

	return cljs.core._persistent_BANG_(t);
	});
	(cljs.core.PersistentHashSet.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));

	/**
	* @constructor
	 * @implements {cljs.core.ITransientSet}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ITransientCollection}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.TransientHashSet = (function (transient_map){
	this.transient_map = transient_map;
	this.cljs$lang$protocol_mask$partition1$ = 136;
	this.cljs$lang$protocol_mask$partition0$ = 259;
	})
	cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_conj_BANG_$arity$2 = (function (tcoll,o){
	var self__ = this;
	var tcoll__$1 = this;
	self__.transient_map = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(self__.transient_map,o,null);

	return tcoll__$1;
	});

	cljs.core.TransientHashSet.prototype.cljs$core$ITransientCollection$_persistent_BANG_$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	return (new cljs.core.PersistentHashSet(null,cljs.core.persistent_BANG_(self__.transient_map),null));
	});

	cljs.core.TransientHashSet.prototype.cljs$core$ITransientSet$_disjoin_BANG_$arity$2 = (function (tcoll,v){
	var self__ = this;
	var tcoll__$1 = this;
	self__.transient_map = cljs.core.dissoc_BANG_.cljs$core$IFn$_invoke$arity$2(self__.transient_map,v);

	return tcoll__$1;
	});

	cljs.core.TransientHashSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (tcoll){
	var self__ = this;
	var tcoll__$1 = this;
	return cljs.core.count(self__.transient_map);
	});

	cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (tcoll,v){
	var self__ = this;
	var tcoll__$1 = this;
	return tcoll__$1.cljs$core$ILookup$_lookup$arity$3(null,v,null);
	});

	cljs.core.TransientHashSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (tcoll,v,not_found){
	var self__ = this;
	var tcoll__$1 = this;
	if((cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map,v,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return not_found;
	} else {
	return v;
	}
	});

	cljs.core.TransientHashSet.prototype.call = (function() {
	var G__4040 = null;
	var G__4040__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var tcoll = self____$1;
	if((cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return null;
	} else {
	return k;
	}
	});
	var G__4040__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var tcoll = self____$1;
	if((cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return not_found;
	} else {
	return k;
	}
	});
	G__4040 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__4040__2.call(this,self__,k);
	case 3:
	return G__4040__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4040.cljs$core$IFn$_invoke$arity$2 = G__4040__2;
	G__4040.cljs$core$IFn$_invoke$arity$3 = G__4040__3;
	return G__4040;
	})()
	;

	cljs.core.TransientHashSet.prototype.apply = (function (self__,args4039){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args4039)));
	});

	cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var tcoll = this;
	if((cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return null;
	} else {
	return k;
	}
	});

	cljs.core.TransientHashSet.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var tcoll = this;
	if((cljs.core._lookup.cljs$core$IFn$_invoke$arity$3(self__.transient_map,k,cljs.core.lookup_sentinel) === cljs.core.lookup_sentinel)){
	return not_found;
	} else {
	return k;
	}
	});

	cljs.core.TransientHashSet.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$transient_DASH_map,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.TransientHashSet.cljs$lang$type = true;

	cljs.core.TransientHashSet.cljs$lang$ctorStr = "cljs.core/TransientHashSet";

	cljs.core.TransientHashSet.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/TransientHashSet");
	});

	cljs.core.__GT_TransientHashSet = (function cljs$core$__GT_TransientHashSet(transient_map){
	return (new cljs.core.TransientHashSet(transient_map));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IReversible}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.ISet}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISorted}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.PersistentTreeSet = (function (meta,tree_map,__hash){
	this.meta = meta;
	this.tree_map = tree_map;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 417730831;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.PersistentTreeSet.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.PersistentTreeSet.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.PersistentTreeSet.prototype.keys = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentTreeSet.prototype.entries = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_set_entries_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentTreeSet.prototype.values = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.es6_iterator(cljs.core.seq(coll));
	});

	cljs.core.PersistentTreeSet.prototype.has = (function (k){
	var self__ = this;
	var coll = this;
	return cljs.core.contains_QMARK_(coll,k);
	});

	cljs.core.PersistentTreeSet.prototype.forEach = (function (f){
	var self__ = this;
	var coll = this;
	var seq__4043 = cljs.core.seq(coll);
	var chunk__4044 = null;
	var count__4045 = (0);
	var i__4046 = (0);
	while(true){
	if((i__4046 < count__4045)){
	var vec__4047 = chunk__4044.cljs$core$IIndexed$_nth$arity$2(null,i__4046);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4047,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4047,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__4053 = seq__4043;
	var G__4054 = chunk__4044;
	var G__4055 = count__4045;
	var G__4056 = (i__4046 + (1));
	seq__4043 = G__4053;
	chunk__4044 = G__4054;
	count__4045 = G__4055;
	i__4046 = G__4056;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__4043);
	if(temp__6738__auto__){
	var seq__4043__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__4043__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__4043__$1);
	var G__4057 = cljs.core.chunk_rest(seq__4043__$1);
	var G__4058 = c__5929__auto__;
	var G__4059 = cljs.core.count(c__5929__auto__);
	var G__4060 = (0);
	seq__4043 = G__4057;
	chunk__4044 = G__4058;
	count__4045 = G__4059;
	i__4046 = G__4060;
	continue;
	} else {
	var vec__4050 = cljs.core.first(seq__4043__$1);
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4050,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4050,(1),null);
	(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(v,k) : f.call(null,v,k));

	var G__4061 = cljs.core.next(seq__4043__$1);
	var G__4062 = null;
	var G__4063 = (0);
	var G__4064 = (0);
	seq__4043 = G__4061;
	chunk__4044 = G__4062;
	count__4045 = G__4063;
	i__4046 = G__4064;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (coll,v){
	var self__ = this;
	var coll__$1 = this;
	return coll__$1.cljs$core$ILookup$_lookup$arity$3(null,v,null);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (coll,v,not_found){
	var self__ = this;
	var coll__$1 = this;
	var n = self__.tree_map.entry_at(v);
	if(!((n == null))){
	return n.key;
	} else {
	return not_found;
	}
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IMeta$_meta$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return self__.meta;
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.PersistentTreeSet(self__.meta,self__.tree_map,self__.__hash));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ICounted$_count$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.count(self__.tree_map);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IReversible$_rseq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	if((cljs.core.count(self__.tree_map) > (0))){
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key,cljs.core.rseq(self__.tree_map));
	} else {
	return null;
	}
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IHash$_hash$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_unordered_coll(coll__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (coll,other){
	var self__ = this;
	var coll__$1 = this;
	return (cljs.core.set_QMARK_(other)) && ((cljs.core.count(coll__$1) === cljs.core.count(other))) && (cljs.core.every_QMARK_(((function (coll__$1){
	return (function (p1__4041_SHARP_){
	return cljs.core.contains_QMARK_(coll__$1,p1__4041_SHARP_);
	});})(coll__$1))
	,other));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeSet(self__.meta,cljs.core._empty(self__.tree_map),(0)));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISet$_disjoin$arity$2 = (function (coll,v){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeSet(self__.meta,cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(self__.tree_map,v),null));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.keys(self__.tree_map);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (coll,meta__$1){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeSet(meta__$1,self__.tree_map,self__.__hash));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ICollection$_conj$arity$2 = (function (coll,o){
	var self__ = this;
	var coll__$1 = this;
	return (new cljs.core.PersistentTreeSet(self__.meta,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(self__.tree_map,o,null),null));
	});

	cljs.core.PersistentTreeSet.prototype.call = (function() {
	var G__4065 = null;
	var G__4065__2 = (function (self__,k){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});
	var G__4065__3 = (function (self__,k,not_found){
	var self__ = this;
	var self____$1 = this;
	var coll = self____$1;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});
	G__4065 = function(self__,k,not_found){
	switch(arguments.length){
	case 2:
	return G__4065__2.call(this,self__,k);
	case 3:
	return G__4065__3.call(this,self__,k,not_found);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4065.cljs$core$IFn$_invoke$arity$2 = G__4065__2;
	G__4065.cljs$core$IFn$_invoke$arity$3 = G__4065__3;
	return G__4065;
	})()
	;

	cljs.core.PersistentTreeSet.prototype.apply = (function (self__,args4042){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args4042)));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$1 = (function (k){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$2(null,k);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IFn$_invoke$arity$2 = (function (k,not_found){
	var self__ = this;
	var coll = this;
	return coll.cljs$core$ILookup$_lookup$arity$3(null,k,not_found);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq$arity$2 = (function (coll,ascending_QMARK_){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key,cljs.core._sorted_seq(self__.tree_map,ascending_QMARK_));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_sorted_seq_from$arity$3 = (function (coll,k,ascending_QMARK_){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.key,cljs.core._sorted_seq_from(self__.tree_map,k,ascending_QMARK_));
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_entry_key$arity$2 = (function (coll,entry){
	var self__ = this;
	var coll__$1 = this;
	return entry;
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$ISorted$_comparator$arity$1 = (function (coll){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._comparator(self__.tree_map);
	});

	cljs.core.PersistentTreeSet.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$tree_DASH_map,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.PersistentTreeSet.cljs$lang$type = true;

	cljs.core.PersistentTreeSet.cljs$lang$ctorStr = "cljs.core/PersistentTreeSet";

	cljs.core.PersistentTreeSet.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/PersistentTreeSet");
	});

	cljs.core.__GT_PersistentTreeSet = (function cljs$core$__GT_PersistentTreeSet(meta,tree_map,__hash){
	return (new cljs.core.PersistentTreeSet(meta,tree_map,__hash));
	});

	cljs.core.PersistentTreeSet.EMPTY = (new cljs.core.PersistentTreeSet(null,cljs.core.PersistentTreeMap.EMPTY,cljs.core.empty_unordered_hash));
	(cljs.core.PersistentTreeSet.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	cljs.core.set_from_indexed_seq = (function cljs$core$set_from_indexed_seq(iseq){
	var arr = iseq.arr;
	var ret = (function (){var a__5989__auto__ = arr;
	var i = (0);
	var res = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
	while(true){
	if((i < a__5989__auto__.length)){
	var G__4066 = (i + (1));
	var G__4067 = res.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null,(arr[i]));
	i = G__4066;
	res = G__4067;
	continue;
	} else {
	return res;
	}
	break;
	}
	})();
	return ret.cljs$core$ITransientCollection$_persistent_BANG_$arity$1(null);
	});
	/**
	 * Returns a set of the distinct elements of coll.
	 */
	cljs.core.set = (function cljs$core$set(coll){
	var in$ = cljs.core.seq(coll);
	if((in$ == null)){
	return cljs.core.PersistentHashSet.EMPTY;
	} else {
	if(((in$ instanceof cljs.core.IndexedSeq)) && ((in$.i === (0)))){
	return cljs.core.PersistentHashSet.createAsIfByAssoc(in$.arr);
	} else {
	var in$__$1 = in$;
	var out = cljs.core._as_transient(cljs.core.PersistentHashSet.EMPTY);
	while(true){
	if(!((in$__$1 == null))){
	var G__4068 = cljs.core.next(in$__$1);
	var G__4069 = out.cljs$core$ITransientCollection$_conj_BANG_$arity$2(null,in$__$1.cljs$core$ISeq$_first$arity$1(null));
	in$__$1 = G__4068;
	out = G__4069;
	continue;
	} else {
	return cljs.core.persistent_BANG_(out);
	}
	break;
	}

	}
	}
	});
	/**
	 * Returns a new hash set with supplied keys.  Any equal keys are
	 *   handled as if by repeated uses of conj.
	 */
	cljs.core.hash_set = (function cljs$core$hash_set(var_args){
	var args4070 = [];
	var len__6099__auto___4074 = arguments.length;
	var i__6100__auto___4075 = (0);
	while(true){
	if((i__6100__auto___4075 < len__6099__auto___4074)){
	args4070.push((arguments[i__6100__auto___4075]));

	var G__4076 = (i__6100__auto___4075 + (1));
	i__6100__auto___4075 = G__4076;
	continue;
	} else {
	}
	break;
	}

	var G__4073 = args4070.length;
	switch (G__4073) {
	case 0:
	return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0();

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4070.slice((0)),(0),null));
	return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(argseq__6118__auto__);

	}
	});

	cljs.core.hash_set.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.PersistentHashSet.EMPTY;
	});

	cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic = (function (keys){
	return cljs.core.set(keys);
	});

	cljs.core.hash_set.cljs$lang$applyTo = (function (seq4071){
	return cljs.core.hash_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4071));
	});

	cljs.core.hash_set.cljs$lang$maxFixedArity = (0);

	/**
	 * Returns a new sorted set with supplied keys.
	 */
	cljs.core.sorted_set = (function cljs$core$sorted_set(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4079 = arguments.length;
	var i__6100__auto___4080 = (0);
	while(true){
	if((i__6100__auto___4080 < len__6099__auto___4079)){
	args__6102__auto__.push((arguments[i__6100__auto___4080]));

	var G__4081 = (i__6100__auto___4080 + (1));
	i__6100__auto___4080 = G__4081;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic = (function (keys){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,cljs.core.PersistentTreeSet.EMPTY,keys);
	});

	cljs.core.sorted_set.cljs$lang$maxFixedArity = (0);

	cljs.core.sorted_set.cljs$lang$applyTo = (function (seq4078){
	return cljs.core.sorted_set.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4078));
	});

	/**
	 * Returns a new sorted set with supplied keys, using the supplied comparator.
	 */
	cljs.core.sorted_set_by = (function cljs$core$sorted_set_by(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4084 = arguments.length;
	var i__6100__auto___4085 = (0);
	while(true){
	if((i__6100__auto___4085 < len__6099__auto___4084)){
	args__6102__auto__.push((arguments[i__6100__auto___4085]));

	var G__4086 = (i__6100__auto___4085 + (1));
	i__6100__auto___4085 = G__4086;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((1) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((1)),(0),null)):null);
	return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6103__auto__);
	});

	cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic = (function (comparator,keys){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core._conj,(new cljs.core.PersistentTreeSet(null,cljs.core.sorted_map_by(comparator),(0))),keys);
	});

	cljs.core.sorted_set_by.cljs$lang$maxFixedArity = (1);

	cljs.core.sorted_set_by.cljs$lang$applyTo = (function (seq4082){
	var G__4083 = cljs.core.first(seq4082);
	var seq4082__$1 = cljs.core.next(seq4082);
	return cljs.core.sorted_set_by.cljs$core$IFn$_invoke$arity$variadic(G__4083,seq4082__$1);
	});

	/**
	 * Given a map of replacement pairs and a vector/collection, returns a
	 *   vector/seq with any elements = a key in smap replaced with the
	 *   corresponding val in smap.  Returns a transducer when no collection
	 *   is provided.
	 */
	cljs.core.replace = (function cljs$core$replace(var_args){
	var args4089 = [];
	var len__6099__auto___4092 = arguments.length;
	var i__6100__auto___4093 = (0);
	while(true){
	if((i__6100__auto___4093 < len__6099__auto___4092)){
	args4089.push((arguments[i__6100__auto___4093]));

	var G__4094 = (i__6100__auto___4093 + (1));
	i__6100__auto___4093 = G__4094;
	continue;
	} else {
	}
	break;
	}

	var G__4091 = args4089.length;
	switch (G__4091) {
	case 1:
	return cljs.core.replace.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.replace.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4089.length)].join('')));

	}
	});

	cljs.core.replace.cljs$core$IFn$_invoke$arity$1 = (function (smap){
	return cljs.core.map.cljs$core$IFn$_invoke$arity$1((function (p1__4087_SHARP_){
	var temp__6736__auto__ = cljs.core.find(smap,p1__4087_SHARP_);
	if(cljs.core.truth_(temp__6736__auto__)){
	var e = temp__6736__auto__;
	return cljs.core.val(e);
	} else {
	return p1__4087_SHARP_;
	}
	}));
	});

	cljs.core.replace.cljs$core$IFn$_invoke$arity$2 = (function (smap,coll){
	if(cljs.core.vector_QMARK_(coll)){
	var n = cljs.core.count(coll);
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (n){
	return (function (v,i){
	var temp__6736__auto__ = cljs.core.find(smap,cljs.core.nth.cljs$core$IFn$_invoke$arity$2(v,i));
	if(cljs.core.truth_(temp__6736__auto__)){
	var e = temp__6736__auto__;
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(v,i,cljs.core.second(e));
	} else {
	return v;
	}
	});})(n))
	,coll,cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,cljs.core.iterate(cljs.core.inc,(0))));
	} else {
	return cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__4088_SHARP_){
	var temp__6736__auto__ = cljs.core.find(smap,p1__4088_SHARP_);
	if(cljs.core.truth_(temp__6736__auto__)){
	var e = temp__6736__auto__;
	return cljs.core.second(e);
	} else {
	return p1__4088_SHARP_;
	}
	}),coll);
	}
	});

	cljs.core.replace.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence of the elements of coll with duplicates removed.
	 *   Returns a stateful transducer when no collection is provided.
	 */
	cljs.core.distinct = (function cljs$core$distinct(var_args){
	var args4096 = [];
	var len__6099__auto___4109 = arguments.length;
	var i__6100__auto___4110 = (0);
	while(true){
	if((i__6100__auto___4110 < len__6099__auto___4109)){
	args4096.push((arguments[i__6100__auto___4110]));

	var G__4111 = (i__6100__auto___4110 + (1));
	i__6100__auto___4110 = G__4111;
	continue;
	} else {
	}
	break;
	}

	var G__4098 = args4096.length;
	switch (G__4098) {
	case 0:
	return cljs.core.distinct.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.distinct.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4096.length)].join('')));

	}
	});

	cljs.core.distinct.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (function (rf){
	var seen = cljs.core.volatile_BANG_(cljs.core.PersistentHashSet.EMPTY);
	return ((function (seen){
	return (function() {
	var G__4113 = null;
	var G__4113__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4113__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__4113__2 = (function (result,input){
	if(cljs.core.contains_QMARK_((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(seen) : cljs.core.deref.call(null,seen)),input)){
	return result;
	} else {
	cljs.core._vreset_BANG_(seen,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core._deref(seen),input));

	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__4113 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4113__0.call(this);
	case 1:
	return G__4113__1.call(this,result);
	case 2:
	return G__4113__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4113.cljs$core$IFn$_invoke$arity$0 = G__4113__0;
	G__4113.cljs$core$IFn$_invoke$arity$1 = G__4113__1;
	G__4113.cljs$core$IFn$_invoke$arity$2 = G__4113__2;
	return G__4113;
	})()
	;})(seen))
	});
	});

	cljs.core.distinct.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	var step = (function cljs$core$step(xs,seen){
	return (new cljs.core.LazySeq(null,(function (){
	return (function (p__4105,seen__$1){
	while(true){
	var vec__4106 = p__4105;
	var f = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4106,(0),null);
	var xs__$1 = vec__4106;
	var temp__6738__auto__ = cljs.core.seq(xs__$1);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.contains_QMARK_(seen__$1,f)){
	var G__4114 = cljs.core.rest(s);
	var G__4115 = seen__$1;
	p__4105 = G__4114;
	seen__$1 = G__4115;
	continue;
	} else {
	return cljs.core.cons(f,cljs$core$step(cljs.core.rest(s),cljs.core.conj.cljs$core$IFn$_invoke$arity$2(seen__$1,f)));
	}
	} else {
	return null;
	}
	break;
	}
	}).call(null,xs,seen);
	}),null,null));
	});
	return step(coll,cljs.core.PersistentHashSet.EMPTY);
	});

	cljs.core.distinct.cljs$lang$maxFixedArity = 1;

	/**
	 * Return a seq of all but the last item in coll, in linear time
	 */
	cljs.core.butlast = (function cljs$core$butlast(s){
	var ret = cljs.core.PersistentVector.EMPTY;
	var s__$1 = s;
	while(true){
	if(cljs.core.next(s__$1)){
	var G__4116 = cljs.core.conj.cljs$core$IFn$_invoke$arity$2(ret,cljs.core.first(s__$1));
	var G__4117 = cljs.core.next(s__$1);
	ret = G__4116;
	s__$1 = G__4117;
	continue;
	} else {
	return cljs.core.seq(ret);
	}
	break;
	}
	});
	/**
	 * Returns the name String of a string, symbol or keyword.
	 */
	cljs.core.name = (function cljs$core$name(x){
	if(((!((x == null)))?((((x.cljs$lang$protocol_mask$partition1$ & (4096))) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$INamed$)))?true:false):false)){
	return x.cljs$core$INamed$_name$arity$1(null);
	} else {
	if(typeof x === 'string'){
	return x;
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Doesn't support name: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join('')));
	}
	}
	});
	/**
	 * Returns a map with the keys mapped to the corresponding vals.
	 */
	cljs.core.zipmap = (function cljs$core$zipmap(keys,vals){
	var map = cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY);
	var ks = cljs.core.seq(keys);
	var vs = cljs.core.seq(vals);
	while(true){
	if((ks) && (vs)){
	var G__4120 = cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(map,cljs.core.first(ks),cljs.core.first(vs));
	var G__4121 = cljs.core.next(ks);
	var G__4122 = cljs.core.next(vs);
	map = G__4120;
	ks = G__4121;
	vs = G__4122;
	continue;
	} else {
	return cljs.core.persistent_BANG_(map);
	}
	break;
	}
	});
	/**
	 * Returns the x for which (k x), a number, is greatest.
	 */
	cljs.core.max_key = (function cljs$core$max_key(var_args){
	var args4125 = [];
	var len__6099__auto___4132 = arguments.length;
	var i__6100__auto___4133 = (0);
	while(true){
	if((i__6100__auto___4133 < len__6099__auto___4132)){
	args4125.push((arguments[i__6100__auto___4133]));

	var G__4134 = (i__6100__auto___4133 + (1));
	i__6100__auto___4133 = G__4134;
	continue;
	} else {
	}
	break;
	}

	var G__4131 = args4125.length;
	switch (G__4131) {
	case 2:
	return cljs.core.max_key.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4125.slice((3)),(0),null));
	return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.max_key.cljs$core$IFn$_invoke$arity$2 = (function (k,x){
	return x;
	});

	cljs.core.max_key.cljs$core$IFn$_invoke$arity$3 = (function (k,x,y){
	if(((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null,x)) > (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null,y)))){
	return x;
	} else {
	return y;
	}
	});

	cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic = (function (k,x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__4123_SHARP_,p2__4124_SHARP_){
	return cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k,p1__4123_SHARP_,p2__4124_SHARP_);
	}),cljs.core.max_key.cljs$core$IFn$_invoke$arity$3(k,x,y),more);
	});

	cljs.core.max_key.cljs$lang$applyTo = (function (seq4126){
	var G__4127 = cljs.core.first(seq4126);
	var seq4126__$1 = cljs.core.next(seq4126);
	var G__4128 = cljs.core.first(seq4126__$1);
	var seq4126__$2 = cljs.core.next(seq4126__$1);
	var G__4129 = cljs.core.first(seq4126__$2);
	var seq4126__$3 = cljs.core.next(seq4126__$2);
	return cljs.core.max_key.cljs$core$IFn$_invoke$arity$variadic(G__4127,G__4128,G__4129,seq4126__$3);
	});

	cljs.core.max_key.cljs$lang$maxFixedArity = (3);

	/**
	 * Returns the x for which (k x), a number, is least.
	 */
	cljs.core.min_key = (function cljs$core$min_key(var_args){
	var args4138 = [];
	var len__6099__auto___4145 = arguments.length;
	var i__6100__auto___4146 = (0);
	while(true){
	if((i__6100__auto___4146 < len__6099__auto___4145)){
	args4138.push((arguments[i__6100__auto___4146]));

	var G__4147 = (i__6100__auto___4146 + (1));
	i__6100__auto___4146 = G__4147;
	continue;
	} else {
	}
	break;
	}

	var G__4144 = args4138.length;
	switch (G__4144) {
	case 2:
	return cljs.core.min_key.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4138.slice((3)),(0),null));
	return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.min_key.cljs$core$IFn$_invoke$arity$2 = (function (k,x){
	return x;
	});

	cljs.core.min_key.cljs$core$IFn$_invoke$arity$3 = (function (k,x,y){
	if(((k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(x) : k.call(null,x)) < (k.cljs$core$IFn$_invoke$arity$1 ? k.cljs$core$IFn$_invoke$arity$1(y) : k.call(null,y)))){
	return x;
	} else {
	return y;
	}
	});

	cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic = (function (k,x,y,more){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__4136_SHARP_,p2__4137_SHARP_){
	return cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k,p1__4136_SHARP_,p2__4137_SHARP_);
	}),cljs.core.min_key.cljs$core$IFn$_invoke$arity$3(k,x,y),more);
	});

	cljs.core.min_key.cljs$lang$applyTo = (function (seq4139){
	var G__4140 = cljs.core.first(seq4139);
	var seq4139__$1 = cljs.core.next(seq4139);
	var G__4141 = cljs.core.first(seq4139__$1);
	var seq4139__$2 = cljs.core.next(seq4139__$1);
	var G__4142 = cljs.core.first(seq4139__$2);
	var seq4139__$3 = cljs.core.next(seq4139__$2);
	return cljs.core.min_key.cljs$core$IFn$_invoke$arity$variadic(G__4140,G__4141,G__4142,seq4139__$3);
	});

	cljs.core.min_key.cljs$lang$maxFixedArity = (3);


	/**
	* @constructor
	*/
	cljs.core.ArrayList = (function (arr){
	this.arr = arr;
	})
	cljs.core.ArrayList.prototype.add = (function (x){
	var self__ = this;
	var _ = this;
	return self__.arr.push(x);
	});

	cljs.core.ArrayList.prototype.size = (function (){
	var self__ = this;
	var _ = this;
	return self__.arr.length;
	});

	cljs.core.ArrayList.prototype.clear = (function (){
	var self__ = this;
	var _ = this;
	return self__.arr = [];
	});

	cljs.core.ArrayList.prototype.isEmpty = (function (){
	var self__ = this;
	var _ = this;
	return (self__.arr.length === (0));
	});

	cljs.core.ArrayList.prototype.toArray = (function (){
	var self__ = this;
	var _ = this;
	return self__.arr;
	});

	cljs.core.ArrayList.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 1, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$arr,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.ArrayList.cljs$lang$type = true;

	cljs.core.ArrayList.cljs$lang$ctorStr = "cljs.core/ArrayList";

	cljs.core.ArrayList.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/ArrayList");
	});

	cljs.core.__GT_ArrayList = (function cljs$core$__GT_ArrayList(arr){
	return (new cljs.core.ArrayList(arr));
	});

	cljs.core.array_list = (function cljs$core$array_list(){
	return (new cljs.core.ArrayList([]));
	});
	/**
	 * Returns a lazy sequence of lists like partition, but may include
	 *   partitions with fewer than n items at the end.  Returns a stateful
	 *   transducer when no collection is provided.
	 */
	cljs.core.partition_all = (function cljs$core$partition_all(var_args){
	var args4149 = [];
	var len__6099__auto___4152 = arguments.length;
	var i__6100__auto___4153 = (0);
	while(true){
	if((i__6100__auto___4153 < len__6099__auto___4152)){
	args4149.push((arguments[i__6100__auto___4153]));

	var G__4154 = (i__6100__auto___4153 + (1));
	i__6100__auto___4153 = G__4154;
	continue;
	} else {
	}
	break;
	}

	var G__4151 = args4149.length;
	switch (G__4151) {
	case 1:
	return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4149.length)].join('')));

	}
	});

	cljs.core.partition_all.cljs$core$IFn$_invoke$arity$1 = (function (n){
	return (function (rf){
	var a = cljs.core.array_list();
	return ((function (a){
	return (function() {
	var G__4156 = null;
	var G__4156__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4156__1 = (function (result){
	var result__$1 = (cljs.core.truth_(a.isEmpty())?result:(function (){var v = cljs.core.vec(a.toArray());
	a.clear();

	return cljs.core.unreduced((rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v)));
	})());
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null,result__$1));
	});
	var G__4156__2 = (function (result,input){
	a.add(input);

	if((n === a.size())){
	var v = cljs.core.vec(a.toArray());
	a.clear();

	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v));
	} else {
	return result;
	}
	});
	G__4156 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4156__0.call(this);
	case 1:
	return G__4156__1.call(this,result);
	case 2:
	return G__4156__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4156.cljs$core$IFn$_invoke$arity$0 = G__4156__0;
	G__4156.cljs$core$IFn$_invoke$arity$1 = G__4156__1;
	G__4156.cljs$core$IFn$_invoke$arity$2 = G__4156__2;
	return G__4156;
	})()
	;})(a))
	});
	});

	cljs.core.partition_all.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	return cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n,n,coll);
	});

	cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3 = (function (n,step,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	return cljs.core.cons(cljs.core.take.cljs$core$IFn$_invoke$arity$2(n,s),cljs.core.partition_all.cljs$core$IFn$_invoke$arity$3(n,step,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(step,s)));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.partition_all.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns a lazy sequence of successive items from coll while
	 *   (pred item) returns true. pred must be free of side-effects.
	 *   Returns a transducer when no collection is provided.
	 */
	cljs.core.take_while = (function cljs$core$take_while(var_args){
	var args4157 = [];
	var len__6099__auto___4161 = arguments.length;
	var i__6100__auto___4162 = (0);
	while(true){
	if((i__6100__auto___4162 < len__6099__auto___4161)){
	args4157.push((arguments[i__6100__auto___4162]));

	var G__4163 = (i__6100__auto___4162 + (1));
	i__6100__auto___4162 = G__4163;
	continue;
	} else {
	}
	break;
	}

	var G__4159 = args4157.length;
	switch (G__4159) {
	case 1:
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4157.length)].join('')));

	}
	});

	cljs.core.take_while.cljs$core$IFn$_invoke$arity$1 = (function (pred){
	return (function (rf){
	return (function() {
	var G__4165 = null;
	var G__4165__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4165__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__4165__2 = (function (result,input){
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null,input)))){
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	} else {
	return cljs.core.reduced(result);
	}
	});
	G__4165 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4165__0.call(this);
	case 1:
	return G__4165__1.call(this,result);
	case 2:
	return G__4165__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4165.cljs$core$IFn$_invoke$arity$0 = G__4165__0;
	G__4165.cljs$core$IFn$_invoke$arity$1 = G__4165__1;
	G__4165.cljs$core$IFn$_invoke$arity$2 = G__4165__2;
	return G__4165;
	})()
	});
	});

	cljs.core.take_while.cljs$core$IFn$_invoke$arity$2 = (function (pred,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	if(cljs.core.truth_((function (){var G__4160 = cljs.core.first(s);
	return (pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(G__4160) : pred.call(null,G__4160));
	})())){
	return cljs.core.cons(cljs.core.first(s),cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred,cljs.core.rest(s)));
	} else {
	return null;
	}
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.take_while.cljs$lang$maxFixedArity = 2;

	cljs.core.mk_bound_fn = (function cljs$core$mk_bound_fn(sc,test,key){
	return (function (e){
	var comp = cljs.core._comparator(sc);
	var G__4170 = (function (){var G__4172 = cljs.core._entry_key(sc,e);
	var G__4173 = key;
	return (comp.cljs$core$IFn$_invoke$arity$2 ? comp.cljs$core$IFn$_invoke$arity$2(G__4172,G__4173) : comp.call(null,G__4172,G__4173));
	})();
	var G__4171 = (0);
	return (test.cljs$core$IFn$_invoke$arity$2 ? test.cljs$core$IFn$_invoke$arity$2(G__4170,G__4171) : test.call(null,G__4170,G__4171));
	});
	});
	/**
	 * sc must be a sorted collection, test(s) one of <, <=, > or
	 *   >=. Returns a seq of those entries with keys ek for
	 *   which (test (.. sc comparator (compare ek key)) 0) is true
	 */
	cljs.core.subseq = (function cljs$core$subseq(var_args){
	var args4174 = [];
	var len__6099__auto___4183 = arguments.length;
	var i__6100__auto___4184 = (0);
	while(true){
	if((i__6100__auto___4184 < len__6099__auto___4183)){
	args4174.push((arguments[i__6100__auto___4184]));

	var G__4185 = (i__6100__auto___4184 + (1));
	i__6100__auto___4184 = G__4185;
	continue;
	} else {
	}
	break;
	}

	var G__4176 = args4174.length;
	switch (G__4176) {
	case 3:
	return cljs.core.subseq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 5:
	return cljs.core.subseq.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4174.length)].join('')));

	}
	});

	cljs.core.subseq.cljs$core$IFn$_invoke$arity$3 = (function (sc,test,key){
	var include = cljs.core.mk_bound_fn(sc,test,key);
	if(cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._GT_,cljs.core._GT__EQ_]).call(null,test))){
	var temp__6738__auto__ = cljs.core._sorted_seq_from(sc,key,true);
	if(cljs.core.truth_(temp__6738__auto__)){
	var vec__4177 = temp__6738__auto__;
	var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4177,(0),null);
	var s = vec__4177;
	if(cljs.core.truth_((include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null,e)))){
	return s;
	} else {
	return cljs.core.next(s);
	}
	} else {
	return null;
	}
	} else {
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include,cljs.core._sorted_seq(sc,true));
	}
	});

	cljs.core.subseq.cljs$core$IFn$_invoke$arity$5 = (function (sc,start_test,start_key,end_test,end_key){
	var temp__6738__auto__ = cljs.core._sorted_seq_from(sc,start_key,true);
	if(cljs.core.truth_(temp__6738__auto__)){
	var vec__4180 = temp__6738__auto__;
	var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4180,(0),null);
	var s = vec__4180;
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc,end_test,end_key),(cljs.core.truth_(cljs.core.mk_bound_fn(sc,start_test,start_key).call(null,e))?s:cljs.core.next(s)));
	} else {
	return null;
	}
	});

	cljs.core.subseq.cljs$lang$maxFixedArity = 5;

	/**
	 * sc must be a sorted collection, test(s) one of <, <=, > or
	 *   >=. Returns a reverse seq of those entries with keys ek for
	 *   which (test (.. sc comparator (compare ek key)) 0) is true
	 */
	cljs.core.rsubseq = (function cljs$core$rsubseq(var_args){
	var args4187 = [];
	var len__6099__auto___4196 = arguments.length;
	var i__6100__auto___4197 = (0);
	while(true){
	if((i__6100__auto___4197 < len__6099__auto___4196)){
	args4187.push((arguments[i__6100__auto___4197]));

	var G__4198 = (i__6100__auto___4197 + (1));
	i__6100__auto___4197 = G__4198;
	continue;
	} else {
	}
	break;
	}

	var G__4189 = args4187.length;
	switch (G__4189) {
	case 3:
	return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	case 5:
	return cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),(arguments[(3)]),(arguments[(4)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4187.length)].join('')));

	}
	});

	cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$3 = (function (sc,test,key){
	var include = cljs.core.mk_bound_fn(sc,test,key);
	if(cljs.core.truth_(cljs.core.PersistentHashSet.createAsIfByAssoc([cljs.core._LT_,cljs.core._LT__EQ_]).call(null,test))){
	var temp__6738__auto__ = cljs.core._sorted_seq_from(sc,key,false);
	if(cljs.core.truth_(temp__6738__auto__)){
	var vec__4190 = temp__6738__auto__;
	var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4190,(0),null);
	var s = vec__4190;
	if(cljs.core.truth_((include.cljs$core$IFn$_invoke$arity$1 ? include.cljs$core$IFn$_invoke$arity$1(e) : include.call(null,e)))){
	return s;
	} else {
	return cljs.core.next(s);
	}
	} else {
	return null;
	}
	} else {
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(include,cljs.core._sorted_seq(sc,false));
	}
	});

	cljs.core.rsubseq.cljs$core$IFn$_invoke$arity$5 = (function (sc,start_test,start_key,end_test,end_key){
	var temp__6738__auto__ = cljs.core._sorted_seq_from(sc,end_key,false);
	if(cljs.core.truth_(temp__6738__auto__)){
	var vec__4193 = temp__6738__auto__;
	var e = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4193,(0),null);
	var s = vec__4193;
	return cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(cljs.core.mk_bound_fn(sc,start_test,start_key),(cljs.core.truth_(cljs.core.mk_bound_fn(sc,end_test,end_key).call(null,e))?s:cljs.core.next(s)));
	} else {
	return null;
	}
	});

	cljs.core.rsubseq.cljs$lang$maxFixedArity = 5;


	/**
	* @constructor
	*/
	cljs.core.RangeIterator = (function (i,end,step){
	this.i = i;
	this.end = end;
	this.step = step;
	})
	cljs.core.RangeIterator.prototype.hasNext = (function (){
	var self__ = this;
	var _ = this;
	if((self__.step > (0))){
	return (self__.i < self__.end);
	} else {
	return (self__.i > self__.end);
	}
	});

	cljs.core.RangeIterator.prototype.next = (function (){
	var self__ = this;
	var _ = this;
	var ret = self__.i;
	self__.i = (self__.i + self__.step);

	return ret;
	});

	cljs.core.RangeIterator.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$i,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.cst$sym$end,cljs.core.cst$sym$step], null);
	});

	cljs.core.RangeIterator.cljs$lang$type = true;

	cljs.core.RangeIterator.cljs$lang$ctorStr = "cljs.core/RangeIterator";

	cljs.core.RangeIterator.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/RangeIterator");
	});

	cljs.core.__GT_RangeIterator = (function cljs$core$__GT_RangeIterator(i,end,step){
	return (new cljs.core.RangeIterator(i,end,step));
	});


	/**
	* @constructor
	 * @implements {cljs.core.IIndexed}
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.ICollection}
	 * @implements {cljs.core.IEmptyableCollection}
	 * @implements {cljs.core.ICounted}
	 * @implements {cljs.core.ISeq}
	 * @implements {cljs.core.INext}
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IMeta}
	 * @implements {cljs.core.ICloneable}
	 * @implements {cljs.core.IIterable}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IWithMeta}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.Range = (function (meta,start,end,step,__hash){
	this.meta = meta;
	this.start = start;
	this.end = end;
	this.step = step;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 32375006;
	this.cljs$lang$protocol_mask$partition1$ = 8192;
	})
	cljs.core.Range.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.Range.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.Range.prototype.indexOf = (function() {
	var G__4201 = null;
	var G__4201__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,(0));
	});
	var G__4201__2 = (function (x,start__$1){
	var self__ = this;
	var coll = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start__$1);
	});
	G__4201 = function(x,start__$1){
	switch(arguments.length){
	case 1:
	return G__4201__1.call(this,x);
	case 2:
	return G__4201__2.call(this,x,start__$1);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4201.cljs$core$IFn$_invoke$arity$1 = G__4201__1;
	G__4201.cljs$core$IFn$_invoke$arity$2 = G__4201__2;
	return G__4201;
	})()
	;

	cljs.core.Range.prototype.lastIndexOf = (function() {
	var G__4202 = null;
	var G__4202__1 = (function (x){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,cljs.core.count(coll));
	});
	var G__4202__2 = (function (x,start__$1){
	var self__ = this;
	var coll = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll,x,start__$1);
	});
	G__4202 = function(x,start__$1){
	switch(arguments.length){
	case 1:
	return G__4202__1.call(this,x);
	case 2:
	return G__4202__2.call(this,x,start__$1);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4202.cljs$core$IFn$_invoke$arity$1 = G__4202__1;
	G__4202.cljs$core$IFn$_invoke$arity$2 = G__4202__2;
	return G__4202;
	})()
	;

	cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$2 = (function (rng,n){
	var self__ = this;
	var rng__$1 = this;
	if((n < rng__$1.cljs$core$ICounted$_count$arity$1(null))){
	return (self__.start + (n * self__.step));
	} else {
	if(((self__.start > self__.end)) && ((self__.step === (0)))){
	return self__.start;
	} else {
	throw (new Error("Index out of bounds"));
	}
	}
	});

	cljs.core.Range.prototype.cljs$core$IIndexed$_nth$arity$3 = (function (rng,n,not_found){
	var self__ = this;
	var rng__$1 = this;
	if((n < rng__$1.cljs$core$ICounted$_count$arity$1(null))){
	return (self__.start + (n * self__.step));
	} else {
	if(((self__.start > self__.end)) && ((self__.step === (0)))){
	return self__.start;
	} else {
	return not_found;
	}
	}
	});

	cljs.core.Range.prototype.cljs$core$IIterable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Range.prototype.cljs$core$IIterable$_iterator$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.RangeIterator(self__.start,self__.end,self__.step));
	});

	cljs.core.Range.prototype.cljs$core$IMeta$_meta$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	return self__.meta;
	});

	cljs.core.Range.prototype.cljs$core$ICloneable$_clone$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return (new cljs.core.Range(self__.meta,self__.start,self__.end,self__.step,self__.__hash));
	});

	cljs.core.Range.prototype.cljs$core$INext$_next$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	if((self__.step > (0))){
	if(((self__.start + self__.step) < self__.end)){
	return (new cljs.core.Range(self__.meta,(self__.start + self__.step),self__.end,self__.step,null));
	} else {
	return null;
	}
	} else {
	if(((self__.start + self__.step) > self__.end)){
	return (new cljs.core.Range(self__.meta,(self__.start + self__.step),self__.end,self__.step,null));
	} else {
	return null;
	}
	}
	});

	cljs.core.Range.prototype.cljs$core$ICounted$_count$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	if(cljs.core.not(rng__$1.cljs$core$ISeqable$_seq$arity$1(null))){
	return (0);
	} else {
	var G__4200 = ((self__.end - self__.start) / self__.step);
	return Math.ceil(G__4200);
	}
	});

	cljs.core.Range.prototype.cljs$core$IHash$_hash$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	var h__5552__auto__ = self__.__hash;
	if(!((h__5552__auto__ == null))){
	return h__5552__auto__;
	} else {
	var h__5552__auto____$1 = cljs.core.hash_ordered_coll(rng__$1);
	self__.__hash = h__5552__auto____$1;

	return h__5552__auto____$1;
	}
	});

	cljs.core.Range.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (rng,other){
	var self__ = this;
	var rng__$1 = this;
	return cljs.core.equiv_sequential(rng__$1,other);
	});

	cljs.core.Range.prototype.cljs$core$IEmptyableCollection$_empty$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	return cljs.core.with_meta(cljs.core.List.EMPTY,self__.meta);
	});

	cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (rng,f){
	var self__ = this;
	var rng__$1 = this;
	return cljs.core.ci_reduce.cljs$core$IFn$_invoke$arity$2(rng__$1,f);
	});

	cljs.core.Range.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (rng,f,init){
	var self__ = this;
	var rng__$1 = this;
	var i = self__.start;
	var ret = init;
	while(true){
	if((((self__.step > (0)))?(i < self__.end):(i > self__.end))){
	var ret__$1 = (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(ret,i) : f.call(null,ret,i));
	if(cljs.core.reduced_QMARK_(ret__$1)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(ret__$1) : cljs.core.deref.call(null,ret__$1));
	} else {
	var G__4203 = (i + self__.step);
	var G__4204 = ret__$1;
	i = G__4203;
	ret = G__4204;
	continue;
	}
	} else {
	return ret;
	}
	break;
	}
	});

	cljs.core.Range.prototype.cljs$core$ISeq$_first$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	if((rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null)){
	return null;
	} else {
	return self__.start;
	}
	});

	cljs.core.Range.prototype.cljs$core$ISeq$_rest$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	if(!((rng__$1.cljs$core$ISeqable$_seq$arity$1(null) == null))){
	return (new cljs.core.Range(self__.meta,(self__.start + self__.step),self__.end,self__.step,null));
	} else {
	return cljs.core.List.EMPTY;
	}
	});

	cljs.core.Range.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (rng){
	var self__ = this;
	var rng__$1 = this;
	if((self__.step > (0))){
	if((self__.start < self__.end)){
	return rng__$1;
	} else {
	return null;
	}
	} else {
	if((self__.step < (0))){
	if((self__.start > self__.end)){
	return rng__$1;
	} else {
	return null;
	}
	} else {
	if((self__.start === self__.end)){
	return null;
	} else {
	return rng__$1;
	}

	}
	}
	});

	cljs.core.Range.prototype.cljs$core$IWithMeta$_with_meta$arity$2 = (function (rng,meta__$1){
	var self__ = this;
	var rng__$1 = this;
	return (new cljs.core.Range(meta__$1,self__.start,self__.end,self__.step,self__.__hash));
	});

	cljs.core.Range.prototype.cljs$core$ICollection$_conj$arity$2 = (function (rng,o){
	var self__ = this;
	var rng__$1 = this;
	return cljs.core.cons(o,rng__$1);
	});

	cljs.core.Range.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 5, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$meta,cljs.core.cst$sym$start,cljs.core.cst$sym$end,cljs.core.cst$sym$step,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Range.cljs$lang$type = true;

	cljs.core.Range.cljs$lang$ctorStr = "cljs.core/Range";

	cljs.core.Range.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Range");
	});

	cljs.core.__GT_Range = (function cljs$core$__GT_Range(meta,start,end,step,__hash){
	return (new cljs.core.Range(meta,start,end,step,__hash));
	});

	(cljs.core.Range.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns a lazy seq of nums from start (inclusive) to end
	 * (exclusive), by step, where start defaults to 0, step to 1,
	 * and end to infinity.
	 */
	cljs.core.range = (function cljs$core$range(var_args){
	var args4205 = [];
	var len__6099__auto___4208 = arguments.length;
	var i__6100__auto___4209 = (0);
	while(true){
	if((i__6100__auto___4209 < len__6099__auto___4208)){
	args4205.push((arguments[i__6100__auto___4209]));

	var G__4210 = (i__6100__auto___4209 + (1));
	i__6100__auto___4209 = G__4210;
	continue;
	} else {
	}
	break;
	}

	var G__4207 = args4205.length;
	switch (G__4207) {
	case 0:
	return cljs.core.range.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.range.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.range.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.range.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4205.length)].join('')));

	}
	});

	cljs.core.range.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.range.cljs$core$IFn$_invoke$arity$3((0),Number.MAX_VALUE,(1));
	});

	cljs.core.range.cljs$core$IFn$_invoke$arity$1 = (function (end){
	return cljs.core.range.cljs$core$IFn$_invoke$arity$3((0),end,(1));
	});

	cljs.core.range.cljs$core$IFn$_invoke$arity$2 = (function (start,end){
	return cljs.core.range.cljs$core$IFn$_invoke$arity$3(start,end,(1));
	});

	cljs.core.range.cljs$core$IFn$_invoke$arity$3 = (function (start,end,step){
	return (new cljs.core.Range(null,start,end,step,null));
	});

	cljs.core.range.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns a lazy seq of every nth item in coll.  Returns a stateful
	 *   transducer when no collection is provided.
	 */
	cljs.core.take_nth = (function cljs$core$take_nth(var_args){
	var args4212 = [];
	var len__6099__auto___4215 = arguments.length;
	var i__6100__auto___4216 = (0);
	while(true){
	if((i__6100__auto___4216 < len__6099__auto___4215)){
	args4212.push((arguments[i__6100__auto___4216]));

	var G__4217 = (i__6100__auto___4216 + (1));
	i__6100__auto___4216 = G__4217;
	continue;
	} else {
	}
	break;
	}

	var G__4214 = args4212.length;
	switch (G__4214) {
	case 1:
	return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4212.length)].join('')));

	}
	});

	cljs.core.take_nth.cljs$core$IFn$_invoke$arity$1 = (function (n){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	return (function (rf){
	var ia = cljs.core.volatile_BANG_((-1));
	return ((function (ia){
	return (function() {
	var G__4219 = null;
	var G__4219__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4219__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__4219__2 = (function (result,input){
	var i = cljs.core._vreset_BANG_(ia,(cljs.core._deref(ia) + (1)));
	if((cljs.core.rem(i,n) === (0))){
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	} else {
	return result;
	}
	});
	G__4219 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4219__0.call(this);
	case 1:
	return G__4219__1.call(this,result);
	case 2:
	return G__4219__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4219.cljs$core$IFn$_invoke$arity$0 = G__4219__0;
	G__4219.cljs$core$IFn$_invoke$arity$1 = G__4219__1;
	G__4219.cljs$core$IFn$_invoke$arity$2 = G__4219__2;
	return G__4219;
	})()
	;})(ia))
	});
	});

	cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	if(typeof n === 'number'){
	} else {
	throw (new Error("Assert failed: (number? n)"));
	}

	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	return cljs.core.cons(cljs.core.first(s),cljs.core.take_nth.cljs$core$IFn$_invoke$arity$2(n,cljs.core.drop.cljs$core$IFn$_invoke$arity$2(n,s)));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.take_nth.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a vector of [(take-while pred coll) (drop-while pred coll)]
	 */
	cljs.core.split_with = (function cljs$core$split_with(pred,coll){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(pred,coll),cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2(pred,coll)], null);
	});
	/**
	 * Applies f to each value in coll, splitting it each time f returns a
	 * new value.  Returns a lazy seq of partitions.  Returns a stateful
	 * transducer when no collection is provided.
	 */
	cljs.core.partition_by = (function cljs$core$partition_by(var_args){
	var args4221 = [];
	var len__6099__auto___4224 = arguments.length;
	var i__6100__auto___4225 = (0);
	while(true){
	if((i__6100__auto___4225 < len__6099__auto___4224)){
	args4221.push((arguments[i__6100__auto___4225]));

	var G__4226 = (i__6100__auto___4225 + (1));
	i__6100__auto___4225 = G__4226;
	continue;
	} else {
	}
	break;
	}

	var G__4223 = args4221.length;
	switch (G__4223) {
	case 1:
	return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4221.length)].join('')));

	}
	});

	cljs.core.partition_by.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function (rf){
	var a = cljs.core.array_list();
	var pa = cljs.core.volatile_BANG_(cljs.core.cst$kw$cljs$core_SLASH_none);
	return ((function (a,pa){
	return (function() {
	var G__4228 = null;
	var G__4228__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4228__1 = (function (result){
	var result__$1 = (cljs.core.truth_(a.isEmpty())?result:(function (){var v = cljs.core.vec(a.toArray());
	a.clear();

	return cljs.core.unreduced((rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v)));
	})());
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result__$1) : rf.call(null,result__$1));
	});
	var G__4228__2 = (function (result,input){
	var pval = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null,pa));
	var val = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(input) : f.call(null,input));
	cljs.core.vreset_BANG_(pa,val);

	if((cljs.core.keyword_identical_QMARK_(pval,cljs.core.cst$kw$cljs$core_SLASH_none)) || (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(val,pval))){
	a.add(input);

	return result;
	} else {
	var v = cljs.core.vec(a.toArray());
	a.clear();

	var ret = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,v) : rf.call(null,result,v));
	if(cljs.core.reduced_QMARK_(ret)){
	} else {
	a.add(input);
	}

	return ret;
	}
	});
	G__4228 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4228__0.call(this);
	case 1:
	return G__4228__1.call(this,result);
	case 2:
	return G__4228__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4228.cljs$core$IFn$_invoke$arity$0 = G__4228__0;
	G__4228.cljs$core$IFn$_invoke$arity$1 = G__4228__1;
	G__4228.cljs$core$IFn$_invoke$arity$2 = G__4228__2;
	return G__4228;
	})()
	;})(a,pa))
	});
	});

	cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	var fst = cljs.core.first(s);
	var fv = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(fst) : f.call(null,fst));
	var run = cljs.core.cons(fst,cljs.core.take_while.cljs$core$IFn$_invoke$arity$2(((function (fst,fv,s,temp__6738__auto__){
	return (function (p1__4220_SHARP_){
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(fv,(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(p1__4220_SHARP_) : f.call(null,p1__4220_SHARP_)));
	});})(fst,fv,s,temp__6738__auto__))
	,cljs.core.next(s)));
	return cljs.core.cons(run,cljs.core.partition_by.cljs$core$IFn$_invoke$arity$2(f,cljs.core.seq(cljs.core.drop.cljs$core$IFn$_invoke$arity$2(cljs.core.count(run),s))));
	} else {
	return null;
	}
	}),null,null));
	});

	cljs.core.partition_by.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a map from distinct items in coll to the number of times
	 *   they appear.
	 */
	cljs.core.frequencies = (function cljs$core$frequencies(coll){
	return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (counts,x){
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(counts,x,(cljs.core.get.cljs$core$IFn$_invoke$arity$3(counts,x,(0)) + (1)));
	}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),coll));
	});
	/**
	 * Returns a lazy seq of the intermediate values of the reduction (as
	 *   per reduce) of coll by f, starting with init.
	 */
	cljs.core.reductions = (function cljs$core$reductions(var_args){
	var args4229 = [];
	var len__6099__auto___4234 = arguments.length;
	var i__6100__auto___4235 = (0);
	while(true){
	if((i__6100__auto___4235 < len__6099__auto___4234)){
	args4229.push((arguments[i__6100__auto___4235]));

	var G__4236 = (i__6100__auto___4235 + (1));
	i__6100__auto___4235 = G__4236;
	continue;
	} else {
	}
	break;
	}

	var G__4231 = args4229.length;
	switch (G__4231) {
	case 2:
	return cljs.core.reductions.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4229.length)].join('')));

	}
	});

	cljs.core.reductions.cljs$core$IFn$_invoke$arity$2 = (function (f,coll){
	return (new cljs.core.LazySeq(null,(function (){
	var temp__6736__auto__ = cljs.core.seq(coll);
	if(temp__6736__auto__){
	var s = temp__6736__auto__;
	return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f,cljs.core.first(s),cljs.core.rest(s));
	} else {
	var x__5940__auto__ = (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto__);
	}
	}),null,null));
	});

	cljs.core.reductions.cljs$core$IFn$_invoke$arity$3 = (function (f,init,coll){
	if(cljs.core.reduced_QMARK_(init)){
	var x__5940__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(init) : cljs.core.deref.call(null,init));
	return cljs.core._conj(cljs.core.List.EMPTY,x__5940__auto__);
	} else {
	return cljs.core.cons(init,(new cljs.core.LazySeq(null,(function (){
	var temp__6738__auto__ = cljs.core.seq(coll);
	if(temp__6738__auto__){
	var s = temp__6738__auto__;
	return cljs.core.reductions.cljs$core$IFn$_invoke$arity$3(f,(function (){var G__4232 = init;
	var G__4233 = cljs.core.first(s);
	return (f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(G__4232,G__4233) : f.call(null,G__4232,G__4233));
	})(),cljs.core.rest(s));
	} else {
	return null;
	}
	}),null,null)));
	}
	});

	cljs.core.reductions.cljs$lang$maxFixedArity = 3;

	/**
	 * Takes a set of functions and returns a fn that is the juxtaposition
	 *   of those fns.  The returned fn takes a variable number of args, and
	 *   returns a vector containing the result of applying each fn to the
	 *   args (left-to-right).
	 *   ((juxt a b c) x) => [(a x) (b x) (c x)]
	 */
	cljs.core.juxt = (function cljs$core$juxt(var_args){
	var args4248 = [];
	var len__6099__auto___4255 = arguments.length;
	var i__6100__auto___4256 = (0);
	while(true){
	if((i__6100__auto___4256 < len__6099__auto___4255)){
	args4248.push((arguments[i__6100__auto___4256]));

	var G__4257 = (i__6100__auto___4256 + (1));
	i__6100__auto___4256 = G__4257;
	continue;
	} else {
	}
	break;
	}

	var G__4254 = args4248.length;
	switch (G__4254) {
	case 1:
	return cljs.core.juxt.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.juxt.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.juxt.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4248.slice((3)),(0),null));
	return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),(arguments[(2)]),argseq__6118__auto__);

	}
	});

	cljs.core.juxt.cljs$core$IFn$_invoke$arity$1 = (function (f){
	return (function() {
	var G__4259 = null;
	var G__4259__0 = (function (){
	return (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null))],null));
	});
	var G__4259__1 = (function (x){
	return (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x))],null));
	});
	var G__4259__2 = (function (x,y){
	return (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y))],null));
	});
	var G__4259__3 = (function (x,y,z){
	return (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x,y,z) : f.call(null,x,y,z))],null));
	});
	var G__4259__4 = (function() { 
	var G__4260__delegate = function (x,y,z,args){
	return (new cljs.core.PersistentVector(null,1,(5),cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,x,y,z,args)],null));
	};
	var G__4260 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__4261__i = 0, G__4261__a = new Array(arguments.length -  3);
	while (G__4261__i < G__4261__a.length) {G__4261__a[G__4261__i] = arguments[G__4261__i + 3]; ++G__4261__i;}
	  args = new cljs.core.IndexedSeq(G__4261__a,0,null);
	} 
	return G__4260__delegate.call(this,x,y,z,args);};
	G__4260.cljs$lang$maxFixedArity = 3;
	G__4260.cljs$lang$applyTo = (function (arglist__4262){
	var x = cljs.core.first(arglist__4262);
	arglist__4262 = cljs.core.next(arglist__4262);
	var y = cljs.core.first(arglist__4262);
	arglist__4262 = cljs.core.next(arglist__4262);
	var z = cljs.core.first(arglist__4262);
	var args = cljs.core.rest(arglist__4262);
	return G__4260__delegate(x,y,z,args);
	});
	G__4260.cljs$core$IFn$_invoke$arity$variadic = G__4260__delegate;
	return G__4260;
	})()
	;
	G__4259 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__4259__0.call(this);
	case 1:
	return G__4259__1.call(this,x);
	case 2:
	return G__4259__2.call(this,x,y);
	case 3:
	return G__4259__3.call(this,x,y,z);
	default:
	var G__4263 = null;
	if (arguments.length > 3) {
	var G__4264__i = 0, G__4264__a = new Array(arguments.length -  3);
	while (G__4264__i < G__4264__a.length) {G__4264__a[G__4264__i] = arguments[G__4264__i + 3]; ++G__4264__i;}
	G__4263 = new cljs.core.IndexedSeq(G__4264__a,0,null);
	}
	return G__4259__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__4263);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4259.cljs$lang$maxFixedArity = 3;
	G__4259.cljs$lang$applyTo = G__4259__4.cljs$lang$applyTo;
	G__4259.cljs$core$IFn$_invoke$arity$0 = G__4259__0;
	G__4259.cljs$core$IFn$_invoke$arity$1 = G__4259__1;
	G__4259.cljs$core$IFn$_invoke$arity$2 = G__4259__2;
	G__4259.cljs$core$IFn$_invoke$arity$3 = G__4259__3;
	G__4259.cljs$core$IFn$_invoke$arity$variadic = G__4259__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__4259;
	})()
	});

	cljs.core.juxt.cljs$core$IFn$_invoke$arity$2 = (function (f,g){
	return (function() {
	var G__4265 = null;
	var G__4265__0 = (function (){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),(g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null))],null));
	});
	var G__4265__1 = (function (x){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x)),(g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null,x))],null));
	});
	var G__4265__2 = (function (x,y){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y)),(g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x,y) : g.call(null,x,y))],null));
	});
	var G__4265__3 = (function (x,y,z){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x,y,z) : f.call(null,x,y,z)),(g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x,y,z) : g.call(null,x,y,z))],null));
	});
	var G__4265__4 = (function() { 
	var G__4266__delegate = function (x,y,z,args){
	return (new cljs.core.PersistentVector(null,2,(5),cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,x,y,z,args),cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g,x,y,z,args)],null));
	};
	var G__4266 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__4267__i = 0, G__4267__a = new Array(arguments.length -  3);
	while (G__4267__i < G__4267__a.length) {G__4267__a[G__4267__i] = arguments[G__4267__i + 3]; ++G__4267__i;}
	  args = new cljs.core.IndexedSeq(G__4267__a,0,null);
	} 
	return G__4266__delegate.call(this,x,y,z,args);};
	G__4266.cljs$lang$maxFixedArity = 3;
	G__4266.cljs$lang$applyTo = (function (arglist__4268){
	var x = cljs.core.first(arglist__4268);
	arglist__4268 = cljs.core.next(arglist__4268);
	var y = cljs.core.first(arglist__4268);
	arglist__4268 = cljs.core.next(arglist__4268);
	var z = cljs.core.first(arglist__4268);
	var args = cljs.core.rest(arglist__4268);
	return G__4266__delegate(x,y,z,args);
	});
	G__4266.cljs$core$IFn$_invoke$arity$variadic = G__4266__delegate;
	return G__4266;
	})()
	;
	G__4265 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__4265__0.call(this);
	case 1:
	return G__4265__1.call(this,x);
	case 2:
	return G__4265__2.call(this,x,y);
	case 3:
	return G__4265__3.call(this,x,y,z);
	default:
	var G__4269 = null;
	if (arguments.length > 3) {
	var G__4270__i = 0, G__4270__a = new Array(arguments.length -  3);
	while (G__4270__i < G__4270__a.length) {G__4270__a[G__4270__i] = arguments[G__4270__i + 3]; ++G__4270__i;}
	G__4269 = new cljs.core.IndexedSeq(G__4270__a,0,null);
	}
	return G__4265__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__4269);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4265.cljs$lang$maxFixedArity = 3;
	G__4265.cljs$lang$applyTo = G__4265__4.cljs$lang$applyTo;
	G__4265.cljs$core$IFn$_invoke$arity$0 = G__4265__0;
	G__4265.cljs$core$IFn$_invoke$arity$1 = G__4265__1;
	G__4265.cljs$core$IFn$_invoke$arity$2 = G__4265__2;
	G__4265.cljs$core$IFn$_invoke$arity$3 = G__4265__3;
	G__4265.cljs$core$IFn$_invoke$arity$variadic = G__4265__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__4265;
	})()
	});

	cljs.core.juxt.cljs$core$IFn$_invoke$arity$3 = (function (f,g,h){
	return (function() {
	var G__4271 = null;
	var G__4271__0 = (function (){
	return (new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null)),(g.cljs$core$IFn$_invoke$arity$0 ? g.cljs$core$IFn$_invoke$arity$0() : g.call(null)),(h.cljs$core$IFn$_invoke$arity$0 ? h.cljs$core$IFn$_invoke$arity$0() : h.call(null))],null));
	});
	var G__4271__1 = (function (x){
	return (new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x)),(g.cljs$core$IFn$_invoke$arity$1 ? g.cljs$core$IFn$_invoke$arity$1(x) : g.call(null,x)),(h.cljs$core$IFn$_invoke$arity$1 ? h.cljs$core$IFn$_invoke$arity$1(x) : h.call(null,x))],null));
	});
	var G__4271__2 = (function (x,y){
	return (new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$2 ? f.cljs$core$IFn$_invoke$arity$2(x,y) : f.call(null,x,y)),(g.cljs$core$IFn$_invoke$arity$2 ? g.cljs$core$IFn$_invoke$arity$2(x,y) : g.call(null,x,y)),(h.cljs$core$IFn$_invoke$arity$2 ? h.cljs$core$IFn$_invoke$arity$2(x,y) : h.call(null,x,y))],null));
	});
	var G__4271__3 = (function (x,y,z){
	return (new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[(f.cljs$core$IFn$_invoke$arity$3 ? f.cljs$core$IFn$_invoke$arity$3(x,y,z) : f.call(null,x,y,z)),(g.cljs$core$IFn$_invoke$arity$3 ? g.cljs$core$IFn$_invoke$arity$3(x,y,z) : g.call(null,x,y,z)),(h.cljs$core$IFn$_invoke$arity$3 ? h.cljs$core$IFn$_invoke$arity$3(x,y,z) : h.call(null,x,y,z))],null));
	});
	var G__4271__4 = (function() { 
	var G__4272__delegate = function (x,y,z,args){
	return (new cljs.core.PersistentVector(null,3,(5),cljs.core.PersistentVector.EMPTY_NODE,[cljs.core.apply.cljs$core$IFn$_invoke$arity$5(f,x,y,z,args),cljs.core.apply.cljs$core$IFn$_invoke$arity$5(g,x,y,z,args),cljs.core.apply.cljs$core$IFn$_invoke$arity$5(h,x,y,z,args)],null));
	};
	var G__4272 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__4273__i = 0, G__4273__a = new Array(arguments.length -  3);
	while (G__4273__i < G__4273__a.length) {G__4273__a[G__4273__i] = arguments[G__4273__i + 3]; ++G__4273__i;}
	  args = new cljs.core.IndexedSeq(G__4273__a,0,null);
	} 
	return G__4272__delegate.call(this,x,y,z,args);};
	G__4272.cljs$lang$maxFixedArity = 3;
	G__4272.cljs$lang$applyTo = (function (arglist__4274){
	var x = cljs.core.first(arglist__4274);
	arglist__4274 = cljs.core.next(arglist__4274);
	var y = cljs.core.first(arglist__4274);
	arglist__4274 = cljs.core.next(arglist__4274);
	var z = cljs.core.first(arglist__4274);
	var args = cljs.core.rest(arglist__4274);
	return G__4272__delegate(x,y,z,args);
	});
	G__4272.cljs$core$IFn$_invoke$arity$variadic = G__4272__delegate;
	return G__4272;
	})()
	;
	G__4271 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__4271__0.call(this);
	case 1:
	return G__4271__1.call(this,x);
	case 2:
	return G__4271__2.call(this,x,y);
	case 3:
	return G__4271__3.call(this,x,y,z);
	default:
	var G__4275 = null;
	if (arguments.length > 3) {
	var G__4276__i = 0, G__4276__a = new Array(arguments.length -  3);
	while (G__4276__i < G__4276__a.length) {G__4276__a[G__4276__i] = arguments[G__4276__i + 3]; ++G__4276__i;}
	G__4275 = new cljs.core.IndexedSeq(G__4276__a,0,null);
	}
	return G__4271__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__4275);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4271.cljs$lang$maxFixedArity = 3;
	G__4271.cljs$lang$applyTo = G__4271__4.cljs$lang$applyTo;
	G__4271.cljs$core$IFn$_invoke$arity$0 = G__4271__0;
	G__4271.cljs$core$IFn$_invoke$arity$1 = G__4271__1;
	G__4271.cljs$core$IFn$_invoke$arity$2 = G__4271__2;
	G__4271.cljs$core$IFn$_invoke$arity$3 = G__4271__3;
	G__4271.cljs$core$IFn$_invoke$arity$variadic = G__4271__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__4271;
	})()
	});

	cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic = (function (f,g,h,fs){
	var fs__$1 = cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$4(f,g,h,fs);
	return ((function (fs__$1){
	return (function() {
	var G__4277 = null;
	var G__4277__0 = (function (){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (fs__$1){
	return (function (p1__4238_SHARP_,p2__4239_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4238_SHARP_,(p2__4239_SHARP_.cljs$core$IFn$_invoke$arity$0 ? p2__4239_SHARP_.cljs$core$IFn$_invoke$arity$0() : p2__4239_SHARP_.call(null)));
	});})(fs__$1))
	,cljs.core.PersistentVector.EMPTY,fs__$1);
	});
	var G__4277__1 = (function (x){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (fs__$1){
	return (function (p1__4240_SHARP_,p2__4241_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4240_SHARP_,(p2__4241_SHARP_.cljs$core$IFn$_invoke$arity$1 ? p2__4241_SHARP_.cljs$core$IFn$_invoke$arity$1(x) : p2__4241_SHARP_.call(null,x)));
	});})(fs__$1))
	,cljs.core.PersistentVector.EMPTY,fs__$1);
	});
	var G__4277__2 = (function (x,y){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (fs__$1){
	return (function (p1__4242_SHARP_,p2__4243_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4242_SHARP_,(p2__4243_SHARP_.cljs$core$IFn$_invoke$arity$2 ? p2__4243_SHARP_.cljs$core$IFn$_invoke$arity$2(x,y) : p2__4243_SHARP_.call(null,x,y)));
	});})(fs__$1))
	,cljs.core.PersistentVector.EMPTY,fs__$1);
	});
	var G__4277__3 = (function (x,y,z){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (fs__$1){
	return (function (p1__4244_SHARP_,p2__4245_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4244_SHARP_,(p2__4245_SHARP_.cljs$core$IFn$_invoke$arity$3 ? p2__4245_SHARP_.cljs$core$IFn$_invoke$arity$3(x,y,z) : p2__4245_SHARP_.call(null,x,y,z)));
	});})(fs__$1))
	,cljs.core.PersistentVector.EMPTY,fs__$1);
	});
	var G__4277__4 = (function() { 
	var G__4278__delegate = function (x,y,z,args){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (fs__$1){
	return (function (p1__4246_SHARP_,p2__4247_SHARP_){
	return cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4246_SHARP_,cljs.core.apply.cljs$core$IFn$_invoke$arity$5(p2__4247_SHARP_,x,y,z,args));
	});})(fs__$1))
	,cljs.core.PersistentVector.EMPTY,fs__$1);
	};
	var G__4278 = function (x,y,z,var_args){
	var args = null;
	if (arguments.length > 3) {
	var G__4279__i = 0, G__4279__a = new Array(arguments.length -  3);
	while (G__4279__i < G__4279__a.length) {G__4279__a[G__4279__i] = arguments[G__4279__i + 3]; ++G__4279__i;}
	  args = new cljs.core.IndexedSeq(G__4279__a,0,null);
	} 
	return G__4278__delegate.call(this,x,y,z,args);};
	G__4278.cljs$lang$maxFixedArity = 3;
	G__4278.cljs$lang$applyTo = (function (arglist__4280){
	var x = cljs.core.first(arglist__4280);
	arglist__4280 = cljs.core.next(arglist__4280);
	var y = cljs.core.first(arglist__4280);
	arglist__4280 = cljs.core.next(arglist__4280);
	var z = cljs.core.first(arglist__4280);
	var args = cljs.core.rest(arglist__4280);
	return G__4278__delegate(x,y,z,args);
	});
	G__4278.cljs$core$IFn$_invoke$arity$variadic = G__4278__delegate;
	return G__4278;
	})()
	;
	G__4277 = function(x,y,z,var_args){
	var args = var_args;
	switch(arguments.length){
	case 0:
	return G__4277__0.call(this);
	case 1:
	return G__4277__1.call(this,x);
	case 2:
	return G__4277__2.call(this,x,y);
	case 3:
	return G__4277__3.call(this,x,y,z);
	default:
	var G__4281 = null;
	if (arguments.length > 3) {
	var G__4282__i = 0, G__4282__a = new Array(arguments.length -  3);
	while (G__4282__i < G__4282__a.length) {G__4282__a[G__4282__i] = arguments[G__4282__i + 3]; ++G__4282__i;}
	G__4281 = new cljs.core.IndexedSeq(G__4282__a,0,null);
	}
	return G__4277__4.cljs$core$IFn$_invoke$arity$variadic(x,y,z, G__4281);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4277.cljs$lang$maxFixedArity = 3;
	G__4277.cljs$lang$applyTo = G__4277__4.cljs$lang$applyTo;
	G__4277.cljs$core$IFn$_invoke$arity$0 = G__4277__0;
	G__4277.cljs$core$IFn$_invoke$arity$1 = G__4277__1;
	G__4277.cljs$core$IFn$_invoke$arity$2 = G__4277__2;
	G__4277.cljs$core$IFn$_invoke$arity$3 = G__4277__3;
	G__4277.cljs$core$IFn$_invoke$arity$variadic = G__4277__4.cljs$core$IFn$_invoke$arity$variadic;
	return G__4277;
	})()
	;})(fs__$1))
	});

	cljs.core.juxt.cljs$lang$applyTo = (function (seq4249){
	var G__4250 = cljs.core.first(seq4249);
	var seq4249__$1 = cljs.core.next(seq4249);
	var G__4251 = cljs.core.first(seq4249__$1);
	var seq4249__$2 = cljs.core.next(seq4249__$1);
	var G__4252 = cljs.core.first(seq4249__$2);
	var seq4249__$3 = cljs.core.next(seq4249__$2);
	return cljs.core.juxt.cljs$core$IFn$_invoke$arity$variadic(G__4250,G__4251,G__4252,seq4249__$3);
	});

	cljs.core.juxt.cljs$lang$maxFixedArity = (3);

	/**
	 * When lazy sequences are produced via functions that have side
	 *   effects, any effects other than those needed to produce the first
	 *   element in the seq do not occur until the seq is consumed. dorun can
	 *   be used to force any effects. Walks through the successive nexts of
	 *   the seq, does not retain the head and returns nil.
	 */
	cljs.core.dorun = (function cljs$core$dorun(var_args){
	var args4283 = [];
	var len__6099__auto___4286 = arguments.length;
	var i__6100__auto___4287 = (0);
	while(true){
	if((i__6100__auto___4287 < len__6099__auto___4286)){
	args4283.push((arguments[i__6100__auto___4287]));

	var G__4288 = (i__6100__auto___4287 + (1));
	i__6100__auto___4287 = G__4288;
	continue;
	} else {
	}
	break;
	}

	var G__4285 = args4283.length;
	switch (G__4285) {
	case 1:
	return cljs.core.dorun.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.dorun.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4283.length)].join('')));

	}
	});

	cljs.core.dorun.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	while(true){
	if(cljs.core.seq(coll)){
	var G__4290 = cljs.core.next(coll);
	coll = G__4290;
	continue;
	} else {
	return null;
	}
	break;
	}
	});

	cljs.core.dorun.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	while(true){
	if((cljs.core.seq(coll)) && ((n > (0)))){
	var G__4291 = (n - (1));
	var G__4292 = cljs.core.next(coll);
	n = G__4291;
	coll = G__4292;
	continue;
	} else {
	return null;
	}
	break;
	}
	});

	cljs.core.dorun.cljs$lang$maxFixedArity = 2;

	/**
	 * When lazy sequences are produced via functions that have side
	 *   effects, any effects other than those needed to produce the first
	 *   element in the seq do not occur until the seq is consumed. doall can
	 *   be used to force any effects. Walks through the successive nexts of
	 *   the seq, retains the head and returns it, thus causing the entire
	 *   seq to reside in memory at one time.
	 */
	cljs.core.doall = (function cljs$core$doall(var_args){
	var args4293 = [];
	var len__6099__auto___4296 = arguments.length;
	var i__6100__auto___4297 = (0);
	while(true){
	if((i__6100__auto___4297 < len__6099__auto___4296)){
	args4293.push((arguments[i__6100__auto___4297]));

	var G__4298 = (i__6100__auto___4297 + (1));
	i__6100__auto___4297 = G__4298;
	continue;
	} else {
	}
	break;
	}

	var G__4295 = args4293.length;
	switch (G__4295) {
	case 1:
	return cljs.core.doall.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.doall.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4293.length)].join('')));

	}
	});

	cljs.core.doall.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	cljs.core.dorun.cljs$core$IFn$_invoke$arity$1(coll);

	return coll;
	});

	cljs.core.doall.cljs$core$IFn$_invoke$arity$2 = (function (n,coll){
	cljs.core.dorun.cljs$core$IFn$_invoke$arity$2(n,coll);

	return coll;
	});

	cljs.core.doall.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns true if x is a JavaScript RegExp instance.
	 */
	cljs.core.regexp_QMARK_ = (function cljs$core$regexp_QMARK_(x){
	return (x instanceof RegExp);
	});
	/**
	 * Returns the result of (re-find re s) if re fully matches s.
	 */
	cljs.core.re_matches = (function cljs$core$re_matches(re,s){
	if(typeof s === 'string'){
	var matches = re.exec(s);
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(cljs.core.first(matches),s)){
	if((cljs.core.count(matches) === (1))){
	return cljs.core.first(matches);
	} else {
	return cljs.core.vec(matches);
	}
	} else {
	return null;
	}
	} else {
	throw (new TypeError("re-matches must match against a string."));
	}
	});
	/**
	 * Returns the first regex match, if any, of s to re, using
	 *   re.exec(s). Returns a vector, containing first the matching
	 *   substring, then any capturing groups if the regular expression contains
	 *   capturing groups.
	 */
	cljs.core.re_find = (function cljs$core$re_find(re,s){
	if(typeof s === 'string'){
	var matches = re.exec(s);
	if((matches == null)){
	return null;
	} else {
	if((cljs.core.count(matches) === (1))){
	return cljs.core.first(matches);
	} else {
	return cljs.core.vec(matches);
	}
	}
	} else {
	throw (new TypeError("re-find must match against a string."));
	}
	});
	/**
	 * Returns a lazy sequence of successive matches of re in s.
	 */
	cljs.core.re_seq = (function cljs$core$re_seq(re,s){
	var match_data = cljs.core.re_find(re,s);
	var match_idx = s.search(re);
	var match_str = ((cljs.core.coll_QMARK_(match_data))?cljs.core.first(match_data):match_data);
	var post_match = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,(match_idx + cljs.core.count(match_str)));
	if(cljs.core.truth_(match_data)){
	return (new cljs.core.LazySeq(null,((function (match_data,match_idx,match_str,post_match){
	return (function (){
	return cljs.core.cons(match_data,((cljs.core.seq(post_match))?(cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2 ? cljs.core.re_seq.cljs$core$IFn$_invoke$arity$2(re,post_match) : cljs.core.re_seq.call(null,re,post_match)):null));
	});})(match_data,match_idx,match_str,post_match))
	,null,null));
	} else {
	return null;
	}
	});
	/**
	 * Returns an instance of RegExp which has compiled the provided string.
	 */
	cljs.core.re_pattern = (function cljs$core$re_pattern(s){
	if((s instanceof RegExp)){
	return s;
	} else {
	var vec__4303 = cljs.core.re_find(/^\(\?([idmsux]*)\)/,s);
	var prefix = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4303,(0),null);
	var flags = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4303,(1),null);
	var pattern = cljs.core.subs.cljs$core$IFn$_invoke$arity$2(s,cljs.core.count(prefix));
	return (new RegExp(pattern,(function (){var or__5450__auto__ = flags;
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return "";
	}
	})()));
	}
	});
	cljs.core.pr_sequential_writer = (function cljs$core$pr_sequential_writer(writer,print_one,begin,sep,end,opts,coll){
	var _STAR_print_level_STAR_4313 = cljs.core._STAR_print_level_STAR_;
	cljs.core._STAR_print_level_STAR_ = (((cljs.core._STAR_print_level_STAR_ == null))?null:(cljs.core._STAR_print_level_STAR_ - (1)));

	try{if((!((cljs.core._STAR_print_level_STAR_ == null))) && ((cljs.core._STAR_print_level_STAR_ < (0)))){
	return cljs.core._write(writer,"#");
	} else {
	cljs.core._write(writer,begin);

	if((cljs.core.cst$kw$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts) === (0))){
	if(cljs.core.seq(coll)){
	cljs.core._write(writer,(function (){var or__5450__auto__ = cljs.core.cst$kw$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return "...";
	}
	})());
	} else {
	}
	} else {
	if(cljs.core.seq(coll)){
	var G__4314_4320 = cljs.core.first(coll);
	var G__4315_4321 = writer;
	var G__4316_4322 = opts;
	(print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4314_4320,G__4315_4321,G__4316_4322) : print_one.call(null,G__4314_4320,G__4315_4321,G__4316_4322));
	} else {
	}

	var coll_4323__$1 = cljs.core.next(coll);
	var n_4324 = (cljs.core.cst$kw$print_DASH_length.cljs$core$IFn$_invoke$arity$1(opts) - (1));
	while(true){
	if((coll_4323__$1) && (((n_4324 == null)) || (!((n_4324 === (0)))))){
	cljs.core._write(writer,sep);

	var G__4317_4325 = cljs.core.first(coll_4323__$1);
	var G__4318_4326 = writer;
	var G__4319_4327 = opts;
	(print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4317_4325,G__4318_4326,G__4319_4327) : print_one.call(null,G__4317_4325,G__4318_4326,G__4319_4327));

	var G__4328 = cljs.core.next(coll_4323__$1);
	var G__4329 = (n_4324 - (1));
	coll_4323__$1 = G__4328;
	n_4324 = G__4329;
	continue;
	} else {
	if((cljs.core.seq(coll_4323__$1)) && ((n_4324 === (0)))){
	cljs.core._write(writer,sep);

	cljs.core._write(writer,(function (){var or__5450__auto__ = cljs.core.cst$kw$more_DASH_marker.cljs$core$IFn$_invoke$arity$1(opts);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return "...";
	}
	})());
	} else {
	}
	}
	break;
	}
	}

	return cljs.core._write(writer,end);
	}
	}finally {cljs.core._STAR_print_level_STAR_ = _STAR_print_level_STAR_4313;
	}});
	cljs.core.write_all = (function cljs$core$write_all(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4336 = arguments.length;
	var i__6100__auto___4337 = (0);
	while(true){
	if((i__6100__auto___4337 < len__6099__auto___4336)){
	args__6102__auto__.push((arguments[i__6100__auto___4337]));

	var G__4338 = (i__6100__auto___4337 + (1));
	i__6100__auto___4337 = G__4338;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((1) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((1)),(0),null)):null);
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6103__auto__);
	});

	cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic = (function (writer,ss){
	var seq__4332 = cljs.core.seq(ss);
	var chunk__4333 = null;
	var count__4334 = (0);
	var i__4335 = (0);
	while(true){
	if((i__4335 < count__4334)){
	var s = chunk__4333.cljs$core$IIndexed$_nth$arity$2(null,i__4335);
	cljs.core._write(writer,s);

	var G__4339 = seq__4332;
	var G__4340 = chunk__4333;
	var G__4341 = count__4334;
	var G__4342 = (i__4335 + (1));
	seq__4332 = G__4339;
	chunk__4333 = G__4340;
	count__4334 = G__4341;
	i__4335 = G__4342;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__4332);
	if(temp__6738__auto__){
	var seq__4332__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__4332__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__4332__$1);
	var G__4343 = cljs.core.chunk_rest(seq__4332__$1);
	var G__4344 = c__5929__auto__;
	var G__4345 = cljs.core.count(c__5929__auto__);
	var G__4346 = (0);
	seq__4332 = G__4343;
	chunk__4333 = G__4344;
	count__4334 = G__4345;
	i__4335 = G__4346;
	continue;
	} else {
	var s = cljs.core.first(seq__4332__$1);
	cljs.core._write(writer,s);

	var G__4347 = cljs.core.next(seq__4332__$1);
	var G__4348 = null;
	var G__4349 = (0);
	var G__4350 = (0);
	seq__4332 = G__4347;
	chunk__4333 = G__4348;
	count__4334 = G__4349;
	i__4335 = G__4350;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});

	cljs.core.write_all.cljs$lang$maxFixedArity = (1);

	cljs.core.write_all.cljs$lang$applyTo = (function (seq4330){
	var G__4331 = cljs.core.first(seq4330);
	var seq4330__$1 = cljs.core.next(seq4330);
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(G__4331,seq4330__$1);
	});

	cljs.core.string_print = (function cljs$core$string_print(x){
	(cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1 ? cljs.core._STAR_print_fn_STAR_.cljs$core$IFn$_invoke$arity$1(x) : cljs.core._STAR_print_fn_STAR_.call(null,x));

	return null;
	});
	cljs.core.flush = (function cljs$core$flush(){
	return null;
	});
	cljs.core.char_escapes = (function (){var obj4352 = {"\"":"\\\"","\\":"\\\\","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t"};
	return obj4352;
	})();
	cljs.core.quote_string = (function cljs$core$quote_string(s){
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1("\""),cljs.core.str.cljs$core$IFn$_invoke$arity$1(s.replace(RegExp("[\\\\\"\b\f\n\r\t]","g"),(function (match){
	return (cljs.core.char_escapes[match]);
	}))),cljs.core.str.cljs$core$IFn$_invoke$arity$1("\"")].join('');
	});
	cljs.core.print_meta_QMARK_ = (function cljs$core$print_meta_QMARK_(opts,obj){
	var and__5442__auto__ = cljs.core.boolean$(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$meta));
	if(and__5442__auto__){
	var and__5442__auto____$1 = ((!((obj == null)))?((((obj.cljs$lang$protocol_mask$partition0$ & (131072))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IMeta$)))?true:false):false);
	if(and__5442__auto____$1){
	return !((cljs.core.meta(obj) == null));
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	});
	cljs.core.pr_writer_impl = (function cljs$core$pr_writer_impl(obj,writer,opts){
	if((obj == null)){
	return cljs.core._write(writer,"nil");
	} else {
	if(cljs.core.print_meta_QMARK_(opts,obj)){
	cljs.core._write(writer,"^");

	var G__4367_4375 = cljs.core.meta(obj);
	var G__4368_4376 = writer;
	var G__4369_4377 = opts;
	(cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3 ? cljs.core.pr_writer.cljs$core$IFn$_invoke$arity$3(G__4367_4375,G__4368_4376,G__4369_4377) : cljs.core.pr_writer.call(null,G__4367_4375,G__4368_4376,G__4369_4377));

	cljs.core._write(writer," ");
	} else {
	}

	if(obj.cljs$lang$type){
	return obj.cljs$lang$ctorPrWriter(obj,writer,opts);
	} else {
	if(((!((obj == null)))?((((obj.cljs$lang$protocol_mask$partition0$ & (2147483648))) || ((cljs.core.PROTOCOL_SENTINEL === obj.cljs$core$IPrintWithWriter$)))?true:false):false)){
	return obj.cljs$core$IPrintWithWriter$_pr_writer$arity$3(null,writer,opts);
	} else {
	if((obj === true) || (obj === false) || (typeof obj === 'number')){
	return cljs.core._write(writer,[cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(''));
	} else {
	if(cljs.core.object_QMARK_(obj)){
	cljs.core._write(writer,"#js ");

	var G__4371 = cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (k){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.keyword.cljs$core$IFn$_invoke$arity$1(k),(obj[k])], null);
	}),cljs.core.js_keys(obj));
	var G__4372 = cljs.core.pr_writer;
	var G__4373 = writer;
	var G__4374 = opts;
	return (cljs.core.print_map.cljs$core$IFn$_invoke$arity$4 ? cljs.core.print_map.cljs$core$IFn$_invoke$arity$4(G__4371,G__4372,G__4373,G__4374) : cljs.core.print_map.call(null,G__4371,G__4372,G__4373,G__4374));
	} else {
	if(cljs.core.array_QMARK_(obj)){
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"#js ["," ","]",opts,obj);
	} else {
	if(goog.isString(obj)){
	if(cljs.core.truth_(cljs.core.cst$kw$readably.cljs$core$IFn$_invoke$arity$1(opts))){
	return cljs.core._write(writer,cljs.core.quote_string(obj));
	} else {
	return cljs.core._write(writer,obj);
	}
	} else {
	if(goog.isFunction(obj)){
	var name = obj.name;
	var name__$1 = (cljs.core.truth_((function (){var or__5450__auto__ = (name == null);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return goog.string.isEmpty(name);
	}
	})())?"Function":name);
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer,cljs.core.array_seq(["#object[",name__$1," \"",[cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(''),"\"]"], 0));
	} else {
	if((obj instanceof Date)){
	var normalize = (function (n,len){
	var ns = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(n)].join('');
	while(true){
	if((cljs.core.count(ns) < len)){
	var G__4378 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1("0"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join('');
	ns = G__4378;
	continue;
	} else {
	return ns;
	}
	break;
	}
	});
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer,cljs.core.array_seq(["#inst \"",[cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj.getUTCFullYear())].join(''),"-",normalize((obj.getUTCMonth() + (1)),(2)),"-",normalize(obj.getUTCDate(),(2)),"T",normalize(obj.getUTCHours(),(2)),":",normalize(obj.getUTCMinutes(),(2)),":",normalize(obj.getUTCSeconds(),(2)),".",normalize(obj.getUTCMilliseconds(),(3)),"-","00:00\""], 0));
	} else {
	if(cljs.core.regexp_QMARK_(obj)){
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer,cljs.core.array_seq(["#\"",obj.source,"\""], 0));
	} else {
	if(cljs.core.truth_(obj.constructor.cljs$lang$ctorStr)){
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer,cljs.core.array_seq(["#object[",obj.constructor.cljs$lang$ctorStr.replace((new RegExp("/","g")),"."),"]"], 0));
	} else {
	var name = obj.constructor.name;
	var name__$1 = (cljs.core.truth_((function (){var or__5450__auto__ = (name == null);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return goog.string.isEmpty(name);
	}
	})())?"Object":name);
	return cljs.core.write_all.cljs$core$IFn$_invoke$arity$variadic(writer,cljs.core.array_seq(["#object[",name__$1," ",[cljs.core.str.cljs$core$IFn$_invoke$arity$1(obj)].join(''),"]"], 0));
	}

	}
	}
	}
	}
	}
	}
	}
	}
	}

	}
	});
	/**
	 * Prefer this to pr-seq, because it makes the printing function
	 * configurable, allowing efficient implementations such as appending
	 * to a StringBuffer.
	 */
	cljs.core.pr_writer = (function cljs$core$pr_writer(obj,writer,opts){
	var temp__6736__auto__ = cljs.core.cst$kw$alt_DASH_impl.cljs$core$IFn$_invoke$arity$1(opts);
	if(cljs.core.truth_(temp__6736__auto__)){
	var alt_impl = temp__6736__auto__;
	var G__4382 = obj;
	var G__4383 = writer;
	var G__4384 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(opts,cljs.core.cst$kw$fallback_DASH_impl,cljs.core.pr_writer_impl);
	return (alt_impl.cljs$core$IFn$_invoke$arity$3 ? alt_impl.cljs$core$IFn$_invoke$arity$3(G__4382,G__4383,G__4384) : alt_impl.call(null,G__4382,G__4383,G__4384));
	} else {
	return cljs.core.pr_writer_impl(obj,writer,opts);
	}
	});
	cljs.core.pr_seq_writer = (function cljs$core$pr_seq_writer(objs,writer,opts){
	cljs.core.pr_writer(cljs.core.first(objs),writer,opts);

	var seq__4389 = cljs.core.seq(cljs.core.next(objs));
	var chunk__4390 = null;
	var count__4391 = (0);
	var i__4392 = (0);
	while(true){
	if((i__4392 < count__4391)){
	var obj = chunk__4390.cljs$core$IIndexed$_nth$arity$2(null,i__4392);
	cljs.core._write(writer," ");

	cljs.core.pr_writer(obj,writer,opts);

	var G__4393 = seq__4389;
	var G__4394 = chunk__4390;
	var G__4395 = count__4391;
	var G__4396 = (i__4392 + (1));
	seq__4389 = G__4393;
	chunk__4390 = G__4394;
	count__4391 = G__4395;
	i__4392 = G__4396;
	continue;
	} else {
	var temp__6738__auto__ = cljs.core.seq(seq__4389);
	if(temp__6738__auto__){
	var seq__4389__$1 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(seq__4389__$1)){
	var c__5929__auto__ = cljs.core.chunk_first(seq__4389__$1);
	var G__4397 = cljs.core.chunk_rest(seq__4389__$1);
	var G__4398 = c__5929__auto__;
	var G__4399 = cljs.core.count(c__5929__auto__);
	var G__4400 = (0);
	seq__4389 = G__4397;
	chunk__4390 = G__4398;
	count__4391 = G__4399;
	i__4392 = G__4400;
	continue;
	} else {
	var obj = cljs.core.first(seq__4389__$1);
	cljs.core._write(writer," ");

	cljs.core.pr_writer(obj,writer,opts);

	var G__4401 = cljs.core.next(seq__4389__$1);
	var G__4402 = null;
	var G__4403 = (0);
	var G__4404 = (0);
	seq__4389 = G__4401;
	chunk__4390 = G__4402;
	count__4391 = G__4403;
	i__4392 = G__4404;
	continue;
	}
	} else {
	return null;
	}
	}
	break;
	}
	});
	cljs.core.pr_sb_with_opts = (function cljs$core$pr_sb_with_opts(objs,opts){
	var sb = (new goog.string.StringBuffer());
	var writer = (new cljs.core.StringBufferWriter(sb));
	cljs.core.pr_seq_writer(objs,writer,opts);

	writer.cljs$core$IWriter$_flush$arity$1(null);

	return sb;
	});
	/**
	 * Prints a sequence of objects to a string, observing all the
	 *   options given in opts
	 */
	cljs.core.pr_str_with_opts = (function cljs$core$pr_str_with_opts(objs,opts){
	if(cljs.core.empty_QMARK_(objs)){
	return "";
	} else {
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_sb_with_opts(objs,opts))].join('');
	}
	});
	/**
	 * Same as pr-str-with-opts followed by (newline)
	 */
	cljs.core.prn_str_with_opts = (function cljs$core$prn_str_with_opts(objs,opts){
	if(cljs.core.empty_QMARK_(objs)){
	return "\n";
	} else {
	var sb = cljs.core.pr_sb_with_opts(objs,opts);
	sb.append("\n");

	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(sb)].join('');
	}
	});
	/**
	 * Prints a sequence of objects using string-print, observing all
	 *   the options given in opts
	 */
	cljs.core.pr_with_opts = (function cljs$core$pr_with_opts(objs,opts){
	return cljs.core.string_print(cljs.core.pr_str_with_opts(objs,opts));
	});
	/**
	 * Prints a newline using *print-fn*
	 */
	cljs.core.newline = (function cljs$core$newline(var_args){
	var args4405 = [];
	var len__6099__auto___4408 = arguments.length;
	var i__6100__auto___4409 = (0);
	while(true){
	if((i__6100__auto___4409 < len__6099__auto___4408)){
	args4405.push((arguments[i__6100__auto___4409]));

	var G__4410 = (i__6100__auto___4409 + (1));
	i__6100__auto___4409 = G__4410;
	continue;
	} else {
	}
	break;
	}

	var G__4407 = args4405.length;
	switch (G__4407) {
	case 0:
	return cljs.core.newline.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.newline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4405.length)].join('')));

	}
	});

	cljs.core.newline.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(null);
	});

	cljs.core.newline.cljs$core$IFn$_invoke$arity$1 = (function (opts){
	cljs.core.string_print("\n");

	if(cljs.core.truth_(cljs.core.get.cljs$core$IFn$_invoke$arity$2(opts,cljs.core.cst$kw$flush_DASH_on_DASH_newline))){
	return cljs.core.flush();
	} else {
	return null;
	}
	});

	cljs.core.newline.cljs$lang$maxFixedArity = 1;

	/**
	 * pr to a string, returning it. Fundamental entrypoint to IPrintWithWriter.
	 */
	cljs.core.pr_str = (function cljs$core$pr_str(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4413 = arguments.length;
	var i__6100__auto___4414 = (0);
	while(true){
	if((i__6100__auto___4414 < len__6099__auto___4413)){
	args__6102__auto__.push((arguments[i__6100__auto___4414]));

	var G__4415 = (i__6100__auto___4414 + (1));
	i__6100__auto___4414 = G__4415;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	return cljs.core.pr_str_with_opts(objs,cljs.core.pr_opts());
	});

	cljs.core.pr_str.cljs$lang$maxFixedArity = (0);

	cljs.core.pr_str.cljs$lang$applyTo = (function (seq4412){
	return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4412));
	});

	/**
	 * Same as pr-str followed by (newline)
	 */
	cljs.core.prn_str = (function cljs$core$prn_str(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4417 = arguments.length;
	var i__6100__auto___4418 = (0);
	while(true){
	if((i__6100__auto___4418 < len__6099__auto___4417)){
	args__6102__auto__.push((arguments[i__6100__auto___4418]));

	var G__4419 = (i__6100__auto___4418 + (1));
	i__6100__auto___4418 = G__4419;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	return cljs.core.prn_str_with_opts(objs,cljs.core.pr_opts());
	});

	cljs.core.prn_str.cljs$lang$maxFixedArity = (0);

	cljs.core.prn_str.cljs$lang$applyTo = (function (seq4416){
	return cljs.core.prn_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4416));
	});

	/**
	 * Prints the object(s) using string-print.  Prints the
	 *   object(s), separated by spaces if there is more than one.
	 *   By default, pr and prn print in a way that objects can be
	 *   read by the reader
	 */
	cljs.core.pr = (function cljs$core$pr(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4421 = arguments.length;
	var i__6100__auto___4422 = (0);
	while(true){
	if((i__6100__auto___4422 < len__6099__auto___4421)){
	args__6102__auto__.push((arguments[i__6100__auto___4422]));

	var G__4423 = (i__6100__auto___4422 + (1));
	i__6100__auto___4422 = G__4423;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	return cljs.core.pr_with_opts(objs,cljs.core.pr_opts());
	});

	cljs.core.pr.cljs$lang$maxFixedArity = (0);

	cljs.core.pr.cljs$lang$applyTo = (function (seq4420){
	return cljs.core.pr.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4420));
	});

	/**
	 * Prints the object(s) using string-print.
	 *   print and println produce output for human consumption.
	 * @param {...*} var_args
	 */
	cljs.core.print = (function() { 
	var cljs$core$cljs_core_print__delegate = function (objs){
	return cljs.core.pr_with_opts(objs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(),cljs.core.cst$kw$readably,false));
	};
	var cljs$core$cljs_core_print = function (var_args){
	var objs = null;
	if (arguments.length > 0) {
	var G__4424__i = 0, G__4424__a = new Array(arguments.length -  0);
	while (G__4424__i < G__4424__a.length) {G__4424__a[G__4424__i] = arguments[G__4424__i + 0]; ++G__4424__i;}
	  objs = new cljs.core.IndexedSeq(G__4424__a,0,null);
	} 
	return cljs$core$cljs_core_print__delegate.call(this,objs);};
	cljs$core$cljs_core_print.cljs$lang$maxFixedArity = 0;
	cljs$core$cljs_core_print.cljs$lang$applyTo = (function (arglist__4425){
	var objs = cljs.core.seq(arglist__4425);
	return cljs$core$cljs_core_print__delegate(objs);
	});
	cljs$core$cljs_core_print.cljs$core$IFn$_invoke$arity$variadic = cljs$core$cljs_core_print__delegate;
	return cljs$core$cljs_core_print;
	})()
	;
	/**
	 * print to a string, returning it
	 */
	cljs.core.print_str = (function cljs$core$print_str(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4427 = arguments.length;
	var i__6100__auto___4428 = (0);
	while(true){
	if((i__6100__auto___4428 < len__6099__auto___4427)){
	args__6102__auto__.push((arguments[i__6100__auto___4428]));

	var G__4429 = (i__6100__auto___4428 + (1));
	i__6100__auto___4428 = G__4429;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	return cljs.core.pr_str_with_opts(objs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(),cljs.core.cst$kw$readably,false));
	});

	cljs.core.print_str.cljs$lang$maxFixedArity = (0);

	cljs.core.print_str.cljs$lang$applyTo = (function (seq4426){
	return cljs.core.print_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4426));
	});

	/**
	 * Same as print followed by (newline)
	 */
	cljs.core.println = (function cljs$core$println(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4431 = arguments.length;
	var i__6100__auto___4432 = (0);
	while(true){
	if((i__6100__auto___4432 < len__6099__auto___4431)){
	args__6102__auto__.push((arguments[i__6100__auto___4432]));

	var G__4433 = (i__6100__auto___4432 + (1));
	i__6100__auto___4432 = G__4433;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.println.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	cljs.core.pr_with_opts(objs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(),cljs.core.cst$kw$readably,false));

	if(cljs.core._STAR_print_newline_STAR_){
	return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
	} else {
	return null;
	}
	});

	cljs.core.println.cljs$lang$maxFixedArity = (0);

	cljs.core.println.cljs$lang$applyTo = (function (seq4430){
	return cljs.core.println.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4430));
	});

	/**
	 * println to a string, returning it
	 */
	cljs.core.println_str = (function cljs$core$println_str(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4435 = arguments.length;
	var i__6100__auto___4436 = (0);
	while(true){
	if((i__6100__auto___4436 < len__6099__auto___4435)){
	args__6102__auto__.push((arguments[i__6100__auto___4436]));

	var G__4437 = (i__6100__auto___4436 + (1));
	i__6100__auto___4436 = G__4437;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	return cljs.core.prn_str_with_opts(objs,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.pr_opts(),cljs.core.cst$kw$readably,false));
	});

	cljs.core.println_str.cljs$lang$maxFixedArity = (0);

	cljs.core.println_str.cljs$lang$applyTo = (function (seq4434){
	return cljs.core.println_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4434));
	});

	/**
	 * Same as pr followed by (newline).
	 */
	cljs.core.prn = (function cljs$core$prn(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4439 = arguments.length;
	var i__6100__auto___4440 = (0);
	while(true){
	if((i__6100__auto___4440 < len__6099__auto___4439)){
	args__6102__auto__.push((arguments[i__6100__auto___4440]));

	var G__4441 = (i__6100__auto___4440 + (1));
	i__6100__auto___4440 = G__4441;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic = (function (objs){
	cljs.core.pr_with_opts(objs,cljs.core.pr_opts());

	if(cljs.core._STAR_print_newline_STAR_){
	return cljs.core.newline.cljs$core$IFn$_invoke$arity$1(cljs.core.pr_opts());
	} else {
	return null;
	}
	});

	cljs.core.prn.cljs$lang$maxFixedArity = (0);

	cljs.core.prn.cljs$lang$applyTo = (function (seq4438){
	return cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4438));
	});

	cljs.core.strip_ns = (function cljs$core$strip_ns(named){
	if((named instanceof cljs.core.Symbol)){
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$2(null,cljs.core.name(named));
	} else {
	return cljs.core.keyword.cljs$core$IFn$_invoke$arity$2(null,cljs.core.name(named));
	}
	});
	/**
	 * Returns [lifted-ns lifted-map] or nil if m can't be lifted.
	 */
	cljs.core.lift_ns = (function cljs$core$lift_ns(m){
	if(cljs.core._STAR_print_namespace_maps_STAR_){
	var ns = null;
	var G__4467 = cljs.core.seq(m);
	var vec__4468 = G__4467;
	var seq__4469 = cljs.core.seq(vec__4468);
	var first__4470 = cljs.core.first(seq__4469);
	var seq__4469__$1 = cljs.core.next(seq__4469);
	var vec__4471 = first__4470;
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4471,(0),null);
	var v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4471,(1),null);
	var entry = vec__4471;
	var entries = seq__4469__$1;
	var lm = cljs.core.empty(m);
	var ns__$1 = ns;
	var G__4467__$1 = G__4467;
	var lm__$1 = lm;
	while(true){
	var ns__$2 = ns__$1;
	var vec__4474 = G__4467__$1;
	var seq__4475 = cljs.core.seq(vec__4474);
	var first__4476 = cljs.core.first(seq__4475);
	var seq__4475__$1 = cljs.core.next(seq__4475);
	var vec__4477 = first__4476;
	var k__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4477,(0),null);
	var v__$1 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4477,(1),null);
	var entry__$1 = vec__4477;
	var entries__$1 = seq__4475__$1;
	var lm__$2 = lm__$1;
	if(cljs.core.truth_(entry__$1)){
	if(((k__$1 instanceof cljs.core.Keyword)) || ((k__$1 instanceof cljs.core.Symbol))){
	if(cljs.core.truth_(ns__$2)){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(ns__$2,cljs.core.namespace(k__$1))){
	var G__4480 = ns__$2;
	var G__4481 = entries__$1;
	var G__4482 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2,cljs.core.strip_ns(k__$1),v__$1);
	ns__$1 = G__4480;
	G__4467__$1 = G__4481;
	lm__$1 = G__4482;
	continue;
	} else {
	return null;
	}
	} else {
	var temp__6738__auto__ = cljs.core.namespace(k__$1);
	if(cljs.core.truth_(temp__6738__auto__)){
	var new_ns = temp__6738__auto__;
	var G__4483 = new_ns;
	var G__4484 = entries__$1;
	var G__4485 = cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(lm__$2,cljs.core.strip_ns(k__$1),v__$1);
	ns__$1 = G__4483;
	G__4467__$1 = G__4484;
	lm__$1 = G__4485;
	continue;
	} else {
	return null;
	}
	}
	} else {
	return null;
	}
	} else {
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [ns__$2,lm__$2], null);
	}
	break;
	}
	} else {
	return null;
	}
	});
	cljs.core.print_prefix_map = (function cljs$core$print_prefix_map(prefix,m,print_one,writer,opts){
	return cljs.core.pr_sequential_writer(writer,(function (e,w,opts__$1){
	var G__4492_4498 = cljs.core.key(e);
	var G__4493_4499 = w;
	var G__4494_4500 = opts__$1;
	(print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4492_4498,G__4493_4499,G__4494_4500) : print_one.call(null,G__4492_4498,G__4493_4499,G__4494_4500));

	cljs.core._write(w," ");

	var G__4495 = cljs.core.val(e);
	var G__4496 = w;
	var G__4497 = opts__$1;
	return (print_one.cljs$core$IFn$_invoke$arity$3 ? print_one.cljs$core$IFn$_invoke$arity$3(G__4495,G__4496,G__4497) : print_one.call(null,G__4495,G__4496,G__4497));
	}),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix),cljs.core.str.cljs$core$IFn$_invoke$arity$1("{")].join(''),", ","}",opts,cljs.core.seq(m));
	});
	cljs.core.print_map = (function cljs$core$print_map(m,print_one,writer,opts){
	var vec__4504 = cljs.core.lift_ns(m);
	var ns = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4504,(0),null);
	var lift_map = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4504,(1),null);
	if(cljs.core.truth_(ns)){
	return cljs.core.print_prefix_map([cljs.core.str.cljs$core$IFn$_invoke$arity$1("#:"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(''),lift_map,print_one,writer,opts);
	} else {
	return cljs.core.print_prefix_map(null,m,print_one,writer,opts);
	}
	});
	cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Volatile.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (a,writer,opts){
	var a__$1 = this;
	cljs.core._write(writer,"#object [cljs.core.Volatile ");

	cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$val,a__$1.state], null),writer,opts);

	return cljs.core._write(writer,"]");
	});

	cljs.core.Var.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Var.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (a,writer,opts){
	var a__$1 = this;
	cljs.core._write(writer,"#'");

	return cljs.core.pr_writer(a__$1.sym,writer,opts);
	});

	cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.IndexedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentTreeMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.NodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.BlackNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"["," ","]",opts,coll__$1);
	});

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentArrayMapSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ES6IteratorSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentTreeSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"#{"," ","}",opts,coll__$1);
	});

	cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ChunkedSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ObjMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.print_map(coll__$1,cljs.core.pr_writer,writer,opts);
	});

	cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Cons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.RSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentHashMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.print_map(coll__$1,cljs.core.pr_writer,writer,opts);
	});

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ArrayNodeSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Subvec.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"["," ","]",opts,coll__$1);
	});

	cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentTreeMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.print_map(coll__$1,cljs.core.pr_writer,writer,opts);
	});

	cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentHashSet.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"#{"," ","}",opts,coll__$1);
	});

	cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ChunkedCons.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Atom.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (a,writer,opts){
	var a__$1 = this;
	cljs.core._write(writer,"#object [cljs.core.Atom ");

	cljs.core.pr_writer(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$val,a__$1.state], null),writer,opts);

	return cljs.core._write(writer,"]");
	});

	cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ValSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.RedNode.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"["," ","]",opts,coll__$1);
	});

	cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentVector.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"["," ","]",opts,coll__$1);
	});

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentQueueSeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.EmptyList.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core._write(writer,"()");
	});

	cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.LazyTransformer.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentQueue.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"#queue ["," ","]",opts,cljs.core.seq(coll__$1));
	});

	cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentArrayMap.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.print_map(coll__$1,cljs.core.pr_writer,writer,opts);
	});

	cljs.core.Range.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Range.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.KeySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});

	cljs.core.List.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.List.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll,writer,opts){
	var coll__$1 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$1);
	});
	cljs.core.Symbol.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Symbol.prototype.cljs$core$IComparable$_compare$arity$2 = (function (x,y){
	var x__$1 = this;
	if((y instanceof cljs.core.Symbol)){
	return cljs.core.compare_symbols(x__$1,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}
	});

	cljs.core.Keyword.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Keyword.prototype.cljs$core$IComparable$_compare$arity$2 = (function (x,y){
	var x__$1 = this;
	if((y instanceof cljs.core.Keyword)){
	return cljs.core.compare_keywords(x__$1,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}
	});

	cljs.core.Subvec.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.Subvec.prototype.cljs$core$IComparable$_compare$arity$2 = (function (x,y){
	var x__$1 = this;
	if(cljs.core.vector_QMARK_(y)){
	return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}
	});

	cljs.core.PersistentVector.prototype.cljs$core$IComparable$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.PersistentVector.prototype.cljs$core$IComparable$_compare$arity$2 = (function (x,y){
	var x__$1 = this;
	if(cljs.core.vector_QMARK_(y)){
	return cljs.core.compare_indexed.cljs$core$IFn$_invoke$arity$2(x__$1,y);
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cannot compare "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(x__$1),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(y)].join('')));
	}
	});
	/**
	 * Atomically sets the metadata for a namespace/var/ref/agent/atom to be:
	 * 
	 *   (apply f its-current-meta args)
	 * 
	 *   f must be free of side-effects
	 */
	cljs.core.alter_meta_BANG_ = (function cljs$core$alter_meta_BANG_(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4510 = arguments.length;
	var i__6100__auto___4511 = (0);
	while(true){
	if((i__6100__auto___4511 < len__6099__auto___4510)){
	args__6102__auto__.push((arguments[i__6100__auto___4511]));

	var G__4512 = (i__6100__auto___4511 + (1));
	i__6100__auto___4511 = G__4512;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((2) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((2)),(0),null)):null);
	return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__6103__auto__);
	});

	cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (iref,f,args){
	return iref.meta = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(f,iref.meta,args);
	});

	cljs.core.alter_meta_BANG_.cljs$lang$maxFixedArity = (2);

	cljs.core.alter_meta_BANG_.cljs$lang$applyTo = (function (seq4507){
	var G__4508 = cljs.core.first(seq4507);
	var seq4507__$1 = cljs.core.next(seq4507);
	var G__4509 = cljs.core.first(seq4507__$1);
	var seq4507__$2 = cljs.core.next(seq4507__$1);
	return cljs.core.alter_meta_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__4508,G__4509,seq4507__$2);
	});

	/**
	 * Atomically resets the metadata for an atom
	 */
	cljs.core.reset_meta_BANG_ = (function cljs$core$reset_meta_BANG_(iref,m){
	return iref.meta = m;
	});
	/**
	 * Adds a watch function to an atom reference. The watch fn must be a
	 *   fn of 4 args: a key, the reference, its old-state, its
	 *   new-state. Whenever the reference's state might have been changed,
	 *   any registered watches will have their functions called. The watch
	 *   fn will be called synchronously. Note that an atom's state
	 *   may have changed again prior to the fn call, so use old/new-state
	 *   rather than derefing the reference. Keys must be unique per
	 *   reference, and can be used to remove the watch with remove-watch,
	 *   but are otherwise considered opaque by the watch mechanism.  Bear in
	 *   mind that regardless of the result or action of the watch fns the
	 *   atom's value will change.  Example:
	 * 
	 *    (def a (atom 0))
	 *    (add-watch a :inc (fn [k r o n] (assert (== 0 n))))
	 *    (swap! a inc)
	 *    ;; Assertion Error
	 *    (deref a)
	 *    ;=> 1
	 */
	cljs.core.add_watch = (function cljs$core$add_watch(iref,key,f){
	cljs.core._add_watch(iref,key,f);

	return iref;
	});
	/**
	 * Removes a watch (set by add-watch) from a reference
	 */
	cljs.core.remove_watch = (function cljs$core$remove_watch(iref,key){
	cljs.core._remove_watch(iref,key);

	return iref;
	});
	/**
	 * @type {*}
	 */
	cljs.core.gensym_counter = null;
	/**
	 * Returns a new symbol with a unique name. If a prefix string is
	 *   supplied, the name is prefix# where # is some unique number. If
	 *   prefix is not supplied, the prefix is 'G__'.
	 */
	cljs.core.gensym = (function cljs$core$gensym(var_args){
	var args4513 = [];
	var len__6099__auto___4516 = arguments.length;
	var i__6100__auto___4517 = (0);
	while(true){
	if((i__6100__auto___4517 < len__6099__auto___4516)){
	args4513.push((arguments[i__6100__auto___4517]));

	var G__4518 = (i__6100__auto___4517 + (1));
	i__6100__auto___4517 = G__4518;
	continue;
	} else {
	}
	break;
	}

	var G__4515 = args4513.length;
	switch (G__4515) {
	case 0:
	return cljs.core.gensym.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4513.length)].join('')));

	}
	});

	cljs.core.gensym.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.gensym.cljs$core$IFn$_invoke$arity$1("G__");
	});

	cljs.core.gensym.cljs$core$IFn$_invoke$arity$1 = (function (prefix_string){
	if((cljs.core.gensym_counter == null)){
	cljs.core.gensym_counter = (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1((0)) : cljs.core.atom.call(null,(0)));
	} else {
	}

	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(prefix_string),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cljs.core.gensym_counter,cljs.core.inc))].join(''));
	});

	cljs.core.gensym.cljs$lang$maxFixedArity = 1;

	cljs.core.fixture1 = (1);
	cljs.core.fixture2 = (2);

	/**
	* @constructor
	 * @implements {cljs.core.IPending}
	 * @implements {cljs.core.IDeref}
	*/
	cljs.core.Delay = (function (f,value){
	this.f = f;
	this.value = value;
	this.cljs$lang$protocol_mask$partition0$ = 32768;
	this.cljs$lang$protocol_mask$partition1$ = 1;
	})
	cljs.core.Delay.prototype.cljs$core$IDeref$_deref$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	if(cljs.core.truth_(self__.f)){
	self__.value = (self__.f.cljs$core$IFn$_invoke$arity$0 ? self__.f.cljs$core$IFn$_invoke$arity$0() : self__.f.call(null));

	self__.f = null;
	} else {
	}

	return self__.value;
	});

	cljs.core.Delay.prototype.cljs$core$IPending$_realized_QMARK_$arity$1 = (function (x){
	var self__ = this;
	var x__$1 = this;
	return cljs.core.not(self__.f);
	});

	cljs.core.Delay.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.with_meta(cljs.core.cst$sym$f,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null)),cljs.core.with_meta(cljs.core.cst$sym$value,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.Delay.cljs$lang$type = true;

	cljs.core.Delay.cljs$lang$ctorStr = "cljs.core/Delay";

	cljs.core.Delay.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Delay");
	});

	cljs.core.__GT_Delay = (function cljs$core$__GT_Delay(f,value){
	return (new cljs.core.Delay(f,value));
	});

	/**
	 * returns true if x is a Delay created with delay
	 */
	cljs.core.delay_QMARK_ = (function cljs$core$delay_QMARK_(x){
	return (x instanceof cljs.core.Delay);
	});
	/**
	 * If x is a Delay, returns the (possibly cached) value of its expression, else returns x
	 */
	cljs.core.force = (function cljs$core$force(x){
	if(cljs.core.delay_QMARK_(x)){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(x) : cljs.core.deref.call(null,x));
	} else {
	return x;
	}
	});
	/**
	 * Returns true if a value has been produced for a delay or lazy sequence.
	 */
	cljs.core.realized_QMARK_ = (function cljs$core$realized_QMARK_(x){
	return cljs.core._realized_QMARK_(x);
	});
	cljs.core.preserving_reduced = (function cljs$core$preserving_reduced(rf){
	return (function (p1__4520_SHARP_,p2__4521_SHARP_){
	var ret = (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(p1__4520_SHARP_,p2__4521_SHARP_) : rf.call(null,p1__4520_SHARP_,p2__4521_SHARP_));
	if(cljs.core.reduced_QMARK_(ret)){
	return cljs.core.reduced(ret);
	} else {
	return ret;
	}
	});
	});
	/**
	 * A transducer which concatenates the contents of each input, which must be a
	 *   collection, into the reduction.
	 */
	cljs.core.cat = (function cljs$core$cat(rf){
	var rf1 = cljs.core.preserving_reduced(rf);
	return ((function (rf1){
	return (function() {
	var G__4522 = null;
	var G__4522__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4522__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__4522__2 = (function (result,input){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(rf1,result,input);
	});
	G__4522 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4522__0.call(this);
	case 1:
	return G__4522__1.call(this,result);
	case 2:
	return G__4522__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4522.cljs$core$IFn$_invoke$arity$0 = G__4522__0;
	G__4522.cljs$core$IFn$_invoke$arity$1 = G__4522__1;
	G__4522.cljs$core$IFn$_invoke$arity$2 = G__4522__2;
	return G__4522;
	})()
	;})(rf1))
	});
	/**
	 * Returns a transducer that ends transduction when pred returns true
	 *   for an input. When retf is supplied it must be a fn of 2 arguments -
	 *   it will be passed the (completed) result so far and the input that
	 *   triggered the predicate, and its return value (if it does not throw
	 *   an exception) will be the return value of the transducer. If retf
	 *   is not supplied, the input that triggered the predicate will be
	 *   returned. If the predicate never returns true the transduction is
	 *   unaffected.
	 */
	cljs.core.halt_when = (function cljs$core$halt_when(var_args){
	var args4523 = [];
	var len__6099__auto___4528 = arguments.length;
	var i__6100__auto___4529 = (0);
	while(true){
	if((i__6100__auto___4529 < len__6099__auto___4528)){
	args4523.push((arguments[i__6100__auto___4529]));

	var G__4530 = (i__6100__auto___4529 + (1));
	i__6100__auto___4529 = G__4530;
	continue;
	} else {
	}
	break;
	}

	var G__4525 = args4523.length;
	switch (G__4525) {
	case 1:
	return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4523.length)].join('')));

	}
	});

	cljs.core.halt_when.cljs$core$IFn$_invoke$arity$1 = (function (pred){
	return cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2(pred,null);
	});

	cljs.core.halt_when.cljs$core$IFn$_invoke$arity$2 = (function (pred,retf){
	return (function (rf){
	return (function() {
	var G__4532 = null;
	var G__4532__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4532__1 = (function (result){
	if((cljs.core.map_QMARK_(result)) && (cljs.core.contains_QMARK_(result,cljs.core.cst$kw$cljs$core_SLASH_halt))){
	return cljs.core.cst$kw$cljs$core_SLASH_halt.cljs$core$IFn$_invoke$arity$1(result);
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	}
	});
	var G__4532__2 = (function (result,input){
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(input) : pred.call(null,input)))){
	return cljs.core.reduced(new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$cljs$core_SLASH_halt,(cljs.core.truth_(retf)?(function (){var G__4526 = (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	var G__4527 = input;
	return (retf.cljs$core$IFn$_invoke$arity$2 ? retf.cljs$core$IFn$_invoke$arity$2(G__4526,G__4527) : retf.call(null,G__4526,G__4527));
	})():input)], null));
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__4532 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4532__0.call(this);
	case 1:
	return G__4532__1.call(this,result);
	case 2:
	return G__4532__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4532.cljs$core$IFn$_invoke$arity$0 = G__4532__0;
	G__4532.cljs$core$IFn$_invoke$arity$1 = G__4532__1;
	G__4532.cljs$core$IFn$_invoke$arity$2 = G__4532__2;
	return G__4532;
	})()
	});
	});

	cljs.core.halt_when.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns a lazy sequence removing consecutive duplicates in coll.
	 *   Returns a transducer when no collection is provided.
	 */
	cljs.core.dedupe = (function cljs$core$dedupe(var_args){
	var args4533 = [];
	var len__6099__auto___4536 = arguments.length;
	var i__6100__auto___4537 = (0);
	while(true){
	if((i__6100__auto___4537 < len__6099__auto___4536)){
	args4533.push((arguments[i__6100__auto___4537]));

	var G__4538 = (i__6100__auto___4537 + (1));
	i__6100__auto___4537 = G__4538;
	continue;
	} else {
	}
	break;
	}

	var G__4535 = args4533.length;
	switch (G__4535) {
	case 0:
	return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4533.length)].join('')));

	}
	});

	cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0 = (function (){
	return (function (rf){
	var pa = cljs.core.volatile_BANG_(cljs.core.cst$kw$cljs$core_SLASH_none);
	return ((function (pa){
	return (function() {
	var G__4540 = null;
	var G__4540__0 = (function (){
	return (rf.cljs$core$IFn$_invoke$arity$0 ? rf.cljs$core$IFn$_invoke$arity$0() : rf.call(null));
	});
	var G__4540__1 = (function (result){
	return (rf.cljs$core$IFn$_invoke$arity$1 ? rf.cljs$core$IFn$_invoke$arity$1(result) : rf.call(null,result));
	});
	var G__4540__2 = (function (result,input){
	var prior = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(pa) : cljs.core.deref.call(null,pa));
	cljs.core.vreset_BANG_(pa,input);

	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(prior,input)){
	return result;
	} else {
	return (rf.cljs$core$IFn$_invoke$arity$2 ? rf.cljs$core$IFn$_invoke$arity$2(result,input) : rf.call(null,result,input));
	}
	});
	G__4540 = function(result,input){
	switch(arguments.length){
	case 0:
	return G__4540__0.call(this);
	case 1:
	return G__4540__1.call(this,result);
	case 2:
	return G__4540__2.call(this,result,input);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4540.cljs$core$IFn$_invoke$arity$0 = G__4540__0;
	G__4540.cljs$core$IFn$_invoke$arity$1 = G__4540__1;
	G__4540.cljs$core$IFn$_invoke$arity$2 = G__4540__2;
	return G__4540;
	})()
	;})(pa))
	});
	});

	cljs.core.dedupe.cljs$core$IFn$_invoke$arity$1 = (function (coll){
	return cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(cljs.core.dedupe.cljs$core$IFn$_invoke$arity$0(),coll);
	});

	cljs.core.dedupe.cljs$lang$maxFixedArity = 1;

	/**
	 * Returns items from coll with random probability of prob (0.0 -
	 *   1.0).  Returns a transducer when no collection is provided.
	 */
	cljs.core.random_sample = (function cljs$core$random_sample(var_args){
	var args4541 = [];
	var len__6099__auto___4544 = arguments.length;
	var i__6100__auto___4545 = (0);
	while(true){
	if((i__6100__auto___4545 < len__6099__auto___4544)){
	args4541.push((arguments[i__6100__auto___4545]));

	var G__4546 = (i__6100__auto___4545 + (1));
	i__6100__auto___4545 = G__4546;
	continue;
	} else {
	}
	break;
	}

	var G__4543 = args4541.length;
	switch (G__4543) {
	case 1:
	return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4541.length)].join('')));

	}
	});

	cljs.core.random_sample.cljs$core$IFn$_invoke$arity$1 = (function (prob){
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$1((function (_){
	return ((cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob);
	}));
	});

	cljs.core.random_sample.cljs$core$IFn$_invoke$arity$2 = (function (prob,coll){
	return cljs.core.filter.cljs$core$IFn$_invoke$arity$2((function (_){
	return ((cljs.core.rand.cljs$core$IFn$_invoke$arity$0 ? cljs.core.rand.cljs$core$IFn$_invoke$arity$0() : cljs.core.rand.call(null)) < prob);
	}),coll);
	});

	cljs.core.random_sample.cljs$lang$maxFixedArity = 2;


	/**
	* @constructor
	 * @implements {cljs.core.ISeqable}
	 * @implements {cljs.core.IPrintWithWriter}
	 * @implements {cljs.core.ISequential}
	 * @implements {cljs.core.IReduce}
	*/
	cljs.core.Eduction = (function (xform,coll){
	this.xform = xform;
	this.coll = coll;
	this.cljs$lang$protocol_mask$partition0$ = 2173173760;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.Eduction.prototype.indexOf = (function() {
	var G__4548 = null;
	var G__4548__1 = (function (x){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1,x,(0));
	});
	var G__4548__2 = (function (x,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._indexOf.cljs$core$IFn$_invoke$arity$3(coll__$1,x,start);
	});
	G__4548 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__4548__1.call(this,x);
	case 2:
	return G__4548__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4548.cljs$core$IFn$_invoke$arity$1 = G__4548__1;
	G__4548.cljs$core$IFn$_invoke$arity$2 = G__4548__2;
	return G__4548;
	})()
	;

	cljs.core.Eduction.prototype.lastIndexOf = (function() {
	var G__4549 = null;
	var G__4549__1 = (function (x){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1,x,cljs.core.count(coll__$1));
	});
	var G__4549__2 = (function (x,start){
	var self__ = this;
	var coll__$1 = this;
	return cljs.core._lastIndexOf.cljs$core$IFn$_invoke$arity$3(coll__$1,x,start);
	});
	G__4549 = function(x,start){
	switch(arguments.length){
	case 1:
	return G__4549__1.call(this,x);
	case 2:
	return G__4549__2.call(this,x,start);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4549.cljs$core$IFn$_invoke$arity$1 = G__4549__1;
	G__4549.cljs$core$IFn$_invoke$arity$2 = G__4549__2;
	return G__4549;
	})()
	;

	cljs.core.Eduction.prototype.cljs$core$ISeqable$_seq$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return cljs.core.seq(cljs.core.sequence.cljs$core$IFn$_invoke$arity$2(self__.xform,self__.coll));
	});

	cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$2 = (function (_,f){
	var self__ = this;
	var ___$1 = this;
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$3(self__.xform,cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f),self__.coll);
	});

	cljs.core.Eduction.prototype.cljs$core$IReduce$_reduce$arity$3 = (function (_,f,init){
	var self__ = this;
	var ___$1 = this;
	return cljs.core.transduce.cljs$core$IFn$_invoke$arity$4(self__.xform,cljs.core.completing.cljs$core$IFn$_invoke$arity$1(f),init,self__.coll);
	});

	cljs.core.Eduction.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (coll__$1,writer,opts){
	var self__ = this;
	var coll__$2 = this;
	return cljs.core.pr_sequential_writer(writer,cljs.core.pr_writer,"("," ",")",opts,coll__$2);
	});

	cljs.core.Eduction.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$xform,cljs.core.cst$sym$coll], null);
	});

	cljs.core.Eduction.cljs$lang$type = true;

	cljs.core.Eduction.cljs$lang$ctorStr = "cljs.core/Eduction";

	cljs.core.Eduction.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Eduction");
	});

	cljs.core.__GT_Eduction = (function cljs$core$__GT_Eduction(xform,coll){
	return (new cljs.core.Eduction(xform,coll));
	});

	(cljs.core.Eduction.prototype[cljs.core.ITER_SYMBOL] = (function (){
	var this__6046__auto__ = this;
	return cljs.core.es6_iterator(this__6046__auto__);
	}));
	/**
	 * Returns a reducible/iterable application of the transducers
	 *   to the items in coll. Transducers are applied in order as if
	 *   combined with comp. Note that these applications will be
	 *   performed every time reduce/iterator is called.
	 */
	cljs.core.eduction = (function cljs$core$eduction(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4551 = arguments.length;
	var i__6100__auto___4552 = (0);
	while(true){
	if((i__6100__auto___4552 < len__6099__auto___4551)){
	args__6102__auto__.push((arguments[i__6100__auto___4552]));

	var G__4553 = (i__6100__auto___4552 + (1));
	i__6100__auto___4552 = G__4553;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((0) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((0)),(0),null)):null);
	return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(argseq__6103__auto__);
	});

	cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic = (function (xforms){
	return (new cljs.core.Eduction(cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.comp,cljs.core.butlast(xforms)),cljs.core.last(xforms)));
	});

	cljs.core.eduction.cljs$lang$maxFixedArity = (0);

	cljs.core.eduction.cljs$lang$applyTo = (function (seq4550){
	return cljs.core.eduction.cljs$core$IFn$_invoke$arity$variadic(cljs.core.seq(seq4550));
	});

	/**
	 * Runs the supplied procedure (via reduce), for purposes of side
	 *   effects, on successive items in the collection. Returns nil
	 */
	cljs.core.run_BANG_ = (function cljs$core$run_BANG_(proc,coll){
	cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__4555_SHARP_,p2__4554_SHARP_){
	return (proc.cljs$core$IFn$_invoke$arity$1 ? proc.cljs$core$IFn$_invoke$arity$1(p2__4554_SHARP_) : proc.call(null,p2__4554_SHARP_));
	}),null,coll);

	return null;
	});

	/**
	 * @interface
	 */
	cljs.core.IEncodeJS = function(){};

	/**
	 * Recursively transforms clj values to JavaScript
	 */
	cljs.core._clj__GT_js = (function cljs$core$_clj__GT_js(x){
	if((!((x == null))) && (!((x.cljs$core$IEncodeJS$_clj__GT_js$arity$1 == null)))){
	return x.cljs$core$IEncodeJS$_clj__GT_js$arity$1(x);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._clj__GT_js[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto__.call(null,x));
	} else {
	var m__5781__auto____$1 = (cljs.core._clj__GT_js["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto____$1.call(null,x));
	} else {
	throw cljs.core.missing_protocol("IEncodeJS.-clj->js",x);
	}
	}
	}
	});

	/**
	 * Transforms map keys to valid JavaScript keys. Arbitrary keys are
	 *   encoded to their string representation via (pr-str x)
	 */
	cljs.core._key__GT_js = (function cljs$core$_key__GT_js(x){
	if((!((x == null))) && (!((x.cljs$core$IEncodeJS$_key__GT_js$arity$1 == null)))){
	return x.cljs$core$IEncodeJS$_key__GT_js$arity$1(x);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._key__GT_js[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto__.call(null,x));
	} else {
	var m__5781__auto____$1 = (cljs.core._key__GT_js["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(x) : m__5781__auto____$1.call(null,x));
	} else {
	throw cljs.core.missing_protocol("IEncodeJS.-key->js",x);
	}
	}
	}
	});

	cljs.core.key__GT_js = (function cljs$core$key__GT_js(k){
	if(((!((k == null)))?(((false) || ((cljs.core.PROTOCOL_SENTINEL === k.cljs$core$IEncodeJS$)))?true:(((!k.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS,k):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS,k))){
	return cljs.core._clj__GT_js(k);
	} else {
	if((typeof k === 'string') || (typeof k === 'number') || ((k instanceof cljs.core.Keyword)) || ((k instanceof cljs.core.Symbol))){
	return (cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(k) : cljs.core.clj__GT_js.call(null,k));
	} else {
	return cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic(cljs.core.array_seq([k], 0));
	}
	}
	});
	/**
	 * Recursively transforms ClojureScript values to JavaScript.
	 *   sets/vectors/lists become Arrays, Keywords and Symbol become Strings,
	 *   Maps become Objects. Arbitrary keys are encoded to by key->js.
	 */
	cljs.core.clj__GT_js = (function cljs$core$clj__GT_js(x){
	if((x == null)){
	return null;
	} else {
	if(((!((x == null)))?(((false) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IEncodeJS$)))?true:(((!x.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS,x):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeJS,x))){
	return cljs.core._clj__GT_js(x);
	} else {
	if((x instanceof cljs.core.Keyword)){
	return cljs.core.name(x);
	} else {
	if((x instanceof cljs.core.Symbol)){
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(x)].join('');
	} else {
	if(cljs.core.map_QMARK_(x)){
	var m = {};
	var seq__4578_4592 = cljs.core.seq(x);
	var chunk__4579_4593 = null;
	var count__4580_4594 = (0);
	var i__4581_4595 = (0);
	while(true){
	if((i__4581_4595 < count__4580_4594)){
	var vec__4582_4596 = chunk__4579_4593.cljs$core$IIndexed$_nth$arity$2(null,i__4581_4595);
	var k_4597 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4582_4596,(0),null);
	var v_4598 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4582_4596,(1),null);
	(m[cljs.core.key__GT_js(k_4597)] = (cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_4598) : cljs.core.clj__GT_js.call(null,v_4598)));

	var G__4599 = seq__4578_4592;
	var G__4600 = chunk__4579_4593;
	var G__4601 = count__4580_4594;
	var G__4602 = (i__4581_4595 + (1));
	seq__4578_4592 = G__4599;
	chunk__4579_4593 = G__4600;
	count__4580_4594 = G__4601;
	i__4581_4595 = G__4602;
	continue;
	} else {
	var temp__6738__auto___4603 = cljs.core.seq(seq__4578_4592);
	if(temp__6738__auto___4603){
	var seq__4578_4604__$1 = temp__6738__auto___4603;
	if(cljs.core.chunked_seq_QMARK_(seq__4578_4604__$1)){
	var c__5929__auto___4605 = cljs.core.chunk_first(seq__4578_4604__$1);
	var G__4606 = cljs.core.chunk_rest(seq__4578_4604__$1);
	var G__4607 = c__5929__auto___4605;
	var G__4608 = cljs.core.count(c__5929__auto___4605);
	var G__4609 = (0);
	seq__4578_4592 = G__4606;
	chunk__4579_4593 = G__4607;
	count__4580_4594 = G__4608;
	i__4581_4595 = G__4609;
	continue;
	} else {
	var vec__4585_4610 = cljs.core.first(seq__4578_4604__$1);
	var k_4611 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4585_4610,(0),null);
	var v_4612 = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4585_4610,(1),null);
	(m[cljs.core.key__GT_js(k_4611)] = (cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1 ? cljs.core.clj__GT_js.cljs$core$IFn$_invoke$arity$1(v_4612) : cljs.core.clj__GT_js.call(null,v_4612)));

	var G__4613 = cljs.core.next(seq__4578_4604__$1);
	var G__4614 = null;
	var G__4615 = (0);
	var G__4616 = (0);
	seq__4578_4592 = G__4613;
	chunk__4579_4593 = G__4614;
	count__4580_4594 = G__4615;
	i__4581_4595 = G__4616;
	continue;
	}
	} else {
	}
	}
	break;
	}

	return m;
	} else {
	if(cljs.core.coll_QMARK_(x)){
	var arr = [];
	var seq__4588_4617 = cljs.core.seq(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs.core.clj__GT_js,x));
	var chunk__4589_4618 = null;
	var count__4590_4619 = (0);
	var i__4591_4620 = (0);
	while(true){
	if((i__4591_4620 < count__4590_4619)){
	var x_4621__$1 = chunk__4589_4618.cljs$core$IIndexed$_nth$arity$2(null,i__4591_4620);
	arr.push(x_4621__$1);

	var G__4622 = seq__4588_4617;
	var G__4623 = chunk__4589_4618;
	var G__4624 = count__4590_4619;
	var G__4625 = (i__4591_4620 + (1));
	seq__4588_4617 = G__4622;
	chunk__4589_4618 = G__4623;
	count__4590_4619 = G__4624;
	i__4591_4620 = G__4625;
	continue;
	} else {
	var temp__6738__auto___4626 = cljs.core.seq(seq__4588_4617);
	if(temp__6738__auto___4626){
	var seq__4588_4627__$1 = temp__6738__auto___4626;
	if(cljs.core.chunked_seq_QMARK_(seq__4588_4627__$1)){
	var c__5929__auto___4628 = cljs.core.chunk_first(seq__4588_4627__$1);
	var G__4629 = cljs.core.chunk_rest(seq__4588_4627__$1);
	var G__4630 = c__5929__auto___4628;
	var G__4631 = cljs.core.count(c__5929__auto___4628);
	var G__4632 = (0);
	seq__4588_4617 = G__4629;
	chunk__4589_4618 = G__4630;
	count__4590_4619 = G__4631;
	i__4591_4620 = G__4632;
	continue;
	} else {
	var x_4633__$1 = cljs.core.first(seq__4588_4627__$1);
	arr.push(x_4633__$1);

	var G__4634 = cljs.core.next(seq__4588_4627__$1);
	var G__4635 = null;
	var G__4636 = (0);
	var G__4637 = (0);
	seq__4588_4617 = G__4634;
	chunk__4589_4618 = G__4635;
	count__4590_4619 = G__4636;
	i__4591_4620 = G__4637;
	continue;
	}
	} else {
	}
	}
	break;
	}

	return arr;
	} else {
	return x;

	}
	}
	}
	}
	}
	}
	});

	/**
	 * @interface
	 */
	cljs.core.IEncodeClojure = function(){};

	/**
	 * Transforms JavaScript values to Clojure
	 */
	cljs.core._js__GT_clj = (function cljs$core$_js__GT_clj(x,options){
	if((!((x == null))) && (!((x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2 == null)))){
	return x.cljs$core$IEncodeClojure$_js__GT_clj$arity$2(x,options);
	} else {
	var x__5780__auto__ = (((x == null))?null:x);
	var m__5781__auto__ = (cljs.core._js__GT_clj[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(x,options) : m__5781__auto__.call(null,x,options));
	} else {
	var m__5781__auto____$1 = (cljs.core._js__GT_clj["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(x,options) : m__5781__auto____$1.call(null,x,options));
	} else {
	throw cljs.core.missing_protocol("IEncodeClojure.-js->clj",x);
	}
	}
	}
	});

	/**
	 * Recursively transforms JavaScript arrays into ClojureScript
	 *   vectors, and JavaScript objects into ClojureScript maps.  With
	 *   option ':keywordize-keys true' will convert object fields from
	 *   strings to keywords.
	 */
	cljs.core.js__GT_clj = (function cljs$core$js__GT_clj(var_args){
	var args4638 = [];
	var len__6099__auto___4663 = arguments.length;
	var i__6100__auto___4664 = (0);
	while(true){
	if((i__6100__auto___4664 < len__6099__auto___4663)){
	args4638.push((arguments[i__6100__auto___4664]));

	var G__4665 = (i__6100__auto___4664 + (1));
	i__6100__auto___4664 = G__4665;
	continue;
	} else {
	}
	break;
	}

	var G__4642 = args4638.length;
	switch (G__4642) {
	case 1:
	return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4638.slice((1)),(0),null));
	return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6118__auto__);

	}
	});

	cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1 = (function (x){
	return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(x,cljs.core.array_seq([cljs.core.cst$kw$keywordize_DASH_keys,false], 0));
	});

	cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic = (function (x,opts){
	var map__4643 = opts;
	var map__4643__$1 = ((((!((map__4643 == null)))?((((map__4643.cljs$lang$protocol_mask$partition0$ & (64))) || ((cljs.core.PROTOCOL_SENTINEL === map__4643.cljs$core$ISeq$)))?true:false):false))?cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.hash_map,map__4643):map__4643);
	var keywordize_keys = cljs.core.get.cljs$core$IFn$_invoke$arity$2(map__4643__$1,cljs.core.cst$kw$keywordize_DASH_keys);
	var keyfn = (cljs.core.truth_(keywordize_keys)?cljs.core.keyword:cljs.core.str);
	var f = ((function (map__4643,map__4643__$1,keywordize_keys,keyfn){
	return (function cljs$core$thisfn(x__$1){
	if(((!((x__$1 == null)))?(((false) || ((cljs.core.PROTOCOL_SENTINEL === x__$1.cljs$core$IEncodeClojure$)))?true:(((!x__$1.cljs$lang$protocol_mask$partition$))?cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure,x__$1):false)):cljs.core.native_satisfies_QMARK_(cljs.core.IEncodeClojure,x__$1))){
	return cljs.core._js__GT_clj(x__$1,cljs.core.apply.cljs$core$IFn$_invoke$arity$2(cljs.core.array_map,opts));
	} else {
	if(cljs.core.seq_QMARK_(x__$1)){
	return cljs.core.doall.cljs$core$IFn$_invoke$arity$1(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn,x__$1));
	} else {
	if(cljs.core.coll_QMARK_(x__$1)){
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.empty(x__$1),cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn,x__$1));
	} else {
	if(cljs.core.array_QMARK_(x__$1)){
	return cljs.core.vec(cljs.core.map.cljs$core$IFn$_invoke$arity$2(cljs$core$thisfn,x__$1));
	} else {
	if((cljs.core.type(x__$1) === Object)){
	return cljs.core.into.cljs$core$IFn$_invoke$arity$2(cljs.core.PersistentArrayMap.EMPTY,(function (){var iter__5884__auto__ = ((function (map__4643,map__4643__$1,keywordize_keys,keyfn){
	return (function cljs$core$thisfn_$_iter__4657(s__4658){
	return (new cljs.core.LazySeq(null,((function (map__4643,map__4643__$1,keywordize_keys,keyfn){
	return (function (){
	var s__4658__$1 = s__4658;
	while(true){
	var temp__6738__auto__ = cljs.core.seq(s__4658__$1);
	if(temp__6738__auto__){
	var s__4658__$2 = temp__6738__auto__;
	if(cljs.core.chunked_seq_QMARK_(s__4658__$2)){
	var c__5882__auto__ = cljs.core.chunk_first(s__4658__$2);
	var size__5883__auto__ = cljs.core.count(c__5882__auto__);
	var b__4660 = cljs.core.chunk_buffer(size__5883__auto__);
	if((function (){var i__4659 = (0);
	while(true){
	if((i__4659 < size__5883__auto__)){
	var k = cljs.core._nth.cljs$core$IFn$_invoke$arity$2(c__5882__auto__,i__4659);
	cljs.core.chunk_append(b__4660,new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null,k)),cljs$core$thisfn((x__$1[k]))], null));

	var G__4667 = (i__4659 + (1));
	i__4659 = G__4667;
	continue;
	} else {
	return true;
	}
	break;
	}
	})()){
	return cljs.core.chunk_cons(cljs.core.chunk(b__4660),cljs$core$thisfn_$_iter__4657(cljs.core.chunk_rest(s__4658__$2)));
	} else {
	return cljs.core.chunk_cons(cljs.core.chunk(b__4660),null);
	}
	} else {
	var k = cljs.core.first(s__4658__$2);
	return cljs.core.cons(new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [(keyfn.cljs$core$IFn$_invoke$arity$1 ? keyfn.cljs$core$IFn$_invoke$arity$1(k) : keyfn.call(null,k)),cljs$core$thisfn((x__$1[k]))], null),cljs$core$thisfn_$_iter__4657(cljs.core.rest(s__4658__$2)));
	}
	} else {
	return null;
	}
	break;
	}
	});})(map__4643,map__4643__$1,keywordize_keys,keyfn))
	,null,null));
	});})(map__4643,map__4643__$1,keywordize_keys,keyfn))
	;
	return iter__5884__auto__(cljs.core.js_keys(x__$1));
	})());
	} else {
	return x__$1;

	}
	}
	}
	}
	}
	});})(map__4643,map__4643__$1,keywordize_keys,keyfn))
	;
	return f(x);
	});

	cljs.core.js__GT_clj.cljs$lang$applyTo = (function (seq4639){
	var G__4640 = cljs.core.first(seq4639);
	var seq4639__$1 = cljs.core.next(seq4639);
	return cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$variadic(G__4640,seq4639__$1);
	});

	cljs.core.js__GT_clj.cljs$lang$maxFixedArity = (1);

	/**
	 * Returns a memoized version of a referentially transparent function. The
	 *   memoized version of the function keeps a cache of the mapping from arguments
	 *   to results and, when calls with the same arguments are repeated often, has
	 *   higher performance at the expense of higher memory use.
	 */
	cljs.core.memoize = (function cljs$core$memoize(f){
	var mem = (function (){var G__4669 = cljs.core.PersistentArrayMap.EMPTY;
	return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__4669) : cljs.core.atom.call(null,G__4669));
	})();
	return ((function (mem){
	return (function() { 
	var G__4670__delegate = function (args){
	var v = cljs.core.get.cljs$core$IFn$_invoke$arity$3((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(mem) : cljs.core.deref.call(null,mem)),args,cljs.core.lookup_sentinel);
	if((v === cljs.core.lookup_sentinel)){
	var ret = cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(mem,cljs.core.assoc,args,ret);

	return ret;
	} else {
	return v;
	}
	};
	var G__4670 = function (var_args){
	var args = null;
	if (arguments.length > 0) {
	var G__4671__i = 0, G__4671__a = new Array(arguments.length -  0);
	while (G__4671__i < G__4671__a.length) {G__4671__a[G__4671__i] = arguments[G__4671__i + 0]; ++G__4671__i;}
	  args = new cljs.core.IndexedSeq(G__4671__a,0,null);
	} 
	return G__4670__delegate.call(this,args);};
	G__4670.cljs$lang$maxFixedArity = 0;
	G__4670.cljs$lang$applyTo = (function (arglist__4672){
	var args = cljs.core.seq(arglist__4672);
	return G__4670__delegate(args);
	});
	G__4670.cljs$core$IFn$_invoke$arity$variadic = G__4670__delegate;
	return G__4670;
	})()
	;
	;})(mem))
	});
	/**
	 * trampoline can be used to convert algorithms requiring mutual
	 *   recursion without stack consumption. Calls f with supplied args, if
	 *   any. If f returns a fn, calls that fn with no arguments, and
	 *   continues to repeat, until the return value is not a fn, then
	 *   returns that non-fn value. Note that if you want to return a fn as a
	 *   final value, you must wrap it in some data structure and unpack it
	 *   after trampoline returns.
	 */
	cljs.core.trampoline = (function cljs$core$trampoline(var_args){
	var args4673 = [];
	var len__6099__auto___4678 = arguments.length;
	var i__6100__auto___4679 = (0);
	while(true){
	if((i__6100__auto___4679 < len__6099__auto___4678)){
	args4673.push((arguments[i__6100__auto___4679]));

	var G__4680 = (i__6100__auto___4679 + (1));
	i__6100__auto___4679 = G__4680;
	continue;
	} else {
	}
	break;
	}

	var G__4677 = args4673.length;
	switch (G__4677) {
	case 1:
	return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	var argseq__6118__auto__ = (new cljs.core.IndexedSeq(args4673.slice((1)),(0),null));
	return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6118__auto__);

	}
	});

	cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1 = (function (f){
	while(true){
	var ret = (f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));
	if(cljs.core.fn_QMARK_(ret)){
	var G__4682 = ret;
	f = G__4682;
	continue;
	} else {
	return ret;
	}
	break;
	}
	});

	cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){
	return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$1((function (){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$2(f,args);
	}));
	});

	cljs.core.trampoline.cljs$lang$applyTo = (function (seq4674){
	var G__4675 = cljs.core.first(seq4674);
	var seq4674__$1 = cljs.core.next(seq4674);
	return cljs.core.trampoline.cljs$core$IFn$_invoke$arity$variadic(G__4675,seq4674__$1);
	});

	cljs.core.trampoline.cljs$lang$maxFixedArity = (1);

	/**
	 * Returns a random floating point number between 0 (inclusive) and
	 *   n (default 1) (exclusive).
	 */
	cljs.core.rand = (function cljs$core$rand(var_args){
	var args4683 = [];
	var len__6099__auto___4686 = arguments.length;
	var i__6100__auto___4687 = (0);
	while(true){
	if((i__6100__auto___4687 < len__6099__auto___4686)){
	args4683.push((arguments[i__6100__auto___4687]));

	var G__4688 = (i__6100__auto___4687 + (1));
	i__6100__auto___4687 = G__4688;
	continue;
	} else {
	}
	break;
	}

	var G__4685 = args4683.length;
	switch (G__4685) {
	case 0:
	return cljs.core.rand.cljs$core$IFn$_invoke$arity$0();

	break;
	case 1:
	return cljs.core.rand.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4683.length)].join('')));

	}
	});

	cljs.core.rand.cljs$core$IFn$_invoke$arity$0 = (function (){
	return cljs.core.rand.cljs$core$IFn$_invoke$arity$1((1));
	});

	cljs.core.rand.cljs$core$IFn$_invoke$arity$1 = (function (n){
	return (Math.random() * n);
	});

	cljs.core.rand.cljs$lang$maxFixedArity = 1;

	/**
	 * Returns a random integer between 0 (inclusive) and n (exclusive).
	 */
	cljs.core.rand_int = (function cljs$core$rand_int(n){
	var G__4691 = (Math.random() * n);
	return Math.floor(G__4691);
	});
	/**
	 * Return a random element of the (sequential) collection. Will have
	 *   the same performance characteristics as nth for the given
	 *   collection.
	 */
	cljs.core.rand_nth = (function cljs$core$rand_nth(coll){
	return cljs.core.nth.cljs$core$IFn$_invoke$arity$2(coll,cljs.core.rand_int(cljs.core.count(coll)));
	});
	/**
	 * Returns a map of the elements of coll keyed by the result of
	 *   f on each element. The value at each key will be a vector of the
	 *   corresponding elements, in the order they appeared in coll.
	 */
	cljs.core.group_by = (function cljs$core$group_by(f,coll){
	return cljs.core.persistent_BANG_(cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (ret,x){
	var k = (f.cljs$core$IFn$_invoke$arity$1 ? f.cljs$core$IFn$_invoke$arity$1(x) : f.call(null,x));
	return cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3(ret,k,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(ret,k,cljs.core.PersistentVector.EMPTY),x));
	}),cljs.core.transient$(cljs.core.PersistentArrayMap.EMPTY),coll));
	});
	/**
	 * Creates a hierarchy object for use with derive, isa? etc.
	 */
	cljs.core.make_hierarchy = (function cljs$core$make_hierarchy(){
	return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$parents,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$descendants,cljs.core.PersistentArrayMap.EMPTY,cljs.core.cst$kw$ancestors,cljs.core.PersistentArrayMap.EMPTY], null);
	});
	/**
	 * @type {*}
	 */
	cljs.core._global_hierarchy = null;
	cljs.core.get_global_hierarchy = (function cljs$core$get_global_hierarchy(){
	if((cljs.core._global_hierarchy == null)){
	cljs.core._global_hierarchy = (function (){var G__4693 = cljs.core.make_hierarchy();
	return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__4693) : cljs.core.atom.call(null,G__4693));
	})();
	} else {
	}

	return cljs.core._global_hierarchy;
	});
	cljs.core.swap_global_hierarchy_BANG_ = (function cljs$core$swap_global_hierarchy_BANG_(var_args){
	var args__6102__auto__ = [];
	var len__6099__auto___4696 = arguments.length;
	var i__6100__auto___4697 = (0);
	while(true){
	if((i__6100__auto___4697 < len__6099__auto___4696)){
	args__6102__auto__.push((arguments[i__6100__auto___4697]));

	var G__4698 = (i__6100__auto___4697 + (1));
	i__6100__auto___4697 = G__4698;
	continue;
	} else {
	}
	break;
	}

	var argseq__6103__auto__ = ((((1) < args__6102__auto__.length))?(new cljs.core.IndexedSeq(args__6102__auto__.slice((1)),(0),null)):null);
	return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),argseq__6103__auto__);
	});

	cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic = (function (f,args){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$4(cljs.core.swap_BANG_,cljs.core.get_global_hierarchy(),f,args);
	});

	cljs.core.swap_global_hierarchy_BANG_.cljs$lang$maxFixedArity = (1);

	cljs.core.swap_global_hierarchy_BANG_.cljs$lang$applyTo = (function (seq4694){
	var G__4695 = cljs.core.first(seq4694);
	var seq4694__$1 = cljs.core.next(seq4694);
	return cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(G__4695,seq4694__$1);
	});

	/**
	 * Returns true if (= child parent), or child is directly or indirectly derived from
	 *   parent, either via a JavaScript type inheritance relationship or a
	 *   relationship established via derive. h must be a hierarchy obtained
	 *   from make-hierarchy, if not supplied defaults to the global
	 *   hierarchy
	 */
	cljs.core.isa_QMARK_ = (function cljs$core$isa_QMARK_(var_args){
	var args4699 = [];
	var len__6099__auto___4703 = arguments.length;
	var i__6100__auto___4704 = (0);
	while(true){
	if((i__6100__auto___4704 < len__6099__auto___4703)){
	args4699.push((arguments[i__6100__auto___4704]));

	var G__4705 = (i__6100__auto___4704 + (1));
	i__6100__auto___4704 = G__4705;
	continue;
	} else {
	}
	break;
	}

	var G__4701 = args4699.length;
	switch (G__4701) {
	case 2:
	return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4699.length)].join('')));

	}
	});

	cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$2 = (function (child,parent){
	return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3((function (){var G__4702 = cljs.core.get_global_hierarchy();
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__4702) : cljs.core.deref.call(null,G__4702));
	})(),child,parent);
	});

	cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3 = (function (h,child,parent){
	var or__5450__auto__ = cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(child,parent);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = cljs.core.contains_QMARK_(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h).call(null,child),parent);
	if(or__5450__auto____$1){
	return or__5450__auto____$1;
	} else {
	var and__5442__auto__ = cljs.core.vector_QMARK_(parent);
	if(and__5442__auto__){
	var and__5442__auto____$1 = cljs.core.vector_QMARK_(child);
	if(and__5442__auto____$1){
	var and__5442__auto____$2 = (cljs.core.count(parent) === cljs.core.count(child));
	if(and__5442__auto____$2){
	var ret = true;
	var i = (0);
	while(true){
	if((!(ret)) || ((i === cljs.core.count(parent)))){
	return ret;
	} else {
	var G__4707 = cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(h,(child.cljs$core$IFn$_invoke$arity$1 ? child.cljs$core$IFn$_invoke$arity$1(i) : child.call(null,i)),(parent.cljs$core$IFn$_invoke$arity$1 ? parent.cljs$core$IFn$_invoke$arity$1(i) : parent.call(null,i)));
	var G__4708 = (i + (1));
	ret = G__4707;
	i = G__4708;
	continue;
	}
	break;
	}
	} else {
	return and__5442__auto____$2;
	}
	} else {
	return and__5442__auto____$1;
	}
	} else {
	return and__5442__auto__;
	}
	}
	}
	});

	cljs.core.isa_QMARK_.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns the immediate parents of tag, either via a JavaScript type
	 *   inheritance relationship or a relationship established via derive. h
	 *   must be a hierarchy obtained from make-hierarchy, if not supplied
	 *   defaults to the global hierarchy
	 */
	cljs.core.parents = (function cljs$core$parents(var_args){
	var args4709 = [];
	var len__6099__auto___4713 = arguments.length;
	var i__6100__auto___4714 = (0);
	while(true){
	if((i__6100__auto___4714 < len__6099__auto___4713)){
	args4709.push((arguments[i__6100__auto___4714]));

	var G__4715 = (i__6100__auto___4714 + (1));
	i__6100__auto___4714 = G__4715;
	continue;
	} else {
	}
	break;
	}

	var G__4711 = args4709.length;
	switch (G__4711) {
	case 1:
	return cljs.core.parents.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.parents.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4709.length)].join('')));

	}
	});

	cljs.core.parents.cljs$core$IFn$_invoke$arity$1 = (function (tag){
	return cljs.core.parents.cljs$core$IFn$_invoke$arity$2((function (){var G__4712 = cljs.core.get_global_hierarchy();
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__4712) : cljs.core.deref.call(null,G__4712));
	})(),tag);
	});

	cljs.core.parents.cljs$core$IFn$_invoke$arity$2 = (function (h,tag){
	return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h),tag));
	});

	cljs.core.parents.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns the immediate and indirect parents of tag, either via a JavaScript type
	 *   inheritance relationship or a relationship established via derive. h
	 *   must be a hierarchy obtained from make-hierarchy, if not supplied
	 *   defaults to the global hierarchy
	 */
	cljs.core.ancestors = (function cljs$core$ancestors(var_args){
	var args4717 = [];
	var len__6099__auto___4721 = arguments.length;
	var i__6100__auto___4722 = (0);
	while(true){
	if((i__6100__auto___4722 < len__6099__auto___4721)){
	args4717.push((arguments[i__6100__auto___4722]));

	var G__4723 = (i__6100__auto___4722 + (1));
	i__6100__auto___4722 = G__4723;
	continue;
	} else {
	}
	break;
	}

	var G__4719 = args4717.length;
	switch (G__4719) {
	case 1:
	return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4717.length)].join('')));

	}
	});

	cljs.core.ancestors.cljs$core$IFn$_invoke$arity$1 = (function (tag){
	return cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2((function (){var G__4720 = cljs.core.get_global_hierarchy();
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__4720) : cljs.core.deref.call(null,G__4720));
	})(),tag);
	});

	cljs.core.ancestors.cljs$core$IFn$_invoke$arity$2 = (function (h,tag){
	return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h),tag));
	});

	cljs.core.ancestors.cljs$lang$maxFixedArity = 2;

	/**
	 * Returns the immediate and indirect children of tag, through a
	 *   relationship established via derive. h must be a hierarchy obtained
	 *   from make-hierarchy, if not supplied defaults to the global
	 *   hierarchy. Note: does not work on JavaScript type inheritance
	 *   relationships.
	 */
	cljs.core.descendants = (function cljs$core$descendants(var_args){
	var args4725 = [];
	var len__6099__auto___4729 = arguments.length;
	var i__6100__auto___4730 = (0);
	while(true){
	if((i__6100__auto___4730 < len__6099__auto___4729)){
	args4725.push((arguments[i__6100__auto___4730]));

	var G__4731 = (i__6100__auto___4730 + (1));
	i__6100__auto___4730 = G__4731;
	continue;
	} else {
	}
	break;
	}

	var G__4727 = args4725.length;
	switch (G__4727) {
	case 1:
	return cljs.core.descendants.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4725.length)].join('')));

	}
	});

	cljs.core.descendants.cljs$core$IFn$_invoke$arity$1 = (function (tag){
	return cljs.core.descendants.cljs$core$IFn$_invoke$arity$2((function (){var G__4728 = cljs.core.get_global_hierarchy();
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(G__4728) : cljs.core.deref.call(null,G__4728));
	})(),tag);
	});

	cljs.core.descendants.cljs$core$IFn$_invoke$arity$2 = (function (h,tag){
	return cljs.core.not_empty(cljs.core.get.cljs$core$IFn$_invoke$arity$2(cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h),tag));
	});

	cljs.core.descendants.cljs$lang$maxFixedArity = 2;

	/**
	 * Establishes a parent/child relationship between parent and
	 *   tag. Parent must be a namespace-qualified symbol or keyword and
	 *   child can be either a namespace-qualified symbol or keyword or a
	 *   class. h must be a hierarchy obtained from make-hierarchy, if not
	 *   supplied defaults to, and modifies, the global hierarchy.
	 */
	cljs.core.derive = (function cljs$core$derive(var_args){
	var args4733 = [];
	var len__6099__auto___4736 = arguments.length;
	var i__6100__auto___4737 = (0);
	while(true){
	if((i__6100__auto___4737 < len__6099__auto___4736)){
	args4733.push((arguments[i__6100__auto___4737]));

	var G__4738 = (i__6100__auto___4737 + (1));
	i__6100__auto___4737 = G__4738;
	continue;
	} else {
	}
	break;
	}

	var G__4735 = args4733.length;
	switch (G__4735) {
	case 2:
	return cljs.core.derive.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.derive.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4733.length)].join('')));

	}
	});

	cljs.core.derive.cljs$core$IFn$_invoke$arity$2 = (function (tag,parent){
	if(cljs.core.truth_(cljs.core.namespace(parent))){
	} else {
	throw (new Error("Assert failed: (namespace parent)"));
	}

	cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.derive,cljs.core.array_seq([tag,parent], 0));

	return null;
	});

	cljs.core.derive.cljs$core$IFn$_invoke$arity$3 = (function (h,tag,parent){
	if(cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2(tag,parent)){
	} else {
	throw (new Error("Assert failed: (not= tag parent)"));
	}

	var tp = cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h);
	var td = cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h);
	var ta = cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h);
	var tf = ((function (tp,td,ta){
	return (function (m,source,sources,target,targets){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (tp,td,ta){
	return (function (ret,k){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,k,cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,cljs.core.get.cljs$core$IFn$_invoke$arity$3(targets,k,cljs.core.PersistentHashSet.EMPTY),cljs.core.cons(target,(targets.cljs$core$IFn$_invoke$arity$1 ? targets.cljs$core$IFn$_invoke$arity$1(target) : targets.call(null,target)))));
	});})(tp,td,ta))
	,m,cljs.core.cons(source,(sources.cljs$core$IFn$_invoke$arity$1 ? sources.cljs$core$IFn$_invoke$arity$1(source) : sources.call(null,source))));
	});})(tp,td,ta))
	;
	var or__5450__auto__ = ((cljs.core.contains_QMARK_((tp.cljs$core$IFn$_invoke$arity$1 ? tp.cljs$core$IFn$_invoke$arity$1(tag) : tp.call(null,tag)),parent))?null:(function (){
	if(cljs.core.contains_QMARK_((ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(tag) : ta.call(null,tag)),parent)){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag),cljs.core.str.cljs$core$IFn$_invoke$arity$1("already has"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent),cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join('')));
	} else {
	}

	if(cljs.core.contains_QMARK_((ta.cljs$core$IFn$_invoke$arity$1 ? ta.cljs$core$IFn$_invoke$arity$1(parent) : ta.call(null,parent)),tag)){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Cyclic derivation:"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(parent),cljs.core.str.cljs$core$IFn$_invoke$arity$1("has"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(tag),cljs.core.str.cljs$core$IFn$_invoke$arity$1("as ancestor")].join('')));
	} else {
	}

	return new cljs.core.PersistentArrayMap(null, 3, [cljs.core.cst$kw$parents,cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h),tag,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(tp,tag,cljs.core.PersistentHashSet.EMPTY),parent)),cljs.core.cst$kw$ancestors,tf(cljs.core.cst$kw$ancestors.cljs$core$IFn$_invoke$arity$1(h),tag,td,parent,ta),cljs.core.cst$kw$descendants,tf(cljs.core.cst$kw$descendants.cljs$core$IFn$_invoke$arity$1(h),parent,ta,tag,td)], null);
	})()
	);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return h;
	}
	});

	cljs.core.derive.cljs$lang$maxFixedArity = 3;

	/**
	 * Removes a parent/child relationship between parent and
	 *   tag. h must be a hierarchy obtained from make-hierarchy, if not
	 *   supplied defaults to, and modifies, the global hierarchy.
	 */
	cljs.core.underive = (function cljs$core$underive(var_args){
	var args4743 = [];
	var len__6099__auto___4746 = arguments.length;
	var i__6100__auto___4747 = (0);
	while(true){
	if((i__6100__auto___4747 < len__6099__auto___4746)){
	args4743.push((arguments[i__6100__auto___4747]));

	var G__4748 = (i__6100__auto___4747 + (1));
	i__6100__auto___4747 = G__4748;
	continue;
	} else {
	}
	break;
	}

	var G__4745 = args4743.length;
	switch (G__4745) {
	case 2:
	return cljs.core.underive.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.underive.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4743.length)].join('')));

	}
	});

	cljs.core.underive.cljs$core$IFn$_invoke$arity$2 = (function (tag,parent){
	cljs.core.swap_global_hierarchy_BANG_.cljs$core$IFn$_invoke$arity$variadic(cljs.core.underive,cljs.core.array_seq([tag,parent], 0));

	return null;
	});

	cljs.core.underive.cljs$core$IFn$_invoke$arity$3 = (function (h,tag,parent){
	var parentMap = cljs.core.cst$kw$parents.cljs$core$IFn$_invoke$arity$1(h);
	var childsParents = (cljs.core.truth_((parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null,tag)))?cljs.core.disj.cljs$core$IFn$_invoke$arity$2((parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null,tag)),parent):cljs.core.PersistentHashSet.EMPTY);
	var newParents = (cljs.core.truth_(cljs.core.not_empty(childsParents))?cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(parentMap,tag,childsParents):cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2(parentMap,tag));
	var deriv_seq = cljs.core.flatten(cljs.core.map.cljs$core$IFn$_invoke$arity$2(((function (parentMap,childsParents,newParents){
	return (function (p1__4740_SHARP_){
	return cljs.core.cons(cljs.core.first(p1__4740_SHARP_),cljs.core.interpose.cljs$core$IFn$_invoke$arity$2(cljs.core.first(p1__4740_SHARP_),cljs.core.second(p1__4740_SHARP_)));
	});})(parentMap,childsParents,newParents))
	,cljs.core.seq(newParents)));
	if(cljs.core.contains_QMARK_((parentMap.cljs$core$IFn$_invoke$arity$1 ? parentMap.cljs$core$IFn$_invoke$arity$1(tag) : parentMap.call(null,tag)),parent)){
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (parentMap,childsParents,newParents,deriv_seq){
	return (function (p1__4741_SHARP_,p2__4742_SHARP_){
	return cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.derive,p1__4741_SHARP_,p2__4742_SHARP_);
	});})(parentMap,childsParents,newParents,deriv_seq))
	,cljs.core.make_hierarchy(),cljs.core.partition.cljs$core$IFn$_invoke$arity$2((2),deriv_seq));
	} else {
	return h;
	}
	});

	cljs.core.underive.cljs$lang$maxFixedArity = 3;

	cljs.core.reset_cache = (function cljs$core$reset_cache(method_cache,method_table,cached_hierarchy,hierarchy){
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(method_cache,(function (_){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null,method_table));
	}));

	return cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(cached_hierarchy,(function (_){
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null,hierarchy));
	}));
	});
	cljs.core.prefers_STAR_ = (function cljs$core$prefers_STAR_(x,y,prefer_table){
	var xprefs = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(prefer_table) : cljs.core.deref.call(null,prefer_table)).call(null,x);
	var or__5450__auto__ = (cljs.core.truth_((function (){var and__5442__auto__ = xprefs;
	if(cljs.core.truth_(and__5442__auto__)){
	return (xprefs.cljs$core$IFn$_invoke$arity$1 ? xprefs.cljs$core$IFn$_invoke$arity$1(y) : xprefs.call(null,y));
	} else {
	return and__5442__auto__;
	}
	})())?true:null);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	var or__5450__auto____$1 = (function (){var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(y);
	while(true){
	if((cljs.core.count(ps) > (0))){
	if(cljs.core.truth_((function (){var G__4765 = x;
	var G__4766 = cljs.core.first(ps);
	var G__4767 = prefer_table;
	return (cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__4765,G__4766,G__4767) : cljs.core.prefers_STAR_.call(null,G__4765,G__4766,G__4767));
	})())){
	} else {
	}

	var G__4774 = cljs.core.rest(ps);
	ps = G__4774;
	continue;
	} else {
	return null;
	}
	break;
	}
	})();
	if(cljs.core.truth_(or__5450__auto____$1)){
	return or__5450__auto____$1;
	} else {
	var or__5450__auto____$2 = (function (){var ps = cljs.core.parents.cljs$core$IFn$_invoke$arity$1(x);
	while(true){
	if((cljs.core.count(ps) > (0))){
	if(cljs.core.truth_((function (){var G__4771 = cljs.core.first(ps);
	var G__4772 = y;
	var G__4773 = prefer_table;
	return (cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3 ? cljs.core.prefers_STAR_.cljs$core$IFn$_invoke$arity$3(G__4771,G__4772,G__4773) : cljs.core.prefers_STAR_.call(null,G__4771,G__4772,G__4773));
	})())){
	} else {
	}

	var G__4775 = cljs.core.rest(ps);
	ps = G__4775;
	continue;
	} else {
	return null;
	}
	break;
	}
	})();
	if(cljs.core.truth_(or__5450__auto____$2)){
	return or__5450__auto____$2;
	} else {
	return false;
	}
	}
	}
	});
	cljs.core.dominates = (function cljs$core$dominates(x,y,prefer_table,hierarchy){
	var or__5450__auto__ = cljs.core.prefers_STAR_(x,y,prefer_table);
	if(cljs.core.truth_(or__5450__auto__)){
	return or__5450__auto__;
	} else {
	return cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3(hierarchy,x,y);
	}
	});
	cljs.core.find_and_cache_best_method = (function cljs$core$find_and_cache_best_method(name,dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy){
	var best_entry = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (be,p__4780){
	var vec__4781 = p__4780;
	var k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4781,(0),null);
	var _ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4781,(1),null);
	var e = vec__4781;
	if(cljs.core.isa_QMARK_.cljs$core$IFn$_invoke$arity$3((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null,hierarchy)),dispatch_val,k)){
	var be2 = (cljs.core.truth_((function (){var or__5450__auto__ = (be == null);
	if(or__5450__auto__){
	return or__5450__auto__;
	} else {
	return cljs.core.dominates(k,cljs.core.first(be),prefer_table,(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null,hierarchy)));
	}
	})())?e:be);
	if(cljs.core.truth_(cljs.core.dominates(cljs.core.first(be2),k,prefer_table,(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null,hierarchy))))){
	} else {
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Multiple methods in multimethod '"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),cljs.core.str.cljs$core$IFn$_invoke$arity$1("' match dispatch value: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" -> "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(k),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" and "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(be2)),cljs.core.str.cljs$core$IFn$_invoke$arity$1(", and neither is preferred")].join('')));
	}

	return be2;
	} else {
	return be;
	}
	}),null,(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(method_table) : cljs.core.deref.call(null,method_table)));
	if(cljs.core.truth_(best_entry)){
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cached_hierarchy) : cljs.core.deref.call(null,cached_hierarchy)),(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(hierarchy) : cljs.core.deref.call(null,hierarchy)))){
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(method_cache,cljs.core.assoc,dispatch_val,cljs.core.second(best_entry));

	return cljs.core.second(best_entry);
	} else {
	cljs.core.reset_cache(method_cache,method_table,cached_hierarchy,hierarchy);

	return (cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7 ? cljs.core.find_and_cache_best_method.cljs$core$IFn$_invoke$arity$7(name,dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy) : cljs.core.find_and_cache_best_method.call(null,name,dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy));
	}
	} else {
	return null;
	}
	});

	/**
	 * @interface
	 */
	cljs.core.IMultiFn = function(){};

	cljs.core._reset = (function cljs$core$_reset(mf){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_reset$arity$1 == null)))){
	return mf.cljs$core$IMultiFn$_reset$arity$1(mf);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._reset[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto__.call(null,mf));
	} else {
	var m__5781__auto____$1 = (cljs.core._reset["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto____$1.call(null,mf));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-reset",mf);
	}
	}
	}
	});

	cljs.core._add_method = (function cljs$core$_add_method(mf,dispatch_val,method){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_add_method$arity$3 == null)))){
	return mf.cljs$core$IMultiFn$_add_method$arity$3(mf,dispatch_val,method);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._add_method[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(mf,dispatch_val,method) : m__5781__auto__.call(null,mf,dispatch_val,method));
	} else {
	var m__5781__auto____$1 = (cljs.core._add_method["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(mf,dispatch_val,method) : m__5781__auto____$1.call(null,mf,dispatch_val,method));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-add-method",mf);
	}
	}
	}
	});

	cljs.core._remove_method = (function cljs$core$_remove_method(mf,dispatch_val){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_remove_method$arity$2 == null)))){
	return mf.cljs$core$IMultiFn$_remove_method$arity$2(mf,dispatch_val);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._remove_method[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(mf,dispatch_val) : m__5781__auto__.call(null,mf,dispatch_val));
	} else {
	var m__5781__auto____$1 = (cljs.core._remove_method["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(mf,dispatch_val) : m__5781__auto____$1.call(null,mf,dispatch_val));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-remove-method",mf);
	}
	}
	}
	});

	cljs.core._prefer_method = (function cljs$core$_prefer_method(mf,dispatch_val,dispatch_val_y){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_prefer_method$arity$3 == null)))){
	return mf.cljs$core$IMultiFn$_prefer_method$arity$3(mf,dispatch_val,dispatch_val_y);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._prefer_method[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$3(mf,dispatch_val,dispatch_val_y) : m__5781__auto__.call(null,mf,dispatch_val,dispatch_val_y));
	} else {
	var m__5781__auto____$1 = (cljs.core._prefer_method["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$3(mf,dispatch_val,dispatch_val_y) : m__5781__auto____$1.call(null,mf,dispatch_val,dispatch_val_y));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-prefer-method",mf);
	}
	}
	}
	});

	cljs.core._get_method = (function cljs$core$_get_method(mf,dispatch_val){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_get_method$arity$2 == null)))){
	return mf.cljs$core$IMultiFn$_get_method$arity$2(mf,dispatch_val);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._get_method[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$2(mf,dispatch_val) : m__5781__auto__.call(null,mf,dispatch_val));
	} else {
	var m__5781__auto____$1 = (cljs.core._get_method["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$2(mf,dispatch_val) : m__5781__auto____$1.call(null,mf,dispatch_val));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-get-method",mf);
	}
	}
	}
	});

	cljs.core._methods = (function cljs$core$_methods(mf){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_methods$arity$1 == null)))){
	return mf.cljs$core$IMultiFn$_methods$arity$1(mf);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._methods[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto__.call(null,mf));
	} else {
	var m__5781__auto____$1 = (cljs.core._methods["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto____$1.call(null,mf));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-methods",mf);
	}
	}
	}
	});

	cljs.core._prefers = (function cljs$core$_prefers(mf){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_prefers$arity$1 == null)))){
	return mf.cljs$core$IMultiFn$_prefers$arity$1(mf);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._prefers[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto__.call(null,mf));
	} else {
	var m__5781__auto____$1 = (cljs.core._prefers["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto____$1.call(null,mf));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-prefers",mf);
	}
	}
	}
	});

	cljs.core._default_dispatch_val = (function cljs$core$_default_dispatch_val(mf){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1 == null)))){
	return mf.cljs$core$IMultiFn$_default_dispatch_val$arity$1(mf);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._default_dispatch_val[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto__.call(null,mf));
	} else {
	var m__5781__auto____$1 = (cljs.core._default_dispatch_val["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto____$1.call(null,mf));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-default-dispatch-val",mf);
	}
	}
	}
	});

	cljs.core._dispatch_fn = (function cljs$core$_dispatch_fn(mf){
	if((!((mf == null))) && (!((mf.cljs$core$IMultiFn$_dispatch_fn$arity$1 == null)))){
	return mf.cljs$core$IMultiFn$_dispatch_fn$arity$1(mf);
	} else {
	var x__5780__auto__ = (((mf == null))?null:mf);
	var m__5781__auto__ = (cljs.core._dispatch_fn[goog.typeOf(x__5780__auto__)]);
	if(!((m__5781__auto__ == null))){
	return (m__5781__auto__.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto__.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto__.call(null,mf));
	} else {
	var m__5781__auto____$1 = (cljs.core._dispatch_fn["_"]);
	if(!((m__5781__auto____$1 == null))){
	return (m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1 ? m__5781__auto____$1.cljs$core$IFn$_invoke$arity$1(mf) : m__5781__auto____$1.call(null,mf));
	} else {
	throw cljs.core.missing_protocol("IMultiFn.-dispatch-fn",mf);
	}
	}
	}
	});

	cljs.core.throw_no_method_error = (function cljs$core$throw_no_method_error(name,dispatch_val){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("No method in multimethod '"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(name),cljs.core.str.cljs$core$IFn$_invoke$arity$1("' for dispatch value: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val)].join('')));
	});

	/**
	* @constructor
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IFn}
	 * @implements {cljs.core.IMultiFn}
	 * @implements {cljs.core.INamed}
	*/
	cljs.core.MultiFn = (function (name,dispatch_fn,default_dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy){
	this.name = name;
	this.dispatch_fn = dispatch_fn;
	this.default_dispatch_val = default_dispatch_val;
	this.hierarchy = hierarchy;
	this.method_table = method_table;
	this.prefer_table = prefer_table;
	this.method_cache = method_cache;
	this.cached_hierarchy = cached_hierarchy;
	this.cljs$lang$protocol_mask$partition0$ = 4194305;
	this.cljs$lang$protocol_mask$partition1$ = 4352;
	})
	cljs.core.MultiFn.prototype.call = (function() {
	var G__4785 = null;
	var G__4785__1 = (function (self__){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null));
	});
	var G__4785__2 = (function (self__,a){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null,a));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null,a));
	});
	var G__4785__3 = (function (self__,a,b){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a,b) : self__.dispatch_fn.call(null,a,b));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a,b) : target_fn.call(null,a,b));
	});
	var G__4785__4 = (function (self__,a,b,c){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a,b,c) : self__.dispatch_fn.call(null,a,b,c));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a,b,c) : target_fn.call(null,a,b,c));
	});
	var G__4785__5 = (function (self__,a,b,c,d){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : self__.dispatch_fn.call(null,a,b,c,d));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : target_fn.call(null,a,b,c,d));
	});
	var G__4785__6 = (function (self__,a,b,c,d,e){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : self__.dispatch_fn.call(null,a,b,c,d,e));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : target_fn.call(null,a,b,c,d,e));
	});
	var G__4785__7 = (function (self__,a,b,c,d,e,f){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : self__.dispatch_fn.call(null,a,b,c,d,e,f));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : target_fn.call(null,a,b,c,d,e,f));
	});
	var G__4785__8 = (function (self__,a,b,c,d,e,f,g){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : target_fn.call(null,a,b,c,d,e,f,g));
	});
	var G__4785__9 = (function (self__,a,b,c,d,e,f,g,h){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : target_fn.call(null,a,b,c,d,e,f,g,h));
	});
	var G__4785__10 = (function (self__,a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : target_fn.call(null,a,b,c,d,e,f,g,h,i));
	});
	var G__4785__11 = (function (self__,a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j));
	});
	var G__4785__12 = (function (self__,a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	});
	var G__4785__13 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	});
	var G__4785__14 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	});
	var G__4785__15 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	});
	var G__4785__16 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	});
	var G__4785__17 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	});
	var G__4785__18 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	});
	var G__4785__19 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	});
	var G__4785__20 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	});
	var G__4785__21 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	});
	var G__4785__22 = (function (self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var self____$1 = this;
	var mf = self____$1;
	var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn,a,b,c,d,cljs.core.array_seq([e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest], 0));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn,a,b,c,d,cljs.core.array_seq([e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest], 0));
	});
	G__4785 = function(self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	switch(arguments.length){
	case 1:
	return G__4785__1.call(this,self__);
	case 2:
	return G__4785__2.call(this,self__,a);
	case 3:
	return G__4785__3.call(this,self__,a,b);
	case 4:
	return G__4785__4.call(this,self__,a,b,c);
	case 5:
	return G__4785__5.call(this,self__,a,b,c,d);
	case 6:
	return G__4785__6.call(this,self__,a,b,c,d,e);
	case 7:
	return G__4785__7.call(this,self__,a,b,c,d,e,f);
	case 8:
	return G__4785__8.call(this,self__,a,b,c,d,e,f,g);
	case 9:
	return G__4785__9.call(this,self__,a,b,c,d,e,f,g,h);
	case 10:
	return G__4785__10.call(this,self__,a,b,c,d,e,f,g,h,i);
	case 11:
	return G__4785__11.call(this,self__,a,b,c,d,e,f,g,h,i,j);
	case 12:
	return G__4785__12.call(this,self__,a,b,c,d,e,f,g,h,i,j,k);
	case 13:
	return G__4785__13.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l);
	case 14:
	return G__4785__14.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m);
	case 15:
	return G__4785__15.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n);
	case 16:
	return G__4785__16.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o);
	case 17:
	return G__4785__17.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p);
	case 18:
	return G__4785__18.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q);
	case 19:
	return G__4785__19.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r);
	case 20:
	return G__4785__20.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s);
	case 21:
	return G__4785__21.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t);
	case 22:
	return G__4785__22.call(this,self__,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest);
	}
	throw(new Error('Invalid arity: ' + (arguments.length - 1)));
	};
	G__4785.cljs$core$IFn$_invoke$arity$1 = G__4785__1;
	G__4785.cljs$core$IFn$_invoke$arity$2 = G__4785__2;
	G__4785.cljs$core$IFn$_invoke$arity$3 = G__4785__3;
	G__4785.cljs$core$IFn$_invoke$arity$4 = G__4785__4;
	G__4785.cljs$core$IFn$_invoke$arity$5 = G__4785__5;
	G__4785.cljs$core$IFn$_invoke$arity$6 = G__4785__6;
	G__4785.cljs$core$IFn$_invoke$arity$7 = G__4785__7;
	G__4785.cljs$core$IFn$_invoke$arity$8 = G__4785__8;
	G__4785.cljs$core$IFn$_invoke$arity$9 = G__4785__9;
	G__4785.cljs$core$IFn$_invoke$arity$10 = G__4785__10;
	G__4785.cljs$core$IFn$_invoke$arity$11 = G__4785__11;
	G__4785.cljs$core$IFn$_invoke$arity$12 = G__4785__12;
	G__4785.cljs$core$IFn$_invoke$arity$13 = G__4785__13;
	G__4785.cljs$core$IFn$_invoke$arity$14 = G__4785__14;
	G__4785.cljs$core$IFn$_invoke$arity$15 = G__4785__15;
	G__4785.cljs$core$IFn$_invoke$arity$16 = G__4785__16;
	G__4785.cljs$core$IFn$_invoke$arity$17 = G__4785__17;
	G__4785.cljs$core$IFn$_invoke$arity$18 = G__4785__18;
	G__4785.cljs$core$IFn$_invoke$arity$19 = G__4785__19;
	G__4785.cljs$core$IFn$_invoke$arity$20 = G__4785__20;
	G__4785.cljs$core$IFn$_invoke$arity$21 = G__4785__21;
	G__4785.cljs$core$IFn$_invoke$arity$22 = G__4785__22;
	return G__4785;
	})()
	;

	cljs.core.MultiFn.prototype.apply = (function (self__,args4784){
	var self__ = this;
	var self____$1 = this;
	return self____$1.call.apply(self____$1,[self____$1].concat(cljs.core.aclone(args4784)));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$0 = (function (){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$0() : self__.dispatch_fn.call(null));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$0 ? target_fn.cljs$core$IFn$_invoke$arity$0() : target_fn.call(null));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$1 = (function (a){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$1(a) : self__.dispatch_fn.call(null,a));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$1 ? target_fn.cljs$core$IFn$_invoke$arity$1(a) : target_fn.call(null,a));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$2 = (function (a,b){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$2(a,b) : self__.dispatch_fn.call(null,a,b));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$2 ? target_fn.cljs$core$IFn$_invoke$arity$2(a,b) : target_fn.call(null,a,b));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$3 = (function (a,b,c){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$3(a,b,c) : self__.dispatch_fn.call(null,a,b,c));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$3 ? target_fn.cljs$core$IFn$_invoke$arity$3(a,b,c) : target_fn.call(null,a,b,c));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$4 = (function (a,b,c,d){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : self__.dispatch_fn.call(null,a,b,c,d));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$4 ? target_fn.cljs$core$IFn$_invoke$arity$4(a,b,c,d) : target_fn.call(null,a,b,c,d));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$5 = (function (a,b,c,d,e){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : self__.dispatch_fn.call(null,a,b,c,d,e));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$5 ? target_fn.cljs$core$IFn$_invoke$arity$5(a,b,c,d,e) : target_fn.call(null,a,b,c,d,e));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$6 = (function (a,b,c,d,e,f){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : self__.dispatch_fn.call(null,a,b,c,d,e,f));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$6 ? target_fn.cljs$core$IFn$_invoke$arity$6(a,b,c,d,e,f) : target_fn.call(null,a,b,c,d,e,f));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$7 = (function (a,b,c,d,e,f,g){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$7 ? target_fn.cljs$core$IFn$_invoke$arity$7(a,b,c,d,e,f,g) : target_fn.call(null,a,b,c,d,e,f,g));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$8 = (function (a,b,c,d,e,f,g,h){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$8 ? target_fn.cljs$core$IFn$_invoke$arity$8(a,b,c,d,e,f,g,h) : target_fn.call(null,a,b,c,d,e,f,g,h));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$9 = (function (a,b,c,d,e,f,g,h,i){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$9 ? target_fn.cljs$core$IFn$_invoke$arity$9(a,b,c,d,e,f,g,h,i) : target_fn.call(null,a,b,c,d,e,f,g,h,i));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$10 = (function (a,b,c,d,e,f,g,h,i,j){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$10 ? target_fn.cljs$core$IFn$_invoke$arity$10(a,b,c,d,e,f,g,h,i,j) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$11 = (function (a,b,c,d,e,f,g,h,i,j,k){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$11 ? target_fn.cljs$core$IFn$_invoke$arity$11(a,b,c,d,e,f,g,h,i,j,k) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$12 = (function (a,b,c,d,e,f,g,h,i,j,k,l){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$12 ? target_fn.cljs$core$IFn$_invoke$arity$12(a,b,c,d,e,f,g,h,i,j,k,l) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$13 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$13 ? target_fn.cljs$core$IFn$_invoke$arity$13(a,b,c,d,e,f,g,h,i,j,k,l,m) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$14 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$14 ? target_fn.cljs$core$IFn$_invoke$arity$14(a,b,c,d,e,f,g,h,i,j,k,l,m,n) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$15 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$15 ? target_fn.cljs$core$IFn$_invoke$arity$15(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$16 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$16 ? target_fn.cljs$core$IFn$_invoke$arity$16(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$17 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$17 ? target_fn.cljs$core$IFn$_invoke$arity$17(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$18 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$18 ? target_fn.cljs$core$IFn$_invoke$arity$18(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$19 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$19 ? target_fn.cljs$core$IFn$_invoke$arity$19(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$20 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t){
	var self__ = this;
	var mf = this;
	var dispatch_val = (self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20 ? self__.dispatch_fn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : self__.dispatch_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return (target_fn.cljs$core$IFn$_invoke$arity$20 ? target_fn.cljs$core$IFn$_invoke$arity$20(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t) : target_fn.call(null,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t));
	});

	cljs.core.MultiFn.prototype.cljs$core$IFn$_invoke$arity$21 = (function (a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest){
	var self__ = this;
	var mf = this;
	var dispatch_val = cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(self__.dispatch_fn,a,b,c,d,cljs.core.array_seq([e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest], 0));
	var target_fn = mf.cljs$core$IMultiFn$_get_method$arity$2(null,dispatch_val);
	if(cljs.core.truth_(target_fn)){
	} else {
	cljs.core.throw_no_method_error(self__.name,dispatch_val);
	}

	return cljs.core.apply.cljs$core$IFn$_invoke$arity$variadic(target_fn,a,b,c,d,cljs.core.array_seq([e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,rest], 0));
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefer_method$arity$3 = (function (mf,dispatch_val_x,dispatch_val_y){
	var self__ = this;
	var mf__$1 = this;
	if(cljs.core.truth_(cljs.core.prefers_STAR_(dispatch_val_x,dispatch_val_y,self__.prefer_table))){
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Preference conflict in multimethod '"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name),cljs.core.str.cljs$core$IFn$_invoke$arity$1("': "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_y),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" is already preferred to "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(dispatch_val_x)].join('')));
	} else {
	}

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table,((function (mf__$1){
	return (function (old){
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(old,dispatch_val_x,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(old,dispatch_val_x,cljs.core.PersistentHashSet.EMPTY),dispatch_val_y));
	});})(mf__$1))
	);

	return cljs.core.reset_cache(self__.method_cache,self__.method_table,self__.cached_hierarchy,self__.hierarchy);
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_default_dispatch_val$arity$1 = (function (mf){
	var self__ = this;
	var mf__$1 = this;
	return self__.default_dispatch_val;
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_remove_method$arity$2 = (function (mf,dispatch_val){
	var self__ = this;
	var mf__$1 = this;
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3(self__.method_table,cljs.core.dissoc,dispatch_val);

	cljs.core.reset_cache(self__.method_cache,self__.method_table,self__.cached_hierarchy,self__.hierarchy);

	return mf__$1;
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_methods$arity$1 = (function (mf){
	var self__ = this;
	var mf__$1 = this;
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null,self__.method_table));
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_prefers$arity$1 = (function (mf){
	var self__ = this;
	var mf__$1 = this;
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.prefer_table) : cljs.core.deref.call(null,self__.prefer_table));
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_dispatch_fn$arity$1 = (function (mf){
	var self__ = this;
	var mf__$1 = this;
	return self__.dispatch_fn;
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_add_method$arity$3 = (function (mf,dispatch_val,method){
	var self__ = this;
	var mf__$1 = this;
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(self__.method_table,cljs.core.assoc,dispatch_val,method);

	cljs.core.reset_cache(self__.method_cache,self__.method_table,self__.cached_hierarchy,self__.hierarchy);

	return mf__$1;
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_reset$arity$1 = (function (mf){
	var self__ = this;
	var mf__$1 = this;
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_table,((function (mf__$1){
	return (function (mf__$2){
	return cljs.core.PersistentArrayMap.EMPTY;
	});})(mf__$1))
	);

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.method_cache,((function (mf__$1){
	return (function (mf__$2){
	return cljs.core.PersistentArrayMap.EMPTY;
	});})(mf__$1))
	);

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.prefer_table,((function (mf__$1){
	return (function (mf__$2){
	return cljs.core.PersistentArrayMap.EMPTY;
	});})(mf__$1))
	);

	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2(self__.cached_hierarchy,((function (mf__$1){
	return (function (mf__$2){
	return null;
	});})(mf__$1))
	);

	return mf__$1;
	});

	cljs.core.MultiFn.prototype.cljs$core$IMultiFn$_get_method$arity$2 = (function (mf,dispatch_val){
	var self__ = this;
	var mf__$1 = this;
	if(cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.cached_hierarchy) : cljs.core.deref.call(null,self__.cached_hierarchy)),(cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.hierarchy) : cljs.core.deref.call(null,self__.hierarchy)))){
	} else {
	cljs.core.reset_cache(self__.method_cache,self__.method_table,self__.cached_hierarchy,self__.hierarchy);
	}

	var temp__6736__auto__ = (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_cache) : cljs.core.deref.call(null,self__.method_cache)).call(null,dispatch_val);
	if(cljs.core.truth_(temp__6736__auto__)){
	var target_fn = temp__6736__auto__;
	return target_fn;
	} else {
	var temp__6736__auto____$1 = cljs.core.find_and_cache_best_method(self__.name,dispatch_val,self__.hierarchy,self__.method_table,self__.prefer_table,self__.method_cache,self__.cached_hierarchy);
	if(cljs.core.truth_(temp__6736__auto____$1)){
	var target_fn = temp__6736__auto____$1;
	return target_fn;
	} else {
	return (cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(self__.method_table) : cljs.core.deref.call(null,self__.method_table)).call(null,self__.default_dispatch_val);
	}
	}
	});

	cljs.core.MultiFn.prototype.cljs$core$INamed$_name$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core._name(self__.name);
	});

	cljs.core.MultiFn.prototype.cljs$core$INamed$_namespace$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return cljs.core._namespace(self__.name);
	});

	cljs.core.MultiFn.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return goog.getUid(this$__$1);
	});

	cljs.core.MultiFn.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 8, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$name,cljs.core.cst$sym$dispatch_DASH_fn,cljs.core.cst$sym$default_DASH_dispatch_DASH_val,cljs.core.cst$sym$hierarchy,cljs.core.cst$sym$method_DASH_table,cljs.core.cst$sym$prefer_DASH_table,cljs.core.cst$sym$method_DASH_cache,cljs.core.cst$sym$cached_DASH_hierarchy], null);
	});

	cljs.core.MultiFn.cljs$lang$type = true;

	cljs.core.MultiFn.cljs$lang$ctorStr = "cljs.core/MultiFn";

	cljs.core.MultiFn.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/MultiFn");
	});

	cljs.core.__GT_MultiFn = (function cljs$core$__GT_MultiFn(name,dispatch_fn,default_dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy){
	return (new cljs.core.MultiFn(name,dispatch_fn,default_dispatch_val,hierarchy,method_table,prefer_table,method_cache,cached_hierarchy));
	});

	/**
	 * Removes all of the methods of multimethod.
	 */
	cljs.core.remove_all_methods = (function cljs$core$remove_all_methods(multifn){
	return cljs.core._reset(multifn);
	});
	/**
	 * Removes the method of multimethod associated with dispatch-value.
	 */
	cljs.core.remove_method = (function cljs$core$remove_method(multifn,dispatch_val){
	return cljs.core._remove_method(multifn,dispatch_val);
	});
	/**
	 * Causes the multimethod to prefer matches of dispatch-val-x over dispatch-val-y
	 * when there is a conflict
	 */
	cljs.core.prefer_method = (function cljs$core$prefer_method(multifn,dispatch_val_x,dispatch_val_y){
	return cljs.core._prefer_method(multifn,dispatch_val_x,dispatch_val_y);
	});
	/**
	 * Given a multimethod, returns a map of dispatch values -> dispatch fns
	 */
	cljs.core.methods$ = (function cljs$core$methods(multifn){
	return cljs.core._methods(multifn);
	});
	/**
	 * Given a multimethod and a dispatch value, returns the dispatch fn
	 *   that would apply to that value, or nil if none apply and no default
	 */
	cljs.core.get_method = (function cljs$core$get_method(multifn,dispatch_val){
	return cljs.core._get_method(multifn,dispatch_val);
	});
	/**
	 * Given a multimethod, returns a map of preferred value -> set of other values
	 */
	cljs.core.prefers = (function cljs$core$prefers(multifn){
	return cljs.core._prefers(multifn);
	});
	/**
	 * Given a multimethod, return it's default-dispatch-val.
	 */
	cljs.core.default_dispatch_val = (function cljs$core$default_dispatch_val(multifn){
	return cljs.core._default_dispatch_val(multifn);
	});
	/**
	 * Given a multimethod, return it's dispatch-fn.
	 */
	cljs.core.dispatch_fn = (function cljs$core$dispatch_fn(multifn){
	return cljs.core._dispatch_fn(multifn);
	});

	/**
	 * A marker protocol for UUIDs
	 * @interface
	 */
	cljs.core.IUUID = function(){};


	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IPrintWithWriter}
	 * @implements {cljs.core.IComparable}
	 * @implements {cljs.core.IUUID}
	*/
	cljs.core.UUID = (function (uuid,__hash){
	this.uuid = uuid;
	this.__hash = __hash;
	this.cljs$lang$protocol_mask$partition0$ = 2153775104;
	this.cljs$lang$protocol_mask$partition1$ = 2048;
	})
	cljs.core.UUID.prototype.cljs$core$IUUID$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.UUID.prototype.toString = (function (){
	var self__ = this;
	var _ = this;
	return self__.uuid;
	});

	cljs.core.UUID.prototype.equiv = (function (other){
	var self__ = this;
	var this$ = this;
	return this$.cljs$core$IEquiv$_equiv$arity$2(null,other);
	});

	cljs.core.UUID.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (_,other){
	var self__ = this;
	var ___$1 = this;
	return ((other instanceof cljs.core.UUID)) && ((self__.uuid === other.uuid));
	});

	cljs.core.UUID.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (_,writer,___$1){
	var self__ = this;
	var ___$2 = this;
	return cljs.core._write(writer,[cljs.core.str.cljs$core$IFn$_invoke$arity$1("#uuid \""),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.uuid),cljs.core.str.cljs$core$IFn$_invoke$arity$1("\"")].join(''));
	});

	cljs.core.UUID.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	if((self__.__hash == null)){
	self__.__hash = cljs.core.hash(self__.uuid);
	} else {
	}

	return self__.__hash;
	});

	cljs.core.UUID.prototype.cljs$core$IComparable$_compare$arity$2 = (function (_,other){
	var self__ = this;
	var ___$1 = this;
	var G__4786 = self__.uuid;
	var G__4787 = other.uuid;
	return goog.array.defaultCompare(G__4786,G__4787);
	});

	cljs.core.UUID.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$uuid,cljs.core.with_meta(cljs.core.cst$sym$__hash,new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$mutable,true], null))], null);
	});

	cljs.core.UUID.cljs$lang$type = true;

	cljs.core.UUID.cljs$lang$ctorStr = "cljs.core/UUID";

	cljs.core.UUID.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/UUID");
	});

	cljs.core.__GT_UUID = (function cljs$core$__GT_UUID(uuid,__hash){
	return (new cljs.core.UUID(uuid,__hash));
	});

	cljs.core.uuid = (function cljs$core$uuid(s){
	return (new cljs.core.UUID(s,null));
	});
	cljs.core.random_uuid = (function cljs$core$random_uuid(){
	var hex = (function cljs$core$random_uuid_$_hex(){
	return cljs.core.rand_int((16)).toString((16));
	});
	var rhex = ((8) | ((3) & cljs.core.rand_int((16)))).toString((16));
	return cljs.core.uuid([cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"),cljs.core.str.cljs$core$IFn$_invoke$arity$1("4"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(rhex),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1("-"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(hex())].join(''));
	});
	cljs.core.uuid_QMARK_ = (function cljs$core$uuid_QMARK_(x){
	if(!((x == null))){
	if((false) || ((cljs.core.PROTOCOL_SENTINEL === x.cljs$core$IUUID$))){
	return true;
	} else {
	return false;
	}
	} else {
	return false;
	}
	});
	cljs.core.pr_writer_ex_info = (function cljs$core$pr_writer_ex_info(obj,writer,opts){
	cljs.core._write(writer,"#error {:message ");

	cljs.core.pr_writer(obj.message,writer,opts);

	if(cljs.core.truth_(obj.data)){
	cljs.core._write(writer,", :data ");

	cljs.core.pr_writer(obj.data,writer,opts);
	} else {
	}

	if(cljs.core.truth_(obj.cause)){
	cljs.core._write(writer,", :cause ");

	cljs.core.pr_writer(obj.cause,writer,opts);
	} else {
	}

	return cljs.core._write(writer,"}");
	});
	/**
	 * @constructor
	 */
	cljs.core.ExceptionInfo = (function cljs$core$ExceptionInfo(message,data,cause){
	var e = (new Error(message));
	var this$ = this;
	this$.message = message;

	this$.data = data;

	this$.cause = cause;

	this$.name = e.name;

	this$.description = e.description;

	this$.number = e.number;

	this$.fileName = e.fileName;

	this$.lineNumber = e.lineNumber;

	this$.columnNumber = e.columnNumber;

	this$.stack = e.stack;

	return this$;
	});
	cljs.core.ExceptionInfo.prototype.__proto__ = Error.prototype;
	cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$ = cljs.core.PROTOCOL_SENTINEL;

	cljs.core.ExceptionInfo.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (obj,writer,opts){
	var obj__$1 = this;
	return cljs.core.pr_writer_ex_info(obj__$1,writer,opts);
	});
	cljs.core.ExceptionInfo.prototype.toString = (function (){
	var this$ = this;
	return cljs.core.pr_str_STAR_(this$);
	});
	/**
	 * Create an instance of ExceptionInfo, an Error type that carries a
	 *   map of additional data.
	 */
	cljs.core.ex_info = (function cljs$core$ex_info(var_args){
	var args4790 = [];
	var len__6099__auto___4793 = arguments.length;
	var i__6100__auto___4794 = (0);
	while(true){
	if((i__6100__auto___4794 < len__6099__auto___4793)){
	args4790.push((arguments[i__6100__auto___4794]));

	var G__4795 = (i__6100__auto___4794 + (1));
	i__6100__auto___4794 = G__4795;
	continue;
	} else {
	}
	break;
	}

	var G__4792 = args4790.length;
	switch (G__4792) {
	case 2:
	return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	case 3:
	return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4790.length)].join('')));

	}
	});

	cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2 = (function (msg,data){
	return cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3(msg,data,null);
	});

	cljs.core.ex_info.cljs$core$IFn$_invoke$arity$3 = (function (msg,data,cause){
	return (new cljs.core.ExceptionInfo(msg,data,cause));
	});

	cljs.core.ex_info.cljs$lang$maxFixedArity = 3;

	/**
	 * Returns exception data (a map) if ex is an ExceptionInfo.
	 *   Otherwise returns nil.
	 */
	cljs.core.ex_data = (function cljs$core$ex_data(ex){
	if((ex instanceof cljs.core.ExceptionInfo)){
	return ex.data;
	} else {
	return null;
	}
	});
	/**
	 * Returns the message attached to the given Error / ExceptionInfo object.
	 *   For non-Errors returns nil.
	 */
	cljs.core.ex_message = (function cljs$core$ex_message(ex){
	if((ex instanceof Error)){
	return ex.message;
	} else {
	return null;
	}
	});
	/**
	 * Returns exception cause (an Error / ExceptionInfo) if ex is an
	 *   ExceptionInfo.
	 *   Otherwise returns nil.
	 */
	cljs.core.ex_cause = (function cljs$core$ex_cause(ex){
	if((ex instanceof cljs.core.ExceptionInfo)){
	return ex.cause;
	} else {
	return null;
	}
	});
	/**
	 * Returns an JavaScript compatible comparator based upon pred.
	 */
	cljs.core.comparator = (function cljs$core$comparator(pred){
	return (function (x,y){
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(x,y) : pred.call(null,x,y)))){
	return (-1);
	} else {
	if(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$2 ? pred.cljs$core$IFn$_invoke$arity$2(y,x) : pred.call(null,y,x)))){
	return (1);
	} else {
	return (0);

	}
	}
	});
	});
	/**
	 * Returns true if x names a special form
	 */
	cljs.core.special_symbol_QMARK_ = (function cljs$core$special_symbol_QMARK_(x){
	return cljs.core.contains_QMARK_(new cljs.core.PersistentHashSet(null, new cljs.core.PersistentArrayMap(null, 23, [cljs.core.cst$sym$_AMPERSAND_,null,cljs.core.cst$sym$defrecord_STAR_,null,cljs.core.cst$sym$try,null,cljs.core.cst$sym$ns_STAR_,null,cljs.core.cst$sym$finally,null,cljs.core.cst$sym$loop_STAR_,null,cljs.core.cst$sym$do,null,cljs.core.cst$sym$letfn_STAR_,null,cljs.core.cst$sym$if,null,cljs.core.cst$sym$new,null,cljs.core.cst$sym$ns,null,cljs.core.cst$sym$deftype_STAR_,null,cljs.core.cst$sym$let_STAR_,null,cljs.core.cst$sym$js_STAR_,null,cljs.core.cst$sym$fn_STAR_,null,cljs.core.cst$sym$recur,null,cljs.core.cst$sym$set_BANG_,null,cljs.core.cst$sym$_DOT_,null,cljs.core.cst$sym$var,null,cljs.core.cst$sym$quote,null,cljs.core.cst$sym$catch,null,cljs.core.cst$sym$throw,null,cljs.core.cst$sym$def,null], null), null),x);
	});
	/**
	 * test [v] finds fn at key :test in var metadata and calls it,
	 *   presuming failure will throw exception
	 */
	cljs.core.test = (function cljs$core$test(v){
	var f = v.cljs$lang$test;
	if(cljs.core.truth_(f)){
	(f.cljs$core$IFn$_invoke$arity$0 ? f.cljs$core$IFn$_invoke$arity$0() : f.call(null));

	return cljs.core.cst$kw$ok;
	} else {
	return cljs.core.cst$kw$no_DASH_test;
	}
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	 * @implements {cljs.core.IPrintWithWriter}
	 * @implements {cljs.core.ILookup}
	*/
	cljs.core.TaggedLiteral = (function (tag,form){
	this.tag = tag;
	this.form = form;
	this.cljs$lang$protocol_mask$partition0$ = 2153775360;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.TaggedLiteral.prototype.toString = (function (){
	var self__ = this;
	var coll = this;
	return cljs.core.pr_str_STAR_(coll);
	});

	cljs.core.TaggedLiteral.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (this$,other){
	var self__ = this;
	var this$__$1 = this;
	return ((other instanceof cljs.core.TaggedLiteral)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.tag,other.tag)) && (cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.form,other.form));
	});

	cljs.core.TaggedLiteral.prototype.cljs$core$IHash$_hash$arity$1 = (function (this$){
	var self__ = this;
	var this$__$1 = this;
	return (((31) * cljs.core.hash(self__.tag)) + cljs.core.hash(self__.form));
	});

	cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$2 = (function (this$,v){
	var self__ = this;
	var this$__$1 = this;
	return this$__$1.cljs$core$ILookup$_lookup$arity$3(null,v,null);
	});

	cljs.core.TaggedLiteral.prototype.cljs$core$ILookup$_lookup$arity$3 = (function (this$,v,not_found){
	var self__ = this;
	var this$__$1 = this;
	var G__4797 = v;
	var G__4797__$1 = (((G__4797 instanceof cljs.core.Keyword))?G__4797.fqn:null);
	switch (G__4797__$1) {
	case "tag":
	return self__.tag;

	break;
	case "form":
	return self__.form;

	break;
	default:
	return not_found;

	}
	});

	cljs.core.TaggedLiteral.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3 = (function (o,writer,opts){
	var self__ = this;
	var o__$1 = this;
	cljs.core._write(writer,[cljs.core.str.cljs$core$IFn$_invoke$arity$1("#"),cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.tag),cljs.core.str.cljs$core$IFn$_invoke$arity$1(" ")].join(''));

	return cljs.core.pr_writer(self__.form,writer,opts);
	});

	cljs.core.TaggedLiteral.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$tag,cljs.core.cst$sym$form], null);
	});

	cljs.core.TaggedLiteral.cljs$lang$type = true;

	cljs.core.TaggedLiteral.cljs$lang$ctorStr = "cljs.core/TaggedLiteral";

	cljs.core.TaggedLiteral.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/TaggedLiteral");
	});

	cljs.core.__GT_TaggedLiteral = (function cljs$core$__GT_TaggedLiteral(tag,form){
	return (new cljs.core.TaggedLiteral(tag,form));
	});

	/**
	 * Return true if the value is the data representation of a tagged literal
	 */
	cljs.core.tagged_literal_QMARK_ = (function cljs$core$tagged_literal_QMARK_(value){
	return (value instanceof cljs.core.TaggedLiteral);
	});
	/**
	 * Construct a data representation of a tagged literal from a
	 *   tag symbol and a form.
	 */
	cljs.core.tagged_literal = (function cljs$core$tagged_literal(tag,form){
	if((tag instanceof cljs.core.Symbol)){
	} else {
	throw (new Error("Assert failed: (symbol? tag)"));
	}

	return (new cljs.core.TaggedLiteral(tag,form));
	});
	/**
	 * @type {*}
	 */
	cljs.core.js_reserved_arr = ["arguments","abstract","await","boolean","break","byte","case","catch","char","class","const","continue","debugger","default","delete","do","double","else","enum","export","extends","final","finally","float","for","function","goto","if","implements","import","in","instanceof","int","interface","let","long","native","new","package","private","protected","public","return","short","static","super","switch","synchronized","this","throw","throws","transient","try","typeof","var","void","volatile","while","with","yield","methods","null","constructor"];
	/**
	 * @type {null|Object}
	 */
	cljs.core.js_reserved = null;
	cljs.core.js_reserved_QMARK_ = (function cljs$core$js_reserved_QMARK_(x){
	if((cljs.core.js_reserved == null)){
	cljs.core.js_reserved = cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (p1__4799_SHARP_,p2__4800_SHARP_){
	goog.object.set(p1__4799_SHARP_,p2__4800_SHARP_,true);

	return p1__4799_SHARP_;
	}),({}),cljs.core.js_reserved_arr);
	} else {
	}

	return cljs.core.js_reserved.hasOwnProperty(x);
	});
	cljs.core.demunge_pattern = (function cljs$core$demunge_pattern(){
	if(cljs.core.truth_(cljs.core.DEMUNGE_PATTERN)){
	} else {
	cljs.core.DEMUNGE_PATTERN = (function (){var ks = cljs.core.sort.cljs$core$IFn$_invoke$arity$2((function (a,b){
	return (b.length - a.length);
	}),cljs.core.js_keys(cljs.core.DEMUNGE_MAP));
	var ks__$1 = ks;
	var ret = "";
	while(true){
	if(cljs.core.seq(ks__$1)){
	var G__4803 = cljs.core.next(ks__$1);
	var G__4804 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1((function (){var G__4802 = ret;
	if(!((ret === ""))){
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(G__4802),cljs.core.str.cljs$core$IFn$_invoke$arity$1("|")].join('');
	} else {
	return G__4802;
	}
	})()),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core.first(ks__$1))].join('');
	ks__$1 = G__4803;
	ret = G__4804;
	continue;
	} else {
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret),cljs.core.str.cljs$core$IFn$_invoke$arity$1("|\\$")].join('');
	}
	break;
	}
	})();
	}

	return cljs.core.DEMUNGE_PATTERN;
	});
	cljs.core.munge_str = (function cljs$core$munge_str(name){
	var sb = (new goog.string.StringBuffer());
	var i_4805 = (0);
	while(true){
	if((i_4805 < name.length)){
	var c_4806 = name.charAt(i_4805);
	var sub_4807 = goog.object.get(cljs.core.CHAR_MAP,c_4806);
	if(!((sub_4807 == null))){
	sb.append(sub_4807);
	} else {
	sb.append(c_4806);
	}

	var G__4808 = (i_4805 + (1));
	i_4805 = G__4808;
	continue;
	} else {
	}
	break;
	}

	return sb.toString();
	});
	cljs.core.munge = (function cljs$core$munge(name){
	var name_SINGLEQUOTE_ = cljs.core.munge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''));
	var name_SINGLEQUOTE___$1 = (((name_SINGLEQUOTE_ === ".."))?"_DOT__DOT_":(cljs.core.truth_(cljs.core.js_reserved_QMARK_(name_SINGLEQUOTE_))?[cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE_),cljs.core.str.cljs$core$IFn$_invoke$arity$1("$")].join(''):name_SINGLEQUOTE_
	));
	if((name instanceof cljs.core.Symbol)){
	return cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1);
	} else {
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name_SINGLEQUOTE___$1)].join('');
	}
	});
	cljs.core.demunge_str = (function cljs$core$demunge_str(munged_name){
	var r = (new RegExp(cljs.core.demunge_pattern(),"g"));
	var munged_name__$1 = (cljs.core.truth_(goog.string.endsWith(munged_name,"$"))?munged_name.substring((0),(munged_name.length - (1))):munged_name);
	var ret = "";
	var last_match_end = (0);
	while(true){
	var temp__6736__auto__ = r.exec(munged_name__$1);
	if(cljs.core.truth_(temp__6736__auto__)){
	var match = temp__6736__auto__;
	var vec__4812 = match;
	var x = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4812,(0),null);
	var G__4815 = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret),cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end,(r.lastIndex - x.length))),cljs.core.str.cljs$core$IFn$_invoke$arity$1((((x === "$"))?"/":goog.object.get(cljs.core.DEMUNGE_MAP,x)))].join('');
	var G__4816 = r.lastIndex;
	ret = G__4815;
	last_match_end = G__4816;
	continue;
	} else {
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ret),cljs.core.str.cljs$core$IFn$_invoke$arity$1(munged_name__$1.substring(last_match_end,munged_name__$1.length))].join('');
	}
	break;
	}
	});
	cljs.core.demunge = (function cljs$core$demunge(name){
	return (((name instanceof cljs.core.Symbol))?cljs.core.symbol:cljs.core.str).call(null,(function (){var name_SINGLEQUOTE_ = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join('');
	if((name_SINGLEQUOTE_ === "_DOT__DOT_")){
	return "..";
	} else {
	return cljs.core.demunge_str([cljs.core.str.cljs$core$IFn$_invoke$arity$1(name)].join(''));
	}
	})());
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.ns_lookup = (function cljs$core$ns_lookup(ns_obj,k){
	return (function (){
	return goog.object.get(ns_obj,k);
	});
	});

	/**
	* @constructor
	 * @implements {cljs.core.IEquiv}
	 * @implements {cljs.core.IHash}
	*/
	cljs.core.Namespace = (function (obj,name){
	this.obj = obj;
	this.name = name;
	this.cljs$lang$protocol_mask$partition0$ = 6291456;
	this.cljs$lang$protocol_mask$partition1$ = 0;
	})
	cljs.core.Namespace.prototype.findInternedVar = (function (sym){
	var self__ = this;
	var this$ = this;
	var k = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(''));
	if(goog.object.containsKey(self__.obj,k)){
	var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join(''),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(''));
	var var_meta = new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$ns,this$], null);
	return (new cljs.core.Var(cljs.core.ns_lookup(self__.obj,k),var_sym,var_meta));
	} else {
	return null;
	}
	});

	cljs.core.Namespace.prototype.getName = (function (){
	var self__ = this;
	var _ = this;
	return self__.name;
	});

	cljs.core.Namespace.prototype.toString = (function (){
	var self__ = this;
	var _ = this;
	return [cljs.core.str.cljs$core$IFn$_invoke$arity$1(self__.name)].join('');
	});

	cljs.core.Namespace.prototype.cljs$core$IEquiv$_equiv$arity$2 = (function (_,other){
	var self__ = this;
	var ___$1 = this;
	if((other instanceof cljs.core.Namespace)){
	return cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2(self__.name,other.name);
	} else {
	return false;
	}
	});

	cljs.core.Namespace.prototype.cljs$core$IHash$_hash$arity$1 = (function (_){
	var self__ = this;
	var ___$1 = this;
	return cljs.core.hash(self__.name);
	});

	cljs.core.Namespace.getBasis = (function (){
	return new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [cljs.core.cst$sym$obj,cljs.core.cst$sym$name], null);
	});

	cljs.core.Namespace.cljs$lang$type = true;

	cljs.core.Namespace.cljs$lang$ctorStr = "cljs.core/Namespace";

	cljs.core.Namespace.cljs$lang$ctorPrWriter = (function (this__5727__auto__,writer__5728__auto__,opt__5729__auto__){
	return cljs.core._write(writer__5728__auto__,"cljs.core/Namespace");
	});

	cljs.core.__GT_Namespace = (function cljs$core$__GT_Namespace(obj,name){
	return (new cljs.core.Namespace(obj,name));
	});

	/**
	 * Bootstrap only.
	 * @type {*}
	 */
	cljs.core.NS_CACHE = null;
	/**
	 * Bootstrap only.
	 */
	cljs.core.find_ns_obj_STAR_ = (function cljs$core$find_ns_obj_STAR_(ctxt,xs){
	while(true){
	if((ctxt == null)){
	return null;
	} else {
	if((xs == null)){
	return ctxt;
	} else {
	var G__4821 = (function (){var G__4819 = ctxt;
	var G__4820 = cljs.core.first(xs);
	return goog.object.get(G__4819,G__4820);
	})();
	var G__4822 = cljs.core.next(xs);
	ctxt = G__4821;
	xs = G__4822;
	continue;

	}
	}
	break;
	}
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.find_ns_obj = (function cljs$core$find_ns_obj(ns){
	var munged_ns = cljs.core.munge([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join(''));
	var segs = munged_ns.split(".");
	var G__4826 = cljs.core._STAR_target_STAR_;
	switch (G__4826) {
	case "nodejs":
	if(cljs.core.truth_(COMPILED)){
	return cljs.core.find_ns_obj_STAR_((function (){try{var ctxt = (function (){var G__4828 = cljs.core.first(segs);
	return eval(G__4828);
	})();
	if(cljs.core.truth_((function (){var and__5442__auto__ = ctxt;
	if(cljs.core.truth_(and__5442__auto__)){
	return cljs.core.object_QMARK_(ctxt);
	} else {
	return and__5442__auto__;
	}
	})())){
	return ctxt;
	} else {
	return null;
	}
	}catch (e4827){if((e4827 instanceof ReferenceError)){
	var e = e4827;
	return null;
	} else {
	throw e4827;

	}
	}})(),cljs.core.next(segs));
	} else {
	return cljs.core.find_ns_obj_STAR_(global,segs);
	}

	break;
	case "default":
	return cljs.core.find_ns_obj_STAR_(goog.global,segs);

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("find-ns-obj not supported for target "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(cljs.core._STAR_target_STAR_)].join('')));

	}
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.ns_interns_STAR_ = (function cljs$core$ns_interns_STAR_(sym){
	var ns_obj = cljs.core.find_ns_obj(sym);
	var ns = (new cljs.core.Namespace(ns_obj,sym));
	var step = ((function (ns_obj,ns){
	return (function cljs$core$ns_interns_STAR__$_step(ret,k){
	var var_sym = cljs.core.symbol.cljs$core$IFn$_invoke$arity$1(cljs.core.demunge(k));
	return cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(ret,var_sym,(new cljs.core.Var(((function (var_sym,ns_obj,ns){
	return (function (){
	return goog.object.get(ns_obj,k);
	});})(var_sym,ns_obj,ns))
	,cljs.core.symbol.cljs$core$IFn$_invoke$arity$2([cljs.core.str.cljs$core$IFn$_invoke$arity$1(sym)].join(''),[cljs.core.str.cljs$core$IFn$_invoke$arity$1(var_sym)].join('')),new cljs.core.PersistentArrayMap(null, 1, [cljs.core.cst$kw$ns,ns], null))));
	});})(ns_obj,ns))
	;
	return cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(step,cljs.core.PersistentArrayMap.EMPTY,cljs.core.js_keys(ns_obj));
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.create_ns = (function cljs$core$create_ns(var_args){
	var args4830 = [];
	var len__6099__auto___4833 = arguments.length;
	var i__6100__auto___4834 = (0);
	while(true){
	if((i__6100__auto___4834 < len__6099__auto___4833)){
	args4830.push((arguments[i__6100__auto___4834]));

	var G__4835 = (i__6100__auto___4834 + (1));
	i__6100__auto___4834 = G__4835;
	continue;
	} else {
	}
	break;
	}

	var G__4832 = args4830.length;
	switch (G__4832) {
	case 1:
	return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));

	break;
	case 2:
	return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));

	break;
	default:
	throw (new Error([cljs.core.str.cljs$core$IFn$_invoke$arity$1("Invalid arity: "),cljs.core.str.cljs$core$IFn$_invoke$arity$1(args4830.length)].join('')));

	}
	});

	cljs.core.create_ns.cljs$core$IFn$_invoke$arity$1 = (function (sym){
	return cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(sym,cljs.core.find_ns_obj(sym));
	});

	cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2 = (function (sym,ns_obj){
	return (new cljs.core.Namespace(ns_obj,sym));
	});

	cljs.core.create_ns.cljs$lang$maxFixedArity = 2;

	/**
	 * Bootstrap only.
	 */
	cljs.core.find_ns = (function cljs$core$find_ns(ns){
	if((cljs.core.NS_CACHE == null)){
	cljs.core.NS_CACHE = (function (){var G__4838 = cljs.core.PersistentArrayMap.EMPTY;
	return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__4838) : cljs.core.atom.call(null,G__4838));
	})();
	} else {
	}

	var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null,cljs.core.NS_CACHE)),ns);
	if(!((the_ns == null))){
	return the_ns;
	} else {
	var ns_obj = cljs.core.find_ns_obj(ns);
	if((ns_obj == null)){
	return null;
	} else {
	var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns,ns_obj);
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE,cljs.core.assoc,ns,new_ns);

	return new_ns;
	}
	}
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.find_macros_ns = (function cljs$core$find_macros_ns(ns){
	if((cljs.core.NS_CACHE == null)){
	cljs.core.NS_CACHE = (function (){var G__4840 = cljs.core.PersistentArrayMap.EMPTY;
	return (cljs.core.atom.cljs$core$IFn$_invoke$arity$1 ? cljs.core.atom.cljs$core$IFn$_invoke$arity$1(G__4840) : cljs.core.atom.call(null,G__4840));
	})();
	} else {
	}

	var the_ns = cljs.core.get.cljs$core$IFn$_invoke$arity$2((cljs.core.deref.cljs$core$IFn$_invoke$arity$1 ? cljs.core.deref.cljs$core$IFn$_invoke$arity$1(cljs.core.NS_CACHE) : cljs.core.deref.call(null,cljs.core.NS_CACHE)),ns);
	if(!((the_ns == null))){
	return the_ns;
	} else {
	var ns_str = [cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns)].join('');
	var ns__$1 = ((!(goog.string.contains(ns_str,"$macros")))?cljs.core.symbol.cljs$core$IFn$_invoke$arity$1([cljs.core.str.cljs$core$IFn$_invoke$arity$1(ns_str),cljs.core.str.cljs$core$IFn$_invoke$arity$1("$macros")].join('')):ns);
	var ns_obj = cljs.core.find_ns_obj(ns__$1);
	if((ns_obj == null)){
	return null;
	} else {
	var new_ns = cljs.core.create_ns.cljs$core$IFn$_invoke$arity$2(ns__$1,ns_obj);
	cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4(cljs.core.NS_CACHE,cljs.core.assoc,ns__$1,new_ns);

	return new_ns;
	}
	}
	});
	/**
	 * Bootstrap only.
	 */
	cljs.core.ns_name = (function cljs$core$ns_name(ns_obj){
	return ns_obj.name;
	});
	goog.provide('cljs.core.constants');
	goog.require('cljs.core');
	cljs.core.cst$sym$form = new cljs.core.Symbol(null,"form","form",16469056,null);
	cljs.core.cst$sym$tag = new cljs.core.Symbol(null,"tag","tag",350170304,null);
	cljs.core.cst$sym$_AMPERSAND_ = new cljs.core.Symbol(null,"&","&",-2144855648,null);
	cljs.core.cst$sym$stepper = new cljs.core.Symbol(null,"stepper","stepper",1159163296,null);
	cljs.core.cst$sym$uuid = new cljs.core.Symbol(null,"uuid","uuid",-504564192,null);
	cljs.core.cst$sym$end = new cljs.core.Symbol(null,"end","end",1372345569,null);
	cljs.core.cst$sym$defrecord_STAR_ = new cljs.core.Symbol(null,"defrecord*","defrecord*",-1936366207,null);
	cljs.core.cst$sym$base = new cljs.core.Symbol(null,"base","base",1825810849,null);
	cljs.core.cst$sym$obj = new cljs.core.Symbol(null,"obj","obj",-1672671807,null);
	cljs.core.cst$sym$fqn = new cljs.core.Symbol(null,"fqn","fqn",-1749334463,null);
	cljs.core.cst$sym$first = new cljs.core.Symbol(null,"first","first",996428481,null);
	cljs.core.cst$sym$try = new cljs.core.Symbol(null,"try","try",-1273693247,null);
	cljs.core.cst$sym$has_DASH_nil_QMARK_ = new cljs.core.Symbol(null,"has-nil?","has-nil?",825886722,null);
	cljs.core.cst$sym$rear = new cljs.core.Symbol(null,"rear","rear",-900164830,null);
	cljs.core.cst$sym$hierarchy = new cljs.core.Symbol(null,"hierarchy","hierarchy",587061186,null);
	cljs.core.cst$sym$iter = new cljs.core.Symbol(null,"iter","iter",-1346195486,null);
	cljs.core.cst$sym$step = new cljs.core.Symbol(null,"step","step",-1365547645,null);
	cljs.core.cst$sym$boolean = new cljs.core.Symbol(null,"boolean","boolean",-278886877,null);
	cljs.core.cst$sym$update_DASH_count = new cljs.core.Symbol(null,"update-count","update-count",-411982269,null);
	cljs.core.cst$sym$method_DASH_table = new cljs.core.Symbol(null,"method-table","method-table",-1878263165,null);
	cljs.core.cst$sym$chunk = new cljs.core.Symbol(null,"chunk","chunk",449371907,null);
	cljs.core.cst$sym$i = new cljs.core.Symbol(null,"i","i",253690212,null);
	cljs.core.cst$sym$rest = new cljs.core.Symbol(null,"rest","rest",398835108,null);
	cljs.core.cst$kw$meta = new cljs.core.Keyword(null,"meta","meta",1499536964);
	cljs.core.cst$kw$table = new cljs.core.Keyword(null,"table","table",-564943036);
	cljs.core.cst$kw$color = new cljs.core.Keyword(null,"color","color",1011675173);
	cljs.core.cst$kw$dup = new cljs.core.Keyword(null,"dup","dup",556298533);
	cljs.core.cst$kw$vertical_DASH_align = new cljs.core.Keyword(null,"vertical-align","vertical-align",651007333);
	cljs.core.cst$sym$comp = new cljs.core.Symbol(null,"comp","comp",-1462482139,null);
	cljs.core.cst$sym$dispatch_DASH_fn = new cljs.core.Symbol(null,"dispatch-fn","dispatch-fn",-1401088155,null);
	cljs.core.cst$kw$else = new cljs.core.Keyword(null,"else","else",-1508377146);
	cljs.core.cst$sym$left = new cljs.core.Symbol(null,"left","left",1241415590,null);
	cljs.core.cst$sym$ns_STAR_ = new cljs.core.Symbol(null,"ns*","ns*",1840949383,null);
	cljs.core.cst$kw$cljs$core_SLASH_none = new cljs.core.Keyword("cljs.core","none","cljs.core/none",926646439);
	cljs.core.cst$sym$shift = new cljs.core.Symbol(null,"shift","shift",-1657295705,null);
	cljs.core.cst$sym$iters = new cljs.core.Symbol(null,"iters","iters",719353031,null);
	cljs.core.cst$sym$xform = new cljs.core.Symbol(null,"xform","xform",-85179481,null);
	cljs.core.cst$kw$validator = new cljs.core.Keyword(null,"validator","validator",-1966190681);
	cljs.core.cst$sym$finally = new cljs.core.Symbol(null,"finally","finally",-1065347064,null);
	cljs.core.cst$kw$default = new cljs.core.Keyword(null,"default","default",-1987822328);
	cljs.core.cst$sym$prefer_DASH_table = new cljs.core.Symbol(null,"prefer-table","prefer-table",462168584,null);
	cljs.core.cst$sym$loop_STAR_ = new cljs.core.Symbol(null,"loop*","loop*",615029416,null);
	cljs.core.cst$sym$watches = new cljs.core.Symbol(null,"watches","watches",1367433992,null);
	cljs.core.cst$kw$ns = new cljs.core.Keyword(null,"ns","ns",441598760);
	cljs.core.cst$kw$td = new cljs.core.Keyword(null,"td","td",1479933353);
	cljs.core.cst$kw$li = new cljs.core.Keyword(null,"li","li",723558921);
	cljs.core.cst$sym$bitmap = new cljs.core.Symbol(null,"bitmap","bitmap",501334601,null);
	cljs.core.cst$sym$_seq = new cljs.core.Symbol(null,"_seq","_seq",-449557847,null);
	cljs.core.cst$sym$nil_DASH_val = new cljs.core.Symbol(null,"nil-val","nil-val",-513933559,null);
	cljs.core.cst$kw$margin_DASH_left = new cljs.core.Keyword(null,"margin-left","margin-left",2015598377);
	cljs.core.cst$sym$meta2735 = new cljs.core.Symbol(null,"meta2735","meta2735",662881129,null);
	cljs.core.cst$kw$tr = new cljs.core.Keyword(null,"tr","tr",-1424774646);
	cljs.core.cst$sym$v = new cljs.core.Symbol(null,"v","v",1661996586,null);
	cljs.core.cst$sym$riter = new cljs.core.Symbol(null,"riter","riter",-237834262,null);
	cljs.core.cst$sym$__hash = new cljs.core.Symbol(null,"__hash","__hash",-1328796629,null);
	cljs.core.cst$sym$meta = new cljs.core.Symbol(null,"meta","meta",-1154898805,null);
	cljs.core.cst$sym$_meta = new cljs.core.Symbol(null,"_meta","_meta",-1716892533,null);
	cljs.core.cst$kw$width = new cljs.core.Keyword(null,"width","width",-384071477);
	cljs.core.cst$sym$afn = new cljs.core.Symbol(null,"afn","afn",216963467,null);
	cljs.core.cst$sym$tree = new cljs.core.Symbol(null,"tree","tree",1444219499,null);
	cljs.core.cst$sym$fn = new cljs.core.Symbol(null,"fn","fn",465265323,null);
	cljs.core.cst$sym$front = new cljs.core.Symbol(null,"front","front",117022539,null);
	cljs.core.cst$sym$buf = new cljs.core.Symbol(null,"buf","buf",1426618187,null);
	cljs.core.cst$sym$next_DASH_entry = new cljs.core.Symbol(null,"next-entry","next-entry",1091342476,null);
	cljs.core.cst$kw$val = new cljs.core.Keyword(null,"val","val",128701612);
	cljs.core.cst$sym$key = new cljs.core.Symbol(null,"key","key",124488940,null);
	cljs.core.cst$sym$_next = new cljs.core.Symbol(null,"_next","_next",101877036,null);
	cljs.core.cst$sym$root_DASH_iter = new cljs.core.Symbol(null,"root-iter","root-iter",1974672108,null);
	cljs.core.cst$sym$do = new cljs.core.Symbol(null,"do","do",1686842252,null);
	cljs.core.cst$sym$vec = new cljs.core.Symbol(null,"vec","vec",982683596,null);
	cljs.core.cst$kw$fallback_DASH_impl = new cljs.core.Keyword(null,"fallback-impl","fallback-impl",-1501286995);
	cljs.core.cst$kw$flush_DASH_on_DASH_newline = new cljs.core.Keyword(null,"flush-on-newline","flush-on-newline",-151457939);
	cljs.core.cst$sym$default_DASH_dispatch_DASH_val = new cljs.core.Symbol(null,"default-dispatch-val","default-dispatch-val",-1231201266,null);
	cljs.core.cst$kw$no_DASH_test = new cljs.core.Keyword(null,"no-test","no-test",-1679482642);
	cljs.core.cst$sym$validator = new cljs.core.Symbol(null,"validator","validator",-325659154,null);
	cljs.core.cst$sym$letfn_STAR_ = new cljs.core.Symbol(null,"letfn*","letfn*",-110097810,null);
	cljs.core.cst$sym$if = new cljs.core.Symbol(null,"if","if",1181717262,null);
	cljs.core.cst$sym$arr = new cljs.core.Symbol(null,"arr","arr",2115492975,null);
	cljs.core.cst$sym$new = new cljs.core.Symbol(null,"new","new",-444906321,null);
	cljs.core.cst$kw$descendants = new cljs.core.Keyword(null,"descendants","descendants",1824886031);
	cljs.core.cst$sym$ns = new cljs.core.Symbol(null,"ns","ns",2082130287,null);
	cljs.core.cst$kw$ancestors = new cljs.core.Keyword(null,"ancestors","ancestors",-776045424);
	cljs.core.cst$sym$value = new cljs.core.Symbol(null,"value","value",1946509744,null);
	cljs.core.cst$sym$name = new cljs.core.Symbol(null,"name","name",-810760592,null);
	cljs.core.cst$kw$div = new cljs.core.Keyword(null,"div","div",1057191632);
	cljs.core.cst$kw$readably = new cljs.core.Keyword(null,"readably","readably",1129599760);
	cljs.core.cst$kw$more_DASH_marker = new cljs.core.Keyword(null,"more-marker","more-marker",-14717935);
	cljs.core.cst$sym$fields = new cljs.core.Symbol(null,"fields","fields",-291534703,null);
	cljs.core.cst$sym$method_DASH_cache = new cljs.core.Symbol(null,"method-cache","method-cache",1230193905,null);
	cljs.core.cst$sym$nexts = new cljs.core.Symbol(null,"nexts","nexts",-1683579407,null);
	cljs.core.cst$sym$edit = new cljs.core.Symbol(null,"edit","edit",-1302639,null);
	cljs.core.cst$sym$editable_QMARK_ = new cljs.core.Symbol(null,"editable?","editable?",-164945806,null);
	cljs.core.cst$sym$base_DASH_count = new cljs.core.Symbol(null,"base-count","base-count",-1180647182,null);
	cljs.core.cst$sym$collision_DASH_hash = new cljs.core.Symbol(null,"collision-hash","collision-hash",-35831342,null);
	cljs.core.cst$sym$deftype_STAR_ = new cljs.core.Symbol(null,"deftype*","deftype*",962659890,null);
	cljs.core.cst$sym$let_STAR_ = new cljs.core.Symbol(null,"let*","let*",1920721458,null);
	cljs.core.cst$sym$start = new cljs.core.Symbol(null,"start","start",1285322546,null);
	cljs.core.cst$sym$coll = new cljs.core.Symbol(null,"coll","coll",-1006698606,null);
	cljs.core.cst$sym$not_DASH_native = new cljs.core.Symbol(null,"not-native","not-native",-236392494,null);
	cljs.core.cst$sym$js_STAR_ = new cljs.core.Symbol(null,"js*","js*",-1134233646,null);
	cljs.core.cst$kw$ol = new cljs.core.Keyword(null,"ol","ol",932524051);
	cljs.core.cst$sym$strobj = new cljs.core.Symbol(null,"strobj","strobj",1088091283,null);
	cljs.core.cst$sym$_rest = new cljs.core.Symbol(null,"_rest","_rest",-2100466189,null);
	cljs.core.cst$sym$fn_STAR_ = new cljs.core.Symbol(null,"fn*","fn*",-752876845,null);
	cljs.core.cst$sym$val = new cljs.core.Symbol(null,"val","val",1769233139,null);
	cljs.core.cst$sym$ascending_QMARK_ = new cljs.core.Symbol(null,"ascending?","ascending?",-1938452653,null);
	cljs.core.cst$sym$recur = new cljs.core.Symbol(null,"recur","recur",1202958259,null);
	cljs.core.cst$sym$ci = new cljs.core.Symbol(null,"ci","ci",2049808339,null);
	cljs.core.cst$kw$print_DASH_length = new cljs.core.Keyword(null,"print-length","print-length",1931866356);
	cljs.core.cst$kw$foo = new cljs.core.Keyword(null,"foo","foo",1268894036);
	cljs.core.cst$sym$state = new cljs.core.Symbol(null,"state","state",-348086572,null);
	cljs.core.cst$kw$ok = new cljs.core.Keyword(null,"ok","ok",967785236);
	cljs.core.cst$kw$cljs$core_SLASH_halt = new cljs.core.Keyword("cljs.core","halt","cljs.core/halt",-1049036715);
	cljs.core.cst$sym$cached_DASH_hierarchy = new cljs.core.Symbol(null,"cached-hierarchy","cached-hierarchy",-1085460203,null);
	cljs.core.cst$sym$s = new cljs.core.Symbol(null,"s","s",-948495851,null);
	cljs.core.cst$kw$parents = new cljs.core.Keyword(null,"parents","parents",-2027538891);
	cljs.core.cst$sym$cnt = new cljs.core.Symbol(null,"cnt","cnt",1924510325,null);
	cljs.core.cst$sym$node = new cljs.core.Symbol(null,"node","node",-2073234571,null);
	cljs.core.cst$sym$sym = new cljs.core.Symbol(null,"sym","sym",195671222,null);
	cljs.core.cst$sym$sb = new cljs.core.Symbol(null,"sb","sb",-1249746442,null);
	cljs.core.cst$sym$_hash = new cljs.core.Symbol(null,"_hash","_hash",-2130838312,null);
	cljs.core.cst$sym$keys = new cljs.core.Symbol(null,"keys","keys",-1586012071,null);
	cljs.core.cst$sym$set_BANG_ = new cljs.core.Symbol(null,"set!","set!",250714521,null);
	cljs.core.cst$kw$tag = new cljs.core.Keyword(null,"tag","tag",-1290361223);
	cljs.core.cst$sym$tree_DASH_map = new cljs.core.Symbol(null,"tree-map","tree-map",1373073049,null);
	cljs.core.cst$sym$_DOT_ = new cljs.core.Symbol(null,".",".",1975675962,null);
	cljs.core.cst$sym$var = new cljs.core.Symbol(null,"var","var",870848730,null);
	cljs.core.cst$kw$mutable = new cljs.core.Keyword(null,"mutable","mutable",875778266);
	cljs.core.cst$sym$quote = new cljs.core.Symbol(null,"quote","quote",1377916282,null);
	cljs.core.cst$sym$root = new cljs.core.Symbol(null,"root","root",1191874074,null);
	cljs.core.cst$sym$str = new cljs.core.Symbol(null,"str","str",-1564826950,null);
	cljs.core.cst$sym$nodes = new cljs.core.Symbol(null,"nodes","nodes",-459054278,null);
	cljs.core.cst$sym$seen = new cljs.core.Symbol(null,"seen","seen",1121531738,null);
	cljs.core.cst$sym$hash_DASH_map = new cljs.core.Symbol(null,"hash-map","hash-map",-439030950,null);
	cljs.core.cst$sym$catch = new cljs.core.Symbol(null,"catch","catch",-1616370245,null);
	cljs.core.cst$kw$alt_DASH_impl = new cljs.core.Keyword(null,"alt-impl","alt-impl",670969595);
	cljs.core.cst$sym$ext_DASH_map_DASH_iter = new cljs.core.Symbol(null,"ext-map-iter","ext-map-iter",-1215982757,null);
	cljs.core.cst$sym$tail = new cljs.core.Symbol(null,"tail","tail",494507963,null);
	cljs.core.cst$sym$record = new cljs.core.Symbol(null,"record","record",861424668,null);
	cljs.core.cst$sym$mseq = new cljs.core.Symbol(null,"mseq","mseq",1602647196,null);
	cljs.core.cst$sym$count = new cljs.core.Symbol(null,"count","count",-514511684,null);
	cljs.core.cst$kw$keywordize_DASH_keys = new cljs.core.Keyword(null,"keywordize-keys","keywordize-keys",1310784252);
	cljs.core.cst$sym$off = new cljs.core.Symbol(null,"off","off",-2047994980,null);
	cljs.core.cst$sym$stack = new cljs.core.Symbol(null,"stack","stack",847125597,null);
	cljs.core.cst$sym$transient_DASH_map = new cljs.core.Symbol(null,"transient-map","transient-map",351764893,null);
	cljs.core.cst$sym$len = new cljs.core.Symbol(null,"len","len",-1230778691,null);
	cljs.core.cst$sym$right = new cljs.core.Symbol(null,"right","right",1187949694,null);
	cljs.core.cst$sym$throw = new cljs.core.Symbol(null,"throw","throw",595905694,null);
	cljs.core.cst$sym$fseq = new cljs.core.Symbol(null,"fseq","fseq",-1466412450,null);
	cljs.core.cst$kw$cljs$core_SLASH_not_DASH_found = new cljs.core.Keyword("cljs.core","not-found","cljs.core/not-found",-1572889185);
	cljs.core.cst$sym$more = new cljs.core.Symbol(null,"more","more",-418290273,null);
	cljs.core.cst$sym$def = new cljs.core.Symbol(null,"def","def",597100991,null);
	cljs.core.cst$sym$meta2738 = new cljs.core.Symbol(null,"meta2738","meta2738",-1669447073,null);
	cljs.core.cst$kw$span = new cljs.core.Keyword(null,"span","span",1394872991);
	cljs.core.cst$kw$margin = new cljs.core.Keyword(null,"margin","margin",-995903681);
	cljs.core.cst$sym$f = new cljs.core.Symbol(null,"f","f",43394975,null);
	cljs.core.cst$sym$next_DASH_iter = new cljs.core.Symbol(null,"next-iter","next-iter",1526626239,null);

	module.exports = cljs.core;

	//# sourceMappingURL=data:application/json;charset=utf-8;base64,

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4), (function() { return this; }())))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Utilities for string manipulation.
	 * @author arv@google.com (Erik Arvidsson)
	 */


	/**
	 * Namespace for string utilities
	 */
	goog.provide('goog.string');
	goog.provide('goog.string.Unicode');


	/**
	 * @define {boolean} Enables HTML escaping of lowercase letter "e" which helps
	 * with detection of double-escaping as this letter is frequently used.
	 */
	goog.define('goog.string.DETECT_DOUBLE_ESCAPING', false);


	/**
	 * @define {boolean} Whether to force non-dom html unescaping.
	 */
	goog.define('goog.string.FORCE_NON_DOM_HTML_UNESCAPING', false);


	/**
	 * Common Unicode string characters.
	 * @enum {string}
	 */
	goog.string.Unicode = {
	  NBSP: '\xa0'
	};


	/**
	 * Fast prefix-checker.
	 * @param {string} str The string to check.
	 * @param {string} prefix A string to look for at the start of {@code str}.
	 * @return {boolean} True if {@code str} begins with {@code prefix}.
	 */
	goog.string.startsWith = function(str, prefix) {
	  return str.lastIndexOf(prefix, 0) == 0;
	};


	/**
	 * Fast suffix-checker.
	 * @param {string} str The string to check.
	 * @param {string} suffix A string to look for at the end of {@code str}.
	 * @return {boolean} True if {@code str} ends with {@code suffix}.
	 */
	goog.string.endsWith = function(str, suffix) {
	  var l = str.length - suffix.length;
	  return l >= 0 && str.indexOf(suffix, l) == l;
	};


	/**
	 * Case-insensitive prefix-checker.
	 * @param {string} str The string to check.
	 * @param {string} prefix  A string to look for at the end of {@code str}.
	 * @return {boolean} True if {@code str} begins with {@code prefix} (ignoring
	 *     case).
	 */
	goog.string.caseInsensitiveStartsWith = function(str, prefix) {
	  return goog.string.caseInsensitiveCompare(
	             prefix, str.substr(0, prefix.length)) == 0;
	};


	/**
	 * Case-insensitive suffix-checker.
	 * @param {string} str The string to check.
	 * @param {string} suffix A string to look for at the end of {@code str}.
	 * @return {boolean} True if {@code str} ends with {@code suffix} (ignoring
	 *     case).
	 */
	goog.string.caseInsensitiveEndsWith = function(str, suffix) {
	  return goog.string.caseInsensitiveCompare(
	             suffix, str.substr(str.length - suffix.length, suffix.length)) ==
	      0;
	};


	/**
	 * Case-insensitive equality checker.
	 * @param {string} str1 First string to check.
	 * @param {string} str2 Second string to check.
	 * @return {boolean} True if {@code str1} and {@code str2} are the same string,
	 *     ignoring case.
	 */
	goog.string.caseInsensitiveEquals = function(str1, str2) {
	  return str1.toLowerCase() == str2.toLowerCase();
	};


	/**
	 * Does simple python-style string substitution.
	 * subs("foo%s hot%s", "bar", "dog") becomes "foobar hotdog".
	 * @param {string} str The string containing the pattern.
	 * @param {...*} var_args The items to substitute into the pattern.
	 * @return {string} A copy of {@code str} in which each occurrence of
	 *     {@code %s} has been replaced an argument from {@code var_args}.
	 */
	goog.string.subs = function(str, var_args) {
	  var splitParts = str.split('%s');
	  var returnString = '';

	  var subsArguments = Array.prototype.slice.call(arguments, 1);
	  while (subsArguments.length &&
	         // Replace up to the last split part. We are inserting in the
	         // positions between split parts.
	         splitParts.length > 1) {
	    returnString += splitParts.shift() + subsArguments.shift();
	  }

	  return returnString + splitParts.join('%s');  // Join unused '%s'
	};


	/**
	 * Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines
	 * and tabs) to a single space, and strips leading and trailing whitespace.
	 * @param {string} str Input string.
	 * @return {string} A copy of {@code str} with collapsed whitespace.
	 */
	goog.string.collapseWhitespace = function(str) {
	  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
	  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
	  // include it in the regexp to enforce consistent cross-browser behavior.
	  return str.replace(/[\s\xa0]+/g, ' ').replace(/^\s+|\s+$/g, '');
	};


	/**
	 * Checks if a string is empty or contains only whitespaces.
	 * @param {string} str The string to check.
	 * @return {boolean} Whether {@code str} is empty or whitespace only.
	 */
	goog.string.isEmptyOrWhitespace = function(str) {
	  // testing length == 0 first is actually slower in all browsers (about the
	  // same in Opera).
	  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
	  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
	  // include it in the regexp to enforce consistent cross-browser behavior.
	  return /^[\s\xa0]*$/.test(str);
	};


	/**
	 * Checks if a string is empty.
	 * @param {string} str The string to check.
	 * @return {boolean} Whether {@code str} is empty.
	 */
	goog.string.isEmptyString = function(str) {
	  return str.length == 0;
	};


	/**
	 * Checks if a string is empty or contains only whitespaces.
	 *
	 * TODO(user): Deprecate this when clients have been switched over to
	 * goog.string.isEmptyOrWhitespace.
	 *
	 * @param {string} str The string to check.
	 * @return {boolean} Whether {@code str} is empty or whitespace only.
	 */
	goog.string.isEmpty = goog.string.isEmptyOrWhitespace;


	/**
	 * Checks if a string is null, undefined, empty or contains only whitespaces.
	 * @param {*} str The string to check.
	 * @return {boolean} Whether {@code str} is null, undefined, empty, or
	 *     whitespace only.
	 * @deprecated Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))
	 *     instead.
	 */
	goog.string.isEmptyOrWhitespaceSafe = function(str) {
	  return goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str));
	};


	/**
	 * Checks if a string is null, undefined, empty or contains only whitespaces.
	 *
	 * TODO(user): Deprecate this when clients have been switched over to
	 * goog.string.isEmptyOrWhitespaceSafe.
	 *
	 * @param {*} str The string to check.
	 * @return {boolean} Whether {@code str} is null, undefined, empty, or
	 *     whitespace only.
	 */
	goog.string.isEmptySafe = goog.string.isEmptyOrWhitespaceSafe;


	/**
	 * Checks if a string is all breaking whitespace.
	 * @param {string} str The string to check.
	 * @return {boolean} Whether the string is all breaking whitespace.
	 */
	goog.string.isBreakingWhitespace = function(str) {
	  return !/[^\t\n\r ]/.test(str);
	};


	/**
	 * Checks if a string contains all letters.
	 * @param {string} str string to check.
	 * @return {boolean} True if {@code str} consists entirely of letters.
	 */
	goog.string.isAlpha = function(str) {
	  return !/[^a-zA-Z]/.test(str);
	};


	/**
	 * Checks if a string contains only numbers.
	 * @param {*} str string to check. If not a string, it will be
	 *     casted to one.
	 * @return {boolean} True if {@code str} is numeric.
	 */
	goog.string.isNumeric = function(str) {
	  return !/[^0-9]/.test(str);
	};


	/**
	 * Checks if a string contains only numbers or letters.
	 * @param {string} str string to check.
	 * @return {boolean} True if {@code str} is alphanumeric.
	 */
	goog.string.isAlphaNumeric = function(str) {
	  return !/[^a-zA-Z0-9]/.test(str);
	};


	/**
	 * Checks if a character is a space character.
	 * @param {string} ch Character to check.
	 * @return {boolean} True if {@code ch} is a space.
	 */
	goog.string.isSpace = function(ch) {
	  return ch == ' ';
	};


	/**
	 * Checks if a character is a valid unicode character.
	 * @param {string} ch Character to check.
	 * @return {boolean} True if {@code ch} is a valid unicode character.
	 */
	goog.string.isUnicodeChar = function(ch) {
	  return ch.length == 1 && ch >= ' ' && ch <= '~' ||
	      ch >= '\u0080' && ch <= '\uFFFD';
	};


	/**
	 * Takes a string and replaces newlines with a space. Multiple lines are
	 * replaced with a single space.
	 * @param {string} str The string from which to strip newlines.
	 * @return {string} A copy of {@code str} stripped of newlines.
	 */
	goog.string.stripNewlines = function(str) {
	  return str.replace(/(\r\n|\r|\n)+/g, ' ');
	};


	/**
	 * Replaces Windows and Mac new lines with unix style: \r or \r\n with \n.
	 * @param {string} str The string to in which to canonicalize newlines.
	 * @return {string} {@code str} A copy of {@code} with canonicalized newlines.
	 */
	goog.string.canonicalizeNewlines = function(str) {
	  return str.replace(/(\r\n|\r|\n)/g, '\n');
	};


	/**
	 * Normalizes whitespace in a string, replacing all whitespace chars with
	 * a space.
	 * @param {string} str The string in which to normalize whitespace.
	 * @return {string} A copy of {@code str} with all whitespace normalized.
	 */
	goog.string.normalizeWhitespace = function(str) {
	  return str.replace(/\xa0|\s/g, ' ');
	};


	/**
	 * Normalizes spaces in a string, replacing all consecutive spaces and tabs
	 * with a single space. Replaces non-breaking space with a space.
	 * @param {string} str The string in which to normalize spaces.
	 * @return {string} A copy of {@code str} with all consecutive spaces and tabs
	 *    replaced with a single space.
	 */
	goog.string.normalizeSpaces = function(str) {
	  return str.replace(/\xa0|[ \t]+/g, ' ');
	};


	/**
	 * Removes the breaking spaces from the left and right of the string and
	 * collapses the sequences of breaking spaces in the middle into single spaces.
	 * The original and the result strings render the same way in HTML.
	 * @param {string} str A string in which to collapse spaces.
	 * @return {string} Copy of the string with normalized breaking spaces.
	 */
	goog.string.collapseBreakingSpaces = function(str) {
	  return str.replace(/[\t\r\n ]+/g, ' ')
	      .replace(/^[\t\r\n ]+|[\t\r\n ]+$/g, '');
	};


	/**
	 * Trims white spaces to the left and right of a string.
	 * @param {string} str The string to trim.
	 * @return {string} A trimmed copy of {@code str}.
	 */
	goog.string.trim =
	    (goog.TRUSTED_SITE && String.prototype.trim) ? function(str) {
	      return str.trim();
	    } : function(str) {
	      // Since IE doesn't include non-breaking-space (0xa0) in their \s
	      // character class (as required by section 7.2 of the ECMAScript spec),
	      // we explicitly include it in the regexp to enforce consistent
	      // cross-browser behavior.
	      return str.replace(/^[\s\xa0]+|[\s\xa0]+$/g, '');
	    };


	/**
	 * Trims whitespaces at the left end of a string.
	 * @param {string} str The string to left trim.
	 * @return {string} A trimmed copy of {@code str}.
	 */
	goog.string.trimLeft = function(str) {
	  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
	  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
	  // include it in the regexp to enforce consistent cross-browser behavior.
	  return str.replace(/^[\s\xa0]+/, '');
	};


	/**
	 * Trims whitespaces at the right end of a string.
	 * @param {string} str The string to right trim.
	 * @return {string} A trimmed copy of {@code str}.
	 */
	goog.string.trimRight = function(str) {
	  // Since IE doesn't include non-breaking-space (0xa0) in their \s character
	  // class (as required by section 7.2 of the ECMAScript spec), we explicitly
	  // include it in the regexp to enforce consistent cross-browser behavior.
	  return str.replace(/[\s\xa0]+$/, '');
	};


	/**
	 * A string comparator that ignores case.
	 * -1 = str1 less than str2
	 *  0 = str1 equals str2
	 *  1 = str1 greater than str2
	 *
	 * @param {string} str1 The string to compare.
	 * @param {string} str2 The string to compare {@code str1} to.
	 * @return {number} The comparator result, as described above.
	 */
	goog.string.caseInsensitiveCompare = function(str1, str2) {
	  var test1 = String(str1).toLowerCase();
	  var test2 = String(str2).toLowerCase();

	  if (test1 < test2) {
	    return -1;
	  } else if (test1 == test2) {
	    return 0;
	  } else {
	    return 1;
	  }
	};


	/**
	 * Compares two strings interpreting their numeric substrings as numbers.
	 *
	 * @param {string} str1 First string.
	 * @param {string} str2 Second string.
	 * @param {!RegExp} tokenizerRegExp Splits a string into substrings of
	 *     non-negative integers, non-numeric characters and optionally fractional
	 *     numbers starting with a decimal point.
	 * @return {number} Negative if str1 < str2, 0 is str1 == str2, positive if
	 *     str1 > str2.
	 * @private
	 */
	goog.string.numberAwareCompare_ = function(str1, str2, tokenizerRegExp) {
	  if (str1 == str2) {
	    return 0;
	  }
	  if (!str1) {
	    return -1;
	  }
	  if (!str2) {
	    return 1;
	  }

	  // Using match to split the entire string ahead of time turns out to be faster
	  // for most inputs than using RegExp.exec or iterating over each character.
	  var tokens1 = str1.toLowerCase().match(tokenizerRegExp);
	  var tokens2 = str2.toLowerCase().match(tokenizerRegExp);

	  var count = Math.min(tokens1.length, tokens2.length);

	  for (var i = 0; i < count; i++) {
	    var a = tokens1[i];
	    var b = tokens2[i];

	    // Compare pairs of tokens, returning if one token sorts before the other.
	    if (a != b) {
	      // Only if both tokens are integers is a special comparison required.
	      // Decimal numbers are sorted as strings (e.g., '.09' < '.1').
	      var num1 = parseInt(a, 10);
	      if (!isNaN(num1)) {
	        var num2 = parseInt(b, 10);
	        if (!isNaN(num2) && num1 - num2) {
	          return num1 - num2;
	        }
	      }
	      return a < b ? -1 : 1;
	    }
	  }

	  // If one string is a substring of the other, the shorter string sorts first.
	  if (tokens1.length != tokens2.length) {
	    return tokens1.length - tokens2.length;
	  }

	  // The two strings must be equivalent except for case (perfect equality is
	  // tested at the head of the function.) Revert to default ASCII string
	  // comparison to stabilize the sort.
	  return str1 < str2 ? -1 : 1;
	};


	/**
	 * String comparison function that handles non-negative integer numbers in a
	 * way humans might expect. Using this function, the string 'File 2.jpg' sorts
	 * before 'File 10.jpg', and 'Version 1.9' before 'Version 1.10'. The comparison
	 * is mostly case-insensitive, though strings that are identical except for case
	 * are sorted with the upper-case strings before lower-case.
	 *
	 * This comparison function is up to 50x slower than either the default or the
	 * case-insensitive compare. It should not be used in time-critical code, but
	 * should be fast enough to sort several hundred short strings (like filenames)
	 * with a reasonable delay.
	 *
	 * @param {string} str1 The string to compare in a numerically sensitive way.
	 * @param {string} str2 The string to compare {@code str1} to.
	 * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than
	 *     0 if str1 > str2.
	 */
	goog.string.intAwareCompare = function(str1, str2) {
	  return goog.string.numberAwareCompare_(str1, str2, /\d+|\D+/g);
	};


	/**
	 * String comparison function that handles non-negative integer and fractional
	 * numbers in a way humans might expect. Using this function, the string
	 * 'File 2.jpg' sorts before 'File 10.jpg', and '3.14' before '3.2'. Equivalent
	 * to {@link goog.string.intAwareCompare} apart from the way how it interprets
	 * dots.
	 *
	 * @param {string} str1 The string to compare in a numerically sensitive way.
	 * @param {string} str2 The string to compare {@code str1} to.
	 * @return {number} less than 0 if str1 < str2, 0 if str1 == str2, greater than
	 *     0 if str1 > str2.
	 */
	goog.string.floatAwareCompare = function(str1, str2) {
	  return goog.string.numberAwareCompare_(str1, str2, /\d+|\.\d+|\D+/g);
	};


	/**
	 * Alias for {@link goog.string.floatAwareCompare}.
	 *
	 * @param {string} str1
	 * @param {string} str2
	 * @return {number}
	 */
	goog.string.numerateCompare = goog.string.floatAwareCompare;


	/**
	 * URL-encodes a string
	 * @param {*} str The string to url-encode.
	 * @return {string} An encoded copy of {@code str} that is safe for urls.
	 *     Note that '#', ':', and other characters used to delimit portions
	 *     of URLs *will* be encoded.
	 */
	goog.string.urlEncode = function(str) {
	  return encodeURIComponent(String(str));
	};


	/**
	 * URL-decodes the string. We need to specially handle '+'s because
	 * the javascript library doesn't convert them to spaces.
	 * @param {string} str The string to url decode.
	 * @return {string} The decoded {@code str}.
	 */
	goog.string.urlDecode = function(str) {
	  return decodeURIComponent(str.replace(/\+/g, ' '));
	};


	/**
	 * Converts \n to <br>s or <br />s.
	 * @param {string} str The string in which to convert newlines.
	 * @param {boolean=} opt_xml Whether to use XML compatible tags.
	 * @return {string} A copy of {@code str} with converted newlines.
	 */
	goog.string.newLineToBr = function(str, opt_xml) {
	  return str.replace(/(\r\n|\r|\n)/g, opt_xml ? '<br />' : '<br>');
	};


	/**
	 * Escapes double quote '"' and single quote '\'' characters in addition to
	 * '&', '<', and '>' so that a string can be included in an HTML tag attribute
	 * value within double or single quotes.
	 *
	 * It should be noted that > doesn't need to be escaped for the HTML or XML to
	 * be valid, but it has been decided to escape it for consistency with other
	 * implementations.
	 *
	 * With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the
	 * lowercase letter "e".
	 *
	 * NOTE(user):
	 * HtmlEscape is often called during the generation of large blocks of HTML.
	 * Using statics for the regular expressions and strings is an optimization
	 * that can more than half the amount of time IE spends in this function for
	 * large apps, since strings and regexes both contribute to GC allocations.
	 *
	 * Testing for the presence of a character before escaping increases the number
	 * of function calls, but actually provides a speed increase for the average
	 * case -- since the average case often doesn't require the escaping of all 4
	 * characters and indexOf() is much cheaper than replace().
	 * The worst case does suffer slightly from the additional calls, therefore the
	 * opt_isLikelyToContainHtmlChars option has been included for situations
	 * where all 4 HTML entities are very likely to be present and need escaping.
	 *
	 * Some benchmarks (times tended to fluctuate +-0.05ms):
	 *                                     FireFox                     IE6
	 * (no chars / average (mix of cases) / all 4 chars)
	 * no checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80
	 * indexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84
	 * indexOf + re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85
	 *
	 * An additional advantage of checking if replace actually needs to be called
	 * is a reduction in the number of object allocations, so as the size of the
	 * application grows the difference between the various methods would increase.
	 *
	 * @param {string} str string to be escaped.
	 * @param {boolean=} opt_isLikelyToContainHtmlChars Don't perform a check to see
	 *     if the character needs replacing - use this option if you expect each of
	 *     the characters to appear often. Leave false if you expect few html
	 *     characters to occur in your strings, such as if you are escaping HTML.
	 * @return {string} An escaped copy of {@code str}.
	 */
	goog.string.htmlEscape = function(str, opt_isLikelyToContainHtmlChars) {

	  if (opt_isLikelyToContainHtmlChars) {
	    str = str.replace(goog.string.AMP_RE_, '&amp;')
	              .replace(goog.string.LT_RE_, '&lt;')
	              .replace(goog.string.GT_RE_, '&gt;')
	              .replace(goog.string.QUOT_RE_, '&quot;')
	              .replace(goog.string.SINGLE_QUOTE_RE_, '&#39;')
	              .replace(goog.string.NULL_RE_, '&#0;');
	    if (goog.string.DETECT_DOUBLE_ESCAPING) {
	      str = str.replace(goog.string.E_RE_, '&#101;');
	    }
	    return str;

	  } else {
	    // quick test helps in the case when there are no chars to replace, in
	    // worst case this makes barely a difference to the time taken
	    if (!goog.string.ALL_RE_.test(str)) return str;

	    // str.indexOf is faster than regex.test in this case
	    if (str.indexOf('&') != -1) {
	      str = str.replace(goog.string.AMP_RE_, '&amp;');
	    }
	    if (str.indexOf('<') != -1) {
	      str = str.replace(goog.string.LT_RE_, '&lt;');
	    }
	    if (str.indexOf('>') != -1) {
	      str = str.replace(goog.string.GT_RE_, '&gt;');
	    }
	    if (str.indexOf('"') != -1) {
	      str = str.replace(goog.string.QUOT_RE_, '&quot;');
	    }
	    if (str.indexOf('\'') != -1) {
	      str = str.replace(goog.string.SINGLE_QUOTE_RE_, '&#39;');
	    }
	    if (str.indexOf('\x00') != -1) {
	      str = str.replace(goog.string.NULL_RE_, '&#0;');
	    }
	    if (goog.string.DETECT_DOUBLE_ESCAPING && str.indexOf('e') != -1) {
	      str = str.replace(goog.string.E_RE_, '&#101;');
	    }
	    return str;
	  }
	};


	/**
	 * Regular expression that matches an ampersand, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.AMP_RE_ = /&/g;


	/**
	 * Regular expression that matches a less than sign, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.LT_RE_ = /</g;


	/**
	 * Regular expression that matches a greater than sign, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.GT_RE_ = />/g;


	/**
	 * Regular expression that matches a double quote, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.QUOT_RE_ = /"/g;


	/**
	 * Regular expression that matches a single quote, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.SINGLE_QUOTE_RE_ = /'/g;


	/**
	 * Regular expression that matches null character, for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.NULL_RE_ = /\x00/g;


	/**
	 * Regular expression that matches a lowercase letter "e", for use in escaping.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.E_RE_ = /e/g;


	/**
	 * Regular expression that matches any character that needs to be escaped.
	 * @const {!RegExp}
	 * @private
	 */
	goog.string.ALL_RE_ =
	    (goog.string.DETECT_DOUBLE_ESCAPING ? /[\x00&<>"'e]/ : /[\x00&<>"']/);


	/**
	 * Unescapes an HTML string.
	 *
	 * @param {string} str The string to unescape.
	 * @return {string} An unescaped copy of {@code str}.
	 */
	goog.string.unescapeEntities = function(str) {
	  if (goog.string.contains(str, '&')) {
	    // We are careful not to use a DOM if we do not have one or we explicitly
	    // requested non-DOM html unescaping.
	    if (!goog.string.FORCE_NON_DOM_HTML_UNESCAPING &&
	        'document' in goog.global) {
	      return goog.string.unescapeEntitiesUsingDom_(str);
	    } else {
	      // Fall back on pure XML entities
	      return goog.string.unescapePureXmlEntities_(str);
	    }
	  }
	  return str;
	};


	/**
	 * Unescapes a HTML string using the provided document.
	 *
	 * @param {string} str The string to unescape.
	 * @param {!Document} document A document to use in escaping the string.
	 * @return {string} An unescaped copy of {@code str}.
	 */
	goog.string.unescapeEntitiesWithDocument = function(str, document) {
	  if (goog.string.contains(str, '&')) {
	    return goog.string.unescapeEntitiesUsingDom_(str, document);
	  }
	  return str;
	};


	/**
	 * Unescapes an HTML string using a DOM to resolve non-XML, non-numeric
	 * entities. This function is XSS-safe and whitespace-preserving.
	 * @private
	 * @param {string} str The string to unescape.
	 * @param {Document=} opt_document An optional document to use for creating
	 *     elements. If this is not specified then the default window.document
	 *     will be used.
	 * @return {string} The unescaped {@code str} string.
	 */
	goog.string.unescapeEntitiesUsingDom_ = function(str, opt_document) {
	  /** @type {!Object<string, string>} */
	  var seen = {'&amp;': '&', '&lt;': '<', '&gt;': '>', '&quot;': '"'};
	  var div;
	  if (opt_document) {
	    div = opt_document.createElement('div');
	  } else {
	    div = goog.global.document.createElement('div');
	  }
	  // Match as many valid entity characters as possible. If the actual entity
	  // happens to be shorter, it will still work as innerHTML will return the
	  // trailing characters unchanged. Since the entity characters do not include
	  // open angle bracket, there is no chance of XSS from the innerHTML use.
	  // Since no whitespace is passed to innerHTML, whitespace is preserved.
	  return str.replace(goog.string.HTML_ENTITY_PATTERN_, function(s, entity) {
	    // Check for cached entity.
	    var value = seen[s];
	    if (value) {
	      return value;
	    }
	    // Check for numeric entity.
	    if (entity.charAt(0) == '#') {
	      // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex numbers.
	      var n = Number('0' + entity.substr(1));
	      if (!isNaN(n)) {
	        value = String.fromCharCode(n);
	      }
	    }
	    // Fall back to innerHTML otherwise.
	    if (!value) {
	      // Append a non-entity character to avoid a bug in Webkit that parses
	      // an invalid entity at the end of innerHTML text as the empty string.
	      div.innerHTML = s + ' ';
	      // Then remove the trailing character from the result.
	      value = div.firstChild.nodeValue.slice(0, -1);
	    }
	    // Cache and return.
	    return seen[s] = value;
	  });
	};


	/**
	 * Unescapes XML entities.
	 * @private
	 * @param {string} str The string to unescape.
	 * @return {string} An unescaped copy of {@code str}.
	 */
	goog.string.unescapePureXmlEntities_ = function(str) {
	  return str.replace(/&([^;]+);/g, function(s, entity) {
	    switch (entity) {
	      case 'amp':
	        return '&';
	      case 'lt':
	        return '<';
	      case 'gt':
	        return '>';
	      case 'quot':
	        return '"';
	      default:
	        if (entity.charAt(0) == '#') {
	          // Prefix with 0 so that hex entities (e.g. &#x10) parse as hex.
	          var n = Number('0' + entity.substr(1));
	          if (!isNaN(n)) {
	            return String.fromCharCode(n);
	          }
	        }
	        // For invalid entities we just return the entity
	        return s;
	    }
	  });
	};


	/**
	 * Regular expression that matches an HTML entity.
	 * See also HTML5: Tokenization / Tokenizing character references.
	 * @private
	 * @type {!RegExp}
	 */
	goog.string.HTML_ENTITY_PATTERN_ = /&([^;\s<&]+);?/g;


	/**
	 * Do escaping of whitespace to preserve spatial formatting. We use character
	 * entity #160 to make it safer for xml.
	 * @param {string} str The string in which to escape whitespace.
	 * @param {boolean=} opt_xml Whether to use XML compatible tags.
	 * @return {string} An escaped copy of {@code str}.
	 */
	goog.string.whitespaceEscape = function(str, opt_xml) {
	  // This doesn't use goog.string.preserveSpaces for backwards compatibility.
	  return goog.string.newLineToBr(str.replace(/  /g, ' &#160;'), opt_xml);
	};


	/**
	 * Preserve spaces that would be otherwise collapsed in HTML by replacing them
	 * with non-breaking space Unicode characters.
	 * @param {string} str The string in which to preserve whitespace.
	 * @return {string} A copy of {@code str} with preserved whitespace.
	 */
	goog.string.preserveSpaces = function(str) {
	  return str.replace(/(^|[\n ]) /g, '$1' + goog.string.Unicode.NBSP);
	};


	/**
	 * Strip quote characters around a string.  The second argument is a string of
	 * characters to treat as quotes.  This can be a single character or a string of
	 * multiple character and in that case each of those are treated as possible
	 * quote characters. For example:
	 *
	 * <pre>
	 * goog.string.stripQuotes('"abc"', '"`') --> 'abc'
	 * goog.string.stripQuotes('`abc`', '"`') --> 'abc'
	 * </pre>
	 *
	 * @param {string} str The string to strip.
	 * @param {string} quoteChars The quote characters to strip.
	 * @return {string} A copy of {@code str} without the quotes.
	 */
	goog.string.stripQuotes = function(str, quoteChars) {
	  var length = quoteChars.length;
	  for (var i = 0; i < length; i++) {
	    var quoteChar = length == 1 ? quoteChars : quoteChars.charAt(i);
	    if (str.charAt(0) == quoteChar && str.charAt(str.length - 1) == quoteChar) {
	      return str.substring(1, str.length - 1);
	    }
	  }
	  return str;
	};


	/**
	 * Truncates a string to a certain length and adds '...' if necessary.  The
	 * length also accounts for the ellipsis, so a maximum length of 10 and a string
	 * 'Hello World!' produces 'Hello W...'.
	 * @param {string} str The string to truncate.
	 * @param {number} chars Max number of characters.
	 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
	 *     characters from being cut off in the middle.
	 * @return {string} The truncated {@code str} string.
	 */
	goog.string.truncate = function(str, chars, opt_protectEscapedCharacters) {
	  if (opt_protectEscapedCharacters) {
	    str = goog.string.unescapeEntities(str);
	  }

	  if (str.length > chars) {
	    str = str.substring(0, chars - 3) + '...';
	  }

	  if (opt_protectEscapedCharacters) {
	    str = goog.string.htmlEscape(str);
	  }

	  return str;
	};


	/**
	 * Truncate a string in the middle, adding "..." if necessary,
	 * and favoring the beginning of the string.
	 * @param {string} str The string to truncate the middle of.
	 * @param {number} chars Max number of characters.
	 * @param {boolean=} opt_protectEscapedCharacters Whether to protect escaped
	 *     characters from being cutoff in the middle.
	 * @param {number=} opt_trailingChars Optional number of trailing characters to
	 *     leave at the end of the string, instead of truncating as close to the
	 *     middle as possible.
	 * @return {string} A truncated copy of {@code str}.
	 */
	goog.string.truncateMiddle = function(
	    str, chars, opt_protectEscapedCharacters, opt_trailingChars) {
	  if (opt_protectEscapedCharacters) {
	    str = goog.string.unescapeEntities(str);
	  }

	  if (opt_trailingChars && str.length > chars) {
	    if (opt_trailingChars > chars) {
	      opt_trailingChars = chars;
	    }
	    var endPoint = str.length - opt_trailingChars;
	    var startPoint = chars - opt_trailingChars;
	    str = str.substring(0, startPoint) + '...' + str.substring(endPoint);
	  } else if (str.length > chars) {
	    // Favor the beginning of the string:
	    var half = Math.floor(chars / 2);
	    var endPos = str.length - half;
	    half += chars % 2;
	    str = str.substring(0, half) + '...' + str.substring(endPos);
	  }

	  if (opt_protectEscapedCharacters) {
	    str = goog.string.htmlEscape(str);
	  }

	  return str;
	};


	/**
	 * Special chars that need to be escaped for goog.string.quote.
	 * @private {!Object<string, string>}
	 */
	goog.string.specialEscapeChars_ = {
	  '\0': '\\0',
	  '\b': '\\b',
	  '\f': '\\f',
	  '\n': '\\n',
	  '\r': '\\r',
	  '\t': '\\t',
	  '\x0B': '\\x0B',  // '\v' is not supported in JScript
	  '"': '\\"',
	  '\\': '\\\\',
	  // To support the use case of embedding quoted strings inside of script
	  // tags, we have to make sure HTML comments and opening/closing script tags do
	  // not appear in the resulting string. The specific strings that must be
	  // escaped are documented at:
	  // http://www.w3.org/TR/html51/semantics.html#restrictions-for-contents-of-script-elements
	  '<': '\x3c'
	};


	/**
	 * Character mappings used internally for goog.string.escapeChar.
	 * @private {!Object<string, string>}
	 */
	goog.string.jsEscapeCache_ = {
	  '\'': '\\\''
	};


	/**
	 * Encloses a string in double quotes and escapes characters so that the
	 * string is a valid JS string. The resulting string is safe to embed in
	 * `<script>` tags as "<" is escaped.
	 * @param {string} s The string to quote.
	 * @return {string} A copy of {@code s} surrounded by double quotes.
	 */
	goog.string.quote = function(s) {
	  s = String(s);
	  var sb = ['"'];
	  for (var i = 0; i < s.length; i++) {
	    var ch = s.charAt(i);
	    var cc = ch.charCodeAt(0);
	    sb[i + 1] = goog.string.specialEscapeChars_[ch] ||
	        ((cc > 31 && cc < 127) ? ch : goog.string.escapeChar(ch));
	  }
	  sb.push('"');
	  return sb.join('');
	};


	/**
	 * Takes a string and returns the escaped string for that character.
	 * @param {string} str The string to escape.
	 * @return {string} An escaped string representing {@code str}.
	 */
	goog.string.escapeString = function(str) {
	  var sb = [];
	  for (var i = 0; i < str.length; i++) {
	    sb[i] = goog.string.escapeChar(str.charAt(i));
	  }
	  return sb.join('');
	};


	/**
	 * Takes a character and returns the escaped string for that character. For
	 * example escapeChar(String.fromCharCode(15)) -> "\\x0E".
	 * @param {string} c The character to escape.
	 * @return {string} An escaped string representing {@code c}.
	 */
	goog.string.escapeChar = function(c) {
	  if (c in goog.string.jsEscapeCache_) {
	    return goog.string.jsEscapeCache_[c];
	  }

	  if (c in goog.string.specialEscapeChars_) {
	    return goog.string.jsEscapeCache_[c] = goog.string.specialEscapeChars_[c];
	  }

	  var rv = c;
	  var cc = c.charCodeAt(0);
	  if (cc > 31 && cc < 127) {
	    rv = c;
	  } else {
	    // tab is 9 but handled above
	    if (cc < 256) {
	      rv = '\\x';
	      if (cc < 16 || cc > 256) {
	        rv += '0';
	      }
	    } else {
	      rv = '\\u';
	      if (cc < 4096) {  // \u1000
	        rv += '0';
	      }
	    }
	    rv += cc.toString(16).toUpperCase();
	  }

	  return goog.string.jsEscapeCache_[c] = rv;
	};


	/**
	 * Determines whether a string contains a substring.
	 * @param {string} str The string to search.
	 * @param {string} subString The substring to search for.
	 * @return {boolean} Whether {@code str} contains {@code subString}.
	 */
	goog.string.contains = function(str, subString) {
	  return str.indexOf(subString) != -1;
	};


	/**
	 * Determines whether a string contains a substring, ignoring case.
	 * @param {string} str The string to search.
	 * @param {string} subString The substring to search for.
	 * @return {boolean} Whether {@code str} contains {@code subString}.
	 */
	goog.string.caseInsensitiveContains = function(str, subString) {
	  return goog.string.contains(str.toLowerCase(), subString.toLowerCase());
	};


	/**
	 * Returns the non-overlapping occurrences of ss in s.
	 * If either s or ss evalutes to false, then returns zero.
	 * @param {string} s The string to look in.
	 * @param {string} ss The string to look for.
	 * @return {number} Number of occurrences of ss in s.
	 */
	goog.string.countOf = function(s, ss) {
	  return s && ss ? s.split(ss).length - 1 : 0;
	};


	/**
	 * Removes a substring of a specified length at a specific
	 * index in a string.
	 * @param {string} s The base string from which to remove.
	 * @param {number} index The index at which to remove the substring.
	 * @param {number} stringLength The length of the substring to remove.
	 * @return {string} A copy of {@code s} with the substring removed or the full
	 *     string if nothing is removed or the input is invalid.
	 */
	goog.string.removeAt = function(s, index, stringLength) {
	  var resultStr = s;
	  // If the index is greater or equal to 0 then remove substring
	  if (index >= 0 && index < s.length && stringLength > 0) {
	    resultStr = s.substr(0, index) +
	        s.substr(index + stringLength, s.length - index - stringLength);
	  }
	  return resultStr;
	};


	/**
	 *  Removes the first occurrence of a substring from a string.
	 *  @param {string} s The base string from which to remove.
	 *  @param {string} ss The string to remove.
	 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
	 *      string if nothing is removed.
	 */
	goog.string.remove = function(s, ss) {
	  var re = new RegExp(goog.string.regExpEscape(ss), '');
	  return s.replace(re, '');
	};


	/**
	 *  Removes all occurrences of a substring from a string.
	 *  @param {string} s The base string from which to remove.
	 *  @param {string} ss The string to remove.
	 *  @return {string} A copy of {@code s} with {@code ss} removed or the full
	 *      string if nothing is removed.
	 */
	goog.string.removeAll = function(s, ss) {
	  var re = new RegExp(goog.string.regExpEscape(ss), 'g');
	  return s.replace(re, '');
	};


	/**
	 * Escapes characters in the string that are not safe to use in a RegExp.
	 * @param {*} s The string to escape. If not a string, it will be casted
	 *     to one.
	 * @return {string} A RegExp safe, escaped copy of {@code s}.
	 */
	goog.string.regExpEscape = function(s) {
	  return String(s)
	      .replace(/([-()\[\]{}+?*.$\^|,:#<!\\])/g, '\\$1')
	      .replace(/\x08/g, '\\x08');
	};


	/**
	 * Repeats a string n times.
	 * @param {string} string The string to repeat.
	 * @param {number} length The number of times to repeat.
	 * @return {string} A string containing {@code length} repetitions of
	 *     {@code string}.
	 */
	goog.string.repeat = (String.prototype.repeat) ? function(string, length) {
	  // The native method is over 100 times faster than the alternative.
	  return string.repeat(length);
	} : function(string, length) {
	  return new Array(length + 1).join(string);
	};


	/**
	 * Pads number to given length and optionally rounds it to a given precision.
	 * For example:
	 * <pre>padNumber(1.25, 2, 3) -> '01.250'
	 * padNumber(1.25, 2) -> '01.25'
	 * padNumber(1.25, 2, 1) -> '01.3'
	 * padNumber(1.25, 0) -> '1.25'</pre>
	 *
	 * @param {number} num The number to pad.
	 * @param {number} length The desired length.
	 * @param {number=} opt_precision The desired precision.
	 * @return {string} {@code num} as a string with the given options.
	 */
	goog.string.padNumber = function(num, length, opt_precision) {
	  var s = goog.isDef(opt_precision) ? num.toFixed(opt_precision) : String(num);
	  var index = s.indexOf('.');
	  if (index == -1) {
	    index = s.length;
	  }
	  return goog.string.repeat('0', Math.max(0, length - index)) + s;
	};


	/**
	 * Returns a string representation of the given object, with
	 * null and undefined being returned as the empty string.
	 *
	 * @param {*} obj The object to convert.
	 * @return {string} A string representation of the {@code obj}.
	 */
	goog.string.makeSafe = function(obj) {
	  return obj == null ? '' : String(obj);
	};


	/**
	 * Concatenates string expressions. This is useful
	 * since some browsers are very inefficient when it comes to using plus to
	 * concat strings. Be careful when using null and undefined here since
	 * these will not be included in the result. If you need to represent these
	 * be sure to cast the argument to a String first.
	 * For example:
	 * <pre>buildString('a', 'b', 'c', 'd') -> 'abcd'
	 * buildString(null, undefined) -> ''
	 * </pre>
	 * @param {...*} var_args A list of strings to concatenate. If not a string,
	 *     it will be casted to one.
	 * @return {string} The concatenation of {@code var_args}.
	 */
	goog.string.buildString = function(var_args) {
	  return Array.prototype.join.call(arguments, '');
	};


	/**
	 * Returns a string with at least 64-bits of randomness.
	 *
	 * Doesn't trust Javascript's random function entirely. Uses a combination of
	 * random and current timestamp, and then encodes the string in base-36 to
	 * make it shorter.
	 *
	 * @return {string} A random string, e.g. sn1s7vb4gcic.
	 */
	goog.string.getRandomString = function() {
	  var x = 2147483648;
	  return Math.floor(Math.random() * x).toString(36) +
	      Math.abs(Math.floor(Math.random() * x) ^ goog.now()).toString(36);
	};


	/**
	 * Compares two version numbers.
	 *
	 * @param {string|number} version1 Version of first item.
	 * @param {string|number} version2 Version of second item.
	 *
	 * @return {number}  1 if {@code version1} is higher.
	 *                   0 if arguments are equal.
	 *                  -1 if {@code version2} is higher.
	 */
	goog.string.compareVersions = function(version1, version2) {
	  var order = 0;
	  // Trim leading and trailing whitespace and split the versions into
	  // subversions.
	  var v1Subs = goog.string.trim(String(version1)).split('.');
	  var v2Subs = goog.string.trim(String(version2)).split('.');
	  var subCount = Math.max(v1Subs.length, v2Subs.length);

	  // Iterate over the subversions, as long as they appear to be equivalent.
	  for (var subIdx = 0; order == 0 && subIdx < subCount; subIdx++) {
	    var v1Sub = v1Subs[subIdx] || '';
	    var v2Sub = v2Subs[subIdx] || '';

	    // Split the subversions into pairs of numbers and qualifiers (like 'b').
	    // Two different RegExp objects are needed because they are both using
	    // the 'g' flag.
	    var v1CompParser = new RegExp('(\\d*)(\\D*)', 'g');
	    var v2CompParser = new RegExp('(\\d*)(\\D*)', 'g');
	    do {
	      var v1Comp = v1CompParser.exec(v1Sub) || ['', '', ''];
	      var v2Comp = v2CompParser.exec(v2Sub) || ['', '', ''];
	      // Break if there are no more matches.
	      if (v1Comp[0].length == 0 && v2Comp[0].length == 0) {
	        break;
	      }

	      // Parse the numeric part of the subversion. A missing number is
	      // equivalent to 0.
	      var v1CompNum = v1Comp[1].length == 0 ? 0 : parseInt(v1Comp[1], 10);
	      var v2CompNum = v2Comp[1].length == 0 ? 0 : parseInt(v2Comp[1], 10);

	      // Compare the subversion components. The number has the highest
	      // precedence. Next, if the numbers are equal, a subversion without any
	      // qualifier is always higher than a subversion with any qualifier. Next,
	      // the qualifiers are compared as strings.
	      order = goog.string.compareElements_(v1CompNum, v2CompNum) ||
	          goog.string.compareElements_(
	              v1Comp[2].length == 0, v2Comp[2].length == 0) ||
	          goog.string.compareElements_(v1Comp[2], v2Comp[2]);
	      // Stop as soon as an inequality is discovered.
	    } while (order == 0);
	  }

	  return order;
	};


	/**
	 * Compares elements of a version number.
	 *
	 * @param {string|number|boolean} left An element from a version number.
	 * @param {string|number|boolean} right An element from a version number.
	 *
	 * @return {number}  1 if {@code left} is higher.
	 *                   0 if arguments are equal.
	 *                  -1 if {@code right} is higher.
	 * @private
	 */
	goog.string.compareElements_ = function(left, right) {
	  if (left < right) {
	    return -1;
	  } else if (left > right) {
	    return 1;
	  }
	  return 0;
	};


	/**
	 * String hash function similar to java.lang.String.hashCode().
	 * The hash code for a string is computed as
	 * s[0] * 31 ^ (n - 1) + s[1] * 31 ^ (n - 2) + ... + s[n - 1],
	 * where s[i] is the ith character of the string and n is the length of
	 * the string. We mod the result to make it between 0 (inclusive) and 2^32
	 * (exclusive).
	 * @param {string} str A string.
	 * @return {number} Hash value for {@code str}, between 0 (inclusive) and 2^32
	 *  (exclusive). The empty string returns 0.
	 */
	goog.string.hashCode = function(str) {
	  var result = 0;
	  for (var i = 0; i < str.length; ++i) {
	    // Normalize to 4 byte range, 0 ... 2^32.
	    result = (31 * result + str.charCodeAt(i)) >>> 0;
	  }
	  return result;
	};


	/**
	 * The most recent unique ID. |0 is equivalent to Math.floor in this case.
	 * @type {number}
	 * @private
	 */
	goog.string.uniqueStringCounter_ = Math.random() * 0x80000000 | 0;


	/**
	 * Generates and returns a string which is unique in the current document.
	 * This is useful, for example, to create unique IDs for DOM elements.
	 * @return {string} A unique id.
	 */
	goog.string.createUniqueString = function() {
	  return 'goog_' + goog.string.uniqueStringCounter_++;
	};


	/**
	 * Converts the supplied string to a number, which may be Infinity or NaN.
	 * This function strips whitespace: (toNumber(' 123') === 123)
	 * This function accepts scientific notation: (toNumber('1e1') === 10)
	 *
	 * This is better than Javascript's built-in conversions because, sadly:
	 *     (Number(' ') === 0) and (parseFloat('123a') === 123)
	 *
	 * @param {string} str The string to convert.
	 * @return {number} The number the supplied string represents, or NaN.
	 */
	goog.string.toNumber = function(str) {
	  var num = Number(str);
	  if (num == 0 && goog.string.isEmptyOrWhitespace(str)) {
	    return NaN;
	  }
	  return num;
	};


	/**
	 * Returns whether the given string is lower camel case (e.g. "isFooBar").
	 *
	 * Note that this assumes the string is entirely letters.
	 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
	 *
	 * @param {string} str String to test.
	 * @return {boolean} Whether the string is lower camel case.
	 */
	goog.string.isLowerCamelCase = function(str) {
	  return /^[a-z]+([A-Z][a-z]*)*$/.test(str);
	};


	/**
	 * Returns whether the given string is upper camel case (e.g. "FooBarBaz").
	 *
	 * Note that this assumes the string is entirely letters.
	 * @see http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms
	 *
	 * @param {string} str String to test.
	 * @return {boolean} Whether the string is upper camel case.
	 */
	goog.string.isUpperCamelCase = function(str) {
	  return /^([A-Z][a-z]*)+$/.test(str);
	};


	/**
	 * Converts a string from selector-case to camelCase (e.g. from
	 * "multi-part-string" to "multiPartString"), useful for converting
	 * CSS selectors and HTML dataset keys to their equivalent JS properties.
	 * @param {string} str The string in selector-case form.
	 * @return {string} The string in camelCase form.
	 */
	goog.string.toCamelCase = function(str) {
	  return String(str).replace(
	      /\-([a-z])/g, function(all, match) { return match.toUpperCase(); });
	};


	/**
	 * Converts a string from camelCase to selector-case (e.g. from
	 * "multiPartString" to "multi-part-string"), useful for converting JS
	 * style and dataset properties to equivalent CSS selectors and HTML keys.
	 * @param {string} str The string in camelCase form.
	 * @return {string} The string in selector-case form.
	 */
	goog.string.toSelectorCase = function(str) {
	  return String(str).replace(/([A-Z])/g, '-$1').toLowerCase();
	};


	/**
	 * Converts a string into TitleCase. First character of the string is always
	 * capitalized in addition to the first letter of every subsequent word.
	 * Words are delimited by one or more whitespaces by default. Custom delimiters
	 * can optionally be specified to replace the default, which doesn't preserve
	 * whitespace delimiters and instead must be explicitly included if needed.
	 *
	 * Default delimiter => " ":
	 *    goog.string.toTitleCase('oneTwoThree')    => 'OneTwoThree'
	 *    goog.string.toTitleCase('one two three')  => 'One Two Three'
	 *    goog.string.toTitleCase('  one   two   ') => '  One   Two   '
	 *    goog.string.toTitleCase('one_two_three')  => 'One_two_three'
	 *    goog.string.toTitleCase('one-two-three')  => 'One-two-three'
	 *
	 * Custom delimiter => "_-.":
	 *    goog.string.toTitleCase('oneTwoThree', '_-.')       => 'OneTwoThree'
	 *    goog.string.toTitleCase('one two three', '_-.')     => 'One two three'
	 *    goog.string.toTitleCase('  one   two   ', '_-.')    => '  one   two   '
	 *    goog.string.toTitleCase('one_two_three', '_-.')     => 'One_Two_Three'
	 *    goog.string.toTitleCase('one-two-three', '_-.')     => 'One-Two-Three'
	 *    goog.string.toTitleCase('one...two...three', '_-.') => 'One...Two...Three'
	 *    goog.string.toTitleCase('one. two. three', '_-.')   => 'One. two. three'
	 *    goog.string.toTitleCase('one-two.three', '_-.')     => 'One-Two.Three'
	 *
	 * @param {string} str String value in camelCase form.
	 * @param {string=} opt_delimiters Custom delimiter character set used to
	 *      distinguish words in the string value. Each character represents a
	 *      single delimiter. When provided, default whitespace delimiter is
	 *      overridden and must be explicitly included if needed.
	 * @return {string} String value in TitleCase form.
	 */
	goog.string.toTitleCase = function(str, opt_delimiters) {
	  var delimiters = goog.isString(opt_delimiters) ?
	      goog.string.regExpEscape(opt_delimiters) :
	      '\\s';

	  // For IE8, we need to prevent using an empty character set. Otherwise,
	  // incorrect matching will occur.
	  delimiters = delimiters ? '|[' + delimiters + ']+' : '';

	  var regexp = new RegExp('(^' + delimiters + ')([a-z])', 'g');
	  return str.replace(
	      regexp, function(all, p1, p2) { return p1 + p2.toUpperCase(); });
	};


	/**
	 * Capitalizes a string, i.e. converts the first letter to uppercase
	 * and all other letters to lowercase, e.g.:
	 *
	 * goog.string.capitalize('one')     => 'One'
	 * goog.string.capitalize('ONE')     => 'One'
	 * goog.string.capitalize('one two') => 'One two'
	 *
	 * Note that this function does not trim initial whitespace.
	 *
	 * @param {string} str String value to capitalize.
	 * @return {string} String value with first letter in uppercase.
	 */
	goog.string.capitalize = function(str) {
	  return String(str.charAt(0)).toUpperCase() +
	      String(str.substr(1)).toLowerCase();
	};


	/**
	 * Parse a string in decimal or hexidecimal ('0xFFFF') form.
	 *
	 * To parse a particular radix, please use parseInt(string, radix) directly. See
	 * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt
	 *
	 * This is a wrapper for the built-in parseInt function that will only parse
	 * numbers as base 10 or base 16.  Some JS implementations assume strings
	 * starting with "0" are intended to be octal. ES3 allowed but discouraged
	 * this behavior. ES5 forbids it.  This function emulates the ES5 behavior.
	 *
	 * For more information, see Mozilla JS Reference: http://goo.gl/8RiFj
	 *
	 * @param {string|number|null|undefined} value The value to be parsed.
	 * @return {number} The number, parsed. If the string failed to parse, this
	 *     will be NaN.
	 */
	goog.string.parseInt = function(value) {
	  // Force finite numbers to strings.
	  if (isFinite(value)) {
	    value = String(value);
	  }

	  if (goog.isString(value)) {
	    // If the string starts with '0x' or '-0x', parse as hex.
	    return /^\s*-?0x/i.test(value) ? parseInt(value, 16) : parseInt(value, 10);
	  }

	  return NaN;
	};


	/**
	 * Splits a string on a separator a limited number of times.
	 *
	 * This implementation is more similar to Python or Java, where the limit
	 * parameter specifies the maximum number of splits rather than truncating
	 * the number of results.
	 *
	 * See http://docs.python.org/2/library/stdtypes.html#str.split
	 * See JavaDoc: http://goo.gl/F2AsY
	 * See Mozilla reference: http://goo.gl/dZdZs
	 *
	 * @param {string} str String to split.
	 * @param {string} separator The separator.
	 * @param {number} limit The limit to the number of splits. The resulting array
	 *     will have a maximum length of limit+1.  Negative numbers are the same
	 *     as zero.
	 * @return {!Array<string>} The string, split.
	 */
	goog.string.splitLimit = function(str, separator, limit) {
	  var parts = str.split(separator);
	  var returnVal = [];

	  // Only continue doing this while we haven't hit the limit and we have
	  // parts left.
	  while (limit > 0 && parts.length) {
	    returnVal.push(parts.shift());
	    limit--;
	  }

	  // If there are remaining parts, append them to the end.
	  if (parts.length) {
	    returnVal.push(parts.join(separator));
	  }

	  return returnVal;
	};


	/**
	 * Finds the characters to the right of the last instance of any separator
	 *
	 * This function is similar to goog.string.path.baseName, except it can take a
	 * list of characters to split the string on. It will return the rightmost
	 * grouping of characters to the right of any separator as a left-to-right
	 * oriented string.
	 *
	 * @see goog.string.path.baseName
	 * @param {string} str The string
	 * @param {string|!Array<string>} separators A list of separator characters
	 * @return {string} The last part of the string with respect to the separators
	 */
	goog.string.lastComponent = function(str, separators) {
	  if (!separators) {
	    return str;
	  } else if (typeof separators == 'string') {
	    separators = [separators];
	  }

	  var lastSeparatorIndex = -1;
	  for (var i = 0; i < separators.length; i++) {
	    if (separators[i] == '') {
	      continue;
	    }
	    var currentSeparatorIndex = str.lastIndexOf(separators[i]);
	    if (currentSeparatorIndex > lastSeparatorIndex) {
	      lastSeparatorIndex = currentSeparatorIndex;
	    }
	  }
	  if (lastSeparatorIndex == -1) {
	    return str;
	  }
	  return str.slice(lastSeparatorIndex + 1);
	};


	/**
	 * Computes the Levenshtein edit distance between two strings.
	 * @param {string} a
	 * @param {string} b
	 * @return {number} The edit distance between the two strings.
	 */
	goog.string.editDistance = function(a, b) {
	  var v0 = [];
	  var v1 = [];

	  if (a == b) {
	    return 0;
	  }

	  if (!a.length || !b.length) {
	    return Math.max(a.length, b.length);
	  }

	  for (var i = 0; i < b.length + 1; i++) {
	    v0[i] = i;
	  }

	  for (var i = 0; i < a.length; i++) {
	    v1[0] = i + 1;

	    for (var j = 0; j < b.length; j++) {
	      var cost = Number(a[i] != b[j]);
	      // Cost for the substring is the minimum of adding one character, removing
	      // one character, or a swap.
	      v1[j + 1] = Math.min(v1[j] + 1, v0[j + 1] + 1, v0[j] + cost);
	    }

	    for (var j = 0; j < v0.length; j++) {
	      v0[j] = v1[j];
	    }
	  }

	  return v1[b.length];
	};

	module.exports = goog.string;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Utilities for manipulating objects/maps/hashes.
	 * @author arv@google.com (Erik Arvidsson)
	 */

	goog.provide('goog.object');


	/**
	 * Whether two values are not observably distinguishable. This
	 * correctly detects that 0 is not the same as -0 and two NaNs are
	 * practically equivalent.
	 *
	 * The implementation is as suggested by harmony:egal proposal.
	 *
	 * @param {*} v The first value to compare.
	 * @param {*} v2 The second value to compare.
	 * @return {boolean} Whether two values are not observably distinguishable.
	 * @see http://wiki.ecmascript.org/doku.php?id=harmony:egal
	 */
	goog.object.is = function(v, v2) {
	  if (v === v2) {
	    // 0 === -0, but they are not identical.
	    // We need the cast because the compiler requires that v2 is a
	    // number (although 1/v2 works with non-number). We cast to ? to
	    // stop the compiler from type-checking this statement.
	    return v !== 0 || 1 / v === 1 / /** @type {?} */ (v2);
	  }

	  // NaN is non-reflexive: NaN !== NaN, although they are identical.
	  return v !== v && v2 !== v2;
	};


	/**
	 * Calls a function for each element in an object/map/hash.
	 *
	 * @param {Object<K,V>} obj The object over which to iterate.
	 * @param {function(this:T,V,?,Object<K,V>):?} f The function to call
	 *     for every element. This function takes 3 arguments (the value, the
	 *     key and the object) and the return value is ignored.
	 * @param {T=} opt_obj This is used as the 'this' object within f.
	 * @template T,K,V
	 */
	goog.object.forEach = function(obj, f, opt_obj) {
	  for (var key in obj) {
	    f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);
	  }
	};


	/**
	 * Calls a function for each element in an object/map/hash. If that call returns
	 * true, adds the element to a new object.
	 *
	 * @param {Object<K,V>} obj The object over which to iterate.
	 * @param {function(this:T,V,?,Object<K,V>):boolean} f The function to call
	 *     for every element. This
	 *     function takes 3 arguments (the value, the key and the object)
	 *     and should return a boolean. If the return value is true the
	 *     element is added to the result object. If it is false the
	 *     element is not included.
	 * @param {T=} opt_obj This is used as the 'this' object within f.
	 * @return {!Object<K,V>} a new object in which only elements that passed the
	 *     test are present.
	 * @template T,K,V
	 */
	goog.object.filter = function(obj, f, opt_obj) {
	  var res = {};
	  for (var key in obj) {
	    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
	      res[key] = obj[key];
	    }
	  }
	  return res;
	};


	/**
	 * For every element in an object/map/hash calls a function and inserts the
	 * result into a new object.
	 *
	 * @param {Object<K,V>} obj The object over which to iterate.
	 * @param {function(this:T,V,?,Object<K,V>):R} f The function to call
	 *     for every element. This function
	 *     takes 3 arguments (the value, the key and the object)
	 *     and should return something. The result will be inserted
	 *     into a new object.
	 * @param {T=} opt_obj This is used as the 'this' object within f.
	 * @return {!Object<K,R>} a new object with the results from f.
	 * @template T,K,V,R
	 */
	goog.object.map = function(obj, f, opt_obj) {
	  var res = {};
	  for (var key in obj) {
	    res[key] = f.call(/** @type {?} */ (opt_obj), obj[key], key, obj);
	  }
	  return res;
	};


	/**
	 * Calls a function for each element in an object/map/hash. If any
	 * call returns true, returns true (without checking the rest). If
	 * all calls return false, returns false.
	 *
	 * @param {Object<K,V>} obj The object to check.
	 * @param {function(this:T,V,?,Object<K,V>):boolean} f The function to
	 *     call for every element. This function
	 *     takes 3 arguments (the value, the key and the object) and should
	 *     return a boolean.
	 * @param {T=} opt_obj This is used as the 'this' object within f.
	 * @return {boolean} true if any element passes the test.
	 * @template T,K,V
	 */
	goog.object.some = function(obj, f, opt_obj) {
	  for (var key in obj) {
	    if (f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
	      return true;
	    }
	  }
	  return false;
	};


	/**
	 * Calls a function for each element in an object/map/hash. If
	 * all calls return true, returns true. If any call returns false, returns
	 * false at this point and does not continue to check the remaining elements.
	 *
	 * @param {Object<K,V>} obj The object to check.
	 * @param {?function(this:T,V,?,Object<K,V>):boolean} f The function to
	 *     call for every element. This function
	 *     takes 3 arguments (the value, the key and the object) and should
	 *     return a boolean.
	 * @param {T=} opt_obj This is used as the 'this' object within f.
	 * @return {boolean} false if any element fails the test.
	 * @template T,K,V
	 */
	goog.object.every = function(obj, f, opt_obj) {
	  for (var key in obj) {
	    if (!f.call(/** @type {?} */ (opt_obj), obj[key], key, obj)) {
	      return false;
	    }
	  }
	  return true;
	};


	/**
	 * Returns the number of key-value pairs in the object map.
	 *
	 * @param {Object} obj The object for which to get the number of key-value
	 *     pairs.
	 * @return {number} The number of key-value pairs in the object map.
	 */
	goog.object.getCount = function(obj) {
	  var rv = 0;
	  for (var key in obj) {
	    rv++;
	  }
	  return rv;
	};


	/**
	 * Returns one key from the object map, if any exists.
	 * For map literals the returned key will be the first one in most of the
	 * browsers (a know exception is Konqueror).
	 *
	 * @param {Object} obj The object to pick a key from.
	 * @return {string|undefined} The key or undefined if the object is empty.
	 */
	goog.object.getAnyKey = function(obj) {
	  for (var key in obj) {
	    return key;
	  }
	};


	/**
	 * Returns one value from the object map, if any exists.
	 * For map literals the returned value will be the first one in most of the
	 * browsers (a know exception is Konqueror).
	 *
	 * @param {Object<K,V>} obj The object to pick a value from.
	 * @return {V|undefined} The value or undefined if the object is empty.
	 * @template K,V
	 */
	goog.object.getAnyValue = function(obj) {
	  for (var key in obj) {
	    return obj[key];
	  }
	};


	/**
	 * Whether the object/hash/map contains the given object as a value.
	 * An alias for goog.object.containsValue(obj, val).
	 *
	 * @param {Object<K,V>} obj The object in which to look for val.
	 * @param {V} val The object for which to check.
	 * @return {boolean} true if val is present.
	 * @template K,V
	 */
	goog.object.contains = function(obj, val) {
	  return goog.object.containsValue(obj, val);
	};


	/**
	 * Returns the values of the object/map/hash.
	 *
	 * @param {Object<K,V>} obj The object from which to get the values.
	 * @return {!Array<V>} The values in the object/map/hash.
	 * @template K,V
	 */
	goog.object.getValues = function(obj) {
	  var res = [];
	  var i = 0;
	  for (var key in obj) {
	    res[i++] = obj[key];
	  }
	  return res;
	};


	/**
	 * Returns the keys of the object/map/hash.
	 *
	 * @param {Object} obj The object from which to get the keys.
	 * @return {!Array<string>} Array of property keys.
	 */
	goog.object.getKeys = function(obj) {
	  var res = [];
	  var i = 0;
	  for (var key in obj) {
	    res[i++] = key;
	  }
	  return res;
	};


	/**
	 * Get a value from an object multiple levels deep.  This is useful for
	 * pulling values from deeply nested objects, such as JSON responses.
	 * Example usage: getValueByKeys(jsonObj, 'foo', 'entries', 3)
	 *
	 * @param {!Object} obj An object to get the value from.  Can be array-like.
	 * @param {...(string|number|!IArrayLike<number|string>)}
	 *     var_args A number of keys
	 *     (as strings, or numbers, for array-like objects).  Can also be
	 *     specified as a single array of keys.
	 * @return {*} The resulting value.  If, at any point, the value for a key
	 *     is undefined, returns undefined.
	 */
	goog.object.getValueByKeys = function(obj, var_args) {
	  var isArrayLike = goog.isArrayLike(var_args);
	  var keys = isArrayLike ? var_args : arguments;

	  // Start with the 2nd parameter for the variable parameters syntax.
	  for (var i = isArrayLike ? 0 : 1; i < keys.length; i++) {
	    obj = obj[keys[i]];
	    if (!goog.isDef(obj)) {
	      break;
	    }
	  }

	  return obj;
	};


	/**
	 * Whether the object/map/hash contains the given key.
	 *
	 * @param {Object} obj The object in which to look for key.
	 * @param {?} key The key for which to check.
	 * @return {boolean} true If the map contains the key.
	 */
	goog.object.containsKey = function(obj, key) {
	  return obj !== null && key in obj;
	};


	/**
	 * Whether the object/map/hash contains the given value. This is O(n).
	 *
	 * @param {Object<K,V>} obj The object in which to look for val.
	 * @param {V} val The value for which to check.
	 * @return {boolean} true If the map contains the value.
	 * @template K,V
	 */
	goog.object.containsValue = function(obj, val) {
	  for (var key in obj) {
	    if (obj[key] == val) {
	      return true;
	    }
	  }
	  return false;
	};


	/**
	 * Searches an object for an element that satisfies the given condition and
	 * returns its key.
	 * @param {Object<K,V>} obj The object to search in.
	 * @param {function(this:T,V,string,Object<K,V>):boolean} f The
	 *      function to call for every element. Takes 3 arguments (the value,
	 *     the key and the object) and should return a boolean.
	 * @param {T=} opt_this An optional "this" context for the function.
	 * @return {string|undefined} The key of an element for which the function
	 *     returns true or undefined if no such element is found.
	 * @template T,K,V
	 */
	goog.object.findKey = function(obj, f, opt_this) {
	  for (var key in obj) {
	    if (f.call(/** @type {?} */ (opt_this), obj[key], key, obj)) {
	      return key;
	    }
	  }
	  return undefined;
	};


	/**
	 * Searches an object for an element that satisfies the given condition and
	 * returns its value.
	 * @param {Object<K,V>} obj The object to search in.
	 * @param {function(this:T,V,string,Object<K,V>):boolean} f The function
	 *     to call for every element. Takes 3 arguments (the value, the key
	 *     and the object) and should return a boolean.
	 * @param {T=} opt_this An optional "this" context for the function.
	 * @return {V} The value of an element for which the function returns true or
	 *     undefined if no such element is found.
	 * @template T,K,V
	 */
	goog.object.findValue = function(obj, f, opt_this) {
	  var key = goog.object.findKey(obj, f, opt_this);
	  return key && obj[key];
	};


	/**
	 * Whether the object/map/hash is empty.
	 *
	 * @param {Object} obj The object to test.
	 * @return {boolean} true if obj is empty.
	 */
	goog.object.isEmpty = function(obj) {
	  for (var key in obj) {
	    return false;
	  }
	  return true;
	};


	/**
	 * Removes all key value pairs from the object/map/hash.
	 *
	 * @param {Object} obj The object to clear.
	 */
	goog.object.clear = function(obj) {
	  for (var i in obj) {
	    delete obj[i];
	  }
	};


	/**
	 * Removes a key-value pair based on the key.
	 *
	 * @param {Object} obj The object from which to remove the key.
	 * @param {?} key The key to remove.
	 * @return {boolean} Whether an element was removed.
	 */
	goog.object.remove = function(obj, key) {
	  var rv;
	  if (rv = key in /** @type {!Object} */ (obj)) {
	    delete obj[key];
	  }
	  return rv;
	};


	/**
	 * Adds a key-value pair to the object. Throws an exception if the key is
	 * already in use. Use set if you want to change an existing pair.
	 *
	 * @param {Object<K,V>} obj The object to which to add the key-value pair.
	 * @param {string} key The key to add.
	 * @param {V} val The value to add.
	 * @template K,V
	 */
	goog.object.add = function(obj, key, val) {
	  if (obj !== null && key in obj) {
	    throw Error('The object already contains the key "' + key + '"');
	  }
	  goog.object.set(obj, key, val);
	};


	/**
	 * Returns the value for the given key.
	 *
	 * @param {Object<K,V>} obj The object from which to get the value.
	 * @param {string} key The key for which to get the value.
	 * @param {R=} opt_val The value to return if no item is found for the given
	 *     key (default is undefined).
	 * @return {V|R|undefined} The value for the given key.
	 * @template K,V,R
	 */
	goog.object.get = function(obj, key, opt_val) {
	  if (obj !== null && key in obj) {
	    return obj[key];
	  }
	  return opt_val;
	};


	/**
	 * Adds a key-value pair to the object/map/hash.
	 *
	 * @param {Object<K,V>} obj The object to which to add the key-value pair.
	 * @param {string} key The key to add.
	 * @param {V} value The value to add.
	 * @template K,V
	 */
	goog.object.set = function(obj, key, value) {
	  obj[key] = value;
	};


	/**
	 * Adds a key-value pair to the object/map/hash if it doesn't exist yet.
	 *
	 * @param {Object<K,V>} obj The object to which to add the key-value pair.
	 * @param {string} key The key to add.
	 * @param {V} value The value to add if the key wasn't present.
	 * @return {V} The value of the entry at the end of the function.
	 * @template K,V
	 */
	goog.object.setIfUndefined = function(obj, key, value) {
	  return key in /** @type {!Object} */ (obj) ? obj[key] : (obj[key] = value);
	};


	/**
	 * Sets a key and value to an object if the key is not set. The value will be
	 * the return value of the given function. If the key already exists, the
	 * object will not be changed and the function will not be called (the function
	 * will be lazily evaluated -- only called if necessary).
	 *
	 * This function is particularly useful for use with a map used a as a cache.
	 *
	 * @param {!Object<K,V>} obj The object to which to add the key-value pair.
	 * @param {string} key The key to add.
	 * @param {function():V} f The value to add if the key wasn't present.
	 * @return {V} The value of the entry at the end of the function.
	 * @template K,V
	 */
	goog.object.setWithReturnValueIfNotSet = function(obj, key, f) {
	  if (key in obj) {
	    return obj[key];
	  }

	  var val = f();
	  obj[key] = val;
	  return val;
	};


	/**
	 * Compares two objects for equality using === on the values.
	 *
	 * @param {!Object<K,V>} a
	 * @param {!Object<K,V>} b
	 * @return {boolean}
	 * @template K,V
	 */
	goog.object.equals = function(a, b) {
	  for (var k in a) {
	    if (!(k in b) || a[k] !== b[k]) {
	      return false;
	    }
	  }
	  for (var k in b) {
	    if (!(k in a)) {
	      return false;
	    }
	  }
	  return true;
	};


	/**
	 * Returns a shallow clone of the object.
	 *
	 * @param {Object<K,V>} obj Object to clone.
	 * @return {!Object<K,V>} Clone of the input object.
	 * @template K,V
	 */
	goog.object.clone = function(obj) {
	  // We cannot use the prototype trick because a lot of methods depend on where
	  // the actual key is set.

	  var res = {};
	  for (var key in obj) {
	    res[key] = obj[key];
	  }
	  return res;
	  // We could also use goog.mixin but I wanted this to be independent from that.
	};


	/**
	 * Clones a value. The input may be an Object, Array, or basic type. Objects and
	 * arrays will be cloned recursively.
	 *
	 * WARNINGS:
	 * <code>goog.object.unsafeClone</code> does not detect reference loops. Objects
	 * that refer to themselves will cause infinite recursion.
	 *
	 * <code>goog.object.unsafeClone</code> is unaware of unique identifiers, and
	 * copies UIDs created by <code>getUid</code> into cloned results.
	 *
	 * @param {*} obj The value to clone.
	 * @return {*} A clone of the input value.
	 */
	goog.object.unsafeClone = function(obj) {
	  var type = goog.typeOf(obj);
	  if (type == 'object' || type == 'array') {
	    if (goog.isFunction(obj.clone)) {
	      return obj.clone();
	    }
	    var clone = type == 'array' ? [] : {};
	    for (var key in obj) {
	      clone[key] = goog.object.unsafeClone(obj[key]);
	    }
	    return clone;
	  }

	  return obj;
	};


	/**
	 * Returns a new object in which all the keys and values are interchanged
	 * (keys become values and values become keys). If multiple keys map to the
	 * same value, the chosen transposed value is implementation-dependent.
	 *
	 * @param {Object} obj The object to transpose.
	 * @return {!Object} The transposed object.
	 */
	goog.object.transpose = function(obj) {
	  var transposed = {};
	  for (var key in obj) {
	    transposed[obj[key]] = key;
	  }
	  return transposed;
	};


	/**
	 * The names of the fields that are defined on Object.prototype.
	 * @type {Array<string>}
	 * @private
	 */
	goog.object.PROTOTYPE_FIELDS_ = [
	  'constructor', 'hasOwnProperty', 'isPrototypeOf', 'propertyIsEnumerable',
	  'toLocaleString', 'toString', 'valueOf'
	];


	/**
	 * Extends an object with another object.
	 * This operates 'in-place'; it does not create a new Object.
	 *
	 * Example:
	 * var o = {};
	 * goog.object.extend(o, {a: 0, b: 1});
	 * o; // {a: 0, b: 1}
	 * goog.object.extend(o, {b: 2, c: 3});
	 * o; // {a: 0, b: 2, c: 3}
	 *
	 * @param {Object} target The object to modify. Existing properties will be
	 *     overwritten if they are also present in one of the objects in
	 *     {@code var_args}.
	 * @param {...Object} var_args The objects from which values will be copied.
	 */
	goog.object.extend = function(target, var_args) {
	  var key, source;
	  for (var i = 1; i < arguments.length; i++) {
	    source = arguments[i];
	    for (key in source) {
	      target[key] = source[key];
	    }

	    // For IE the for-in-loop does not contain any properties that are not
	    // enumerable on the prototype object (for example isPrototypeOf from
	    // Object.prototype) and it will also not include 'replace' on objects that
	    // extend String and change 'replace' (not that it is common for anyone to
	    // extend anything except Object).

	    for (var j = 0; j < goog.object.PROTOTYPE_FIELDS_.length; j++) {
	      key = goog.object.PROTOTYPE_FIELDS_[j];
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }
	};


	/**
	 * Creates a new object built from the key-value pairs provided as arguments.
	 * @param {...*} var_args If only one argument is provided and it is an array
	 *     then this is used as the arguments,  otherwise even arguments are used as
	 *     the property names and odd arguments are used as the property values.
	 * @return {!Object} The new object.
	 * @throws {Error} If there are uneven number of arguments or there is only one
	 *     non array argument.
	 */
	goog.object.create = function(var_args) {
	  var argLength = arguments.length;
	  if (argLength == 1 && goog.isArray(arguments[0])) {
	    return goog.object.create.apply(null, arguments[0]);
	  }

	  if (argLength % 2) {
	    throw Error('Uneven number of arguments');
	  }

	  var rv = {};
	  for (var i = 0; i < argLength; i += 2) {
	    rv[arguments[i]] = arguments[i + 1];
	  }
	  return rv;
	};


	/**
	 * Creates a new object where the property names come from the arguments but
	 * the value is always set to true
	 * @param {...*} var_args If only one argument is provided and it is an array
	 *     then this is used as the arguments,  otherwise the arguments are used
	 *     as the property names.
	 * @return {!Object} The new object.
	 */
	goog.object.createSet = function(var_args) {
	  var argLength = arguments.length;
	  if (argLength == 1 && goog.isArray(arguments[0])) {
	    return goog.object.createSet.apply(null, arguments[0]);
	  }

	  var rv = {};
	  for (var i = 0; i < argLength; i++) {
	    rv[arguments[i]] = true;
	  }
	  return rv;
	};


	/**
	 * Creates an immutable view of the underlying object, if the browser
	 * supports immutable objects.
	 *
	 * In default mode, writes to this view will fail silently. In strict mode,
	 * they will throw an error.
	 *
	 * @param {!Object<K,V>} obj An object.
	 * @return {!Object<K,V>} An immutable view of that object, or the
	 *     original object if this browser does not support immutables.
	 * @template K,V
	 */
	goog.object.createImmutableView = function(obj) {
	  var result = obj;
	  if (Object.isFrozen && !Object.isFrozen(obj)) {
	    result = Object.create(obj);
	    Object.freeze(result);
	  }
	  return result;
	};


	/**
	 * @param {!Object} obj An object.
	 * @return {boolean} Whether this is an immutable view of the object.
	 */
	goog.object.isImmutableView = function(obj) {
	  return !!Object.isFrozen && Object.isFrozen(obj);
	};

	module.exports = goog.object;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2009 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Defines an Integer class for representing (potentially)
	 * infinite length two's-complement integer values.
	 *
	 * For the specific case of 64-bit integers, use goog.math.Long, which is more
	 * efficient.
	 *
	 */

	goog.provide('goog.math.Integer');



	/**
	 * Constructs a two's-complement integer an array containing bits of the
	 * integer in 32-bit (signed) pieces, given in little-endian order (i.e.,
	 * lowest-order bits in the first piece), and the sign of -1 or 0.
	 *
	 * See the from* functions below for other convenient ways of constructing
	 * Integers.
	 *
	 * The internal representation of an integer is an array of 32-bit signed
	 * pieces, along with a sign (0 or -1) that indicates the contents of all the
	 * other 32-bit pieces out to infinity.  We use 32-bit pieces because these are
	 * the size of integers on which Javascript performs bit-operations.  For
	 * operations like addition and multiplication, we split each number into 16-bit
	 * pieces, which can easily be multiplied within Javascript's floating-point
	 * representation without overflow or change in sign.
	 *
	 * @struct
	 * @constructor
	 * @param {Array<number>} bits Array containing the bits of the number.
	 * @param {number} sign The sign of the number: -1 for negative and 0 positive.
	 * @final
	 */
	goog.math.Integer = function(bits, sign) {
	  /**
	   * @type {!Array<number>}
	   * @private
	   */
	  this.bits_ = [];

	  /**
	   * @type {number}
	   * @private
	   */
	  this.sign_ = sign;

	  // Copy the 32-bit signed integer values passed in.  We prune out those at the
	  // top that equal the sign since they are redundant.
	  var top = true;
	  for (var i = bits.length - 1; i >= 0; i--) {
	    var val = bits[i] | 0;
	    if (!top || val != sign) {
	      this.bits_[i] = val;
	      top = false;
	    }
	  }
	};


	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Integer representations of small integer values.
	 * @type {!Object}
	 * @private
	 */
	goog.math.Integer.IntCache_ = {};


	/**
	 * Returns an Integer representing the given (32-bit) integer value.
	 * @param {number} value A 32-bit integer value.
	 * @return {!goog.math.Integer} The corresponding Integer value.
	 */
	goog.math.Integer.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    var cachedObj = goog.math.Integer.IntCache_[value];
	    if (cachedObj) {
	      return cachedObj;
	    }
	  }

	  var obj = new goog.math.Integer([value | 0], value < 0 ? -1 : 0);
	  if (-128 <= value && value < 128) {
	    goog.math.Integer.IntCache_[value] = obj;
	  }
	  return obj;
	};


	/**
	 * Returns an Integer representing the given value, provided that it is a finite
	 * number.  Otherwise, zero is returned.
	 * @param {number} value The value in question.
	 * @return {!goog.math.Integer} The corresponding Integer value.
	 */
	goog.math.Integer.fromNumber = function(value) {
	  if (isNaN(value) || !isFinite(value)) {
	    return goog.math.Integer.ZERO;
	  } else if (value < 0) {
	    return goog.math.Integer.fromNumber(-value).negate();
	  } else {
	    var bits = [];
	    var pow = 1;
	    for (var i = 0; value >= pow; i++) {
	      bits[i] = (value / pow) | 0;
	      pow *= goog.math.Integer.TWO_PWR_32_DBL_;
	    }
	    return new goog.math.Integer(bits, 0);
	  }
	};


	/**
	 * Returns a Integer representing the value that comes by concatenating the
	 * given entries, each is assumed to be 32 signed bits, given in little-endian
	 * order (lowest order bits in the lowest index), and sign-extending the highest
	 * order 32-bit value.
	 * @param {Array<number>} bits The bits of the number, in 32-bit signed pieces,
	 *     in little-endian order.
	 * @return {!goog.math.Integer} The corresponding Integer value.
	 */
	goog.math.Integer.fromBits = function(bits) {
	  var high = bits[bits.length - 1];
	  return new goog.math.Integer(bits, high & (1 << 31) ? -1 : 0);
	};


	/**
	 * Returns an Integer representation of the given string, written using the
	 * given radix.
	 * @param {string} str The textual representation of the Integer.
	 * @param {number=} opt_radix The radix in which the text is written.
	 * @return {!goog.math.Integer} The corresponding Integer value.
	 */
	goog.math.Integer.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return goog.math.Integer.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character');
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 8));

	  var result = goog.math.Integer.ZERO;
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = goog.math.Integer.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(goog.math.Integer.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(goog.math.Integer.fromNumber(value));
	    }
	  }
	  return result;
	};


	/**
	 * A number used repeatedly in calculations.  This must appear before the first
	 * call to the from* functions below.
	 * @type {number}
	 * @private
	 */
	goog.math.Integer.TWO_PWR_32_DBL_ = (1 << 16) * (1 << 16);


	/** @type {!goog.math.Integer} */
	goog.math.Integer.ZERO = goog.math.Integer.fromInt(0);


	/** @type {!goog.math.Integer} */
	goog.math.Integer.ONE = goog.math.Integer.fromInt(1);


	/**
	 * @type {!goog.math.Integer}
	 * @private
	 */
	goog.math.Integer.TWO_PWR_24_ = goog.math.Integer.fromInt(1 << 24);


	/**
	 * Returns the value, assuming it is a 32-bit integer.
	 * @return {number} The corresponding int value.
	 */
	goog.math.Integer.prototype.toInt = function() {
	  return this.bits_.length > 0 ? this.bits_[0] : this.sign_;
	};


	/** @return {number} The closest floating-point representation to this value. */
	goog.math.Integer.prototype.toNumber = function() {
	  if (this.isNegative()) {
	    return -this.negate().toNumber();
	  } else {
	    var val = 0;
	    var pow = 1;
	    for (var i = 0; i < this.bits_.length; i++) {
	      val += this.getBitsUnsigned(i) * pow;
	      pow *= goog.math.Integer.TWO_PWR_32_DBL_;
	    }
	    return val;
	  }
	};


	/**
	 * @param {number=} opt_radix The radix in which the text should be written.
	 * @return {string} The textual representation of this value.
	 * @override
	 */
	goog.math.Integer.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  } else if (this.isNegative()) {
	    return '-' + this.negate().toString(radix);
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = goog.math.Integer.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.divide(radixToPower);
	    // The right shifting fixes negative values in the case when
	    // intval >= 2^31; for more details see
	    // https://github.com/google/closure-library/pull/498
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};


	/**
	 * Returns the index-th 32-bit (signed) piece of the Integer according to
	 * little-endian order (i.e., index 0 contains the smallest bits).
	 * @param {number} index The index in question.
	 * @return {number} The requested 32-bits as a signed number.
	 */
	goog.math.Integer.prototype.getBits = function(index) {
	  if (index < 0) {
	    return 0;  // Allowing this simplifies bit shifting operations below...
	  } else if (index < this.bits_.length) {
	    return this.bits_[index];
	  } else {
	    return this.sign_;
	  }
	};


	/**
	 * Returns the index-th 32-bit piece as an unsigned number.
	 * @param {number} index The index in question.
	 * @return {number} The requested 32-bits as an unsigned number.
	 */
	goog.math.Integer.prototype.getBitsUnsigned = function(index) {
	  var val = this.getBits(index);
	  return val >= 0 ? val : goog.math.Integer.TWO_PWR_32_DBL_ + val;
	};


	/** @return {number} The sign bit of this number, -1 or 0. */
	goog.math.Integer.prototype.getSign = function() {
	  return this.sign_;
	};


	/** @return {boolean} Whether this value is zero. */
	goog.math.Integer.prototype.isZero = function() {
	  if (this.sign_ != 0) {
	    return false;
	  }
	  for (var i = 0; i < this.bits_.length; i++) {
	    if (this.bits_[i] != 0) {
	      return false;
	    }
	  }
	  return true;
	};


	/** @return {boolean} Whether this value is negative. */
	goog.math.Integer.prototype.isNegative = function() {
	  return this.sign_ == -1;
	};


	/** @return {boolean} Whether this value is odd. */
	goog.math.Integer.prototype.isOdd = function() {
	  return (this.bits_.length == 0) && (this.sign_ == -1) ||
	      (this.bits_.length > 0) && ((this.bits_[0] & 1) != 0);
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer equals the other.
	 */
	goog.math.Integer.prototype.equals = function(other) {
	  if (this.sign_ != other.sign_) {
	    return false;
	  }
	  var len = Math.max(this.bits_.length, other.bits_.length);
	  for (var i = 0; i < len; i++) {
	    if (this.getBits(i) != other.getBits(i)) {
	      return false;
	    }
	  }
	  return true;
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer does not equal the other.
	 */
	goog.math.Integer.prototype.notEquals = function(other) {
	  return !this.equals(other);
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer is greater than the other.
	 */
	goog.math.Integer.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer is greater than or equal to the other.
	 */
	goog.math.Integer.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer is less than the other.
	 */
	goog.math.Integer.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};


	/**
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {boolean} Whether this Integer is less than or equal to the other.
	 */
	goog.math.Integer.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};


	/**
	 * Compares this Integer with the given one.
	 * @param {goog.math.Integer} other Integer to compare against.
	 * @return {number} 0 if they are the same, 1 if the this is greater, and -1
	 *     if the given one is greater.
	 */
	goog.math.Integer.prototype.compare = function(other) {
	  var diff = this.subtract(other);
	  if (diff.isNegative()) {
	    return -1;
	  } else if (diff.isZero()) {
	    return 0;
	  } else {
	    return +1;
	  }
	};


	/**
	 * Returns an integer with only the first numBits bits of this value, sign
	 * extended from the final bit.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Integer} The shorted integer value.
	 */
	goog.math.Integer.prototype.shorten = function(numBits) {
	  var arr_index = (numBits - 1) >> 5;
	  var bit_index = (numBits - 1) % 32;
	  var bits = [];
	  for (var i = 0; i < arr_index; i++) {
	    bits[i] = this.getBits(i);
	  }
	  var sigBits = bit_index == 31 ? 0xFFFFFFFF : (1 << (bit_index + 1)) - 1;
	  var val = this.getBits(arr_index) & sigBits;
	  if (val & (1 << bit_index)) {
	    val |= 0xFFFFFFFF - sigBits;
	    bits[arr_index] = val;
	    return new goog.math.Integer(bits, -1);
	  } else {
	    bits[arr_index] = val;
	    return new goog.math.Integer(bits, 0);
	  }
	};


	/** @return {!goog.math.Integer} The negation of this value. */
	goog.math.Integer.prototype.negate = function() {
	  return this.not().add(goog.math.Integer.ONE);
	};


	/**
	 * Returns the sum of this and the given Integer.
	 * @param {goog.math.Integer} other The Integer to add to this.
	 * @return {!goog.math.Integer} The Integer result.
	 */
	goog.math.Integer.prototype.add = function(other) {
	  var len = Math.max(this.bits_.length, other.bits_.length);
	  var arr = [];
	  var carry = 0;

	  for (var i = 0; i <= len; i++) {
	    var a1 = this.getBits(i) >>> 16;
	    var a0 = this.getBits(i) & 0xFFFF;

	    var b1 = other.getBits(i) >>> 16;
	    var b0 = other.getBits(i) & 0xFFFF;

	    var c0 = carry + a0 + b0;
	    var c1 = (c0 >>> 16) + a1 + b1;
	    carry = c1 >>> 16;
	    c0 &= 0xFFFF;
	    c1 &= 0xFFFF;
	    arr[i] = (c1 << 16) | c0;
	  }
	  return goog.math.Integer.fromBits(arr);
	};


	/**
	 * Returns the difference of this and the given Integer.
	 * @param {goog.math.Integer} other The Integer to subtract from this.
	 * @return {!goog.math.Integer} The Integer result.
	 */
	goog.math.Integer.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};


	/**
	 * Returns the product of this and the given Integer.
	 * @param {goog.math.Integer} other The Integer to multiply against this.
	 * @return {!goog.math.Integer} The product of this and the other.
	 */
	goog.math.Integer.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return goog.math.Integer.ZERO;
	  } else if (other.isZero()) {
	    return goog.math.Integer.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both numbers are small, use float multiplication
	  if (this.lessThan(goog.math.Integer.TWO_PWR_24_) &&
	      other.lessThan(goog.math.Integer.TWO_PWR_24_)) {
	    return goog.math.Integer.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Fill in an array of 16-bit products.
	  var len = this.bits_.length + other.bits_.length;
	  var arr = [];
	  for (var i = 0; i < 2 * len; i++) {
	    arr[i] = 0;
	  }
	  for (var i = 0; i < this.bits_.length; i++) {
	    for (var j = 0; j < other.bits_.length; j++) {
	      var a1 = this.getBits(i) >>> 16;
	      var a0 = this.getBits(i) & 0xFFFF;

	      var b1 = other.getBits(j) >>> 16;
	      var b0 = other.getBits(j) & 0xFFFF;

	      arr[2 * i + 2 * j] += a0 * b0;
	      goog.math.Integer.carry16_(arr, 2 * i + 2 * j);
	      arr[2 * i + 2 * j + 1] += a1 * b0;
	      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
	      arr[2 * i + 2 * j + 1] += a0 * b1;
	      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 1);
	      arr[2 * i + 2 * j + 2] += a1 * b1;
	      goog.math.Integer.carry16_(arr, 2 * i + 2 * j + 2);
	    }
	  }

	  // Combine the 16-bit values into 32-bit values.
	  for (var i = 0; i < len; i++) {
	    arr[i] = (arr[2 * i + 1] << 16) | arr[2 * i];
	  }
	  for (var i = len; i < 2 * len; i++) {
	    arr[i] = 0;
	  }
	  return new goog.math.Integer(arr, 0);
	};


	/**
	 * Carries any overflow from the given index into later entries.
	 * @param {Array<number>} bits Array of 16-bit values in little-endian order.
	 * @param {number} index The index in question.
	 * @private
	 */
	goog.math.Integer.carry16_ = function(bits, index) {
	  while ((bits[index] & 0xFFFF) != bits[index]) {
	    bits[index + 1] += bits[index] >>> 16;
	    bits[index] &= 0xFFFF;
	  }
	};


	/**
	 * Returns "this" Integer divided by the given one. Both "this" and the given
	 * Integer MUST be positive.
	 *
	 * This method is only needed for very large numbers (>10^308),
	 * for which the original division algorithm gets into an infinite
	 * loop (see https://github.com/google/closure-library/issues/500).
	 *
	 * The algorithm has some possible performance enhancements (or
	 * could be rewritten entirely), it's just an initial solution for
	 * the issue linked above.
	 *
	 * @param {!goog.math.Integer} other The Integer to divide "this" by.
	 * @return {!goog.math.Integer} "this" value divided by the given one.
	 * @private
	 */
	goog.math.Integer.prototype.slowDivide_ = function(other) {
	  if (this.isNegative() || other.isNegative()) {
	    throw Error('slowDivide_ only works with positive integers.');
	  }

	  var twoPower = goog.math.Integer.ONE;
	  var multiple = other;

	  // First we have to figure out what the highest bit of the result
	  // is, so we increase "twoPower" and "multiple" until "multiple"
	  // exceeds "this".
	  while (multiple.lessThanOrEqual(this)) {
	    twoPower = twoPower.shiftLeft(1);
	    multiple = multiple.shiftLeft(1);
	  }

	  // Rewind by one power of two, giving us the highest bit of the
	  // result.
	  var res = twoPower.shiftRight(1);
	  var total = multiple.shiftRight(1);

	  // Now we starting decreasing "multiple" and "twoPower" to find the
	  // rest of the bits of the result.
	  var total2;
	  multiple = multiple.shiftRight(2);
	  twoPower = twoPower.shiftRight(2);
	  while (!multiple.isZero()) {
	    // whenever we can add "multiple" to the total and not exceed
	    // "this", that means we've found a 1 bit. Else we've found a 0
	    // and don't need to add to the result.
	    total2 = total.add(multiple);
	    if (total2.lessThanOrEqual(this)) {
	      res = res.add(twoPower);
	      total = total2;
	    }
	    multiple = multiple.shiftRight(1);
	    twoPower = twoPower.shiftRight(1);
	  }
	  return res;
	};


	/**
	 * Returns this Integer divided by the given one.
	 * @param {!goog.math.Integer} other The Integer to divide this by.
	 * @return {!goog.math.Integer} This value divided by the given one.
	 */
	goog.math.Integer.prototype.divide = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return goog.math.Integer.ZERO;
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().divide(other.negate());
	    } else {
	      return this.negate().divide(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.divide(other.negate()).negate();
	  }

	  // Have to degrade to slowDivide for Very Large Numbers, because
	  // they're out of range for the floating-point approximation
	  // technique used below.
	  if (this.bits_.length > 30) {
	    return this.slowDivide_(other);
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = goog.math.Integer.ZERO;
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = goog.math.Integer.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = goog.math.Integer.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = goog.math.Integer.ONE;
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};


	/**
	 * Returns this Integer modulo the given one.
	 * @param {!goog.math.Integer} other The Integer by which to mod.
	 * @return {!goog.math.Integer} This value modulo the given one.
	 */
	goog.math.Integer.prototype.modulo = function(other) {
	  return this.subtract(this.divide(other).multiply(other));
	};


	/** @return {!goog.math.Integer} The bitwise-NOT of this value. */
	goog.math.Integer.prototype.not = function() {
	  var len = this.bits_.length;
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    arr[i] = ~this.bits_[i];
	  }
	  return new goog.math.Integer(arr, ~this.sign_);
	};


	/**
	 * Returns the bitwise-AND of this Integer and the given one.
	 * @param {goog.math.Integer} other The Integer to AND with this.
	 * @return {!goog.math.Integer} The bitwise-AND of this and the other.
	 */
	goog.math.Integer.prototype.and = function(other) {
	  var len = Math.max(this.bits_.length, other.bits_.length);
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    arr[i] = this.getBits(i) & other.getBits(i);
	  }
	  return new goog.math.Integer(arr, this.sign_ & other.sign_);
	};


	/**
	 * Returns the bitwise-OR of this Integer and the given one.
	 * @param {goog.math.Integer} other The Integer to OR with this.
	 * @return {!goog.math.Integer} The bitwise-OR of this and the other.
	 */
	goog.math.Integer.prototype.or = function(other) {
	  var len = Math.max(this.bits_.length, other.bits_.length);
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    arr[i] = this.getBits(i) | other.getBits(i);
	  }
	  return new goog.math.Integer(arr, this.sign_ | other.sign_);
	};


	/**
	 * Returns the bitwise-XOR of this Integer and the given one.
	 * @param {goog.math.Integer} other The Integer to XOR with this.
	 * @return {!goog.math.Integer} The bitwise-XOR of this and the other.
	 */
	goog.math.Integer.prototype.xor = function(other) {
	  var len = Math.max(this.bits_.length, other.bits_.length);
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    arr[i] = this.getBits(i) ^ other.getBits(i);
	  }
	  return new goog.math.Integer(arr, this.sign_ ^ other.sign_);
	};


	/**
	 * Returns this value with bits shifted to the left by the given amount.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Integer} This shifted to the left by the given amount.
	 */
	goog.math.Integer.prototype.shiftLeft = function(numBits) {
	  var arr_delta = numBits >> 5;
	  var bit_delta = numBits % 32;
	  var len = this.bits_.length + arr_delta + (bit_delta > 0 ? 1 : 0);
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    if (bit_delta > 0) {
	      arr[i] = (this.getBits(i - arr_delta) << bit_delta) |
	          (this.getBits(i - arr_delta - 1) >>> (32 - bit_delta));
	    } else {
	      arr[i] = this.getBits(i - arr_delta);
	    }
	  }
	  return new goog.math.Integer(arr, this.sign_);
	};


	/**
	 * Returns this value with bits shifted to the right by the given amount.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Integer} This shifted to the right by the given amount.
	 */
	goog.math.Integer.prototype.shiftRight = function(numBits) {
	  var arr_delta = numBits >> 5;
	  var bit_delta = numBits % 32;
	  var len = this.bits_.length - arr_delta;
	  var arr = [];
	  for (var i = 0; i < len; i++) {
	    if (bit_delta > 0) {
	      arr[i] = (this.getBits(i + arr_delta) >>> bit_delta) |
	          (this.getBits(i + arr_delta + 1) << (32 - bit_delta));
	    } else {
	      arr[i] = this.getBits(i + arr_delta);
	    }
	  }
	  return new goog.math.Integer(arr, this.sign_);
	};

	module.exports = goog.math.Integer;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Utility for fast string concatenation.
	 */

	goog.provide('goog.string.StringBuffer');



	/**
	 * Utility class to facilitate string concatenation.
	 *
	 * @param {*=} opt_a1 Optional first initial item to append.
	 * @param {...*} var_args Other initial items to
	 *     append, e.g., new goog.string.StringBuffer('foo', 'bar').
	 * @constructor
	 */
	goog.string.StringBuffer = function(opt_a1, var_args) {
	  if (opt_a1 != null) {
	    this.append.apply(this, arguments);
	  }
	};


	/**
	 * Internal buffer for the string to be concatenated.
	 * @type {string}
	 * @private
	 */
	goog.string.StringBuffer.prototype.buffer_ = '';


	/**
	 * Sets the contents of the string buffer object, replacing what's currently
	 * there.
	 *
	 * @param {*} s String to set.
	 */
	goog.string.StringBuffer.prototype.set = function(s) {
	  this.buffer_ = '' + s;
	};


	/**
	 * Appends one or more items to the buffer.
	 *
	 * Calling this with null, undefined, or empty arguments is an error.
	 *
	 * @param {*} a1 Required first string.
	 * @param {*=} opt_a2 Optional second string.
	 * @param {...?} var_args Other items to append,
	 *     e.g., sb.append('foo', 'bar', 'baz').
	 * @return {!goog.string.StringBuffer} This same StringBuffer object.
	 * @suppress {duplicate}
	 */
	goog.string.StringBuffer.prototype.append = function(a1, opt_a2, var_args) {
	  // Use a1 directly to avoid arguments instantiation for single-arg case.
	  this.buffer_ += String(a1);
	  if (opt_a2 != null) {  // second argument is undefined (null == undefined)
	    for (var i = 1; i < arguments.length; i++) {
	      this.buffer_ += arguments[i];
	    }
	  }
	  return this;
	};


	/**
	 * Clears the internal buffer.
	 */
	goog.string.StringBuffer.prototype.clear = function() {
	  this.buffer_ = '';
	};


	/**
	 * @return {number} the length of the current contents of the buffer.
	 */
	goog.string.StringBuffer.prototype.getLength = function() {
	  return this.buffer_.length;
	};


	/**
	 * @return {string} The concatenated string.
	 * @override
	 */
	goog.string.StringBuffer.prototype.toString = function() {
	  return this.buffer_;
	};

	module.exports = goog.string.StringBuffer;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(12);
	var goog=CLJS_ENV.goog;

	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Utilities for manipulating arrays.
	 *
	 * @author arv@google.com (Erik Arvidsson)
	 */


	goog.provide('goog.array');

	goog.require('goog.asserts');


	/**
	 * @define {boolean} NATIVE_ARRAY_PROTOTYPES indicates whether the code should
	 * rely on Array.prototype functions, if available.
	 *
	 * The Array.prototype functions can be defined by external libraries like
	 * Prototype and setting this flag to false forces closure to use its own
	 * goog.array implementation.
	 *
	 * If your javascript can be loaded by a third party site and you are wary about
	 * relying on the prototype functions, specify
	 * "--define goog.NATIVE_ARRAY_PROTOTYPES=false" to the JSCompiler.
	 *
	 * Setting goog.TRUSTED_SITE to false will automatically set
	 * NATIVE_ARRAY_PROTOTYPES to false.
	 */
	goog.define('goog.NATIVE_ARRAY_PROTOTYPES', goog.TRUSTED_SITE);


	/**
	 * @define {boolean} If true, JSCompiler will use the native implementation of
	 * array functions where appropriate (e.g., {@code Array#filter}) and remove the
	 * unused pure JS implementation.
	 */
	goog.define('goog.array.ASSUME_NATIVE_FUNCTIONS', false);


	/**
	 * Returns the last element in an array without removing it.
	 * Same as goog.array.last.
	 * @param {IArrayLike<T>|string} array The array.
	 * @return {T} Last item in array.
	 * @template T
	 */
	goog.array.peek = function(array) {
	  return array[array.length - 1];
	};


	/**
	 * Returns the last element in an array without removing it.
	 * Same as goog.array.peek.
	 * @param {IArrayLike<T>|string} array The array.
	 * @return {T} Last item in array.
	 * @template T
	 */
	goog.array.last = goog.array.peek;

	// NOTE(arv): Since most of the array functions are generic it allows you to
	// pass an array-like object. Strings have a length and are considered array-
	// like. However, the 'in' operator does not work on strings so we cannot just
	// use the array path even if the browser supports indexing into strings. We
	// therefore end up splitting the string.


	/**
	 * Returns the index of the first element of an array with a specified value, or
	 * -1 if the element is not present in the array.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-indexof}
	 *
	 * @param {IArrayLike<T>|string} arr The array to be searched.
	 * @param {T} obj The object for which we are searching.
	 * @param {number=} opt_fromIndex The index at which to start the search. If
	 *     omitted the search starts at index 0.
	 * @return {number} The index of the first matching array element.
	 * @template T
	 */
	goog.array.indexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf) ?
	    function(arr, obj, opt_fromIndex) {
	      goog.asserts.assert(arr.length != null);

	      return Array.prototype.indexOf.call(arr, obj, opt_fromIndex);
	    } :
	    function(arr, obj, opt_fromIndex) {
	      var fromIndex = opt_fromIndex == null ?
	          0 :
	          (opt_fromIndex < 0 ? Math.max(0, arr.length + opt_fromIndex) :
	                               opt_fromIndex);

	      if (goog.isString(arr)) {
	        // Array.prototype.indexOf uses === so only strings should be found.
	        if (!goog.isString(obj) || obj.length != 1) {
	          return -1;
	        }
	        return arr.indexOf(obj, fromIndex);
	      }

	      for (var i = fromIndex; i < arr.length; i++) {
	        if (i in arr && arr[i] === obj) return i;
	      }
	      return -1;
	    };


	/**
	 * Returns the index of the last element of an array with a specified value, or
	 * -1 if the element is not present in the array.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-lastindexof}
	 *
	 * @param {!IArrayLike<T>|string} arr The array to be searched.
	 * @param {T} obj The object for which we are searching.
	 * @param {?number=} opt_fromIndex The index at which to start the search. If
	 *     omitted the search starts at the end of the array.
	 * @return {number} The index of the last matching array element.
	 * @template T
	 */
	goog.array.lastIndexOf = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf) ?
	    function(arr, obj, opt_fromIndex) {
	      goog.asserts.assert(arr.length != null);

	      // Firefox treats undefined and null as 0 in the fromIndex argument which
	      // leads it to always return -1
	      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;
	      return Array.prototype.lastIndexOf.call(arr, obj, fromIndex);
	    } :
	    function(arr, obj, opt_fromIndex) {
	      var fromIndex = opt_fromIndex == null ? arr.length - 1 : opt_fromIndex;

	      if (fromIndex < 0) {
	        fromIndex = Math.max(0, arr.length + fromIndex);
	      }

	      if (goog.isString(arr)) {
	        // Array.prototype.lastIndexOf uses === so only strings should be found.
	        if (!goog.isString(obj) || obj.length != 1) {
	          return -1;
	        }
	        return arr.lastIndexOf(obj, fromIndex);
	      }

	      for (var i = fromIndex; i >= 0; i--) {
	        if (i in arr && arr[i] === obj) return i;
	      }
	      return -1;
	    };


	/**
	 * Calls a function for each element in an array. Skips holes in the array.
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-foreach}
	 *
	 * @param {IArrayLike<T>|string} arr Array or array like object over
	 *     which to iterate.
	 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
	 *     element. This function takes 3 arguments (the element, the index and the
	 *     array). The return value is ignored.
	 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
	 * @template T,S
	 */
	goog.array.forEach = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach) ?
	    function(arr, f, opt_obj) {
	      goog.asserts.assert(arr.length != null);

	      Array.prototype.forEach.call(arr, f, opt_obj);
	    } :
	    function(arr, f, opt_obj) {
	      var l = arr.length;  // must be fixed during loop... see docs
	      var arr2 = goog.isString(arr) ? arr.split('') : arr;
	      for (var i = 0; i < l; i++) {
	        if (i in arr2) {
	          f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
	        }
	      }
	    };


	/**
	 * Calls a function for each element in an array, starting from the last
	 * element rather than the first.
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this: S, T, number, ?): ?} f The function to call for every
	 *     element. This function
	 *     takes 3 arguments (the element, the index and the array). The return
	 *     value is ignored.
	 * @param {S=} opt_obj The object to be used as the value of 'this'
	 *     within f.
	 * @template T,S
	 */
	goog.array.forEachRight = function(arr, f, opt_obj) {
	  var l = arr.length;  // must be fixed during loop... see docs
	  var arr2 = goog.isString(arr) ? arr.split('') : arr;
	  for (var i = l - 1; i >= 0; --i) {
	    if (i in arr2) {
	      f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
	    }
	  }
	};


	/**
	 * Calls a function for each element in an array, and if the function returns
	 * true adds the element to a new array.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-filter}
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?):boolean} f The function to call for
	 *     every element. This function
	 *     takes 3 arguments (the element, the index and the array) and must
	 *     return a Boolean. If the return value is true the element is added to the
	 *     result array. If it is false the element is not included.
	 * @param {S=} opt_obj The object to be used as the value of 'this'
	 *     within f.
	 * @return {!Array<T>} a new array in which only elements that passed the test
	 *     are present.
	 * @template T,S
	 */
	goog.array.filter = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter) ?
	    function(arr, f, opt_obj) {
	      goog.asserts.assert(arr.length != null);

	      return Array.prototype.filter.call(arr, f, opt_obj);
	    } :
	    function(arr, f, opt_obj) {
	      var l = arr.length;  // must be fixed during loop... see docs
	      var res = [];
	      var resLength = 0;
	      var arr2 = goog.isString(arr) ? arr.split('') : arr;
	      for (var i = 0; i < l; i++) {
	        if (i in arr2) {
	          var val = arr2[i];  // in case f mutates arr2
	          if (f.call(/** @type {?} */ (opt_obj), val, i, arr)) {
	            res[resLength++] = val;
	          }
	        }
	      }
	      return res;
	    };


	/**
	 * Calls a function for each element in an array and inserts the result into a
	 * new array.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-map}
	 *
	 * @param {IArrayLike<VALUE>|string} arr Array or array like object
	 *     over which to iterate.
	 * @param {function(this:THIS, VALUE, number, ?): RESULT} f The function to call
	 *     for every element. This function takes 3 arguments (the element,
	 *     the index and the array) and should return something. The result will be
	 *     inserted into a new array.
	 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
	 * @return {!Array<RESULT>} a new array with the results from f.
	 * @template THIS, VALUE, RESULT
	 */
	goog.array.map = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map) ?
	    function(arr, f, opt_obj) {
	      goog.asserts.assert(arr.length != null);

	      return Array.prototype.map.call(arr, f, opt_obj);
	    } :
	    function(arr, f, opt_obj) {
	      var l = arr.length;  // must be fixed during loop... see docs
	      var res = new Array(l);
	      var arr2 = goog.isString(arr) ? arr.split('') : arr;
	      for (var i = 0; i < l; i++) {
	        if (i in arr2) {
	          res[i] = f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr);
	        }
	      }
	      return res;
	    };


	/**
	 * Passes every element of an array into a function and accumulates the result.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduce}
	 *
	 * For example:
	 * var a = [1, 2, 3, 4];
	 * goog.array.reduce(a, function(r, v, i, arr) {return r + v;}, 0);
	 * returns 10
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {function(this:S, R, T, number, ?) : R} f The function to call for
	 *     every element. This function
	 *     takes 4 arguments (the function's previous result or the initial value,
	 *     the value of the current array element, the current array index, and the
	 *     array itself)
	 *     function(previousValue, currentValue, index, array).
	 * @param {?} val The initial value to pass into the function on the first call.
	 * @param {S=} opt_obj  The object to be used as the value of 'this'
	 *     within f.
	 * @return {R} Result of evaluating f repeatedly across the values of the array.
	 * @template T,S,R
	 */
	goog.array.reduce = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce) ?
	    function(arr, f, val, opt_obj) {
	      goog.asserts.assert(arr.length != null);
	      if (opt_obj) {
	        f = goog.bind(f, opt_obj);
	      }
	      return Array.prototype.reduce.call(arr, f, val);
	    } :
	    function(arr, f, val, opt_obj) {
	      var rval = val;
	      goog.array.forEach(arr, function(val, index) {
	        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);
	      });
	      return rval;
	    };


	/**
	 * Passes every element of an array into a function and accumulates the result,
	 * starting from the last element and working towards the first.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-reduceright}
	 *
	 * For example:
	 * var a = ['a', 'b', 'c'];
	 * goog.array.reduceRight(a, function(r, v, i, arr) {return r + v;}, '');
	 * returns 'cba'
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, R, T, number, ?) : R} f The function to call for
	 *     every element. This function
	 *     takes 4 arguments (the function's previous result or the initial value,
	 *     the value of the current array element, the current array index, and the
	 *     array itself)
	 *     function(previousValue, currentValue, index, array).
	 * @param {?} val The initial value to pass into the function on the first call.
	 * @param {S=} opt_obj The object to be used as the value of 'this'
	 *     within f.
	 * @return {R} Object returned as a result of evaluating f repeatedly across the
	 *     values of the array.
	 * @template T,S,R
	 */
	goog.array.reduceRight = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight) ?
	    function(arr, f, val, opt_obj) {
	      goog.asserts.assert(arr.length != null);
	      goog.asserts.assert(f != null);
	      if (opt_obj) {
	        f = goog.bind(f, opt_obj);
	      }
	      return Array.prototype.reduceRight.call(arr, f, val);
	    } :
	    function(arr, f, val, opt_obj) {
	      var rval = val;
	      goog.array.forEachRight(arr, function(val, index) {
	        rval = f.call(/** @type {?} */ (opt_obj), rval, val, index, arr);
	      });
	      return rval;
	    };


	/**
	 * Calls f for each element of an array. If any call returns true, some()
	 * returns true (without checking the remaining elements). If all calls
	 * return false, some() returns false.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-some}
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
	 *     for every element. This function takes 3 arguments (the element, the
	 *     index and the array) and should return a boolean.
	 * @param {S=} opt_obj  The object to be used as the value of 'this'
	 *     within f.
	 * @return {boolean} true if any element passes the test.
	 * @template T,S
	 */
	goog.array.some = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some) ?
	    function(arr, f, opt_obj) {
	      goog.asserts.assert(arr.length != null);

	      return Array.prototype.some.call(arr, f, opt_obj);
	    } :
	    function(arr, f, opt_obj) {
	      var l = arr.length;  // must be fixed during loop... see docs
	      var arr2 = goog.isString(arr) ? arr.split('') : arr;
	      for (var i = 0; i < l; i++) {
	        if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
	          return true;
	        }
	      }
	      return false;
	    };


	/**
	 * Call f for each element of an array. If all calls return true, every()
	 * returns true. If any call returns false, every() returns false and
	 * does not continue to check the remaining elements.
	 *
	 * See {@link http://tinyurl.com/developer-mozilla-org-array-every}
	 *
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
	 *     for every element. This function takes 3 arguments (the element, the
	 *     index and the array) and should return a boolean.
	 * @param {S=} opt_obj The object to be used as the value of 'this'
	 *     within f.
	 * @return {boolean} false if any element fails the test.
	 * @template T,S
	 */
	goog.array.every = goog.NATIVE_ARRAY_PROTOTYPES &&
	        (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every) ?
	    function(arr, f, opt_obj) {
	      goog.asserts.assert(arr.length != null);

	      return Array.prototype.every.call(arr, f, opt_obj);
	    } :
	    function(arr, f, opt_obj) {
	      var l = arr.length;  // must be fixed during loop... see docs
	      var arr2 = goog.isString(arr) ? arr.split('') : arr;
	      for (var i = 0; i < l; i++) {
	        if (i in arr2 && !f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
	          return false;
	        }
	      }
	      return true;
	    };


	/**
	 * Counts the array elements that fulfill the predicate, i.e. for which the
	 * callback function returns true. Skips holes in the array.
	 *
	 * @param {!IArrayLike<T>|string} arr Array or array like object
	 *     over which to iterate.
	 * @param {function(this: S, T, number, ?): boolean} f The function to call for
	 *     every element. Takes 3 arguments (the element, the index and the array).
	 * @param {S=} opt_obj The object to be used as the value of 'this' within f.
	 * @return {number} The number of the matching elements.
	 * @template T,S
	 */
	goog.array.count = function(arr, f, opt_obj) {
	  var count = 0;
	  goog.array.forEach(arr, function(element, index, arr) {
	    if (f.call(/** @type {?} */ (opt_obj), element, index, arr)) {
	      ++count;
	    }
	  }, opt_obj);
	  return count;
	};


	/**
	 * Search an array for the first element that satisfies a given condition and
	 * return that element.
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
	 *     for every element. This function takes 3 arguments (the element, the
	 *     index and the array) and should return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {T|null} The first array element that passes the test, or null if no
	 *     element is found.
	 * @template T,S
	 */
	goog.array.find = function(arr, f, opt_obj) {
	  var i = goog.array.findIndex(arr, f, opt_obj);
	  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
	};


	/**
	 * Search an array for the first element that satisfies a given condition and
	 * return its index.
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call for
	 *     every element. This function
	 *     takes 3 arguments (the element, the index and the array) and should
	 *     return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {number} The index of the first array element that passes the test,
	 *     or -1 if no element is found.
	 * @template T,S
	 */
	goog.array.findIndex = function(arr, f, opt_obj) {
	  var l = arr.length;  // must be fixed during loop... see docs
	  var arr2 = goog.isString(arr) ? arr.split('') : arr;
	  for (var i = 0; i < l; i++) {
	    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
	      return i;
	    }
	  }
	  return -1;
	};


	/**
	 * Search an array (in reverse order) for the last element that satisfies a
	 * given condition and return that element.
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
	 *     for every element. This function
	 *     takes 3 arguments (the element, the index and the array) and should
	 *     return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {T|null} The last array element that passes the test, or null if no
	 *     element is found.
	 * @template T,S
	 */
	goog.array.findRight = function(arr, f, opt_obj) {
	  var i = goog.array.findIndexRight(arr, f, opt_obj);
	  return i < 0 ? null : goog.isString(arr) ? arr.charAt(i) : arr[i];
	};


	/**
	 * Search an array (in reverse order) for the last element that satisfies a
	 * given condition and return its index.
	 * @param {IArrayLike<T>|string} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
	 *     for every element. This function
	 *     takes 3 arguments (the element, the index and the array) and should
	 *     return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {number} The index of the last array element that passes the test,
	 *     or -1 if no element is found.
	 * @template T,S
	 */
	goog.array.findIndexRight = function(arr, f, opt_obj) {
	  var l = arr.length;  // must be fixed during loop... see docs
	  var arr2 = goog.isString(arr) ? arr.split('') : arr;
	  for (var i = l - 1; i >= 0; i--) {
	    if (i in arr2 && f.call(/** @type {?} */ (opt_obj), arr2[i], i, arr)) {
	      return i;
	    }
	  }
	  return -1;
	};


	/**
	 * Whether the array contains the given object.
	 * @param {IArrayLike<?>|string} arr The array to test for the presence of the
	 *     element.
	 * @param {*} obj The object for which to test.
	 * @return {boolean} true if obj is present.
	 */
	goog.array.contains = function(arr, obj) {
	  return goog.array.indexOf(arr, obj) >= 0;
	};


	/**
	 * Whether the array is empty.
	 * @param {IArrayLike<?>|string} arr The array to test.
	 * @return {boolean} true if empty.
	 */
	goog.array.isEmpty = function(arr) {
	  return arr.length == 0;
	};


	/**
	 * Clears the array.
	 * @param {IArrayLike<?>} arr Array or array like object to clear.
	 */
	goog.array.clear = function(arr) {
	  // For non real arrays we don't have the magic length so we delete the
	  // indices.
	  if (!goog.isArray(arr)) {
	    for (var i = arr.length - 1; i >= 0; i--) {
	      delete arr[i];
	    }
	  }
	  arr.length = 0;
	};


	/**
	 * Pushes an item into an array, if it's not already in the array.
	 * @param {Array<T>} arr Array into which to insert the item.
	 * @param {T} obj Value to add.
	 * @template T
	 */
	goog.array.insert = function(arr, obj) {
	  if (!goog.array.contains(arr, obj)) {
	    arr.push(obj);
	  }
	};


	/**
	 * Inserts an object at the given index of the array.
	 * @param {IArrayLike<?>} arr The array to modify.
	 * @param {*} obj The object to insert.
	 * @param {number=} opt_i The index at which to insert the object. If omitted,
	 *      treated as 0. A negative index is counted from the end of the array.
	 */
	goog.array.insertAt = function(arr, obj, opt_i) {
	  goog.array.splice(arr, opt_i, 0, obj);
	};


	/**
	 * Inserts at the given index of the array, all elements of another array.
	 * @param {IArrayLike<?>} arr The array to modify.
	 * @param {IArrayLike<?>} elementsToAdd The array of elements to add.
	 * @param {number=} opt_i The index at which to insert the object. If omitted,
	 *      treated as 0. A negative index is counted from the end of the array.
	 */
	goog.array.insertArrayAt = function(arr, elementsToAdd, opt_i) {
	  goog.partial(goog.array.splice, arr, opt_i, 0).apply(null, elementsToAdd);
	};


	/**
	 * Inserts an object into an array before a specified object.
	 * @param {Array<T>} arr The array to modify.
	 * @param {T} obj The object to insert.
	 * @param {T=} opt_obj2 The object before which obj should be inserted. If obj2
	 *     is omitted or not found, obj is inserted at the end of the array.
	 * @template T
	 */
	goog.array.insertBefore = function(arr, obj, opt_obj2) {
	  var i;
	  if (arguments.length == 2 || (i = goog.array.indexOf(arr, opt_obj2)) < 0) {
	    arr.push(obj);
	  } else {
	    goog.array.insertAt(arr, obj, i);
	  }
	};


	/**
	 * Removes the first occurrence of a particular value from an array.
	 * @param {IArrayLike<T>} arr Array from which to remove
	 *     value.
	 * @param {T} obj Object to remove.
	 * @return {boolean} True if an element was removed.
	 * @template T
	 */
	goog.array.remove = function(arr, obj) {
	  var i = goog.array.indexOf(arr, obj);
	  var rv;
	  if ((rv = i >= 0)) {
	    goog.array.removeAt(arr, i);
	  }
	  return rv;
	};


	/**
	 * Removes the last occurrence of a particular value from an array.
	 * @param {!IArrayLike<T>} arr Array from which to remove value.
	 * @param {T} obj Object to remove.
	 * @return {boolean} True if an element was removed.
	 * @template T
	 */
	goog.array.removeLast = function(arr, obj) {
	  var i = goog.array.lastIndexOf(arr, obj);
	  if (i >= 0) {
	    goog.array.removeAt(arr, i);
	    return true;
	  }
	  return false;
	};


	/**
	 * Removes from an array the element at index i
	 * @param {IArrayLike<?>} arr Array or array like object from which to
	 *     remove value.
	 * @param {number} i The index to remove.
	 * @return {boolean} True if an element was removed.
	 */
	goog.array.removeAt = function(arr, i) {
	  goog.asserts.assert(arr.length != null);

	  // use generic form of splice
	  // splice returns the removed items and if successful the length of that
	  // will be 1
	  return Array.prototype.splice.call(arr, i, 1).length == 1;
	};


	/**
	 * Removes the first value that satisfies the given condition.
	 * @param {IArrayLike<T>} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
	 *     for every element. This function
	 *     takes 3 arguments (the element, the index and the array) and should
	 *     return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {boolean} True if an element was removed.
	 * @template T,S
	 */
	goog.array.removeIf = function(arr, f, opt_obj) {
	  var i = goog.array.findIndex(arr, f, opt_obj);
	  if (i >= 0) {
	    goog.array.removeAt(arr, i);
	    return true;
	  }
	  return false;
	};


	/**
	 * Removes all values that satisfy the given condition.
	 * @param {IArrayLike<T>} arr Array or array
	 *     like object over which to iterate.
	 * @param {?function(this:S, T, number, ?) : boolean} f The function to call
	 *     for every element. This function
	 *     takes 3 arguments (the element, the index and the array) and should
	 *     return a boolean.
	 * @param {S=} opt_obj An optional "this" context for the function.
	 * @return {number} The number of items removed
	 * @template T,S
	 */
	goog.array.removeAllIf = function(arr, f, opt_obj) {
	  var removedCount = 0;
	  goog.array.forEachRight(arr, function(val, index) {
	    if (f.call(/** @type {?} */ (opt_obj), val, index, arr)) {
	      if (goog.array.removeAt(arr, index)) {
	        removedCount++;
	      }
	    }
	  });
	  return removedCount;
	};


	/**
	 * Returns a new array that is the result of joining the arguments.  If arrays
	 * are passed then their items are added, however, if non-arrays are passed they
	 * will be added to the return array as is.
	 *
	 * Note that ArrayLike objects will be added as is, rather than having their
	 * items added.
	 *
	 * goog.array.concat([1, 2], [3, 4]) -> [1, 2, 3, 4]
	 * goog.array.concat(0, [1, 2]) -> [0, 1, 2]
	 * goog.array.concat([1, 2], null) -> [1, 2, null]
	 *
	 * There is bug in all current versions of IE (6, 7 and 8) where arrays created
	 * in an iframe become corrupted soon (not immediately) after the iframe is
	 * destroyed. This is common if loading data via goog.net.IframeIo, for example.
	 * This corruption only affects the concat method which will start throwing
	 * Catastrophic Errors (#-2147418113).
	 *
	 * See http://endoflow.com/scratch/corrupted-arrays.html for a test case.
	 *
	 * Internally goog.array should use this, so that all methods will continue to
	 * work on these broken array objects.
	 *
	 * @param {...*} var_args Items to concatenate.  Arrays will have each item
	 *     added, while primitives and objects will be added as is.
	 * @return {!Array<?>} The new resultant array.
	 */
	goog.array.concat = function(var_args) {
	  return Array.prototype.concat.apply(Array.prototype, arguments);
	};


	/**
	 * Returns a new array that contains the contents of all the arrays passed.
	 * @param {...!Array<T>} var_args
	 * @return {!Array<T>}
	 * @template T
	 */
	goog.array.join = function(var_args) {
	  return Array.prototype.concat.apply(Array.prototype, arguments);
	};


	/**
	 * Converts an object to an array.
	 * @param {IArrayLike<T>|string} object  The object to convert to an
	 *     array.
	 * @return {!Array<T>} The object converted into an array. If object has a
	 *     length property, every property indexed with a non-negative number
	 *     less than length will be included in the result. If object does not
	 *     have a length property, an empty array will be returned.
	 * @template T
	 */
	goog.array.toArray = function(object) {
	  var length = object.length;

	  // If length is not a number the following it false. This case is kept for
	  // backwards compatibility since there are callers that pass objects that are
	  // not array like.
	  if (length > 0) {
	    var rv = new Array(length);
	    for (var i = 0; i < length; i++) {
	      rv[i] = object[i];
	    }
	    return rv;
	  }
	  return [];
	};


	/**
	 * Does a shallow copy of an array.
	 * @param {IArrayLike<T>|string} arr  Array or array-like object to
	 *     clone.
	 * @return {!Array<T>} Clone of the input array.
	 * @template T
	 */
	goog.array.clone = goog.array.toArray;


	/**
	 * Extends an array with another array, element, or "array like" object.
	 * This function operates 'in-place', it does not create a new Array.
	 *
	 * Example:
	 * var a = [];
	 * goog.array.extend(a, [0, 1]);
	 * a; // [0, 1]
	 * goog.array.extend(a, 2);
	 * a; // [0, 1, 2]
	 *
	 * @param {Array<VALUE>} arr1  The array to modify.
	 * @param {...(Array<VALUE>|VALUE)} var_args The elements or arrays of elements
	 *     to add to arr1.
	 * @template VALUE
	 */
	goog.array.extend = function(arr1, var_args) {
	  for (var i = 1; i < arguments.length; i++) {
	    var arr2 = arguments[i];
	    if (goog.isArrayLike(arr2)) {
	      var len1 = arr1.length || 0;
	      var len2 = arr2.length || 0;
	      arr1.length = len1 + len2;
	      for (var j = 0; j < len2; j++) {
	        arr1[len1 + j] = arr2[j];
	      }
	    } else {
	      arr1.push(arr2);
	    }
	  }
	};


	/**
	 * Adds or removes elements from an array. This is a generic version of Array
	 * splice. This means that it might work on other objects similar to arrays,
	 * such as the arguments object.
	 *
	 * @param {IArrayLike<T>} arr The array to modify.
	 * @param {number|undefined} index The index at which to start changing the
	 *     array. If not defined, treated as 0.
	 * @param {number} howMany How many elements to remove (0 means no removal. A
	 *     value below 0 is treated as zero and so is any other non number. Numbers
	 *     are floored).
	 * @param {...T} var_args Optional, additional elements to insert into the
	 *     array.
	 * @return {!Array<T>} the removed elements.
	 * @template T
	 */
	goog.array.splice = function(arr, index, howMany, var_args) {
	  goog.asserts.assert(arr.length != null);

	  return Array.prototype.splice.apply(arr, goog.array.slice(arguments, 1));
	};


	/**
	 * Returns a new array from a segment of an array. This is a generic version of
	 * Array slice. This means that it might work on other objects similar to
	 * arrays, such as the arguments object.
	 *
	 * @param {IArrayLike<T>|string} arr The array from
	 * which to copy a segment.
	 * @param {number} start The index of the first element to copy.
	 * @param {number=} opt_end The index after the last element to copy.
	 * @return {!Array<T>} A new array containing the specified segment of the
	 *     original array.
	 * @template T
	 */
	goog.array.slice = function(arr, start, opt_end) {
	  goog.asserts.assert(arr.length != null);

	  // passing 1 arg to slice is not the same as passing 2 where the second is
	  // null or undefined (in that case the second argument is treated as 0).
	  // we could use slice on the arguments object and then use apply instead of
	  // testing the length
	  if (arguments.length <= 2) {
	    return Array.prototype.slice.call(arr, start);
	  } else {
	    return Array.prototype.slice.call(arr, start, opt_end);
	  }
	};


	/**
	 * Removes all duplicates from an array (retaining only the first
	 * occurrence of each array element).  This function modifies the
	 * array in place and doesn't change the order of the non-duplicate items.
	 *
	 * For objects, duplicates are identified as having the same unique ID as
	 * defined by {@link goog.getUid}.
	 *
	 * Alternatively you can specify a custom hash function that returns a unique
	 * value for each item in the array it should consider unique.
	 *
	 * Runtime: N,
	 * Worstcase space: 2N (no dupes)
	 *
	 * @param {IArrayLike<T>} arr The array from which to remove
	 *     duplicates.
	 * @param {Array=} opt_rv An optional array in which to return the results,
	 *     instead of performing the removal inplace.  If specified, the original
	 *     array will remain unchanged.
	 * @param {function(T):string=} opt_hashFn An optional function to use to
	 *     apply to every item in the array. This function should return a unique
	 *     value for each item in the array it should consider unique.
	 * @template T
	 */
	goog.array.removeDuplicates = function(arr, opt_rv, opt_hashFn) {
	  var returnArray = opt_rv || arr;
	  var defaultHashFn = function(item) {
	    // Prefix each type with a single character representing the type to
	    // prevent conflicting keys (e.g. true and 'true').
	    return goog.isObject(item) ? 'o' + goog.getUid(item) :
	                                 (typeof item).charAt(0) + item;
	  };
	  var hashFn = opt_hashFn || defaultHashFn;

	  var seen = {}, cursorInsert = 0, cursorRead = 0;
	  while (cursorRead < arr.length) {
	    var current = arr[cursorRead++];
	    var key = hashFn(current);
	    if (!Object.prototype.hasOwnProperty.call(seen, key)) {
	      seen[key] = true;
	      returnArray[cursorInsert++] = current;
	    }
	  }
	  returnArray.length = cursorInsert;
	};


	/**
	 * Searches the specified array for the specified target using the binary
	 * search algorithm.  If no opt_compareFn is specified, elements are compared
	 * using <code>goog.array.defaultCompare</code>, which compares the elements
	 * using the built in < and > operators.  This will produce the expected
	 * behavior for homogeneous arrays of String(s) and Number(s). The array
	 * specified <b>must</b> be sorted in ascending order (as defined by the
	 * comparison function).  If the array is not sorted, results are undefined.
	 * If the array contains multiple instances of the specified target value, any
	 * of these instances may be found.
	 *
	 * Runtime: O(log n)
	 *
	 * @param {IArrayLike<VALUE>} arr The array to be searched.
	 * @param {TARGET} target The sought value.
	 * @param {function(TARGET, VALUE): number=} opt_compareFn Optional comparison
	 *     function by which the array is ordered. Should take 2 arguments to
	 *     compare, and return a negative number, zero, or a positive number
	 *     depending on whether the first argument is less than, equal to, or
	 *     greater than the second.
	 * @return {number} Lowest index of the target value if found, otherwise
	 *     (-(insertion point) - 1). The insertion point is where the value should
	 *     be inserted into arr to preserve the sorted property.  Return value >= 0
	 *     iff target is found.
	 * @template TARGET, VALUE
	 */
	goog.array.binarySearch = function(arr, target, opt_compareFn) {
	  return goog.array.binarySearch_(
	      arr, opt_compareFn || goog.array.defaultCompare, false /* isEvaluator */,
	      target);
	};


	/**
	 * Selects an index in the specified array using the binary search algorithm.
	 * The evaluator receives an element and determines whether the desired index
	 * is before, at, or after it.  The evaluator must be consistent (formally,
	 * goog.array.map(goog.array.map(arr, evaluator, opt_obj), goog.math.sign)
	 * must be monotonically non-increasing).
	 *
	 * Runtime: O(log n)
	 *
	 * @param {IArrayLike<VALUE>} arr The array to be searched.
	 * @param {function(this:THIS, VALUE, number, ?): number} evaluator
	 *     Evaluator function that receives 3 arguments (the element, the index and
	 *     the array). Should return a negative number, zero, or a positive number
	 *     depending on whether the desired index is before, at, or after the
	 *     element passed to it.
	 * @param {THIS=} opt_obj The object to be used as the value of 'this'
	 *     within evaluator.
	 * @return {number} Index of the leftmost element matched by the evaluator, if
	 *     such exists; otherwise (-(insertion point) - 1). The insertion point is
	 *     the index of the first element for which the evaluator returns negative,
	 *     or arr.length if no such element exists. The return value is non-negative
	 *     iff a match is found.
	 * @template THIS, VALUE
	 */
	goog.array.binarySelect = function(arr, evaluator, opt_obj) {
	  return goog.array.binarySearch_(
	      arr, evaluator, true /* isEvaluator */, undefined /* opt_target */,
	      opt_obj);
	};


	/**
	 * Implementation of a binary search algorithm which knows how to use both
	 * comparison functions and evaluators. If an evaluator is provided, will call
	 * the evaluator with the given optional data object, conforming to the
	 * interface defined in binarySelect. Otherwise, if a comparison function is
	 * provided, will call the comparison function against the given data object.
	 *
	 * This implementation purposefully does not use goog.bind or goog.partial for
	 * performance reasons.
	 *
	 * Runtime: O(log n)
	 *
	 * @param {IArrayLike<?>} arr The array to be searched.
	 * @param {function(?, ?, ?): number | function(?, ?): number} compareFn
	 *     Either an evaluator or a comparison function, as defined by binarySearch
	 *     and binarySelect above.
	 * @param {boolean} isEvaluator Whether the function is an evaluator or a
	 *     comparison function.
	 * @param {?=} opt_target If the function is a comparison function, then
	 *     this is the target to binary search for.
	 * @param {Object=} opt_selfObj If the function is an evaluator, this is an
	 *     optional this object for the evaluator.
	 * @return {number} Lowest index of the target value if found, otherwise
	 *     (-(insertion point) - 1). The insertion point is where the value should
	 *     be inserted into arr to preserve the sorted property.  Return value >= 0
	 *     iff target is found.
	 * @private
	 */
	goog.array.binarySearch_ = function(
	    arr, compareFn, isEvaluator, opt_target, opt_selfObj) {
	  var left = 0;            // inclusive
	  var right = arr.length;  // exclusive
	  var found;
	  while (left < right) {
	    var middle = (left + right) >> 1;
	    var compareResult;
	    if (isEvaluator) {
	      compareResult = compareFn.call(opt_selfObj, arr[middle], middle, arr);
	    } else {
	      // NOTE(dimvar): To avoid this cast, we'd have to use function overloading
	      // for the type of binarySearch_, which the type system can't express yet.
	      compareResult = /** @type {function(?, ?): number} */ (compareFn)(
	          opt_target, arr[middle]);
	    }
	    if (compareResult > 0) {
	      left = middle + 1;
	    } else {
	      right = middle;
	      // We are looking for the lowest index so we can't return immediately.
	      found = !compareResult;
	    }
	  }
	  // left is the index if found, or the insertion point otherwise.
	  // ~left is a shorthand for -left - 1.
	  return found ? left : ~left;
	};


	/**
	 * Sorts the specified array into ascending order.  If no opt_compareFn is
	 * specified, elements are compared using
	 * <code>goog.array.defaultCompare</code>, which compares the elements using
	 * the built in < and > operators.  This will produce the expected behavior
	 * for homogeneous arrays of String(s) and Number(s), unlike the native sort,
	 * but will give unpredictable results for heterogeneous lists of strings and
	 * numbers with different numbers of digits.
	 *
	 * This sort is not guaranteed to be stable.
	 *
	 * Runtime: Same as <code>Array.prototype.sort</code>
	 *
	 * @param {Array<T>} arr The array to be sorted.
	 * @param {?function(T,T):number=} opt_compareFn Optional comparison
	 *     function by which the
	 *     array is to be ordered. Should take 2 arguments to compare, and return a
	 *     negative number, zero, or a positive number depending on whether the
	 *     first argument is less than, equal to, or greater than the second.
	 * @template T
	 */
	goog.array.sort = function(arr, opt_compareFn) {
	  // TODO(arv): Update type annotation since null is not accepted.
	  arr.sort(opt_compareFn || goog.array.defaultCompare);
	};


	/**
	 * Sorts the specified array into ascending order in a stable way.  If no
	 * opt_compareFn is specified, elements are compared using
	 * <code>goog.array.defaultCompare</code>, which compares the elements using
	 * the built in < and > operators.  This will produce the expected behavior
	 * for homogeneous arrays of String(s) and Number(s).
	 *
	 * Runtime: Same as <code>Array.prototype.sort</code>, plus an additional
	 * O(n) overhead of copying the array twice.
	 *
	 * @param {Array<T>} arr The array to be sorted.
	 * @param {?function(T, T): number=} opt_compareFn Optional comparison function
	 *     by which the array is to be ordered. Should take 2 arguments to compare,
	 *     and return a negative number, zero, or a positive number depending on
	 *     whether the first argument is less than, equal to, or greater than the
	 *     second.
	 * @template T
	 */
	goog.array.stableSort = function(arr, opt_compareFn) {
	  var compArr = new Array(arr.length);
	  for (var i = 0; i < arr.length; i++) {
	    compArr[i] = {index: i, value: arr[i]};
	  }
	  var valueCompareFn = opt_compareFn || goog.array.defaultCompare;
	  function stableCompareFn(obj1, obj2) {
	    return valueCompareFn(obj1.value, obj2.value) || obj1.index - obj2.index;
	  }
	  goog.array.sort(compArr, stableCompareFn);
	  for (var i = 0; i < arr.length; i++) {
	    arr[i] = compArr[i].value;
	  }
	};


	/**
	 * Sort the specified array into ascending order based on item keys
	 * returned by the specified key function.
	 * If no opt_compareFn is specified, the keys are compared in ascending order
	 * using <code>goog.array.defaultCompare</code>.
	 *
	 * Runtime: O(S(f(n)), where S is runtime of <code>goog.array.sort</code>
	 * and f(n) is runtime of the key function.
	 *
	 * @param {Array<T>} arr The array to be sorted.
	 * @param {function(T): K} keyFn Function taking array element and returning
	 *     a key used for sorting this element.
	 * @param {?function(K, K): number=} opt_compareFn Optional comparison function
	 *     by which the keys are to be ordered. Should take 2 arguments to compare,
	 *     and return a negative number, zero, or a positive number depending on
	 *     whether the first argument is less than, equal to, or greater than the
	 *     second.
	 * @template T,K
	 */
	goog.array.sortByKey = function(arr, keyFn, opt_compareFn) {
	  var keyCompareFn = opt_compareFn || goog.array.defaultCompare;
	  goog.array.sort(
	      arr, function(a, b) { return keyCompareFn(keyFn(a), keyFn(b)); });
	};


	/**
	 * Sorts an array of objects by the specified object key and compare
	 * function. If no compare function is provided, the key values are
	 * compared in ascending order using <code>goog.array.defaultCompare</code>.
	 * This won't work for keys that get renamed by the compiler. So use
	 * {'foo': 1, 'bar': 2} rather than {foo: 1, bar: 2}.
	 * @param {Array<Object>} arr An array of objects to sort.
	 * @param {string} key The object key to sort by.
	 * @param {Function=} opt_compareFn The function to use to compare key
	 *     values.
	 */
	goog.array.sortObjectsByKey = function(arr, key, opt_compareFn) {
	  goog.array.sortByKey(arr, function(obj) { return obj[key]; }, opt_compareFn);
	};


	/**
	 * Tells if the array is sorted.
	 * @param {!Array<T>} arr The array.
	 * @param {?function(T,T):number=} opt_compareFn Function to compare the
	 *     array elements.
	 *     Should take 2 arguments to compare, and return a negative number, zero,
	 *     or a positive number depending on whether the first argument is less
	 *     than, equal to, or greater than the second.
	 * @param {boolean=} opt_strict If true no equal elements are allowed.
	 * @return {boolean} Whether the array is sorted.
	 * @template T
	 */
	goog.array.isSorted = function(arr, opt_compareFn, opt_strict) {
	  var compare = opt_compareFn || goog.array.defaultCompare;
	  for (var i = 1; i < arr.length; i++) {
	    var compareResult = compare(arr[i - 1], arr[i]);
	    if (compareResult > 0 || compareResult == 0 && opt_strict) {
	      return false;
	    }
	  }
	  return true;
	};


	/**
	 * Compares two arrays for equality. Two arrays are considered equal if they
	 * have the same length and their corresponding elements are equal according to
	 * the comparison function.
	 *
	 * @param {IArrayLike<?>} arr1 The first array to compare.
	 * @param {IArrayLike<?>} arr2 The second array to compare.
	 * @param {Function=} opt_equalsFn Optional comparison function.
	 *     Should take 2 arguments to compare, and return true if the arguments
	 *     are equal. Defaults to {@link goog.array.defaultCompareEquality} which
	 *     compares the elements using the built-in '===' operator.
	 * @return {boolean} Whether the two arrays are equal.
	 */
	goog.array.equals = function(arr1, arr2, opt_equalsFn) {
	  if (!goog.isArrayLike(arr1) || !goog.isArrayLike(arr2) ||
	      arr1.length != arr2.length) {
	    return false;
	  }
	  var l = arr1.length;
	  var equalsFn = opt_equalsFn || goog.array.defaultCompareEquality;
	  for (var i = 0; i < l; i++) {
	    if (!equalsFn(arr1[i], arr2[i])) {
	      return false;
	    }
	  }
	  return true;
	};


	/**
	 * 3-way array compare function.
	 * @param {!IArrayLike<VALUE>} arr1 The first array to
	 *     compare.
	 * @param {!IArrayLike<VALUE>} arr2 The second array to
	 *     compare.
	 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
	 *     function by which the array is to be ordered. Should take 2 arguments to
	 *     compare, and return a negative number, zero, or a positive number
	 *     depending on whether the first argument is less than, equal to, or
	 *     greater than the second.
	 * @return {number} Negative number, zero, or a positive number depending on
	 *     whether the first argument is less than, equal to, or greater than the
	 *     second.
	 * @template VALUE
	 */
	goog.array.compare3 = function(arr1, arr2, opt_compareFn) {
	  var compare = opt_compareFn || goog.array.defaultCompare;
	  var l = Math.min(arr1.length, arr2.length);
	  for (var i = 0; i < l; i++) {
	    var result = compare(arr1[i], arr2[i]);
	    if (result != 0) {
	      return result;
	    }
	  }
	  return goog.array.defaultCompare(arr1.length, arr2.length);
	};


	/**
	 * Compares its two arguments for order, using the built in < and >
	 * operators.
	 * @param {VALUE} a The first object to be compared.
	 * @param {VALUE} b The second object to be compared.
	 * @return {number} A negative number, zero, or a positive number as the first
	 *     argument is less than, equal to, or greater than the second,
	 *     respectively.
	 * @template VALUE
	 */
	goog.array.defaultCompare = function(a, b) {
	  return a > b ? 1 : a < b ? -1 : 0;
	};


	/**
	 * Compares its two arguments for inverse order, using the built in < and >
	 * operators.
	 * @param {VALUE} a The first object to be compared.
	 * @param {VALUE} b The second object to be compared.
	 * @return {number} A negative number, zero, or a positive number as the first
	 *     argument is greater than, equal to, or less than the second,
	 *     respectively.
	 * @template VALUE
	 */
	goog.array.inverseDefaultCompare = function(a, b) {
	  return -goog.array.defaultCompare(a, b);
	};


	/**
	 * Compares its two arguments for equality, using the built in === operator.
	 * @param {*} a The first object to compare.
	 * @param {*} b The second object to compare.
	 * @return {boolean} True if the two arguments are equal, false otherwise.
	 */
	goog.array.defaultCompareEquality = function(a, b) {
	  return a === b;
	};


	/**
	 * Inserts a value into a sorted array. The array is not modified if the
	 * value is already present.
	 * @param {IArrayLike<VALUE>} array The array to modify.
	 * @param {VALUE} value The object to insert.
	 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
	 *     function by which the array is ordered. Should take 2 arguments to
	 *     compare, and return a negative number, zero, or a positive number
	 *     depending on whether the first argument is less than, equal to, or
	 *     greater than the second.
	 * @return {boolean} True if an element was inserted.
	 * @template VALUE
	 */
	goog.array.binaryInsert = function(array, value, opt_compareFn) {
	  var index = goog.array.binarySearch(array, value, opt_compareFn);
	  if (index < 0) {
	    goog.array.insertAt(array, value, -(index + 1));
	    return true;
	  }
	  return false;
	};


	/**
	 * Removes a value from a sorted array.
	 * @param {!IArrayLike<VALUE>} array The array to modify.
	 * @param {VALUE} value The object to remove.
	 * @param {function(VALUE, VALUE): number=} opt_compareFn Optional comparison
	 *     function by which the array is ordered. Should take 2 arguments to
	 *     compare, and return a negative number, zero, or a positive number
	 *     depending on whether the first argument is less than, equal to, or
	 *     greater than the second.
	 * @return {boolean} True if an element was removed.
	 * @template VALUE
	 */
	goog.array.binaryRemove = function(array, value, opt_compareFn) {
	  var index = goog.array.binarySearch(array, value, opt_compareFn);
	  return (index >= 0) ? goog.array.removeAt(array, index) : false;
	};


	/**
	 * Splits an array into disjoint buckets according to a splitting function.
	 * @param {Array<T>} array The array.
	 * @param {function(this:S, T,number,Array<T>):?} sorter Function to call for
	 *     every element.  This takes 3 arguments (the element, the index and the
	 *     array) and must return a valid object key (a string, number, etc), or
	 *     undefined, if that object should not be placed in a bucket.
	 * @param {S=} opt_obj The object to be used as the value of 'this' within
	 *     sorter.
	 * @return {!Object} An object, with keys being all of the unique return values
	 *     of sorter, and values being arrays containing the items for
	 *     which the splitter returned that key.
	 * @template T,S
	 */
	goog.array.bucket = function(array, sorter, opt_obj) {
	  var buckets = {};

	  for (var i = 0; i < array.length; i++) {
	    var value = array[i];
	    var key = sorter.call(/** @type {?} */ (opt_obj), value, i, array);
	    if (goog.isDef(key)) {
	      // Push the value to the right bucket, creating it if necessary.
	      var bucket = buckets[key] || (buckets[key] = []);
	      bucket.push(value);
	    }
	  }

	  return buckets;
	};


	/**
	 * Creates a new object built from the provided array and the key-generation
	 * function.
	 * @param {IArrayLike<T>} arr Array or array like object over
	 *     which to iterate whose elements will be the values in the new object.
	 * @param {?function(this:S, T, number, ?) : string} keyFunc The function to
	 *     call for every element. This function takes 3 arguments (the element, the
	 *     index and the array) and should return a string that will be used as the
	 *     key for the element in the new object. If the function returns the same
	 *     key for more than one element, the value for that key is
	 *     implementation-defined.
	 * @param {S=} opt_obj The object to be used as the value of 'this'
	 *     within keyFunc.
	 * @return {!Object<T>} The new object.
	 * @template T,S
	 */
	goog.array.toObject = function(arr, keyFunc, opt_obj) {
	  var ret = {};
	  goog.array.forEach(arr, function(element, index) {
	    ret[keyFunc.call(/** @type {?} */ (opt_obj), element, index, arr)] =
	        element;
	  });
	  return ret;
	};


	/**
	 * Creates a range of numbers in an arithmetic progression.
	 *
	 * Range takes 1, 2, or 3 arguments:
	 * <pre>
	 * range(5) is the same as range(0, 5, 1) and produces [0, 1, 2, 3, 4]
	 * range(2, 5) is the same as range(2, 5, 1) and produces [2, 3, 4]
	 * range(-2, -5, -1) produces [-2, -3, -4]
	 * range(-2, -5, 1) produces [], since stepping by 1 wouldn't ever reach -5.
	 * </pre>
	 *
	 * @param {number} startOrEnd The starting value of the range if an end argument
	 *     is provided. Otherwise, the start value is 0, and this is the end value.
	 * @param {number=} opt_end The optional end value of the range.
	 * @param {number=} opt_step The step size between range values. Defaults to 1
	 *     if opt_step is undefined or 0.
	 * @return {!Array<number>} An array of numbers for the requested range. May be
	 *     an empty array if adding the step would not converge toward the end
	 *     value.
	 */
	goog.array.range = function(startOrEnd, opt_end, opt_step) {
	  var array = [];
	  var start = 0;
	  var end = startOrEnd;
	  var step = opt_step || 1;
	  if (opt_end !== undefined) {
	    start = startOrEnd;
	    end = opt_end;
	  }

	  if (step * (end - start) < 0) {
	    // Sign mismatch: start + step will never reach the end value.
	    return [];
	  }

	  if (step > 0) {
	    for (var i = start; i < end; i += step) {
	      array.push(i);
	    }
	  } else {
	    for (var i = start; i > end; i += step) {
	      array.push(i);
	    }
	  }
	  return array;
	};


	/**
	 * Returns an array consisting of the given value repeated N times.
	 *
	 * @param {VALUE} value The value to repeat.
	 * @param {number} n The repeat count.
	 * @return {!Array<VALUE>} An array with the repeated value.
	 * @template VALUE
	 */
	goog.array.repeat = function(value, n) {
	  var array = [];
	  for (var i = 0; i < n; i++) {
	    array[i] = value;
	  }
	  return array;
	};


	/**
	 * Returns an array consisting of every argument with all arrays
	 * expanded in-place recursively.
	 *
	 * @param {...*} var_args The values to flatten.
	 * @return {!Array<?>} An array containing the flattened values.
	 */
	goog.array.flatten = function(var_args) {
	  var CHUNK_SIZE = 8192;

	  var result = [];
	  for (var i = 0; i < arguments.length; i++) {
	    var element = arguments[i];
	    if (goog.isArray(element)) {
	      for (var c = 0; c < element.length; c += CHUNK_SIZE) {
	        var chunk = goog.array.slice(element, c, c + CHUNK_SIZE);
	        var recurseResult = goog.array.flatten.apply(null, chunk);
	        for (var r = 0; r < recurseResult.length; r++) {
	          result.push(recurseResult[r]);
	        }
	      }
	    } else {
	      result.push(element);
	    }
	  }
	  return result;
	};


	/**
	 * Rotates an array in-place. After calling this method, the element at
	 * index i will be the element previously at index (i - n) %
	 * array.length, for all values of i between 0 and array.length - 1,
	 * inclusive.
	 *
	 * For example, suppose list comprises [t, a, n, k, s]. After invoking
	 * rotate(array, 1) (or rotate(array, -4)), array will comprise [s, t, a, n, k].
	 *
	 * @param {!Array<T>} array The array to rotate.
	 * @param {number} n The amount to rotate.
	 * @return {!Array<T>} The array.
	 * @template T
	 */
	goog.array.rotate = function(array, n) {
	  goog.asserts.assert(array.length != null);

	  if (array.length) {
	    n %= array.length;
	    if (n > 0) {
	      Array.prototype.unshift.apply(array, array.splice(-n, n));
	    } else if (n < 0) {
	      Array.prototype.push.apply(array, array.splice(0, -n));
	    }
	  }
	  return array;
	};


	/**
	 * Moves one item of an array to a new position keeping the order of the rest
	 * of the items. Example use case: keeping a list of JavaScript objects
	 * synchronized with the corresponding list of DOM elements after one of the
	 * elements has been dragged to a new position.
	 * @param {!IArrayLike<?>} arr The array to modify.
	 * @param {number} fromIndex Index of the item to move between 0 and
	 *     {@code arr.length - 1}.
	 * @param {number} toIndex Target index between 0 and {@code arr.length - 1}.
	 */
	goog.array.moveItem = function(arr, fromIndex, toIndex) {
	  goog.asserts.assert(fromIndex >= 0 && fromIndex < arr.length);
	  goog.asserts.assert(toIndex >= 0 && toIndex < arr.length);
	  // Remove 1 item at fromIndex.
	  var removedItems = Array.prototype.splice.call(arr, fromIndex, 1);
	  // Insert the removed item at toIndex.
	  Array.prototype.splice.call(arr, toIndex, 0, removedItems[0]);
	  // We don't use goog.array.insertAt and goog.array.removeAt, because they're
	  // significantly slower than splice.
	};


	/**
	 * Creates a new array for which the element at position i is an array of the
	 * ith element of the provided arrays.  The returned array will only be as long
	 * as the shortest array provided; additional values are ignored.  For example,
	 * the result of zipping [1, 2] and [3, 4, 5] is [[1,3], [2, 4]].
	 *
	 * This is similar to the zip() function in Python.  See {@link
	 * http://docs.python.org/library/functions.html#zip}
	 *
	 * @param {...!IArrayLike<?>} var_args Arrays to be combined.
	 * @return {!Array<!Array<?>>} A new array of arrays created from
	 *     provided arrays.
	 */
	goog.array.zip = function(var_args) {
	  if (!arguments.length) {
	    return [];
	  }
	  var result = [];
	  var minLen = arguments[0].length;
	  for (var i = 1; i < arguments.length; i++) {
	    if (arguments[i].length < minLen) {
	      minLen = arguments[i].length;
	    }
	  }
	  for (var i = 0; i < minLen; i++) {
	    var value = [];
	    for (var j = 0; j < arguments.length; j++) {
	      value.push(arguments[j][i]);
	    }
	    result.push(value);
	  }
	  return result;
	};


	/**
	 * Shuffles the values in the specified array using the Fisher-Yates in-place
	 * shuffle (also known as the Knuth Shuffle). By default, calls Math.random()
	 * and so resets the state of that random number generator. Similarly, may reset
	 * the state of the any other specified random number generator.
	 *
	 * Runtime: O(n)
	 *
	 * @param {!Array<?>} arr The array to be shuffled.
	 * @param {function():number=} opt_randFn Optional random function to use for
	 *     shuffling.
	 *     Takes no arguments, and returns a random number on the interval [0, 1).
	 *     Defaults to Math.random() using JavaScript's built-in Math library.
	 */
	goog.array.shuffle = function(arr, opt_randFn) {
	  var randFn = opt_randFn || Math.random;

	  for (var i = arr.length - 1; i > 0; i--) {
	    // Choose a random array index in [0, i] (inclusive with i).
	    var j = Math.floor(randFn() * (i + 1));

	    var tmp = arr[i];
	    arr[i] = arr[j];
	    arr[j] = tmp;
	  }
	};


	/**
	 * Returns a new array of elements from arr, based on the indexes of elements
	 * provided by index_arr. For example, the result of index copying
	 * ['a', 'b', 'c'] with index_arr [1,0,0,2] is ['b', 'a', 'a', 'c'].
	 *
	 * @param {!Array<T>} arr The array to get a indexed copy from.
	 * @param {!Array<number>} index_arr An array of indexes to get from arr.
	 * @return {!Array<T>} A new array of elements from arr in index_arr order.
	 * @template T
	 */
	goog.array.copyByIndex = function(arr, index_arr) {
	  var result = [];
	  goog.array.forEach(index_arr, function(index) { result.push(arr[index]); });
	  return result;
	};


	/**
	 * Maps each element of the input array into zero or more elements of the output
	 * array.
	 *
	 * @param {!IArrayLike<VALUE>|string} arr Array or array like object
	 *     over which to iterate.
	 * @param {function(this:THIS, VALUE, number, ?): !Array<RESULT>} f The function
	 *     to call for every element. This function takes 3 arguments (the element,
	 *     the index and the array) and should return an array. The result will be
	 *     used to extend a new array.
	 * @param {THIS=} opt_obj The object to be used as the value of 'this' within f.
	 * @return {!Array<RESULT>} a new array with the concatenation of all arrays
	 *     returned from f.
	 * @template THIS, VALUE, RESULT
	 */
	goog.array.concatMap = function(arr, f, opt_obj) {
	  return goog.array.concat.apply([], goog.array.map(arr, f, opt_obj));
	};

	module.exports = goog.array;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(13);
	__webpack_require__(7);
	__webpack_require__(14);
	var goog=CLJS_ENV.goog;

	// Copyright 2008 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Utilities to check the preconditions, postconditions and
	 * invariants runtime.
	 *
	 * Methods in this package should be given special treatment by the compiler
	 * for type-inference. For example, <code>goog.asserts.assert(foo)</code>
	 * will restrict <code>foo</code> to a truthy value.
	 *
	 * The compiler has an option to disable asserts. So code like:
	 * <code>
	 * var x = goog.asserts.assert(foo()); goog.asserts.assert(bar());
	 * </code>
	 * will be transformed into:
	 * <code>
	 * var x = foo();
	 * </code>
	 * The compiler will leave in foo() (because its return value is used),
	 * but it will remove bar() because it assumes it does not have side-effects.
	 *
	 * @author agrieve@google.com (Andrew Grieve)
	 */

	goog.provide('goog.asserts');
	goog.provide('goog.asserts.AssertionError');

	goog.require('goog.debug.Error');
	goog.require('goog.dom.NodeType');
	goog.require('goog.string');


	/**
	 * @define {boolean} Whether to strip out asserts or to leave them in.
	 */
	goog.define('goog.asserts.ENABLE_ASSERTS', goog.DEBUG);



	/**
	 * Error object for failed assertions.
	 * @param {string} messagePattern The pattern that was used to form message.
	 * @param {!Array<*>} messageArgs The items to substitute into the pattern.
	 * @constructor
	 * @extends {goog.debug.Error}
	 * @final
	 */
	goog.asserts.AssertionError = function(messagePattern, messageArgs) {
	  messageArgs.unshift(messagePattern);
	  goog.debug.Error.call(this, goog.string.subs.apply(null, messageArgs));
	  // Remove the messagePattern afterwards to avoid permanently modifying the
	  // passed in array.
	  messageArgs.shift();

	  /**
	   * The message pattern used to format the error message. Error handlers can
	   * use this to uniquely identify the assertion.
	   * @type {string}
	   */
	  this.messagePattern = messagePattern;
	};
	goog.inherits(goog.asserts.AssertionError, goog.debug.Error);


	/** @override */
	goog.asserts.AssertionError.prototype.name = 'AssertionError';


	/**
	 * The default error handler.
	 * @param {!goog.asserts.AssertionError} e The exception to be handled.
	 */
	goog.asserts.DEFAULT_ERROR_HANDLER = function(e) {
	  throw e;
	};


	/**
	 * The handler responsible for throwing or logging assertion errors.
	 * @private {function(!goog.asserts.AssertionError)}
	 */
	goog.asserts.errorHandler_ = goog.asserts.DEFAULT_ERROR_HANDLER;


	/**
	 * Throws an exception with the given message and "Assertion failed" prefixed
	 * onto it.
	 * @param {string} defaultMessage The message to use if givenMessage is empty.
	 * @param {Array<*>} defaultArgs The substitution arguments for defaultMessage.
	 * @param {string|undefined} givenMessage Message supplied by the caller.
	 * @param {Array<*>} givenArgs The substitution arguments for givenMessage.
	 * @throws {goog.asserts.AssertionError} When the value is not a number.
	 * @private
	 */
	goog.asserts.doAssertFailure_ = function(
	    defaultMessage, defaultArgs, givenMessage, givenArgs) {
	  var message = 'Assertion failed';
	  if (givenMessage) {
	    message += ': ' + givenMessage;
	    var args = givenArgs;
	  } else if (defaultMessage) {
	    message += ': ' + defaultMessage;
	    args = defaultArgs;
	  }
	  // The '' + works around an Opera 10 bug in the unit tests. Without it,
	  // a stack trace is added to var message above. With this, a stack trace is
	  // not added until this line (it causes the extra garbage to be added after
	  // the assertion message instead of in the middle of it).
	  var e = new goog.asserts.AssertionError('' + message, args || []);
	  goog.asserts.errorHandler_(e);
	};


	/**
	 * Sets a custom error handler that can be used to customize the behavior of
	 * assertion failures, for example by turning all assertion failures into log
	 * messages.
	 * @param {function(!goog.asserts.AssertionError)} errorHandler
	 */
	goog.asserts.setErrorHandler = function(errorHandler) {
	  if (goog.asserts.ENABLE_ASSERTS) {
	    goog.asserts.errorHandler_ = errorHandler;
	  }
	};


	/**
	 * Checks if the condition evaluates to true if goog.asserts.ENABLE_ASSERTS is
	 * true.
	 * @template T
	 * @param {T} condition The condition to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {T} The value of the condition.
	 * @throws {goog.asserts.AssertionError} When the condition evaluates to false.
	 */
	goog.asserts.assert = function(condition, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !condition) {
	    goog.asserts.doAssertFailure_(
	        '', null, opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return condition;
	};


	/**
	 * Fails if goog.asserts.ENABLE_ASSERTS is true. This function is useful in case
	 * when we want to add a check in the unreachable area like switch-case
	 * statement:
	 *
	 * <pre>
	 *  switch(type) {
	 *    case FOO: doSomething(); break;
	 *    case BAR: doSomethingElse(); break;
	 *    default: goog.asserts.fail('Unrecognized type: ' + type);
	 *      // We have only 2 types - "default:" section is unreachable code.
	 *  }
	 * </pre>
	 *
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @throws {goog.asserts.AssertionError} Failure.
	 */
	goog.asserts.fail = function(opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS) {
	    goog.asserts.errorHandler_(
	        new goog.asserts.AssertionError(
	            'Failure' + (opt_message ? ': ' + opt_message : ''),
	            Array.prototype.slice.call(arguments, 1)));
	  }
	};


	/**
	 * Checks if the value is a number if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {number} The value, guaranteed to be a number when asserts enabled.
	 * @throws {goog.asserts.AssertionError} When the value is not a number.
	 */
	goog.asserts.assertNumber = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isNumber(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected number but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {number} */ (value);
	};


	/**
	 * Checks if the value is a string if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {string} The value, guaranteed to be a string when asserts enabled.
	 * @throws {goog.asserts.AssertionError} When the value is not a string.
	 */
	goog.asserts.assertString = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isString(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected string but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {string} */ (value);
	};


	/**
	 * Checks if the value is a function if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {!Function} The value, guaranteed to be a function when asserts
	 *     enabled.
	 * @throws {goog.asserts.AssertionError} When the value is not a function.
	 */
	goog.asserts.assertFunction = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isFunction(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected function but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {!Function} */ (value);
	};


	/**
	 * Checks if the value is an Object if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {!Object} The value, guaranteed to be a non-null object.
	 * @throws {goog.asserts.AssertionError} When the value is not an object.
	 */
	goog.asserts.assertObject = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isObject(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected object but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {!Object} */ (value);
	};


	/**
	 * Checks if the value is an Array if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {!Array<?>} The value, guaranteed to be a non-null array.
	 * @throws {goog.asserts.AssertionError} When the value is not an array.
	 */
	goog.asserts.assertArray = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isArray(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected array but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {!Array<?>} */ (value);
	};


	/**
	 * Checks if the value is a boolean if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {boolean} The value, guaranteed to be a boolean when asserts are
	 *     enabled.
	 * @throws {goog.asserts.AssertionError} When the value is not a boolean.
	 */
	goog.asserts.assertBoolean = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !goog.isBoolean(value)) {
	    goog.asserts.doAssertFailure_(
	        'Expected boolean but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {boolean} */ (value);
	};


	/**
	 * Checks if the value is a DOM Element if goog.asserts.ENABLE_ASSERTS is true.
	 * @param {*} value The value to check.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @return {!Element} The value, likely to be a DOM Element when asserts are
	 *     enabled.
	 * @throws {goog.asserts.AssertionError} When the value is not an Element.
	 */
	goog.asserts.assertElement = function(value, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS &&
	      (!goog.isObject(value) || value.nodeType != goog.dom.NodeType.ELEMENT)) {
	    goog.asserts.doAssertFailure_(
	        'Expected Element but got %s: %s.', [goog.typeOf(value), value],
	        opt_message, Array.prototype.slice.call(arguments, 2));
	  }
	  return /** @type {!Element} */ (value);
	};


	/**
	 * Checks if the value is an instance of the user-defined type if
	 * goog.asserts.ENABLE_ASSERTS is true.
	 *
	 * The compiler may tighten the type returned by this function.
	 *
	 * @param {?} value The value to check.
	 * @param {function(new: T, ...)} type A user-defined constructor.
	 * @param {string=} opt_message Error message in case of failure.
	 * @param {...*} var_args The items to substitute into the failure message.
	 * @throws {goog.asserts.AssertionError} When the value is not an instance of
	 *     type.
	 * @return {T}
	 * @template T
	 */
	goog.asserts.assertInstanceof = function(value, type, opt_message, var_args) {
	  if (goog.asserts.ENABLE_ASSERTS && !(value instanceof type)) {
	    goog.asserts.doAssertFailure_(
	        'Expected instanceof %s but got %s.',
	        [goog.asserts.getType_(type), goog.asserts.getType_(value)],
	        opt_message, Array.prototype.slice.call(arguments, 3));
	  }
	  return value;
	};


	/**
	 * Checks that no enumerable keys are present in Object.prototype. Such keys
	 * would break most code that use {@code for (var ... in ...)} loops.
	 */
	goog.asserts.assertObjectPrototypeIsIntact = function() {
	  for (var key in Object.prototype) {
	    goog.asserts.fail(key + ' should not be enumerable in Object.prototype.');
	  }
	};


	/**
	 * Returns the type of a value. If a constructor is passed, and a suitable
	 * string cannot be found, 'unknown type name' will be returned.
	 * @param {*} value A constructor, object, or primitive.
	 * @return {string} The best display name for the value, or 'unknown type name'.
	 * @private
	 */
	goog.asserts.getType_ = function(value) {
	  if (value instanceof Function) {
	    return value.displayName || value.name || 'unknown type name';
	  } else if (value instanceof Object) {
	    return value.constructor.displayName || value.constructor.name ||
	        Object.prototype.toString.call(value);
	  } else {
	    return value === null ? 'null' : typeof value;
	  }
	};

	module.exports = goog.asserts;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2006 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Definition of goog.dom.NodeType.
	 */

	goog.provide('goog.dom.NodeType');


	/**
	 * Constants for the nodeType attribute in the Node interface.
	 *
	 * These constants match those specified in the Node interface. These are
	 * usually present on the Node object in recent browsers, but not in older
	 * browsers (specifically, early IEs) and thus are given here.
	 *
	 * In some browsers (early IEs), these are not defined on the Node object,
	 * so they are provided here.
	 *
	 * See http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-1950641247
	 * @enum {number}
	 */
	goog.dom.NodeType = {
	  ELEMENT: 1,
	  ATTRIBUTE: 2,
	  TEXT: 3,
	  CDATA_SECTION: 4,
	  ENTITY_REFERENCE: 5,
	  ENTITY: 6,
	  PROCESSING_INSTRUCTION: 7,
	  COMMENT: 8,
	  DOCUMENT: 9,
	  DOCUMENT_TYPE: 10,
	  DOCUMENT_FRAGMENT: 11,
	  NOTATION: 12
	};

	module.exports = goog.dom.NodeType;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2009 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Provides a base class for custom Error objects such that the
	 * stack is correctly maintained.
	 *
	 * You should never need to throw goog.debug.Error(msg) directly, Error(msg) is
	 * sufficient.
	 *
	 */

	goog.provide('goog.debug.Error');



	/**
	 * Base class for custom error objects.
	 * @param {*=} opt_msg The message associated with the error.
	 * @constructor
	 * @extends {Error}
	 */
	goog.debug.Error = function(opt_msg) {

	  // Attempt to ensure there is a stack trace.
	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, goog.debug.Error);
	  } else {
	    var stack = new Error().stack;
	    if (stack) {
	      this.stack = stack;
	    }
	  }

	  if (opt_msg) {
	    this.message = String(opt_msg);
	  }

	  /**
	   * Whether to report this error to the server. Setting this to false will
	   * cause the error reporter to not report the error back to the server,
	   * which can be useful if the client knows that the error has already been
	   * logged on the server.
	   * @type {boolean}
	   */
	  this.reportErrorToServer = true;
	};
	goog.inherits(goog.debug.Error, Error);


	/** @override */
	goog.debug.Error.prototype.name = 'CustomError';

	module.exports = goog.debug.Error;


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(16);
	var goog=CLJS_ENV.goog;

	// Copyright 2009 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
	 * integer value, which faithfully simulates the behavior of a Java "long". This
	 * implementation is derived from LongLib in GWT.
	 *
	 */

	goog.provide('goog.math.Long');

	goog.require('goog.reflect');



	/**
	 * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
	 * values as *signed* integers.  See the from* functions below for more
	 * convenient ways of constructing Longs.
	 *
	 * The internal representation of a long is the two given signed, 32-bit values.
	 * We use 32-bit pieces because these are the size of integers on which
	 * Javascript performs bit-operations.  For operations like addition and
	 * multiplication, we split each number into 16-bit pieces, which can easily be
	 * multiplied within Javascript's floating-point representation without overflow
	 * or change in sign.
	 *
	 * In the algorithms below, we frequently reduce the negative case to the
	 * positive case by negating the input(s) and then post-processing the result.
	 * Note that we must ALWAYS check specially whether those values are MIN_VALUE
	 * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
	 * a positive number, it overflows back into a negative).  Not handling this
	 * case would often result in infinite recursion.
	 *
	 * @param {number} low  The low (signed) 32 bits of the long.
	 * @param {number} high  The high (signed) 32 bits of the long.
	 * @struct
	 * @constructor
	 * @final
	 */
	goog.math.Long = function(low, high) {
	  /**
	   * @type {number}
	   * @private
	   */
	  this.low_ = low | 0;  // force into 32 signed bits.

	  /**
	   * @type {number}
	   * @private
	   */
	  this.high_ = high | 0;  // force into 32 signed bits.
	};


	// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
	// from* methods on which they depend.


	/**
	 * A cache of the Long representations of small integer values.
	 * @type {!Object<number, !goog.math.Long>}
	 * @private
	 */
	goog.math.Long.IntCache_ = {};


	/**
	 * A cache of the Long representations of common values.
	 * @type {!Object<goog.math.Long.ValueCacheId_, !goog.math.Long>}
	 * @private
	 */
	goog.math.Long.valueCache_ = {};


	/**
	 * Returns a Long representing the given (32-bit) integer value.
	 * @param {number} value The 32-bit integer in question.
	 * @return {!goog.math.Long} The corresponding Long value.
	 */
	goog.math.Long.fromInt = function(value) {
	  if (-128 <= value && value < 128) {
	    return goog.reflect.cache(goog.math.Long.IntCache_, value, function(val) {
	      return new goog.math.Long(val | 0, val < 0 ? -1 : 0);
	    });
	  } else {
	    return new goog.math.Long(value | 0, value < 0 ? -1 : 0);
	  }
	};


	/**
	 * Returns a Long representing the given value.
	 * NaN will be returned as zero. Infinity is converted to max value and
	 * -Infinity to min value.
	 * @param {number} value The number in question.
	 * @return {!goog.math.Long} The corresponding Long value.
	 */
	goog.math.Long.fromNumber = function(value) {
	  if (isNaN(value)) {
	    return goog.math.Long.getZero();
	  } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
	    return goog.math.Long.getMinValue();
	  } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
	    return goog.math.Long.getMaxValue();
	  } else if (value < 0) {
	    return goog.math.Long.fromNumber(-value).negate();
	  } else {
	    return new goog.math.Long(
	        (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
	        (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
	  }
	};


	/**
	 * Returns a Long representing the 64-bit integer that comes by concatenating
	 * the given high and low bits.  Each is assumed to use 32 bits.
	 * @param {number} lowBits The low 32-bits.
	 * @param {number} highBits The high 32-bits.
	 * @return {!goog.math.Long} The corresponding Long value.
	 */
	goog.math.Long.fromBits = function(lowBits, highBits) {
	  return new goog.math.Long(lowBits, highBits);
	};


	/**
	 * Returns a Long representation of the given string, written using the given
	 * radix.
	 * @param {string} str The textual representation of the Long.
	 * @param {number=} opt_radix The radix in which the text is written.
	 * @return {!goog.math.Long} The corresponding Long value.
	 */
	goog.math.Long.fromString = function(str, opt_radix) {
	  if (str.length == 0) {
	    throw Error('number format error: empty string');
	  }

	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (str.charAt(0) == '-') {
	    return goog.math.Long.fromString(str.substring(1), radix).negate();
	  } else if (str.indexOf('-') >= 0) {
	    throw Error('number format error: interior "-" character: ' + str);
	  }

	  // Do several (8) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

	  var result = goog.math.Long.getZero();
	  for (var i = 0; i < str.length; i += 8) {
	    var size = Math.min(8, str.length - i);
	    var value = parseInt(str.substring(i, i + size), radix);
	    if (size < 8) {
	      var power = goog.math.Long.fromNumber(Math.pow(radix, size));
	      result = result.multiply(power).add(goog.math.Long.fromNumber(value));
	    } else {
	      result = result.multiply(radixToPower);
	      result = result.add(goog.math.Long.fromNumber(value));
	    }
	  }
	  return result;
	};


	// NOTE: the compiler should inline these constant values below and then remove
	// these variables, so there should be no runtime penalty for these.


	/**
	 * Number used repeated below in calculations.  This must appear before the
	 * first call to any from* function below.
	 * @type {number}
	 * @private
	 */
	goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


	/**
	 * @type {number}
	 * @private
	 */
	goog.math.Long.TWO_PWR_32_DBL_ =
	    goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


	/**
	 * @type {number}
	 * @private
	 */
	goog.math.Long.TWO_PWR_64_DBL_ =
	    goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


	/**
	 * @type {number}
	 * @private
	 */
	goog.math.Long.TWO_PWR_63_DBL_ = goog.math.Long.TWO_PWR_64_DBL_ / 2;


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getZero = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ZERO,
	      function() { return goog.math.Long.fromInt(0); });
	};


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getOne = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.ONE,
	      function() { return goog.math.Long.fromInt(1); });
	};


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getNegOne = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.NEG_ONE,
	      function() { return goog.math.Long.fromInt(-1); });
	};


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getMaxValue = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MAX_VALUE,
	      function() {
	        return goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);
	      });
	};


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getMinValue = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.MIN_VALUE,
	      function() { return goog.math.Long.fromBits(0, 0x80000000 | 0); });
	};


	/**
	 * @return {!goog.math.Long}
	 * @public
	 */
	goog.math.Long.getTwoPwr24 = function() {
	  return goog.reflect.cache(
	      goog.math.Long.valueCache_, goog.math.Long.ValueCacheId_.TWO_PWR_24,
	      function() { return goog.math.Long.fromInt(1 << 24); });
	};


	/** @return {number} The value, assuming it is a 32-bit integer. */
	goog.math.Long.prototype.toInt = function() {
	  return this.low_;
	};


	/** @return {number} The closest floating-point representation to this value. */
	goog.math.Long.prototype.toNumber = function() {
	  return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
	      this.getLowBitsUnsigned();
	};


	/**
	 * @param {number=} opt_radix The radix in which the text should be written.
	 * @return {string} The textual representation of this value.
	 * @override
	 */
	goog.math.Long.prototype.toString = function(opt_radix) {
	  var radix = opt_radix || 10;
	  if (radix < 2 || 36 < radix) {
	    throw Error('radix out of range: ' + radix);
	  }

	  if (this.isZero()) {
	    return '0';
	  }

	  if (this.isNegative()) {
	    if (this.equals(goog.math.Long.getMinValue())) {
	      // We need to change the Long value before it can be negated, so we remove
	      // the bottom-most digit in this base and then recurse to do the rest.
	      var radixLong = goog.math.Long.fromNumber(radix);
	      var div = this.div(radixLong);
	      var rem = div.multiply(radixLong).subtract(this);
	      return div.toString(radix) + rem.toInt().toString(radix);
	    } else {
	      return '-' + this.negate().toString(radix);
	    }
	  }

	  // Do several (6) digits each time through the loop, so as to
	  // minimize the calls to the very expensive emulated div.
	  var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

	  var rem = this;
	  var result = '';
	  while (true) {
	    var remDiv = rem.div(radixToPower);
	    // The right shifting fixes negative values in the case when
	    // intval >= 2^31; for more details see
	    // https://github.com/google/closure-library/pull/498
	    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt() >>> 0;
	    var digits = intval.toString(radix);

	    rem = remDiv;
	    if (rem.isZero()) {
	      return digits + result;
	    } else {
	      while (digits.length < 6) {
	        digits = '0' + digits;
	      }
	      result = '' + digits + result;
	    }
	  }
	};


	/** @return {number} The high 32-bits as a signed value. */
	goog.math.Long.prototype.getHighBits = function() {
	  return this.high_;
	};


	/** @return {number} The low 32-bits as a signed value. */
	goog.math.Long.prototype.getLowBits = function() {
	  return this.low_;
	};


	/** @return {number} The low 32-bits as an unsigned value. */
	goog.math.Long.prototype.getLowBitsUnsigned = function() {
	  return (this.low_ >= 0) ? this.low_ :
	                            goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
	};


	/**
	 * @return {number} Returns the number of bits needed to represent the absolute
	 *     value of this Long.
	 */
	goog.math.Long.prototype.getNumBitsAbs = function() {
	  if (this.isNegative()) {
	    if (this.equals(goog.math.Long.getMinValue())) {
	      return 64;
	    } else {
	      return this.negate().getNumBitsAbs();
	    }
	  } else {
	    var val = this.high_ != 0 ? this.high_ : this.low_;
	    for (var bit = 31; bit > 0; bit--) {
	      if ((val & (1 << bit)) != 0) {
	        break;
	      }
	    }
	    return this.high_ != 0 ? bit + 33 : bit + 1;
	  }
	};


	/** @return {boolean} Whether this value is zero. */
	goog.math.Long.prototype.isZero = function() {
	  return this.high_ == 0 && this.low_ == 0;
	};


	/** @return {boolean} Whether this value is negative. */
	goog.math.Long.prototype.isNegative = function() {
	  return this.high_ < 0;
	};


	/** @return {boolean} Whether this value is odd. */
	goog.math.Long.prototype.isOdd = function() {
	  return (this.low_ & 1) == 1;
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long equals the other.
	 */
	goog.math.Long.prototype.equals = function(other) {
	  return (this.high_ == other.high_) && (this.low_ == other.low_);
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long does not equal the other.
	 */
	goog.math.Long.prototype.notEquals = function(other) {
	  return (this.high_ != other.high_) || (this.low_ != other.low_);
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long is less than the other.
	 */
	goog.math.Long.prototype.lessThan = function(other) {
	  return this.compare(other) < 0;
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long is less than or equal to the other.
	 */
	goog.math.Long.prototype.lessThanOrEqual = function(other) {
	  return this.compare(other) <= 0;
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long is greater than the other.
	 */
	goog.math.Long.prototype.greaterThan = function(other) {
	  return this.compare(other) > 0;
	};


	/**
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {boolean} Whether this Long is greater than or equal to the other.
	 */
	goog.math.Long.prototype.greaterThanOrEqual = function(other) {
	  return this.compare(other) >= 0;
	};


	/**
	 * Compares this Long with the given one.
	 * @param {goog.math.Long} other Long to compare against.
	 * @return {number} 0 if they are the same, 1 if the this is greater, and -1
	 *     if the given one is greater.
	 */
	goog.math.Long.prototype.compare = function(other) {
	  if (this.equals(other)) {
	    return 0;
	  }

	  var thisNeg = this.isNegative();
	  var otherNeg = other.isNegative();
	  if (thisNeg && !otherNeg) {
	    return -1;
	  }
	  if (!thisNeg && otherNeg) {
	    return 1;
	  }

	  // at this point, the signs are the same, so subtraction will not overflow
	  if (this.subtract(other).isNegative()) {
	    return -1;
	  } else {
	    return 1;
	  }
	};


	/** @return {!goog.math.Long} The negation of this value. */
	goog.math.Long.prototype.negate = function() {
	  if (this.equals(goog.math.Long.getMinValue())) {
	    return goog.math.Long.getMinValue();
	  } else {
	    return this.not().add(goog.math.Long.getOne());
	  }
	};


	/**
	 * Returns the sum of this and the given Long.
	 * @param {goog.math.Long} other Long to add to this one.
	 * @return {!goog.math.Long} The sum of this and the given Long.
	 */
	goog.math.Long.prototype.add = function(other) {
	  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 + b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 + b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 + b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 + b48;
	  c48 &= 0xFFFF;
	  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};


	/**
	 * Returns the difference of this and the given Long.
	 * @param {goog.math.Long} other Long to subtract from this.
	 * @return {!goog.math.Long} The difference of this and the given Long.
	 */
	goog.math.Long.prototype.subtract = function(other) {
	  return this.add(other.negate());
	};


	/**
	 * Returns the product of this and the given long.
	 * @param {goog.math.Long} other Long to multiply with this.
	 * @return {!goog.math.Long} The product of this and the other.
	 */
	goog.math.Long.prototype.multiply = function(other) {
	  if (this.isZero()) {
	    return goog.math.Long.getZero();
	  } else if (other.isZero()) {
	    return goog.math.Long.getZero();
	  }

	  if (this.equals(goog.math.Long.getMinValue())) {
	    return other.isOdd() ? goog.math.Long.getMinValue() :
	                           goog.math.Long.getZero();
	  } else if (other.equals(goog.math.Long.getMinValue())) {
	    return this.isOdd() ? goog.math.Long.getMinValue() :
	                          goog.math.Long.getZero();
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().multiply(other.negate());
	    } else {
	      return this.negate().multiply(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.multiply(other.negate()).negate();
	  }

	  // If both longs are small, use float multiplication
	  if (this.lessThan(goog.math.Long.getTwoPwr24()) &&
	      other.lessThan(goog.math.Long.getTwoPwr24())) {
	    return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
	  }

	  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
	  // We can skip products that would overflow.

	  var a48 = this.high_ >>> 16;
	  var a32 = this.high_ & 0xFFFF;
	  var a16 = this.low_ >>> 16;
	  var a00 = this.low_ & 0xFFFF;

	  var b48 = other.high_ >>> 16;
	  var b32 = other.high_ & 0xFFFF;
	  var b16 = other.low_ >>> 16;
	  var b00 = other.low_ & 0xFFFF;

	  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
	  c00 += a00 * b00;
	  c16 += c00 >>> 16;
	  c00 &= 0xFFFF;
	  c16 += a16 * b00;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c16 += a00 * b16;
	  c32 += c16 >>> 16;
	  c16 &= 0xFFFF;
	  c32 += a32 * b00;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a16 * b16;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c32 += a00 * b32;
	  c48 += c32 >>> 16;
	  c32 &= 0xFFFF;
	  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
	  c48 &= 0xFFFF;
	  return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
	};


	/**
	 * Returns this Long divided by the given one.
	 * @param {goog.math.Long} other Long by which to divide.
	 * @return {!goog.math.Long} This Long divided by the given one.
	 */
	goog.math.Long.prototype.div = function(other) {
	  if (other.isZero()) {
	    throw Error('division by zero');
	  } else if (this.isZero()) {
	    return goog.math.Long.getZero();
	  }

	  if (this.equals(goog.math.Long.getMinValue())) {
	    if (other.equals(goog.math.Long.getOne()) ||
	        other.equals(goog.math.Long.getNegOne())) {
	      return goog.math.Long.getMinValue();  // recall -MIN_VALUE == MIN_VALUE
	    } else if (other.equals(goog.math.Long.getMinValue())) {
	      return goog.math.Long.getOne();
	    } else {
	      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
	      var halfThis = this.shiftRight(1);
	      var approx = halfThis.div(other).shiftLeft(1);
	      if (approx.equals(goog.math.Long.getZero())) {
	        return other.isNegative() ? goog.math.Long.getOne() :
	                                    goog.math.Long.getNegOne();
	      } else {
	        var rem = this.subtract(other.multiply(approx));
	        var result = approx.add(rem.div(other));
	        return result;
	      }
	    }
	  } else if (other.equals(goog.math.Long.getMinValue())) {
	    return goog.math.Long.getZero();
	  }

	  if (this.isNegative()) {
	    if (other.isNegative()) {
	      return this.negate().div(other.negate());
	    } else {
	      return this.negate().div(other).negate();
	    }
	  } else if (other.isNegative()) {
	    return this.div(other.negate()).negate();
	  }

	  // Repeat the following until the remainder is less than other:  find a
	  // floating-point that approximates remainder / other *from below*, add this
	  // into the result, and subtract it from the remainder.  It is critical that
	  // the approximate value is less than or equal to the real value so that the
	  // remainder never becomes negative.
	  var res = goog.math.Long.getZero();
	  var rem = this;
	  while (rem.greaterThanOrEqual(other)) {
	    // Approximate the result of division. This may be a little greater or
	    // smaller than the actual value.
	    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

	    // We will tweak the approximate result by changing it in the 48-th digit or
	    // the smallest non-fractional digit, whichever is larger.
	    var log2 = Math.ceil(Math.log(approx) / Math.LN2);
	    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

	    // Decrease the approximation until it is smaller than the remainder.  Note
	    // that if it is too large, the product overflows and is negative.
	    var approxRes = goog.math.Long.fromNumber(approx);
	    var approxRem = approxRes.multiply(other);
	    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
	      approx -= delta;
	      approxRes = goog.math.Long.fromNumber(approx);
	      approxRem = approxRes.multiply(other);
	    }

	    // We know the answer can't be zero... and actually, zero would cause
	    // infinite recursion since we would make no progress.
	    if (approxRes.isZero()) {
	      approxRes = goog.math.Long.getOne();
	    }

	    res = res.add(approxRes);
	    rem = rem.subtract(approxRem);
	  }
	  return res;
	};


	/**
	 * Returns this Long modulo the given one.
	 * @param {goog.math.Long} other Long by which to mod.
	 * @return {!goog.math.Long} This Long modulo the given one.
	 */
	goog.math.Long.prototype.modulo = function(other) {
	  return this.subtract(this.div(other).multiply(other));
	};


	/** @return {!goog.math.Long} The bitwise-NOT of this value. */
	goog.math.Long.prototype.not = function() {
	  return goog.math.Long.fromBits(~this.low_, ~this.high_);
	};


	/**
	 * Returns the bitwise-AND of this Long and the given one.
	 * @param {goog.math.Long} other The Long with which to AND.
	 * @return {!goog.math.Long} The bitwise-AND of this and the other.
	 */
	goog.math.Long.prototype.and = function(other) {
	  return goog.math.Long.fromBits(
	      this.low_ & other.low_, this.high_ & other.high_);
	};


	/**
	 * Returns the bitwise-OR of this Long and the given one.
	 * @param {goog.math.Long} other The Long with which to OR.
	 * @return {!goog.math.Long} The bitwise-OR of this and the other.
	 */
	goog.math.Long.prototype.or = function(other) {
	  return goog.math.Long.fromBits(
	      this.low_ | other.low_, this.high_ | other.high_);
	};


	/**
	 * Returns the bitwise-XOR of this Long and the given one.
	 * @param {goog.math.Long} other The Long with which to XOR.
	 * @return {!goog.math.Long} The bitwise-XOR of this and the other.
	 */
	goog.math.Long.prototype.xor = function(other) {
	  return goog.math.Long.fromBits(
	      this.low_ ^ other.low_, this.high_ ^ other.high_);
	};


	/**
	 * Returns this Long with bits shifted to the left by the given amount.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Long} This shifted to the left by the given amount.
	 */
	goog.math.Long.prototype.shiftLeft = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var low = this.low_;
	    if (numBits < 32) {
	      var high = this.high_;
	      return goog.math.Long.fromBits(
	          low << numBits, (high << numBits) | (low >>> (32 - numBits)));
	    } else {
	      return goog.math.Long.fromBits(0, low << (numBits - 32));
	    }
	  }
	};


	/**
	 * Returns this Long with bits shifted to the right by the given amount.
	 * The new leading bits match the current sign bit.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Long} This shifted to the right by the given amount.
	 */
	goog.math.Long.prototype.shiftRight = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return goog.math.Long.fromBits(
	          (low >>> numBits) | (high << (32 - numBits)), high >> numBits);
	    } else {
	      return goog.math.Long.fromBits(
	          high >> (numBits - 32), high >= 0 ? 0 : -1);
	    }
	  }
	};


	/**
	 * Returns this Long with bits shifted to the right by the given amount, with
	 * zeros placed into the new leading bits.
	 * @param {number} numBits The number of bits by which to shift.
	 * @return {!goog.math.Long} This shifted to the right by the given amount, with
	 *     zeros placed into the new leading bits.
	 */
	goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
	  numBits &= 63;
	  if (numBits == 0) {
	    return this;
	  } else {
	    var high = this.high_;
	    if (numBits < 32) {
	      var low = this.low_;
	      return goog.math.Long.fromBits(
	          (low >>> numBits) | (high << (32 - numBits)), high >>> numBits);
	    } else if (numBits == 32) {
	      return goog.math.Long.fromBits(high, 0);
	    } else {
	      return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
	    }
	  }
	};


	/**
	 * @enum {number} Ids of commonly requested Long instances.
	 * @private
	 */
	goog.math.Long.ValueCacheId_ = {
	  MAX_VALUE: 1,
	  MIN_VALUE: 2,
	  ZERO: 3,
	  ONE: 4,
	  NEG_ONE: 5,
	  TWO_PWR_24: 6
	};

	module.exports = goog.math.Long;


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;

	var goog=CLJS_ENV.goog;

	// Copyright 2009 The Closure Library Authors. All Rights Reserved.
	//
	// Licensed under the Apache License, Version 2.0 (the "License");
	// you may not use this file except in compliance with the License.
	// You may obtain a copy of the License at
	//
	//      http://www.apache.org/licenses/LICENSE-2.0
	//
	// Unless required by applicable law or agreed to in writing, software
	// distributed under the License is distributed on an "AS-IS" BASIS,
	// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	// See the License for the specific language governing permissions and
	// limitations under the License.

	/**
	 * @fileoverview Useful compiler idioms.
	 *
	 * @author johnlenz@google.com (John Lenz)
	 */

	goog.provide('goog.reflect');


	/**
	 * Syntax for object literal casts.
	 * @see http://go/jscompiler-renaming
	 * @see https://goo.gl/CRs09P
	 *
	 * Use this if you have an object literal whose keys need to have the same names
	 * as the properties of some class even after they are renamed by the compiler.
	 *
	 * @param {!Function} type Type to cast to.
	 * @param {Object} object Object literal to cast.
	 * @return {Object} The object literal.
	 */
	goog.reflect.object = function(type, object) {
	  return object;
	};

	/**
	 * Syntax for renaming property strings.
	 * @see http://go/jscompiler-renaming
	 * @see https://goo.gl/CRs09P
	 *
	 * Use this if you have an need to access a property as a string, but want
	 * to also have the property renamed by the compiler. In contrast to
	 * goog.reflect.object, this method takes an instance of an object.
	 *
	 * Properties must be simple names (not qualified names).
	 *
	 * @param {string} prop Name of the property
	 * @param {!Object} object Instance of the object whose type will be used
	 *     for renaming
	 * @return {string} The renamed property.
	 */
	goog.reflect.objectProperty = function(prop, object) {
	  return prop;
	};

	/**
	 * To assert to the compiler that an operation is needed when it would
	 * otherwise be stripped. For example:
	 * <code>
	 *     // Force a layout
	 *     goog.reflect.sinkValue(dialog.offsetHeight);
	 * </code>
	 * @param {T} x
	 * @return {T}
	 * @template T
	 */
	goog.reflect.sinkValue = function(x) {
	  goog.reflect.sinkValue[' '](x);
	  return x;
	};


	/**
	 * The compiler should optimize this function away iff no one ever uses
	 * goog.reflect.sinkValue.
	 */
	goog.reflect.sinkValue[' '] = goog.nullFunction;


	/**
	 * Check if a property can be accessed without throwing an exception.
	 * @param {Object} obj The owner of the property.
	 * @param {string} prop The property name.
	 * @return {boolean} Whether the property is accessible. Will also return true
	 *     if obj is null.
	 */
	goog.reflect.canAccessProperty = function(obj, prop) {
	  /** @preserveTry */
	  try {
	    goog.reflect.sinkValue(obj[prop]);
	    return true;
	  } catch (e) {
	  }
	  return false;
	};


	/**
	 * Retrieves a value from a cache given a key. The compiler provides special
	 * consideration for this call such that it is generally considered side-effect
	 * free. However, if the {@code opt_keyFn} or {@code valueFn} have side-effects
	 * then the entire call is considered to have side-effects.
	 *
	 * Conventionally storing the value on the cache would be considered a
	 * side-effect and preclude unused calls from being pruned, ie. even if
	 * the value was never used, it would still always be stored in the cache.
	 *
	 * Providing a side-effect free {@code valueFn} and {@code opt_keyFn}
	 * allows unused calls to {@code goog.cache} to be pruned.
	 *
	 * @param {!Object<K, V>} cacheObj The object that contains the cached values.
	 * @param {?} key The key to lookup in the cache. If it is not string or number
	 *     then a {@code opt_keyFn} should be provided. The key is also used as the
	 *     parameter to the {@code valueFn}.
	 * @param {!function(?):V} valueFn The value provider to use to calculate the
	 *     value to store in the cache. This function should be side-effect free
	 *     to take advantage of the optimization.
	 * @param {function(?):K=} opt_keyFn The key provider to determine the cache
	 *     map key. This should be used if the given key is not a string or number.
	 *     If not provided then the given key is used. This function should be
	 *     side-effect free to take advantage of the optimization.
	 * @return {V} The cached or calculated value.
	 * @template K
	 * @template V
	 */
	goog.reflect.cache = function(cacheObj, key, valueFn, opt_keyFn) {
	  var storedKey = opt_keyFn ? opt_keyFn(key) : key;

	  if (Object.prototype.hasOwnProperty.call(cacheObj, storedKey)) {
	    return cacheObj[storedKey];
	  }

	  return (cacheObj[storedKey] = valueFn(key));
	};

	module.exports = goog.reflect;


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var CLJS_ENV = __webpack_require__(3);
	var COMPILED = false;
	__webpack_require__(5);
	__webpack_require__(6);
	var cljs=CLJS_ENV.cljs;
	var shadow=CLJS_ENV.shadow;
	var goog=CLJS_ENV.goog;

	goog.provide('shadow.npm');
	goog.require('cljs.core');
	goog.require('cljs.core.constants');
	shadow.npm.env = (function shadow$npm$env(){
	return CLJS_ENV;
	});

	module.exports = shadow.npm;

	//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhZG93Lm5wbS5qcyIsInNvdXJjZXMiOlsic2hhZG93XC9ucG0uY2xqcyJdLCJsaW5lQ291bnQiOjYsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7QUFHQSxpQkFBQSxqQkFBTUE7QUFBTixBQUNFQyIsIm5hbWVzIjpbInNoYWRvdy5ucG1cL2VudiIsImpzXC9DTEpTX0VOViJdLCJzb3VyY2VzQ29udGVudCI6WyIobnMgc2hhZG93Lm5wbVxuICAoOnJlcXVpcmUtbWFjcm9zIFtzaGFkb3cubnBtIDphcyBtXSkpXG5cbihkZWZuIGVudiBbXVxuICBqc1wvQ0xKU19FTlYpXG4iXX0=


/***/ },
/* 18 */
/***/ function(module, exports) {

	module.exports = "bar";

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	module.exports = __webpack_require__(20);


/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(21);

	var ReactChildren = __webpack_require__(22);
	var ReactComponent = __webpack_require__(35);
	var ReactPureComponent = __webpack_require__(38);
	var ReactClass = __webpack_require__(39);
	var ReactDOMFactories = __webpack_require__(41);
	var ReactElement = __webpack_require__(26);
	var ReactPropTypes = __webpack_require__(46);
	var ReactVersion = __webpack_require__(51);

	var onlyChild = __webpack_require__(52);
	var warning = __webpack_require__(28);

	var createElement = ReactElement.createElement;
	var createFactory = ReactElement.createFactory;
	var cloneElement = ReactElement.cloneElement;

	if (process.env.NODE_ENV !== 'production') {
	  var canDefineProperty = __webpack_require__(30);
	  var ReactElementValidator = __webpack_require__(42);
	  var didWarnPropTypesDeprecated = false;
	  createElement = ReactElementValidator.createElement;
	  createFactory = ReactElementValidator.createFactory;
	  cloneElement = ReactElementValidator.cloneElement;
	}

	var __spread = _assign;

	if (process.env.NODE_ENV !== 'production') {
	  var warned = false;
	  __spread = function () {
	    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
	    warned = true;
	    return _assign.apply(null, arguments);
	  };
	}

	var React = {

	  // Modern

	  Children: {
	    map: ReactChildren.map,
	    forEach: ReactChildren.forEach,
	    count: ReactChildren.count,
	    toArray: ReactChildren.toArray,
	    only: onlyChild
	  },

	  Component: ReactComponent,
	  PureComponent: ReactPureComponent,

	  createElement: createElement,
	  cloneElement: cloneElement,
	  isValidElement: ReactElement.isValidElement,

	  // Classic

	  PropTypes: ReactPropTypes,
	  createClass: ReactClass.createClass,
	  createFactory: createFactory,
	  createMixin: function (mixin) {
	    // Currently a noop. Will be used to validate and trace mixins.
	    return mixin;
	  },

	  // This looks DOM specific but these are actually isomorphic helpers
	  // since they are just generating DOM strings.
	  DOM: ReactDOMFactories,

	  version: ReactVersion,

	  // Deprecated hook for JSX spread, don't use this for anything.
	  __spread: __spread
	};

	// TODO: Fix tests so that this deprecation warning doesn't cause failures.
	if (process.env.NODE_ENV !== 'production') {
	  if (canDefineProperty) {
	    Object.defineProperty(React, 'PropTypes', {
	      get: function () {
	        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
	        didWarnPropTypesDeprecated = true;
	        return ReactPropTypes;
	      }
	    });
	  }
	}

	module.exports = React;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 21 */
/***/ function(module, exports) {

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/

	'use strict';
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	module.exports = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var PooledClass = __webpack_require__(23);
	var ReactElement = __webpack_require__(26);

	var emptyFunction = __webpack_require__(29);
	var traverseAllChildren = __webpack_require__(32);

	var twoArgumentPooler = PooledClass.twoArgumentPooler;
	var fourArgumentPooler = PooledClass.fourArgumentPooler;

	var userProvidedKeyEscapeRegex = /\/+/g;
	function escapeUserProvidedKey(text) {
	  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * traversal. Allows avoiding binding callbacks.
	 *
	 * @constructor ForEachBookKeeping
	 * @param {!function} forEachFunction Function to perform traversal with.
	 * @param {?*} forEachContext Context to perform context with.
	 */
	function ForEachBookKeeping(forEachFunction, forEachContext) {
	  this.func = forEachFunction;
	  this.context = forEachContext;
	  this.count = 0;
	}
	ForEachBookKeeping.prototype.destructor = function () {
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

	function forEachSingleChild(bookKeeping, child, name) {
	  var func = bookKeeping.func,
	      context = bookKeeping.context;

	  func.call(context, child, bookKeeping.count++);
	}

	/**
	 * Iterates through children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
	 *
	 * The provided forEachFunc(child, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} forEachFunc
	 * @param {*} forEachContext Context for forEachContext.
	 */
	function forEachChildren(children, forEachFunc, forEachContext) {
	  if (children == null) {
	    return children;
	  }
	  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
	  traverseAllChildren(children, forEachSingleChild, traverseContext);
	  ForEachBookKeeping.release(traverseContext);
	}

	/**
	 * PooledClass representing the bookkeeping associated with performing a child
	 * mapping. Allows avoiding binding callbacks.
	 *
	 * @constructor MapBookKeeping
	 * @param {!*} mapResult Object containing the ordered map of results.
	 * @param {!function} mapFunction Function to perform mapping with.
	 * @param {?*} mapContext Context to perform mapping with.
	 */
	function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
	  this.result = mapResult;
	  this.keyPrefix = keyPrefix;
	  this.func = mapFunction;
	  this.context = mapContext;
	  this.count = 0;
	}
	MapBookKeeping.prototype.destructor = function () {
	  this.result = null;
	  this.keyPrefix = null;
	  this.func = null;
	  this.context = null;
	  this.count = 0;
	};
	PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

	function mapSingleChildIntoContext(bookKeeping, child, childKey) {
	  var result = bookKeeping.result,
	      keyPrefix = bookKeeping.keyPrefix,
	      func = bookKeeping.func,
	      context = bookKeeping.context;


	  var mappedChild = func.call(context, child, bookKeeping.count++);
	  if (Array.isArray(mappedChild)) {
	    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
	  } else if (mappedChild != null) {
	    if (ReactElement.isValidElement(mappedChild)) {
	      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
	      // Keep both the (mapped) and old keys if they differ, just as
	      // traverseAllChildren used to do for objects as children
	      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
	    }
	    result.push(mappedChild);
	  }
	}

	function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
	  var escapedPrefix = '';
	  if (prefix != null) {
	    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
	  }
	  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
	  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
	  MapBookKeeping.release(traverseContext);
	}

	/**
	 * Maps children that are typically specified as `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
	 *
	 * The provided mapFunction(child, key, index) will be called for each
	 * leaf child.
	 *
	 * @param {?*} children Children tree container.
	 * @param {function(*, int)} func The map function.
	 * @param {*} context Context for mapFunction.
	 * @return {object} Object containing the ordered map of results.
	 */
	function mapChildren(children, func, context) {
	  if (children == null) {
	    return children;
	  }
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
	  return result;
	}

	function forEachSingleChildDummy(traverseContext, child, name) {
	  return null;
	}

	/**
	 * Count the number of children that are typically specified as
	 * `props.children`.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
	 *
	 * @param {?*} children Children tree container.
	 * @return {number} The number of children.
	 */
	function countChildren(children, context) {
	  return traverseAllChildren(children, forEachSingleChildDummy, null);
	}

	/**
	 * Flatten a children object (typically specified as `props.children`) and
	 * return an array with appropriately re-keyed children.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
	 */
	function toArray(children) {
	  var result = [];
	  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
	  return result;
	}

	var ReactChildren = {
	  forEach: forEachChildren,
	  map: mapChildren,
	  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
	  count: countChildren,
	  toArray: toArray
	};

	module.exports = ReactChildren;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var invariant = __webpack_require__(25);

	/**
	 * Static poolers. Several custom versions for each potential number of
	 * arguments. A completely generic pooler is easy to implement, but would
	 * require accessing the `arguments` object. In each of these, `this` refers to
	 * the Class itself, not an instance. If any others are needed, simply add them
	 * here, or in their own files.
	 */
	var oneArgumentPooler = function (copyFieldsFrom) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, copyFieldsFrom);
	    return instance;
	  } else {
	    return new Klass(copyFieldsFrom);
	  }
	};

	var twoArgumentPooler = function (a1, a2) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2);
	    return instance;
	  } else {
	    return new Klass(a1, a2);
	  }
	};

	var threeArgumentPooler = function (a1, a2, a3) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3);
	  }
	};

	var fourArgumentPooler = function (a1, a2, a3, a4) {
	  var Klass = this;
	  if (Klass.instancePool.length) {
	    var instance = Klass.instancePool.pop();
	    Klass.call(instance, a1, a2, a3, a4);
	    return instance;
	  } else {
	    return new Klass(a1, a2, a3, a4);
	  }
	};

	var standardReleaser = function (instance) {
	  var Klass = this;
	  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
	  instance.destructor();
	  if (Klass.instancePool.length < Klass.poolSize) {
	    Klass.instancePool.push(instance);
	  }
	};

	var DEFAULT_POOL_SIZE = 10;
	var DEFAULT_POOLER = oneArgumentPooler;

	/**
	 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
	 * itself (statically) not adding any prototypical fields. Any CopyConstructor
	 * you give this may have a `poolSize` property, and will look for a
	 * prototypical `destructor` on instances.
	 *
	 * @param {Function} CopyConstructor Constructor that can be used to reset.
	 * @param {Function} pooler Customizable pooler.
	 */
	var addPoolingTo = function (CopyConstructor, pooler) {
	  // Casting as any so that flow ignores the actual implementation and trusts
	  // it to match the type we declared
	  var NewKlass = CopyConstructor;
	  NewKlass.instancePool = [];
	  NewKlass.getPooled = pooler || DEFAULT_POOLER;
	  if (!NewKlass.poolSize) {
	    NewKlass.poolSize = DEFAULT_POOL_SIZE;
	  }
	  NewKlass.release = standardReleaser;
	  return NewKlass;
	};

	var PooledClass = {
	  addPoolingTo: addPoolingTo,
	  oneArgumentPooler: oneArgumentPooler,
	  twoArgumentPooler: twoArgumentPooler,
	  threeArgumentPooler: threeArgumentPooler,
	  fourArgumentPooler: fourArgumentPooler
	};

	module.exports = PooledClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 24 */
/***/ function(module, exports) {

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */
	'use strict';

	/**
	 * WARNING: DO NOT manually require this module.
	 * This is a replacement for `invariant(...)` used by the error code system
	 * and will _only_ be required by the corresponding babel pass.
	 * It always throws.
	 */

	function reactProdInvariant(code) {
	  var argCount = arguments.length - 1;

	  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

	  for (var argIdx = 0; argIdx < argCount; argIdx++) {
	    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
	  }

	  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

	  var error = new Error(message);
	  error.name = 'Invariant Violation';
	  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

	  throw error;
	}

	module.exports = reactProdInvariant;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var validateFormat = function validateFormat(format) {};

	if (process.env.NODE_ENV !== 'production') {
	  validateFormat = function validateFormat(format) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  };
	}

	function invariant(condition, format, a, b, c, d, e, f) {
	  validateFormat(format);

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(format.replace(/%s/g, function () {
	        return args[argIndex++];
	      }));
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	}

	module.exports = invariant;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(21);

	var ReactCurrentOwner = __webpack_require__(27);

	var warning = __webpack_require__(28);
	var canDefineProperty = __webpack_require__(30);
	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var REACT_ELEMENT_TYPE = __webpack_require__(31);

	var RESERVED_PROPS = {
	  key: true,
	  ref: true,
	  __self: true,
	  __source: true
	};

	var specialPropKeyWarningShown, specialPropRefWarningShown;

	function hasValidRef(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'ref')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.ref !== undefined;
	}

	function hasValidKey(config) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (hasOwnProperty.call(config, 'key')) {
	      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
	      if (getter && getter.isReactWarning) {
	        return false;
	      }
	    }
	  }
	  return config.key !== undefined;
	}

	function defineKeyPropWarningGetter(props, displayName) {
	  var warnAboutAccessingKey = function () {
	    if (!specialPropKeyWarningShown) {
	      specialPropKeyWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingKey.isReactWarning = true;
	  Object.defineProperty(props, 'key', {
	    get: warnAboutAccessingKey,
	    configurable: true
	  });
	}

	function defineRefPropWarningGetter(props, displayName) {
	  var warnAboutAccessingRef = function () {
	    if (!specialPropRefWarningShown) {
	      specialPropRefWarningShown = true;
	      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
	    }
	  };
	  warnAboutAccessingRef.isReactWarning = true;
	  Object.defineProperty(props, 'ref', {
	    get: warnAboutAccessingRef,
	    configurable: true
	  });
	}

	/**
	 * Factory method to create a new React element. This no longer adheres to
	 * the class pattern, so do not use new to call it. Also, no instanceof check
	 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
	 * if something is a React Element.
	 *
	 * @param {*} type
	 * @param {*} key
	 * @param {string|object} ref
	 * @param {*} self A *temporary* helper to detect places where `this` is
	 * different from the `owner` when React.createElement is called, so that we
	 * can warn. We want to get rid of owner and replace string `ref`s with arrow
	 * functions, and as long as `this` and owner are the same, there will be no
	 * change in behavior.
	 * @param {*} source An annotation object (added by a transpiler or otherwise)
	 * indicating filename, line number, and/or other information.
	 * @param {*} owner
	 * @param {*} props
	 * @internal
	 */
	var ReactElement = function (type, key, ref, self, source, owner, props) {
	  var element = {
	    // This tag allow us to uniquely identify this as a React Element
	    $$typeof: REACT_ELEMENT_TYPE,

	    // Built-in properties that belong on the element
	    type: type,
	    key: key,
	    ref: ref,
	    props: props,

	    // Record the component responsible for creating this element.
	    _owner: owner
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // The validation flag is currently mutative. We put it on
	    // an external backing store so that we can freeze the whole object.
	    // This can be replaced with a WeakMap once they are implemented in
	    // commonly used development environments.
	    element._store = {};

	    // To make comparing ReactElements easier for testing purposes, we make
	    // the validation flag non-enumerable (where possible, which should
	    // include every environment we run tests in), so the test framework
	    // ignores it.
	    if (canDefineProperty) {
	      Object.defineProperty(element._store, 'validated', {
	        configurable: false,
	        enumerable: false,
	        writable: true,
	        value: false
	      });
	      // self and source are DEV only properties.
	      Object.defineProperty(element, '_self', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: self
	      });
	      // Two elements created in two different places should be considered
	      // equal for testing purposes and therefore we hide it from enumeration.
	      Object.defineProperty(element, '_source', {
	        configurable: false,
	        enumerable: false,
	        writable: false,
	        value: source
	      });
	    } else {
	      element._store.validated = false;
	      element._self = self;
	      element._source = source;
	    }
	    if (Object.freeze) {
	      Object.freeze(element.props);
	      Object.freeze(element);
	    }
	  }

	  return element;
	};

	/**
	 * Create and return a new ReactElement of the given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
	 */
	ReactElement.createElement = function (type, config, children) {
	  var propName;

	  // Reserved names are extracted
	  var props = {};

	  var key = null;
	  var ref = null;
	  var self = null;
	  var source = null;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      ref = config.ref;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    self = config.__self === undefined ? null : config.__self;
	    source = config.__source === undefined ? null : config.__source;
	    // Remaining properties are added to a new props object
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        props[propName] = config[propName];
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    if (process.env.NODE_ENV !== 'production') {
	      if (Object.freeze) {
	        Object.freeze(childArray);
	      }
	    }
	    props.children = childArray;
	  }

	  // Resolve default props
	  if (type && type.defaultProps) {
	    var defaultProps = type.defaultProps;
	    for (propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }
	  }
	  if (process.env.NODE_ENV !== 'production') {
	    if (key || ref) {
	      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
	        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
	        if (key) {
	          defineKeyPropWarningGetter(props, displayName);
	        }
	        if (ref) {
	          defineRefPropWarningGetter(props, displayName);
	        }
	      }
	    }
	  }
	  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
	};

	/**
	 * Return a function that produces ReactElements of a given type.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
	 */
	ReactElement.createFactory = function (type) {
	  var factory = ReactElement.createElement.bind(null, type);
	  // Expose the type on the factory and the prototype so that it can be
	  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
	  // This should not be named `constructor` since this may not be the function
	  // that created the element, and it may not even be a constructor.
	  // Legacy hook TODO: Warn if this is accessed
	  factory.type = type;
	  return factory;
	};

	ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
	  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

	  return newElement;
	};

	/**
	 * Clone and return a new ReactElement using element as the starting point.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
	 */
	ReactElement.cloneElement = function (element, config, children) {
	  var propName;

	  // Original props are copied
	  var props = _assign({}, element.props);

	  // Reserved names are extracted
	  var key = element.key;
	  var ref = element.ref;
	  // Self is preserved since the owner is preserved.
	  var self = element._self;
	  // Source is preserved since cloneElement is unlikely to be targeted by a
	  // transpiler, and the original source is probably a better indicator of the
	  // true owner.
	  var source = element._source;

	  // Owner will be preserved, unless ref is overridden
	  var owner = element._owner;

	  if (config != null) {
	    if (hasValidRef(config)) {
	      // Silently steal the ref from the parent.
	      ref = config.ref;
	      owner = ReactCurrentOwner.current;
	    }
	    if (hasValidKey(config)) {
	      key = '' + config.key;
	    }

	    // Remaining properties override existing props
	    var defaultProps;
	    if (element.type && element.type.defaultProps) {
	      defaultProps = element.type.defaultProps;
	    }
	    for (propName in config) {
	      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
	        if (config[propName] === undefined && defaultProps !== undefined) {
	          // Resolve default props
	          props[propName] = defaultProps[propName];
	        } else {
	          props[propName] = config[propName];
	        }
	      }
	    }
	  }

	  // Children can be more than one argument, and those are transferred onto
	  // the newly allocated props object.
	  var childrenLength = arguments.length - 2;
	  if (childrenLength === 1) {
	    props.children = children;
	  } else if (childrenLength > 1) {
	    var childArray = Array(childrenLength);
	    for (var i = 0; i < childrenLength; i++) {
	      childArray[i] = arguments[i + 2];
	    }
	    props.children = childArray;
	  }

	  return ReactElement(element.type, key, ref, self, source, owner, props);
	};

	/**
	 * Verifies the object is a ReactElement.
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
	 * @param {?object} object
	 * @return {boolean} True if `object` is a valid component.
	 * @final
	 */
	ReactElement.isValidElement = function (object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	};

	module.exports = ReactElement;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 27 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Keeps track of the current owner.
	 *
	 * The current owner is the component who should own any components that are
	 * currently being constructed.
	 */
	var ReactCurrentOwner = {

	  /**
	   * @internal
	   * @type {ReactComponent}
	   */
	  current: null

	};

	module.exports = ReactCurrentOwner;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyFunction = __webpack_require__(29);

	/**
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */

	var warning = emptyFunction;

	if (process.env.NODE_ENV !== 'production') {
	  (function () {
	    var printWarning = function printWarning(format) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      var argIndex = 0;
	      var message = 'Warning: ' + format.replace(/%s/g, function () {
	        return args[argIndex++];
	      });
	      if (typeof console !== 'undefined') {
	        console.error(message);
	      }
	      try {
	        // --- Welcome to debugging React ---
	        // This error was thrown as a convenience so that you can use this stack
	        // to find the callsite that caused this warning to fire.
	        throw new Error(message);
	      } catch (x) {}
	    };

	    warning = function warning(condition, format) {
	      if (format === undefined) {
	        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
	      }

	      if (format.indexOf('Failed Composite propType: ') === 0) {
	        return; // Ignore CompositeComponent proptype check.
	      }

	      if (!condition) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	          args[_key2 - 2] = arguments[_key2];
	        }

	        printWarning.apply(undefined, [format].concat(args));
	      }
	    };
	  })();
	}

	module.exports = warning;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 29 */
/***/ function(module, exports) {

	"use strict";

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	function makeEmptyFunction(arg) {
	  return function () {
	    return arg;
	  };
	}

	/**
	 * This function accepts and discards inputs; it has no side effects. This is
	 * primarily useful idiomatically for overridable function endpoints which
	 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
	 */
	var emptyFunction = function emptyFunction() {};

	emptyFunction.thatReturns = makeEmptyFunction;
	emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
	emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
	emptyFunction.thatReturnsNull = makeEmptyFunction(null);
	emptyFunction.thatReturnsThis = function () {
	  return this;
	};
	emptyFunction.thatReturnsArgument = function (arg) {
	  return arg;
	};

	module.exports = emptyFunction;

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var canDefineProperty = false;
	if (process.env.NODE_ENV !== 'production') {
	  try {
	    // $FlowFixMe https://github.com/facebook/flow/issues/285
	    Object.defineProperty({}, 'x', { get: function () {} });
	    canDefineProperty = true;
	  } catch (x) {
	    // IE will fail on defineProperty
	  }
	}

	module.exports = canDefineProperty;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 31 */
/***/ function(module, exports) {

	/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	// The Symbol used to tag the ReactElement type. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.

	var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

	module.exports = REACT_ELEMENT_TYPE;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var ReactCurrentOwner = __webpack_require__(27);
	var REACT_ELEMENT_TYPE = __webpack_require__(31);

	var getIteratorFn = __webpack_require__(33);
	var invariant = __webpack_require__(25);
	var KeyEscapeUtils = __webpack_require__(34);
	var warning = __webpack_require__(28);

	var SEPARATOR = '.';
	var SUBSEPARATOR = ':';

	/**
	 * This is inlined from ReactElement since this file is shared between
	 * isomorphic and renderers. We could extract this to a
	 *
	 */

	/**
	 * TODO: Test that a single child and an array with one item have the same key
	 * pattern.
	 */

	var didWarnAboutMaps = false;

	/**
	 * Generate a key string that identifies a component within a set.
	 *
	 * @param {*} component A component that could contain a manual key.
	 * @param {number} index Index that is used if a manual key is not provided.
	 * @return {string}
	 */
	function getComponentKey(component, index) {
	  // Do some typechecking here since we call this blindly. We want to ensure
	  // that we don't block potential future ES APIs.
	  if (component && typeof component === 'object' && component.key != null) {
	    // Explicit key
	    return KeyEscapeUtils.escape(component.key);
	  }
	  // Implicit key determined by the index in the set
	  return index.toString(36);
	}

	/**
	 * @param {?*} children Children tree container.
	 * @param {!string} nameSoFar Name of the key path so far.
	 * @param {!function} callback Callback to invoke with each child found.
	 * @param {?*} traverseContext Used to pass information throughout the traversal
	 * process.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
	  var type = typeof children;

	  if (type === 'undefined' || type === 'boolean') {
	    // All of the above are perceived as null.
	    children = null;
	  }

	  if (children === null || type === 'string' || type === 'number' ||
	  // The following is inlined from ReactElement. This means we can optimize
	  // some checks. React Fiber also inlines this logic for similar purposes.
	  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
	    callback(traverseContext, children,
	    // If it's the only child, treat the name as if it was wrapped in an array
	    // so that it's consistent if the number of children grows.
	    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
	    return 1;
	  }

	  var child;
	  var nextName;
	  var subtreeCount = 0; // Count of children found in the current subtree.
	  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

	  if (Array.isArray(children)) {
	    for (var i = 0; i < children.length; i++) {
	      child = children[i];
	      nextName = nextNamePrefix + getComponentKey(child, i);
	      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	    }
	  } else {
	    var iteratorFn = getIteratorFn(children);
	    if (iteratorFn) {
	      var iterator = iteratorFn.call(children);
	      var step;
	      if (iteratorFn !== children.entries) {
	        var ii = 0;
	        while (!(step = iterator.next()).done) {
	          child = step.value;
	          nextName = nextNamePrefix + getComponentKey(child, ii++);
	          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	        }
	      } else {
	        if (process.env.NODE_ENV !== 'production') {
	          var mapsAsChildrenAddendum = '';
	          if (ReactCurrentOwner.current) {
	            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
	            if (mapsAsChildrenOwnerName) {
	              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
	            }
	          }
	          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
	          didWarnAboutMaps = true;
	        }
	        // Iterator will provide entry [k,v] tuples rather than values.
	        while (!(step = iterator.next()).done) {
	          var entry = step.value;
	          if (entry) {
	            child = entry[1];
	            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
	            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
	          }
	        }
	      }
	    } else if (type === 'object') {
	      var addendum = '';
	      if (process.env.NODE_ENV !== 'production') {
	        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
	        if (children._isReactElement) {
	          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
	        }
	        if (ReactCurrentOwner.current) {
	          var name = ReactCurrentOwner.current.getName();
	          if (name) {
	            addendum += ' Check the render method of `' + name + '`.';
	          }
	        }
	      }
	      var childrenString = String(children);
	       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
	    }
	  }

	  return subtreeCount;
	}

	/**
	 * Traverses children that are typically specified as `props.children`, but
	 * might also be specified through attributes:
	 *
	 * - `traverseAllChildren(this.props.children, ...)`
	 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
	 *
	 * The `traverseContext` is an optional argument that is passed through the
	 * entire traversal. It can be used to store accumulations or anything else that
	 * the callback might find relevant.
	 *
	 * @param {?*} children Children tree object.
	 * @param {!function} callback To invoke upon traversing each child.
	 * @param {?*} traverseContext Context for traversal.
	 * @return {!number} The number of children in this subtree.
	 */
	function traverseAllChildren(children, callback, traverseContext) {
	  if (children == null) {
	    return 0;
	  }

	  return traverseAllChildrenImpl(children, '', callback, traverseContext);
	}

	module.exports = traverseAllChildren;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 33 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/* global Symbol */

	var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	/**
	 * Returns the iterator method function contained on the iterable object.
	 *
	 * Be sure to invoke the function with the iterable as context:
	 *
	 *     var iteratorFn = getIteratorFn(myIterable);
	 *     if (iteratorFn) {
	 *       var iterator = iteratorFn.call(myIterable);
	 *       ...
	 *     }
	 *
	 * @param {?object} maybeIterable
	 * @return {?function}
	 */
	function getIteratorFn(maybeIterable) {
	  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	  if (typeof iteratorFn === 'function') {
	    return iteratorFn;
	  }
	}

	module.exports = getIteratorFn;

/***/ },
/* 34 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	/**
	 * Escape and wrap key so it is safe to use as a reactid
	 *
	 * @param {string} key to be escaped.
	 * @return {string} the escaped key.
	 */

	function escape(key) {
	  var escapeRegex = /[=:]/g;
	  var escaperLookup = {
	    '=': '=0',
	    ':': '=2'
	  };
	  var escapedString = ('' + key).replace(escapeRegex, function (match) {
	    return escaperLookup[match];
	  });

	  return '$' + escapedString;
	}

	/**
	 * Unescape and unwrap key for human-readable display
	 *
	 * @param {string} key to unescape.
	 * @return {string} the unescaped key.
	 */
	function unescape(key) {
	  var unescapeRegex = /(=0|=2)/g;
	  var unescaperLookup = {
	    '=0': '=',
	    '=2': ':'
	  };
	  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

	  return ('' + keySubstring).replace(unescapeRegex, function (match) {
	    return unescaperLookup[match];
	  });
	}

	var KeyEscapeUtils = {
	  escape: escape,
	  unescape: unescape
	};

	module.exports = KeyEscapeUtils;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var ReactNoopUpdateQueue = __webpack_require__(36);

	var canDefineProperty = __webpack_require__(30);
	var emptyObject = __webpack_require__(37);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(28);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactComponent(props, context, updater) {
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	ReactComponent.prototype.isReactComponent = {};

	/**
	 * Sets a subset of the state. Always use this to mutate
	 * state. You should treat `this.state` as immutable.
	 *
	 * There is no guarantee that `this.state` will be immediately updated, so
	 * accessing `this.state` after calling this method may return the old value.
	 *
	 * There is no guarantee that calls to `setState` will run synchronously,
	 * as they may eventually be batched together.  You can provide an optional
	 * callback that will be executed when the call to setState is actually
	 * completed.
	 *
	 * When a function is provided to setState, it will be called at some point in
	 * the future (not synchronously). It will be called with the up to date
	 * component arguments (state, props, context). These values can be different
	 * from this.* because your function may be called after receiveProps but before
	 * shouldComponentUpdate, and this new state, props, and context will not yet be
	 * assigned to this.
	 *
	 * @param {object|function} partialState Next partial state or function to
	 *        produce next partial state to be merged with current state.
	 * @param {?function} callback Called after state is updated.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.setState = function (partialState, callback) {
	  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
	  this.updater.enqueueSetState(this, partialState);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'setState');
	  }
	};

	/**
	 * Forces an update. This should only be invoked when it is known with
	 * certainty that we are **not** in a DOM transaction.
	 *
	 * You may want to call this when you know that some deeper aspect of the
	 * component's state has changed but `setState` was not called.
	 *
	 * This will not invoke `shouldComponentUpdate`, but it will invoke
	 * `componentWillUpdate` and `componentDidUpdate`.
	 *
	 * @param {?function} callback Called after update is complete.
	 * @final
	 * @protected
	 */
	ReactComponent.prototype.forceUpdate = function (callback) {
	  this.updater.enqueueForceUpdate(this);
	  if (callback) {
	    this.updater.enqueueCallback(this, callback, 'forceUpdate');
	  }
	};

	/**
	 * Deprecated APIs. These APIs used to exist on classic React classes but since
	 * we would like to deprecate them, we're not going to move them over to this
	 * modern base class. Instead, we define a getter that warns if it's accessed.
	 */
	if (process.env.NODE_ENV !== 'production') {
	  var deprecatedAPIs = {
	    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
	    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
	  };
	  var defineDeprecationWarning = function (methodName, info) {
	    if (canDefineProperty) {
	      Object.defineProperty(ReactComponent.prototype, methodName, {
	        get: function () {
	          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
	          return undefined;
	        }
	      });
	    }
	  };
	  for (var fnName in deprecatedAPIs) {
	    if (deprecatedAPIs.hasOwnProperty(fnName)) {
	      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
	    }
	  }
	}

	module.exports = ReactComponent;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2015-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var warning = __webpack_require__(28);

	function warnNoop(publicInstance, callerName) {
	  if (process.env.NODE_ENV !== 'production') {
	    var constructor = publicInstance.constructor;
	    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
	  }
	}

	/**
	 * This is the abstract API for an update queue.
	 */
	var ReactNoopUpdateQueue = {

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @param {ReactClass} publicInstance The instance we want to test.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function (publicInstance) {
	    return false;
	  },

	  /**
	   * Enqueue a callback that will be executed after all the pending updates
	   * have processed.
	   *
	   * @param {ReactClass} publicInstance The instance to use as `this` context.
	   * @param {?function} callback Called after state is updated.
	   * @internal
	   */
	  enqueueCallback: function (publicInstance, callback) {},

	  /**
	   * Forces an update. This should only be invoked when it is known with
	   * certainty that we are **not** in a DOM transaction.
	   *
	   * You may want to call this when you know that some deeper aspect of the
	   * component's state has changed but `setState` was not called.
	   *
	   * This will not invoke `shouldComponentUpdate`, but it will invoke
	   * `componentWillUpdate` and `componentDidUpdate`.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @internal
	   */
	  enqueueForceUpdate: function (publicInstance) {
	    warnNoop(publicInstance, 'forceUpdate');
	  },

	  /**
	   * Replaces all of the state. Always use this or `setState` to mutate state.
	   * You should treat `this.state` as immutable.
	   *
	   * There is no guarantee that `this.state` will be immediately updated, so
	   * accessing `this.state` after calling this method may return the old value.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} completeState Next state.
	   * @internal
	   */
	  enqueueReplaceState: function (publicInstance, completeState) {
	    warnNoop(publicInstance, 'replaceState');
	  },

	  /**
	   * Sets a subset of the state. This only exists because _pendingState is
	   * internal. This provides a merging strategy that is not available to deep
	   * properties which is confusing. TODO: Expose pendingState or don't use it
	   * during the merge.
	   *
	   * @param {ReactClass} publicInstance The instance that should rerender.
	   * @param {object} partialState Next partial state to be merged with state.
	   * @internal
	   */
	  enqueueSetState: function (publicInstance, partialState) {
	    warnNoop(publicInstance, 'setState');
	  }
	};

	module.exports = ReactNoopUpdateQueue;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var emptyObject = {};

	if (process.env.NODE_ENV !== 'production') {
	  Object.freeze(emptyObject);
	}

	module.exports = emptyObject;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _assign = __webpack_require__(21);

	var ReactComponent = __webpack_require__(35);
	var ReactNoopUpdateQueue = __webpack_require__(36);

	var emptyObject = __webpack_require__(37);

	/**
	 * Base class helpers for the updating state of a component.
	 */
	function ReactPureComponent(props, context, updater) {
	  // Duplicated from ReactComponent.
	  this.props = props;
	  this.context = context;
	  this.refs = emptyObject;
	  // We initialize the default updater but the real one gets injected by the
	  // renderer.
	  this.updater = updater || ReactNoopUpdateQueue;
	}

	function ComponentDummy() {}
	ComponentDummy.prototype = ReactComponent.prototype;
	ReactPureComponent.prototype = new ComponentDummy();
	ReactPureComponent.prototype.constructor = ReactPureComponent;
	// Avoid an extra prototype jump for these methods.
	_assign(ReactPureComponent.prototype, ReactComponent.prototype);
	ReactPureComponent.prototype.isPureReactComponent = true;

	module.exports = ReactPureComponent;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24),
	    _assign = __webpack_require__(21);

	var ReactComponent = __webpack_require__(35);
	var ReactElement = __webpack_require__(26);
	var ReactPropTypeLocationNames = __webpack_require__(40);
	var ReactNoopUpdateQueue = __webpack_require__(36);

	var emptyObject = __webpack_require__(37);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(28);

	var MIXINS_KEY = 'mixins';

	// Helper function to allow the creation of anonymous functions which do not
	// have .name set to the name of the variable being assigned to.
	function identity(fn) {
	  return fn;
	}

	/**
	 * Policies that describe methods in `ReactClassInterface`.
	 */


	var injectedMixins = [];

	/**
	 * Composite components are higher-level components that compose other composite
	 * or host components.
	 *
	 * To create a new type of `ReactClass`, pass a specification of
	 * your new class to `React.createClass`. The only requirement of your class
	 * specification is that you implement a `render` method.
	 *
	 *   var MyComponent = React.createClass({
	 *     render: function() {
	 *       return <div>Hello World</div>;
	 *     }
	 *   });
	 *
	 * The class specification supports a specific protocol of methods that have
	 * special meaning (e.g. `render`). See `ReactClassInterface` for
	 * more the comprehensive protocol. Any other properties and methods in the
	 * class specification will be available on the prototype.
	 *
	 * @interface ReactClassInterface
	 * @internal
	 */
	var ReactClassInterface = {

	  /**
	   * An array of Mixin objects to include when defining your component.
	   *
	   * @type {array}
	   * @optional
	   */
	  mixins: 'DEFINE_MANY',

	  /**
	   * An object containing properties and methods that should be defined on
	   * the component's constructor instead of its prototype (static methods).
	   *
	   * @type {object}
	   * @optional
	   */
	  statics: 'DEFINE_MANY',

	  /**
	   * Definition of prop types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  propTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types for this component.
	   *
	   * @type {object}
	   * @optional
	   */
	  contextTypes: 'DEFINE_MANY',

	  /**
	   * Definition of context types this component sets for its children.
	   *
	   * @type {object}
	   * @optional
	   */
	  childContextTypes: 'DEFINE_MANY',

	  // ==== Definition methods ====

	  /**
	   * Invoked when the component is mounted. Values in the mapping will be set on
	   * `this.props` if that prop is not specified (i.e. using an `in` check).
	   *
	   * This method is invoked before `getInitialState` and therefore cannot rely
	   * on `this.state` or use `this.setState`.
	   *
	   * @return {object}
	   * @optional
	   */
	  getDefaultProps: 'DEFINE_MANY_MERGED',

	  /**
	   * Invoked once before the component is mounted. The return value will be used
	   * as the initial value of `this.state`.
	   *
	   *   getInitialState: function() {
	   *     return {
	   *       isOn: false,
	   *       fooBaz: new BazFoo()
	   *     }
	   *   }
	   *
	   * @return {object}
	   * @optional
	   */
	  getInitialState: 'DEFINE_MANY_MERGED',

	  /**
	   * @return {object}
	   * @optional
	   */
	  getChildContext: 'DEFINE_MANY_MERGED',

	  /**
	   * Uses props from `this.props` and state from `this.state` to render the
	   * structure of the component.
	   *
	   * No guarantees are made about when or how often this method is invoked, so
	   * it must not have side effects.
	   *
	   *   render: function() {
	   *     var name = this.props.name;
	   *     return <div>Hello, {name}!</div>;
	   *   }
	   *
	   * @return {ReactComponent}
	   * @required
	   */
	  render: 'DEFINE_ONCE',

	  // ==== Delegate methods ====

	  /**
	   * Invoked when the component is initially created and about to be mounted.
	   * This may have side effects, but any external subscriptions or data created
	   * by this method must be cleaned up in `componentWillUnmount`.
	   *
	   * @optional
	   */
	  componentWillMount: 'DEFINE_MANY',

	  /**
	   * Invoked when the component has been mounted and has a DOM representation.
	   * However, there is no guarantee that the DOM node is in the document.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been mounted (initialized and rendered) for the first time.
	   *
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidMount: 'DEFINE_MANY',

	  /**
	   * Invoked before the component receives new props.
	   *
	   * Use this as an opportunity to react to a prop transition by updating the
	   * state using `this.setState`. Current props are accessed via `this.props`.
	   *
	   *   componentWillReceiveProps: function(nextProps, nextContext) {
	   *     this.setState({
	   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
	   *     });
	   *   }
	   *
	   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
	   * transition may cause a state change, but the opposite is not true. If you
	   * need it, you are probably looking for `componentWillUpdate`.
	   *
	   * @param {object} nextProps
	   * @optional
	   */
	  componentWillReceiveProps: 'DEFINE_MANY',

	  /**
	   * Invoked while deciding if the component should be updated as a result of
	   * receiving new props, state and/or context.
	   *
	   * Use this as an opportunity to `return false` when you're certain that the
	   * transition to the new props/state/context will not require a component
	   * update.
	   *
	   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
	   *     return !equal(nextProps, this.props) ||
	   *       !equal(nextState, this.state) ||
	   *       !equal(nextContext, this.context);
	   *   }
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @return {boolean} True if the component should update.
	   * @optional
	   */
	  shouldComponentUpdate: 'DEFINE_ONCE',

	  /**
	   * Invoked when the component is about to update due to a transition from
	   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
	   * and `nextContext`.
	   *
	   * Use this as an opportunity to perform preparation before an update occurs.
	   *
	   * NOTE: You **cannot** use `this.setState()` in this method.
	   *
	   * @param {object} nextProps
	   * @param {?object} nextState
	   * @param {?object} nextContext
	   * @param {ReactReconcileTransaction} transaction
	   * @optional
	   */
	  componentWillUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component's DOM representation has been updated.
	   *
	   * Use this as an opportunity to operate on the DOM when the component has
	   * been updated.
	   *
	   * @param {object} prevProps
	   * @param {?object} prevState
	   * @param {?object} prevContext
	   * @param {DOMElement} rootNode DOM element representing the component.
	   * @optional
	   */
	  componentDidUpdate: 'DEFINE_MANY',

	  /**
	   * Invoked when the component is about to be removed from its parent and have
	   * its DOM representation destroyed.
	   *
	   * Use this as an opportunity to deallocate any external resources.
	   *
	   * NOTE: There is no `componentDidUnmount` since your component will have been
	   * destroyed by that point.
	   *
	   * @optional
	   */
	  componentWillUnmount: 'DEFINE_MANY',

	  // ==== Advanced methods ====

	  /**
	   * Updates the component's currently mounted DOM representation.
	   *
	   * By default, this implements React's rendering and reconciliation algorithm.
	   * Sophisticated clients may wish to override this.
	   *
	   * @param {ReactReconcileTransaction} transaction
	   * @internal
	   * @overridable
	   */
	  updateComponent: 'OVERRIDE_BASE'

	};

	/**
	 * Mapping from class specification keys to special processing functions.
	 *
	 * Although these are declared like instance properties in the specification
	 * when defining classes using `React.createClass`, they are actually static
	 * and are accessible on the constructor instead of the prototype. Despite
	 * being static, they must be defined outside of the "statics" key under
	 * which all other static methods are defined.
	 */
	var RESERVED_SPEC_KEYS = {
	  displayName: function (Constructor, displayName) {
	    Constructor.displayName = displayName;
	  },
	  mixins: function (Constructor, mixins) {
	    if (mixins) {
	      for (var i = 0; i < mixins.length; i++) {
	        mixSpecIntoComponent(Constructor, mixins[i]);
	      }
	    }
	  },
	  childContextTypes: function (Constructor, childContextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, childContextTypes, 'childContext');
	    }
	    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
	  },
	  contextTypes: function (Constructor, contextTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, contextTypes, 'context');
	    }
	    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
	  },
	  /**
	   * Special case getDefaultProps which should move into statics but requires
	   * automatic merging.
	   */
	  getDefaultProps: function (Constructor, getDefaultProps) {
	    if (Constructor.getDefaultProps) {
	      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
	    } else {
	      Constructor.getDefaultProps = getDefaultProps;
	    }
	  },
	  propTypes: function (Constructor, propTypes) {
	    if (process.env.NODE_ENV !== 'production') {
	      validateTypeDef(Constructor, propTypes, 'prop');
	    }
	    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
	  },
	  statics: function (Constructor, statics) {
	    mixStaticSpecIntoComponent(Constructor, statics);
	  },
	  autobind: function () {} };

	function validateTypeDef(Constructor, typeDef, location) {
	  for (var propName in typeDef) {
	    if (typeDef.hasOwnProperty(propName)) {
	      // use a warning instead of an invariant so components
	      // don't show up in prod but only in __DEV__
	      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
	    }
	  }
	}

	function validateMethodOverride(isAlreadyDefined, name) {
	  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

	  // Disallow overriding of base class methods unless explicitly allowed.
	  if (ReactClassMixin.hasOwnProperty(name)) {
	    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
	  }

	  // Disallow defining methods more than once unless explicitly allowed.
	  if (isAlreadyDefined) {
	    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
	  }
	}

	/**
	 * Mixin helper which handles policy validation and reserved
	 * specification keys when building React classes.
	 */
	function mixSpecIntoComponent(Constructor, spec) {
	  if (!spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      var typeofSpec = typeof spec;
	      var isMixinValid = typeofSpec === 'object' && spec !== null;

	      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
	    }

	    return;
	  }

	  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
	  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

	  var proto = Constructor.prototype;
	  var autoBindPairs = proto.__reactAutoBindPairs;

	  // By handling mixins before any other properties, we ensure the same
	  // chaining order is applied to methods with DEFINE_MANY policy, whether
	  // mixins are listed before or after these methods in the spec.
	  if (spec.hasOwnProperty(MIXINS_KEY)) {
	    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
	  }

	  for (var name in spec) {
	    if (!spec.hasOwnProperty(name)) {
	      continue;
	    }

	    if (name === MIXINS_KEY) {
	      // We have already handled mixins in a special case above.
	      continue;
	    }

	    var property = spec[name];
	    var isAlreadyDefined = proto.hasOwnProperty(name);
	    validateMethodOverride(isAlreadyDefined, name);

	    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
	      RESERVED_SPEC_KEYS[name](Constructor, property);
	    } else {
	      // Setup methods on prototype:
	      // The following member methods should not be automatically bound:
	      // 1. Expected ReactClass methods (in the "interface").
	      // 2. Overridden methods (that were mixed in).
	      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
	      var isFunction = typeof property === 'function';
	      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

	      if (shouldAutoBind) {
	        autoBindPairs.push(name, property);
	        proto[name] = property;
	      } else {
	        if (isAlreadyDefined) {
	          var specPolicy = ReactClassInterface[name];

	          // These cases should already be caught by validateMethodOverride.
	          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

	          // For methods which are defined more than once, call the existing
	          // methods before calling the new property, merging if appropriate.
	          if (specPolicy === 'DEFINE_MANY_MERGED') {
	            proto[name] = createMergedResultFunction(proto[name], property);
	          } else if (specPolicy === 'DEFINE_MANY') {
	            proto[name] = createChainedFunction(proto[name], property);
	          }
	        } else {
	          proto[name] = property;
	          if (process.env.NODE_ENV !== 'production') {
	            // Add verbose displayName to the function, which helps when looking
	            // at profiling tools.
	            if (typeof property === 'function' && spec.displayName) {
	              proto[name].displayName = spec.displayName + '_' + name;
	            }
	          }
	        }
	      }
	    }
	  }
	}

	function mixStaticSpecIntoComponent(Constructor, statics) {
	  if (!statics) {
	    return;
	  }
	  for (var name in statics) {
	    var property = statics[name];
	    if (!statics.hasOwnProperty(name)) {
	      continue;
	    }

	    var isReserved = name in RESERVED_SPEC_KEYS;
	    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

	    var isInherited = name in Constructor;
	    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
	    Constructor[name] = property;
	  }
	}

	/**
	 * Merge two objects, but throw if both contain the same key.
	 *
	 * @param {object} one The first object, which is mutated.
	 * @param {object} two The second object
	 * @return {object} one after it has been mutated to contain everything in two.
	 */
	function mergeIntoWithNoDuplicateKeys(one, two) {
	  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

	  for (var key in two) {
	    if (two.hasOwnProperty(key)) {
	      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
	      one[key] = two[key];
	    }
	  }
	  return one;
	}

	/**
	 * Creates a function that invokes two functions and merges their return values.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createMergedResultFunction(one, two) {
	  return function mergedResult() {
	    var a = one.apply(this, arguments);
	    var b = two.apply(this, arguments);
	    if (a == null) {
	      return b;
	    } else if (b == null) {
	      return a;
	    }
	    var c = {};
	    mergeIntoWithNoDuplicateKeys(c, a);
	    mergeIntoWithNoDuplicateKeys(c, b);
	    return c;
	  };
	}

	/**
	 * Creates a function that invokes two functions and ignores their return vales.
	 *
	 * @param {function} one Function to invoke first.
	 * @param {function} two Function to invoke second.
	 * @return {function} Function that invokes the two argument functions.
	 * @private
	 */
	function createChainedFunction(one, two) {
	  return function chainedFunction() {
	    one.apply(this, arguments);
	    two.apply(this, arguments);
	  };
	}

	/**
	 * Binds a method to the component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 * @param {function} method Method to be bound.
	 * @return {function} The bound method.
	 */
	function bindAutoBindMethod(component, method) {
	  var boundMethod = method.bind(component);
	  if (process.env.NODE_ENV !== 'production') {
	    boundMethod.__reactBoundContext = component;
	    boundMethod.__reactBoundMethod = method;
	    boundMethod.__reactBoundArguments = null;
	    var componentName = component.constructor.displayName;
	    var _bind = boundMethod.bind;
	    boundMethod.bind = function (newThis) {
	      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      // User is trying to bind() an autobound method; we effectively will
	      // ignore the value of "this" that the user is trying to use, so
	      // let's warn.
	      if (newThis !== component && newThis !== null) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
	      } else if (!args.length) {
	        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
	        return boundMethod;
	      }
	      var reboundMethod = _bind.apply(boundMethod, arguments);
	      reboundMethod.__reactBoundContext = component;
	      reboundMethod.__reactBoundMethod = method;
	      reboundMethod.__reactBoundArguments = args;
	      return reboundMethod;
	    };
	  }
	  return boundMethod;
	}

	/**
	 * Binds all auto-bound methods in a component.
	 *
	 * @param {object} component Component whose method is going to be bound.
	 */
	function bindAutoBindMethods(component) {
	  var pairs = component.__reactAutoBindPairs;
	  for (var i = 0; i < pairs.length; i += 2) {
	    var autoBindKey = pairs[i];
	    var method = pairs[i + 1];
	    component[autoBindKey] = bindAutoBindMethod(component, method);
	  }
	}

	/**
	 * Add more to the ReactClass base class. These are all legacy features and
	 * therefore not already part of the modern ReactComponent.
	 */
	var ReactClassMixin = {

	  /**
	   * TODO: This will be deprecated because state should always keep a consistent
	   * type signature and the only use case for this, is to avoid that.
	   */
	  replaceState: function (newState, callback) {
	    this.updater.enqueueReplaceState(this, newState);
	    if (callback) {
	      this.updater.enqueueCallback(this, callback, 'replaceState');
	    }
	  },

	  /**
	   * Checks whether or not this composite component is mounted.
	   * @return {boolean} True if mounted, false otherwise.
	   * @protected
	   * @final
	   */
	  isMounted: function () {
	    return this.updater.isMounted(this);
	  }
	};

	var ReactClassComponent = function () {};
	_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

	var didWarnDeprecated = false;

	/**
	 * Module for creating composite components.
	 *
	 * @class ReactClass
	 */
	var ReactClass = {

	  /**
	   * Creates a composite component class given a class specification.
	   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
	   *
	   * @param {object} spec Class specification (which must define `render`).
	   * @return {function} Component constructor function.
	   * @public
	   */
	  createClass: function (spec) {
	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
	      didWarnDeprecated = true;
	    }

	    // To keep our warnings more understandable, we'll use a little hack here to
	    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
	    // unnecessarily identify a class without displayName as 'Constructor'.
	    var Constructor = identity(function (props, context, updater) {
	      // This constructor gets overridden by mocks. The argument is used
	      // by mocks to assert on what gets mounted.

	      if (process.env.NODE_ENV !== 'production') {
	        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
	      }

	      // Wire up auto-binding
	      if (this.__reactAutoBindPairs.length) {
	        bindAutoBindMethods(this);
	      }

	      this.props = props;
	      this.context = context;
	      this.refs = emptyObject;
	      this.updater = updater || ReactNoopUpdateQueue;

	      this.state = null;

	      // ReactClasses doesn't have constructors. Instead, they use the
	      // getInitialState and componentWillMount methods for initialization.

	      var initialState = this.getInitialState ? this.getInitialState() : null;
	      if (process.env.NODE_ENV !== 'production') {
	        // We allow auto-mocks to proceed as if they're returning null.
	        if (initialState === undefined && this.getInitialState._isMockFunction) {
	          // This is probably bad practice. Consider warning here and
	          // deprecating this convenience.
	          initialState = null;
	        }
	      }
	      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

	      this.state = initialState;
	    });
	    Constructor.prototype = new ReactClassComponent();
	    Constructor.prototype.constructor = Constructor;
	    Constructor.prototype.__reactAutoBindPairs = [];

	    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

	    mixSpecIntoComponent(Constructor, spec);

	    // Initialize the defaultProps property after all mixins have been merged.
	    if (Constructor.getDefaultProps) {
	      Constructor.defaultProps = Constructor.getDefaultProps();
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      // This is a tag to indicate that the use of these method names is ok,
	      // since it's used with createClass. If it's not, then it's likely a
	      // mistake so we'll warn you to use the static property, property
	      // initializer or constructor respectively.
	      if (Constructor.getDefaultProps) {
	        Constructor.getDefaultProps.isReactClassApproved = {};
	      }
	      if (Constructor.prototype.getInitialState) {
	        Constructor.prototype.getInitialState.isReactClassApproved = {};
	      }
	    }

	    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
	      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
	    }

	    // Reduce time spent doing lookups by setting these on the prototype.
	    for (var methodName in ReactClassInterface) {
	      if (!Constructor.prototype[methodName]) {
	        Constructor.prototype[methodName] = null;
	      }
	    }

	    return Constructor;
	  },

	  injection: {
	    injectMixin: function (mixin) {
	      injectedMixins.push(mixin);
	    }
	  }

	};

	module.exports = ReactClass;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypeLocationNames = {};

	if (process.env.NODE_ENV !== 'production') {
	  ReactPropTypeLocationNames = {
	    prop: 'prop',
	    context: 'context',
	    childContext: 'child context'
	  };
	}

	module.exports = ReactPropTypeLocationNames;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var ReactElement = __webpack_require__(26);

	/**
	 * Create a factory that creates HTML tag elements.
	 *
	 * @private
	 */
	var createDOMFactory = ReactElement.createFactory;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactElementValidator = __webpack_require__(42);
	  createDOMFactory = ReactElementValidator.createFactory;
	}

	/**
	 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
	 * This is also accessible via `React.DOM`.
	 *
	 * @public
	 */
	var ReactDOMFactories = {
	  a: createDOMFactory('a'),
	  abbr: createDOMFactory('abbr'),
	  address: createDOMFactory('address'),
	  area: createDOMFactory('area'),
	  article: createDOMFactory('article'),
	  aside: createDOMFactory('aside'),
	  audio: createDOMFactory('audio'),
	  b: createDOMFactory('b'),
	  base: createDOMFactory('base'),
	  bdi: createDOMFactory('bdi'),
	  bdo: createDOMFactory('bdo'),
	  big: createDOMFactory('big'),
	  blockquote: createDOMFactory('blockquote'),
	  body: createDOMFactory('body'),
	  br: createDOMFactory('br'),
	  button: createDOMFactory('button'),
	  canvas: createDOMFactory('canvas'),
	  caption: createDOMFactory('caption'),
	  cite: createDOMFactory('cite'),
	  code: createDOMFactory('code'),
	  col: createDOMFactory('col'),
	  colgroup: createDOMFactory('colgroup'),
	  data: createDOMFactory('data'),
	  datalist: createDOMFactory('datalist'),
	  dd: createDOMFactory('dd'),
	  del: createDOMFactory('del'),
	  details: createDOMFactory('details'),
	  dfn: createDOMFactory('dfn'),
	  dialog: createDOMFactory('dialog'),
	  div: createDOMFactory('div'),
	  dl: createDOMFactory('dl'),
	  dt: createDOMFactory('dt'),
	  em: createDOMFactory('em'),
	  embed: createDOMFactory('embed'),
	  fieldset: createDOMFactory('fieldset'),
	  figcaption: createDOMFactory('figcaption'),
	  figure: createDOMFactory('figure'),
	  footer: createDOMFactory('footer'),
	  form: createDOMFactory('form'),
	  h1: createDOMFactory('h1'),
	  h2: createDOMFactory('h2'),
	  h3: createDOMFactory('h3'),
	  h4: createDOMFactory('h4'),
	  h5: createDOMFactory('h5'),
	  h6: createDOMFactory('h6'),
	  head: createDOMFactory('head'),
	  header: createDOMFactory('header'),
	  hgroup: createDOMFactory('hgroup'),
	  hr: createDOMFactory('hr'),
	  html: createDOMFactory('html'),
	  i: createDOMFactory('i'),
	  iframe: createDOMFactory('iframe'),
	  img: createDOMFactory('img'),
	  input: createDOMFactory('input'),
	  ins: createDOMFactory('ins'),
	  kbd: createDOMFactory('kbd'),
	  keygen: createDOMFactory('keygen'),
	  label: createDOMFactory('label'),
	  legend: createDOMFactory('legend'),
	  li: createDOMFactory('li'),
	  link: createDOMFactory('link'),
	  main: createDOMFactory('main'),
	  map: createDOMFactory('map'),
	  mark: createDOMFactory('mark'),
	  menu: createDOMFactory('menu'),
	  menuitem: createDOMFactory('menuitem'),
	  meta: createDOMFactory('meta'),
	  meter: createDOMFactory('meter'),
	  nav: createDOMFactory('nav'),
	  noscript: createDOMFactory('noscript'),
	  object: createDOMFactory('object'),
	  ol: createDOMFactory('ol'),
	  optgroup: createDOMFactory('optgroup'),
	  option: createDOMFactory('option'),
	  output: createDOMFactory('output'),
	  p: createDOMFactory('p'),
	  param: createDOMFactory('param'),
	  picture: createDOMFactory('picture'),
	  pre: createDOMFactory('pre'),
	  progress: createDOMFactory('progress'),
	  q: createDOMFactory('q'),
	  rp: createDOMFactory('rp'),
	  rt: createDOMFactory('rt'),
	  ruby: createDOMFactory('ruby'),
	  s: createDOMFactory('s'),
	  samp: createDOMFactory('samp'),
	  script: createDOMFactory('script'),
	  section: createDOMFactory('section'),
	  select: createDOMFactory('select'),
	  small: createDOMFactory('small'),
	  source: createDOMFactory('source'),
	  span: createDOMFactory('span'),
	  strong: createDOMFactory('strong'),
	  style: createDOMFactory('style'),
	  sub: createDOMFactory('sub'),
	  summary: createDOMFactory('summary'),
	  sup: createDOMFactory('sup'),
	  table: createDOMFactory('table'),
	  tbody: createDOMFactory('tbody'),
	  td: createDOMFactory('td'),
	  textarea: createDOMFactory('textarea'),
	  tfoot: createDOMFactory('tfoot'),
	  th: createDOMFactory('th'),
	  thead: createDOMFactory('thead'),
	  time: createDOMFactory('time'),
	  title: createDOMFactory('title'),
	  tr: createDOMFactory('tr'),
	  track: createDOMFactory('track'),
	  u: createDOMFactory('u'),
	  ul: createDOMFactory('ul'),
	  'var': createDOMFactory('var'),
	  video: createDOMFactory('video'),
	  wbr: createDOMFactory('wbr'),

	  // SVG
	  circle: createDOMFactory('circle'),
	  clipPath: createDOMFactory('clipPath'),
	  defs: createDOMFactory('defs'),
	  ellipse: createDOMFactory('ellipse'),
	  g: createDOMFactory('g'),
	  image: createDOMFactory('image'),
	  line: createDOMFactory('line'),
	  linearGradient: createDOMFactory('linearGradient'),
	  mask: createDOMFactory('mask'),
	  path: createDOMFactory('path'),
	  pattern: createDOMFactory('pattern'),
	  polygon: createDOMFactory('polygon'),
	  polyline: createDOMFactory('polyline'),
	  radialGradient: createDOMFactory('radialGradient'),
	  rect: createDOMFactory('rect'),
	  stop: createDOMFactory('stop'),
	  svg: createDOMFactory('svg'),
	  text: createDOMFactory('text'),
	  tspan: createDOMFactory('tspan')
	};

	module.exports = ReactDOMFactories;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2014-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	/**
	 * ReactElementValidator provides a wrapper around a element factory
	 * which validates the props passed to the element. This is intended to be
	 * used only in DEV and could be replaced by a static type checker for languages
	 * that support it.
	 */

	'use strict';

	var ReactCurrentOwner = __webpack_require__(27);
	var ReactComponentTreeHook = __webpack_require__(43);
	var ReactElement = __webpack_require__(26);

	var checkReactTypeSpec = __webpack_require__(44);

	var canDefineProperty = __webpack_require__(30);
	var getIteratorFn = __webpack_require__(33);
	var warning = __webpack_require__(28);

	function getDeclarationErrorAddendum() {
	  if (ReactCurrentOwner.current) {
	    var name = ReactCurrentOwner.current.getName();
	    if (name) {
	      return ' Check the render method of `' + name + '`.';
	    }
	  }
	  return '';
	}

	function getSourceInfoErrorAddendum(elementProps) {
	  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
	    var source = elementProps.__source;
	    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
	    var lineNumber = source.lineNumber;
	    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
	  }
	  return '';
	}

	/**
	 * Warn if there's no key explicitly set on dynamic arrays of children or
	 * object keys are not valid. This allows us to keep track of children between
	 * updates.
	 */
	var ownerHasKeyUseWarning = {};

	function getCurrentComponentErrorInfo(parentType) {
	  var info = getDeclarationErrorAddendum();

	  if (!info) {
	    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
	    if (parentName) {
	      info = ' Check the top-level render call using <' + parentName + '>.';
	    }
	  }
	  return info;
	}

	/**
	 * Warn if the element doesn't have an explicit key assigned to it.
	 * This element is in an array. The array could grow and shrink or be
	 * reordered. All children that haven't already been validated are required to
	 * have a "key" property assigned to it. Error statuses are cached so a warning
	 * will only be shown once.
	 *
	 * @internal
	 * @param {ReactElement} element Element that requires a key.
	 * @param {*} parentType element's parent's type.
	 */
	function validateExplicitKey(element, parentType) {
	  if (!element._store || element._store.validated || element.key != null) {
	    return;
	  }
	  element._store.validated = true;

	  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

	  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
	  if (memoizer[currentComponentErrorInfo]) {
	    return;
	  }
	  memoizer[currentComponentErrorInfo] = true;

	  // Usually the current owner is the offender, but if it accepts children as a
	  // property, it may be the creator of the child that's responsible for
	  // assigning it a key.
	  var childOwner = '';
	  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
	    // Give the component that originally created this child.
	    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
	  }

	  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
	}

	/**
	 * Ensure that every element either is passed in a static location, in an
	 * array with an explicit keys property defined, or in an object literal
	 * with valid key property.
	 *
	 * @internal
	 * @param {ReactNode} node Statically passed child of any type.
	 * @param {*} parentType node's parent's type.
	 */
	function validateChildKeys(node, parentType) {
	  if (typeof node !== 'object') {
	    return;
	  }
	  if (Array.isArray(node)) {
	    for (var i = 0; i < node.length; i++) {
	      var child = node[i];
	      if (ReactElement.isValidElement(child)) {
	        validateExplicitKey(child, parentType);
	      }
	    }
	  } else if (ReactElement.isValidElement(node)) {
	    // This element was passed in a valid location.
	    if (node._store) {
	      node._store.validated = true;
	    }
	  } else if (node) {
	    var iteratorFn = getIteratorFn(node);
	    // Entry iterators provide implicit keys.
	    if (iteratorFn) {
	      if (iteratorFn !== node.entries) {
	        var iterator = iteratorFn.call(node);
	        var step;
	        while (!(step = iterator.next()).done) {
	          if (ReactElement.isValidElement(step.value)) {
	            validateExplicitKey(step.value, parentType);
	          }
	        }
	      }
	    }
	  }
	}

	/**
	 * Given an element, validate that its props follow the propTypes definition,
	 * provided by the type.
	 *
	 * @param {ReactElement} element
	 */
	function validatePropTypes(element) {
	  var componentClass = element.type;
	  if (typeof componentClass !== 'function') {
	    return;
	  }
	  var name = componentClass.displayName || componentClass.name;
	  if (componentClass.propTypes) {
	    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
	  }
	  if (typeof componentClass.getDefaultProps === 'function') {
	    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
	  }
	}

	var ReactElementValidator = {

	  createElement: function (type, props, children) {
	    var validType = typeof type === 'string' || typeof type === 'function';
	    // We warn in this case but don't throw. We expect the element creation to
	    // succeed and there will likely be errors in render.
	    if (!validType) {
	      if (typeof type !== 'function' && typeof type !== 'string') {
	        var info = '';
	        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
	        }

	        var sourceInfo = getSourceInfoErrorAddendum(props);
	        if (sourceInfo) {
	          info += sourceInfo;
	        } else {
	          info += getDeclarationErrorAddendum();
	        }

	        info += ReactComponentTreeHook.getCurrentStackAddendum();

	        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
	      }
	    }

	    var element = ReactElement.createElement.apply(this, arguments);

	    // The result can be nullish if a mock or a custom function is used.
	    // TODO: Drop this when these are no longer allowed as the type argument.
	    if (element == null) {
	      return element;
	    }

	    // Skip key warning if the type isn't valid since our key validation logic
	    // doesn't expect a non-string/function type and can throw confusing errors.
	    // We don't want exception behavior to differ between dev and prod.
	    // (Rendering will throw with a helpful message and as soon as the type is
	    // fixed, the key warnings will appear.)
	    if (validType) {
	      for (var i = 2; i < arguments.length; i++) {
	        validateChildKeys(arguments[i], type);
	      }
	    }

	    validatePropTypes(element);

	    return element;
	  },

	  createFactory: function (type) {
	    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
	    // Legacy hook TODO: Warn if this is accessed
	    validatedFactory.type = type;

	    if (process.env.NODE_ENV !== 'production') {
	      if (canDefineProperty) {
	        Object.defineProperty(validatedFactory, 'type', {
	          enumerable: false,
	          get: function () {
	            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
	            Object.defineProperty(this, 'type', {
	              value: type
	            });
	            return type;
	          }
	        });
	      }
	    }

	    return validatedFactory;
	  },

	  cloneElement: function (element, props, children) {
	    var newElement = ReactElement.cloneElement.apply(this, arguments);
	    for (var i = 2; i < arguments.length; i++) {
	      validateChildKeys(arguments[i], newElement.type);
	    }
	    validatePropTypes(newElement);
	    return newElement;
	  }

	};

	module.exports = ReactElementValidator;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2016-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var ReactCurrentOwner = __webpack_require__(27);

	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(28);

	function isNative(fn) {
	  // Based on isNative() from Lodash
	  var funcToString = Function.prototype.toString;
	  var hasOwnProperty = Object.prototype.hasOwnProperty;
	  var reIsNative = RegExp('^' + funcToString
	  // Take an example native function source for comparison
	  .call(hasOwnProperty)
	  // Strip regex characters so we can use it for regex
	  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  // Remove hasOwnProperty from the template to make it generic
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
	  try {
	    var source = funcToString.call(fn);
	    return reIsNative.test(source);
	  } catch (err) {
	    return false;
	  }
	}

	var canUseCollections =
	// Array.from
	typeof Array.from === 'function' &&
	// Map
	typeof Map === 'function' && isNative(Map) &&
	// Map.prototype.keys
	Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
	// Set
	typeof Set === 'function' && isNative(Set) &&
	// Set.prototype.keys
	Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

	var setItem;
	var getItem;
	var removeItem;
	var getItemIDs;
	var addRoot;
	var removeRoot;
	var getRootIDs;

	if (canUseCollections) {
	  var itemMap = new Map();
	  var rootIDSet = new Set();

	  setItem = function (id, item) {
	    itemMap.set(id, item);
	  };
	  getItem = function (id) {
	    return itemMap.get(id);
	  };
	  removeItem = function (id) {
	    itemMap['delete'](id);
	  };
	  getItemIDs = function () {
	    return Array.from(itemMap.keys());
	  };

	  addRoot = function (id) {
	    rootIDSet.add(id);
	  };
	  removeRoot = function (id) {
	    rootIDSet['delete'](id);
	  };
	  getRootIDs = function () {
	    return Array.from(rootIDSet.keys());
	  };
	} else {
	  var itemByKey = {};
	  var rootByKey = {};

	  // Use non-numeric keys to prevent V8 performance issues:
	  // https://github.com/facebook/react/pull/7232
	  var getKeyFromID = function (id) {
	    return '.' + id;
	  };
	  var getIDFromKey = function (key) {
	    return parseInt(key.substr(1), 10);
	  };

	  setItem = function (id, item) {
	    var key = getKeyFromID(id);
	    itemByKey[key] = item;
	  };
	  getItem = function (id) {
	    var key = getKeyFromID(id);
	    return itemByKey[key];
	  };
	  removeItem = function (id) {
	    var key = getKeyFromID(id);
	    delete itemByKey[key];
	  };
	  getItemIDs = function () {
	    return Object.keys(itemByKey).map(getIDFromKey);
	  };

	  addRoot = function (id) {
	    var key = getKeyFromID(id);
	    rootByKey[key] = true;
	  };
	  removeRoot = function (id) {
	    var key = getKeyFromID(id);
	    delete rootByKey[key];
	  };
	  getRootIDs = function () {
	    return Object.keys(rootByKey).map(getIDFromKey);
	  };
	}

	var unmountedIDs = [];

	function purgeDeep(id) {
	  var item = getItem(id);
	  if (item) {
	    var childIDs = item.childIDs;

	    removeItem(id);
	    childIDs.forEach(purgeDeep);
	  }
	}

	function describeComponentFrame(name, source, ownerName) {
	  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
	}

	function getDisplayName(element) {
	  if (element == null) {
	    return '#empty';
	  } else if (typeof element === 'string' || typeof element === 'number') {
	    return '#text';
	  } else if (typeof element.type === 'string') {
	    return element.type;
	  } else {
	    return element.type.displayName || element.type.name || 'Unknown';
	  }
	}

	function describeID(id) {
	  var name = ReactComponentTreeHook.getDisplayName(id);
	  var element = ReactComponentTreeHook.getElement(id);
	  var ownerID = ReactComponentTreeHook.getOwnerID(id);
	  var ownerName;
	  if (ownerID) {
	    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
	  }
	  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
	  return describeComponentFrame(name, element && element._source, ownerName);
	}

	var ReactComponentTreeHook = {
	  onSetChildren: function (id, nextChildIDs) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.childIDs = nextChildIDs;

	    for (var i = 0; i < nextChildIDs.length; i++) {
	      var nextChildID = nextChildIDs[i];
	      var nextChild = getItem(nextChildID);
	      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
	      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
	      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
	      if (nextChild.parentID == null) {
	        nextChild.parentID = id;
	        // TODO: This shouldn't be necessary but mounting a new root during in
	        // componentWillMount currently causes not-yet-mounted components to
	        // be purged from our tree data so their parent id is missing.
	      }
	      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
	    }
	  },
	  onBeforeMountComponent: function (id, element, parentID) {
	    var item = {
	      element: element,
	      parentID: parentID,
	      text: null,
	      childIDs: [],
	      isMounted: false,
	      updateCount: 0
	    };
	    setItem(id, item);
	  },
	  onBeforeUpdateComponent: function (id, element) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.element = element;
	  },
	  onMountComponent: function (id) {
	    var item = getItem(id);
	    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
	    item.isMounted = true;
	    var isRoot = item.parentID === 0;
	    if (isRoot) {
	      addRoot(id);
	    }
	  },
	  onUpdateComponent: function (id) {
	    var item = getItem(id);
	    if (!item || !item.isMounted) {
	      // We may end up here as a result of setState() in componentWillUnmount().
	      // In this case, ignore the element.
	      return;
	    }
	    item.updateCount++;
	  },
	  onUnmountComponent: function (id) {
	    var item = getItem(id);
	    if (item) {
	      // We need to check if it exists.
	      // `item` might not exist if it is inside an error boundary, and a sibling
	      // error boundary child threw while mounting. Then this instance never
	      // got a chance to mount, but it still gets an unmounting event during
	      // the error boundary cleanup.
	      item.isMounted = false;
	      var isRoot = item.parentID === 0;
	      if (isRoot) {
	        removeRoot(id);
	      }
	    }
	    unmountedIDs.push(id);
	  },
	  purgeUnmountedComponents: function () {
	    if (ReactComponentTreeHook._preventPurging) {
	      // Should only be used for testing.
	      return;
	    }

	    for (var i = 0; i < unmountedIDs.length; i++) {
	      var id = unmountedIDs[i];
	      purgeDeep(id);
	    }
	    unmountedIDs.length = 0;
	  },
	  isMounted: function (id) {
	    var item = getItem(id);
	    return item ? item.isMounted : false;
	  },
	  getCurrentStackAddendum: function (topElement) {
	    var info = '';
	    if (topElement) {
	      var name = getDisplayName(topElement);
	      var owner = topElement._owner;
	      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
	    }

	    var currentOwner = ReactCurrentOwner.current;
	    var id = currentOwner && currentOwner._debugID;

	    info += ReactComponentTreeHook.getStackAddendumByID(id);
	    return info;
	  },
	  getStackAddendumByID: function (id) {
	    var info = '';
	    while (id) {
	      info += describeID(id);
	      id = ReactComponentTreeHook.getParentID(id);
	    }
	    return info;
	  },
	  getChildIDs: function (id) {
	    var item = getItem(id);
	    return item ? item.childIDs : [];
	  },
	  getDisplayName: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element) {
	      return null;
	    }
	    return getDisplayName(element);
	  },
	  getElement: function (id) {
	    var item = getItem(id);
	    return item ? item.element : null;
	  },
	  getOwnerID: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (!element || !element._owner) {
	      return null;
	    }
	    return element._owner._debugID;
	  },
	  getParentID: function (id) {
	    var item = getItem(id);
	    return item ? item.parentID : null;
	  },
	  getSource: function (id) {
	    var item = getItem(id);
	    var element = item ? item.element : null;
	    var source = element != null ? element._source : null;
	    return source;
	  },
	  getText: function (id) {
	    var element = ReactComponentTreeHook.getElement(id);
	    if (typeof element === 'string') {
	      return element;
	    } else if (typeof element === 'number') {
	      return '' + element;
	    } else {
	      return null;
	    }
	  },
	  getUpdateCount: function (id) {
	    var item = getItem(id);
	    return item ? item.updateCount : 0;
	  },


	  getRootIDs: getRootIDs,
	  getRegisteredIDs: getItemIDs
	};

	module.exports = ReactComponentTreeHook;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var ReactPropTypeLocationNames = __webpack_require__(40);
	var ReactPropTypesSecret = __webpack_require__(45);

	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(28);

	var ReactComponentTreeHook;

	if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
	  // Temporary hack.
	  // Inline requires don't work well with Jest:
	  // https://github.com/facebook/react/issues/7240
	  // Remove the inline requires when we don't need them anymore:
	  // https://github.com/facebook/react/pull/7178
	  ReactComponentTreeHook = __webpack_require__(43);
	}

	var loggedTypeFailures = {};

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?object} element The React element that is being type-checked
	 * @param {?number} debugID The React component instance that is being type-checked
	 * @private
	 */
	function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
	  for (var typeSpecName in typeSpecs) {
	    if (typeSpecs.hasOwnProperty(typeSpecName)) {
	      var error;
	      // Prop type validation may throw. In case they do, we don't want to
	      // fail the render phase where it didn't fail before. So we log it.
	      // After these have been cleaned up, we'll let them throw.
	      try {
	        // This is intentionally an invariant that gets caught. It's the same
	        // behavior as without this statement except with a better message.
	        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
	        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	      } catch (ex) {
	        error = ex;
	      }
	      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
	      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	        // Only monitor this failure once because there tends to be a lot of the
	        // same error.
	        loggedTypeFailures[error.message] = true;

	        var componentStackInfo = '';

	        if (process.env.NODE_ENV !== 'production') {
	          if (!ReactComponentTreeHook) {
	            ReactComponentTreeHook = __webpack_require__(43);
	          }
	          if (debugID !== null) {
	            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
	          } else if (element !== null) {
	            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
	          }
	        }

	        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
	      }
	    }
	  }
	}

	module.exports = checkReactTypeSpec;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 45 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 * 
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	var _require = __webpack_require__(26),
	    isValidElement = _require.isValidElement;

	var factory = __webpack_require__(47);

	module.exports = factory(isValidElement);

/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	// React 15.5 references this module, and assumes PropTypes are still callable in production.
	// Therefore we re-export development-only version with all the PropTypes checks here.
	// However if one is migrating to the `prop-types` npm library, they will go through the
	// `index.js` entry point, and it will branch depending on the environment.
	var factory = __webpack_require__(48);
	module.exports = function(isValidElement) {
	  // It is still allowed in 15.5.
	  var throwOnDirectAccess = false;
	  return factory(isValidElement, throwOnDirectAccess);
	};


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var emptyFunction = __webpack_require__(29);
	var invariant = __webpack_require__(25);
	var warning = __webpack_require__(28);

	var ReactPropTypesSecret = __webpack_require__(49);
	var checkPropTypes = __webpack_require__(50);

	module.exports = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          invariant(
	            false,
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            warning(
	              false,
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `%s` prop on `%s`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.',
	              propFullName,
	              componentName
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues);
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (propValue.hasOwnProperty(key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunction.thatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        warning(
	          false,
	          'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' +
	          'received %s at index %s.',
	          getPostfixForTypeWarning(checker),
	          i
	        );
	        return emptyFunction.thatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 49 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	module.exports = ReactPropTypesSecret;


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	if (process.env.NODE_ENV !== 'production') {
	  var invariant = __webpack_require__(25);
	  var warning = __webpack_require__(28);
	  var ReactPropTypesSecret = __webpack_require__(49);
	  var loggedTypeFailures = {};
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (typeSpecs.hasOwnProperty(typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
	        }
	      }
	    }
	  }
	}

	module.exports = checkPropTypes;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ },
/* 51 */
/***/ function(module, exports) {

	/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */

	'use strict';

	module.exports = '15.5.4';

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/**
	 * Copyright 2013-present, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 *
	 */
	'use strict';

	var _prodInvariant = __webpack_require__(24);

	var ReactElement = __webpack_require__(26);

	var invariant = __webpack_require__(25);

	/**
	 * Returns the first child in a collection of children and verifies that there
	 * is only one child in the collection.
	 *
	 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
	 *
	 * The current implementation of this function assumes that a single child gets
	 * passed without a wrapper, but the purpose of this helper function is to
	 * abstract away the particular structure of children.
	 *
	 * @param {?object} children Child collection structure.
	 * @return {ReactElement} The first and only `ReactElement` contained in the
	 * structure.
	 */
	function onlyChild(children) {
	  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
	  return children;
	}

	module.exports = onlyChild;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(4)))

/***/ }
/******/ ]);